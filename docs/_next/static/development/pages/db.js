(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["static/development/pages/db.js"],{

/***/ "./node_modules/@babel/runtime/helpers/arrayWithHoles.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithHoles.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

module.exports = _arrayWithHoles;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

module.exports = _arrayWithoutHoles;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/assertThisInitialized.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

module.exports = _assertThisInitialized;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/classCallCheck.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/construct.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/construct.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf */ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js");

function isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (isNativeReflectConstruct()) {
    module.exports = _construct = Reflect.construct;
  } else {
    module.exports = _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

module.exports = _construct;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/createClass.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/createClass.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _applyDecoratedDescriptor; });
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object.keys(descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object.defineProperty(target, property, desc);
    desc = null;
  }

  return desc;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _classCallCheck; });
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/extends.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/extends.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _extends; });
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _initializerDefineProperty; });
function _initializerDefineProperty(target, property, descriptor, context) {
  if (!descriptor) return;
  Object.defineProperty(target, property, {
    enumerable: descriptor.enumerable,
    configurable: descriptor.configurable,
    writable: descriptor.writable,
    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
  });
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _initializerWarningHelper; });
function _initializerWarningHelper(descriptor, context) {
  throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.');
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _objectWithoutProperties; });
/* harmony import */ var _objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = Object(_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _objectWithoutPropertiesLoose; });
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/getPrototypeOf.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/inherits.js":
/*!*********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/inherits.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf */ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js");

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

module.exports = _inherits;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/inheritsLoose.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/inheritsLoose.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

module.exports = _inheritsLoose;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/interopRequireWildcard.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! ../helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

module.exports = _interopRequireWildcard;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/iterableToArray.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArray.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

module.exports = _iterableToArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

module.exports = _iterableToArrayLimit;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/nonIterableRest.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableRest.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

module.exports = _nonIterableRest;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/nonIterableSpread.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableSpread.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

module.exports = _nonIterableSpread;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! ../helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

var assertThisInitialized = __webpack_require__(/*! ./assertThisInitialized */ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js");

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

module.exports = _possibleConstructorReturn;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/setPrototypeOf.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/slicedToArray.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/slicedToArray.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithHoles = __webpack_require__(/*! ./arrayWithHoles */ "./node_modules/@babel/runtime/helpers/arrayWithHoles.js");

var iterableToArrayLimit = __webpack_require__(/*! ./iterableToArrayLimit */ "./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js");

var nonIterableRest = __webpack_require__(/*! ./nonIterableRest */ "./node_modules/@babel/runtime/helpers/nonIterableRest.js");

function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();
}

module.exports = _slicedToArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/toConsumableArray.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toConsumableArray.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithoutHoles = __webpack_require__(/*! ./arrayWithoutHoles */ "./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js");

var iterableToArray = __webpack_require__(/*! ./iterableToArray */ "./node_modules/@babel/runtime/helpers/iterableToArray.js");

var nonIterableSpread = __webpack_require__(/*! ./nonIterableSpread */ "./node_modules/@babel/runtime/helpers/nonIterableSpread.js");

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
}

module.exports = _toConsumableArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;

/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/regenerator-runtime/runtime.js");


/***/ }),

/***/ "./node_modules/@emotion/cache/dist/cache.browser.esm.js":
/*!***************************************************************!*\
  !*** ./node_modules/@emotion/cache/dist/cache.browser.esm.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_sheet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/sheet */ "./node_modules/@emotion/sheet/dist/sheet.browser.esm.js");
/* harmony import */ var _emotion_stylis__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/stylis */ "./node_modules/@emotion/stylis/dist/stylis.browser.esm.js");
/* harmony import */ var _emotion_weak_memoize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/weak-memoize */ "./node_modules/@emotion/weak-memoize/dist/weak-memoize.browser.esm.js");




// https://github.com/thysultan/stylis.js/tree/master/plugins/rule-sheet
// inlined to avoid umd wrapper and peerDep warnings/installing stylis
// since we use stylis after closure compiler
var delimiter = '/*|*/';
var needle = delimiter + '}';

function toSheet(block) {
  if (block) {
    Sheet.current.insert(block + '}');
  }
}

var Sheet = {
  current: null
};
var ruleSheet = function ruleSheet(context, content, selectors, parents, line, column, length, ns, depth, at) {
  switch (context) {
    // property
    case 1:
      {
        switch (content.charCodeAt(0)) {
          case 64:
            {
              // @import
              Sheet.current.insert(content + ';');
              return '';
            }
          // charcode for l

          case 108:
            {
              // charcode for b
              // this ignores label
              if (content.charCodeAt(2) === 98) {
                return '';
              }
            }
        }

        break;
      }
    // selector

    case 2:
      {
        if (ns === 0) return content + delimiter;
        break;
      }
    // at-rule

    case 3:
      {
        switch (ns) {
          // @font-face, @page
          case 102:
          case 112:
            {
              Sheet.current.insert(selectors[0] + content);
              return '';
            }

          default:
            {
              return content + (at === 0 ? delimiter : '');
            }
        }
      }

    case -2:
      {
        content.split(needle).forEach(toSheet);
      }
  }
};

var createCache = function createCache(options) {
  if (options === undefined) options = {};
  var key = options.key || 'css';
  var stylisOptions;

  if (options.prefix !== undefined) {
    stylisOptions = {
      prefix: options.prefix
    };
  }

  var stylis = new _emotion_stylis__WEBPACK_IMPORTED_MODULE_1__["default"](stylisOptions);

  if (true) {
    // $FlowFixMe
    if (/[^a-z-]/.test(key)) {
      throw new Error("Emotion key must only contain lower case alphabetical characters and - but \"" + key + "\" was passed");
    }
  }

  var inserted = {}; // $FlowFixMe

  var container;

  {
    container = options.container || document.head;
    var nodes = document.querySelectorAll("style[data-emotion-" + key + "]");
    Array.prototype.forEach.call(nodes, function (node) {
      var attrib = node.getAttribute("data-emotion-" + key); // $FlowFixMe

      attrib.split(' ').forEach(function (id) {
        inserted[id] = true;
      });

      if (node.parentNode !== container) {
        container.appendChild(node);
      }
    });
  }

  var _insert;

  {
    stylis.use(options.stylisPlugins)(ruleSheet);

    _insert = function insert(selector, serialized, sheet, shouldCache) {
      var name = serialized.name;
      Sheet.current = sheet;

      if ( true && serialized.map !== undefined) {
        var map = serialized.map;
        Sheet.current = {
          insert: function insert(rule) {
            sheet.insert(rule + map);
          }
        };
      }

      stylis(selector, serialized.styles);

      if (shouldCache) {
        cache.inserted[name] = true;
      }
    };
  }

  if (true) {
    // https://esbench.com/bench/5bf7371a4cd7e6009ef61d0a
    var commentStart = /\/\*/g;
    var commentEnd = /\*\//g;
    stylis.use(function (context, content) {
      switch (context) {
        case -1:
          {
            while (commentStart.test(content)) {
              commentEnd.lastIndex = commentStart.lastIndex;

              if (commentEnd.test(content)) {
                commentStart.lastIndex = commentEnd.lastIndex;
                continue;
              }

              throw new Error('Your styles have an unterminated comment ("/*" without corresponding "*/").');
            }

            commentStart.lastIndex = 0;
            break;
          }
      }
    });
    stylis.use(function (context, content, selectors) {
      switch (context) {
        case -1:
          {
            var flag = 'emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason';
            var unsafePseudoClasses = content.match(/(:first|:nth|:nth-last)-child/g);

            if (unsafePseudoClasses && cache.compat !== true) {
              unsafePseudoClasses.forEach(function (unsafePseudoClass) {
                var ignoreRegExp = new RegExp(unsafePseudoClass + ".*\\/\\* " + flag + " \\*\\/");
                var ignore = ignoreRegExp.test(content);

                if (unsafePseudoClass && !ignore) {
                  console.error("The pseudo class \"" + unsafePseudoClass + "\" is potentially unsafe when doing server-side rendering. Try changing it to \"" + unsafePseudoClass.split('-child')[0] + "-of-type\".");
                }
              });
            }

            break;
          }
      }
    });
  }

  var cache = {
    key: key,
    sheet: new _emotion_sheet__WEBPACK_IMPORTED_MODULE_0__["StyleSheet"]({
      key: key,
      container: container,
      nonce: options.nonce,
      speedy: options.speedy
    }),
    nonce: options.nonce,
    inserted: inserted,
    registered: {},
    insert: _insert
  };
  return cache;
};

/* harmony default export */ __webpack_exports__["default"] = (createCache);


/***/ }),

/***/ "./node_modules/@emotion/core/dist/core.browser.esm.js":
/*!*************************************************************!*\
  !*** ./node_modules/@emotion/core/dist/core.browser.esm.js ***!
  \*************************************************************/
/*! exports provided: css, CacheProvider, ClassNames, Global, ThemeContext, jsx, keyframes, withEmotionCache */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CacheProvider", function() { return CacheProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClassNames", function() { return ClassNames; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Global", function() { return Global; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThemeContext", function() { return ThemeContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "jsx", function() { return jsx; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keyframes", function() { return keyframes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "withEmotionCache", function() { return withEmotionCache; });
/* harmony import */ var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/inheritsLoose */ "./node_modules/@babel/runtime/helpers/inheritsLoose.js");
/* harmony import */ var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _emotion_cache__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/cache */ "./node_modules/@emotion/cache/dist/cache.browser.esm.js");
/* harmony import */ var _emotion_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/utils */ "./node_modules/@emotion/utils/dist/utils.browser.esm.js");
/* harmony import */ var _emotion_serialize__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/serialize */ "./node_modules/@emotion/serialize/dist/serialize.browser.esm.js");
/* harmony import */ var _emotion_sheet__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emotion/sheet */ "./node_modules/@emotion/sheet/dist/sheet.browser.esm.js");
/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emotion/css */ "./node_modules/@emotion/css/dist/css.browser.esm.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "css", function() { return _emotion_css__WEBPACK_IMPORTED_MODULE_6__["default"]; });










var EmotionCacheContext = Object(react__WEBPACK_IMPORTED_MODULE_1__["createContext"])( // we're doing this to avoid preconstruct's dead code elimination in this one case
// because this module is primarily intended for the browser and node
// but it's also required in react native and similar environments sometimes
// and we could have a special build just for that
// but this is much easier and the native packages
// might use a different theme context in the future anyway
typeof HTMLElement !== 'undefined' ? Object(_emotion_cache__WEBPACK_IMPORTED_MODULE_2__["default"])() : null);
var ThemeContext = Object(react__WEBPACK_IMPORTED_MODULE_1__["createContext"])({});
var CacheProvider = EmotionCacheContext.Provider;

var withEmotionCache = function withEmotionCache(func) {
  var render = function render(props, ref) {
    return Object(react__WEBPACK_IMPORTED_MODULE_1__["createElement"])(EmotionCacheContext.Consumer, null, function (cache) {
      return func(props, cache, ref);
    });
  }; // $FlowFixMe


  return Object(react__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(render);
};

// thus we only need to replace what is a valid character for JS, but not for CSS

var sanitizeIdentifier = function sanitizeIdentifier(identifier) {
  return identifier.replace(/\$/g, '-');
};

var typePropName = '__EMOTION_TYPE_PLEASE_DO_NOT_USE__';
var labelPropName = '__EMOTION_LABEL_PLEASE_DO_NOT_USE__';
var hasOwnProperty = Object.prototype.hasOwnProperty;

var render = function render(cache, props, theme, ref) {
  var cssProp = theme === null ? props.css : props.css(theme); // so that using `css` from `emotion` and passing the result to the css prop works
  // not passing the registered cache to serializeStyles because it would
  // make certain babel optimisations not possible

  if (typeof cssProp === 'string' && cache.registered[cssProp] !== undefined) {
    cssProp = cache.registered[cssProp];
  }

  var type = props[typePropName];
  var registeredStyles = [cssProp];
  var className = '';

  if (typeof props.className === 'string') {
    className = Object(_emotion_utils__WEBPACK_IMPORTED_MODULE_3__["getRegisteredStyles"])(cache.registered, registeredStyles, props.className);
  } else if (props.className != null) {
    className = props.className + " ";
  }

  var serialized = Object(_emotion_serialize__WEBPACK_IMPORTED_MODULE_4__["serializeStyles"])(registeredStyles);

  if ( true && serialized.name.indexOf('-') === -1) {
    var labelFromStack = props[labelPropName];

    if (labelFromStack) {
      serialized = Object(_emotion_serialize__WEBPACK_IMPORTED_MODULE_4__["serializeStyles"])([serialized, 'label:' + labelFromStack + ';']);
    }
  }

  var rules = Object(_emotion_utils__WEBPACK_IMPORTED_MODULE_3__["insertStyles"])(cache, serialized, typeof type === 'string');
  className += cache.key + "-" + serialized.name;
  var newProps = {};

  for (var key in props) {
    if (hasOwnProperty.call(props, key) && key !== 'css' && key !== typePropName && ( false || key !== labelPropName)) {
      newProps[key] = props[key];
    }
  }

  newProps.ref = ref;
  newProps.className = className;
  var ele = Object(react__WEBPACK_IMPORTED_MODULE_1__["createElement"])(type, newProps);

  return ele;
};

var Emotion =
/* #__PURE__ */
withEmotionCache(function (props, cache, ref) {
  // use Context.read for the theme when it's stable
  if (typeof props.css === 'function') {
    return Object(react__WEBPACK_IMPORTED_MODULE_1__["createElement"])(ThemeContext.Consumer, null, function (theme) {
      return render(cache, props, theme, ref);
    });
  }

  return render(cache, props, null, ref);
});

if (true) {
  Emotion.displayName = 'EmotionCssPropInternal';
} // $FlowFixMe


var jsx = function jsx(type, props) {
  var args = arguments;

  if (props == null || !hasOwnProperty.call(props, 'css')) {
    // $FlowFixMe
    return react__WEBPACK_IMPORTED_MODULE_1__["createElement"].apply(undefined, args);
  }

  if ( true && typeof props.css === 'string' && // check if there is a css declaration
  props.css.indexOf(':') !== -1) {
    throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/css' like this: css`" + props.css + "`");
  }

  var argsLength = args.length;
  var createElementArgArray = new Array(argsLength);
  createElementArgArray[0] = Emotion;
  var newProps = {};

  for (var key in props) {
    if (hasOwnProperty.call(props, key)) {
      newProps[key] = props[key];
    }
  }

  newProps[typePropName] = type;

  if (true) {
    var error = new Error();

    if (error.stack) {
      // chrome
      var match = error.stack.match(/at (?:Object\.|)jsx.*\n\s+at ([A-Z][A-Za-z$]+) /);

      if (!match) {
        // safari and firefox
        match = error.stack.match(/.*\n([A-Z][A-Za-z$]+)@/);
      }

      if (match) {
        newProps[labelPropName] = sanitizeIdentifier(match[1]);
      }
    }
  }

  createElementArgArray[1] = newProps;

  for (var i = 2; i < argsLength; i++) {
    createElementArgArray[i] = args[i];
  } // $FlowFixMe


  return react__WEBPACK_IMPORTED_MODULE_1__["createElement"].apply(null, createElementArgArray);
};

var warnedAboutCssPropForGlobal = false;
var Global =
/* #__PURE__ */
withEmotionCache(function (props, cache) {
  if ( true && !warnedAboutCssPropForGlobal && ( // check for className as well since the user is
  // probably using the custom createElement which
  // means it will be turned into a className prop
  // $FlowFixMe I don't really want to add it to the type since it shouldn't be used
  props.className || props.css)) {
    console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
    warnedAboutCssPropForGlobal = true;
  }

  var styles = props.styles;

  if (typeof styles === 'function') {
    return Object(react__WEBPACK_IMPORTED_MODULE_1__["createElement"])(ThemeContext.Consumer, null, function (theme) {
      var serialized = Object(_emotion_serialize__WEBPACK_IMPORTED_MODULE_4__["serializeStyles"])([styles(theme)]);
      return Object(react__WEBPACK_IMPORTED_MODULE_1__["createElement"])(InnerGlobal, {
        serialized: serialized,
        cache: cache
      });
    });
  }

  var serialized = Object(_emotion_serialize__WEBPACK_IMPORTED_MODULE_4__["serializeStyles"])([styles]);
  return Object(react__WEBPACK_IMPORTED_MODULE_1__["createElement"])(InnerGlobal, {
    serialized: serialized,
    cache: cache
  });
});

// maintain place over rerenders.
// initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
// initial client-side render from SSR, use place of hydrating tag
var InnerGlobal =
/*#__PURE__*/
function (_React$Component) {
  _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0___default()(InnerGlobal, _React$Component);

  function InnerGlobal(props, context, updater) {
    return _React$Component.call(this, props, context, updater) || this;
  }

  var _proto = InnerGlobal.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.sheet = new _emotion_sheet__WEBPACK_IMPORTED_MODULE_5__["StyleSheet"]({
      key: this.props.cache.key + "-global",
      nonce: this.props.cache.sheet.nonce,
      container: this.props.cache.sheet.container
    }); // $FlowFixMe

    var node = document.querySelector("style[data-emotion-" + this.props.cache.key + "=\"" + this.props.serialized.name + "\"]");

    if (node !== null) {
      this.sheet.tags.push(node);
    }

    if (this.props.cache.sheet.tags.length) {
      this.sheet.before = this.props.cache.sheet.tags[0];
    }

    this.insertStyles();
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (prevProps.serialized.name !== this.props.serialized.name) {
      this.insertStyles();
    }
  };

  _proto.insertStyles = function insertStyles$1() {
    if (this.props.serialized.next !== undefined) {
      // insert keyframes
      Object(_emotion_utils__WEBPACK_IMPORTED_MODULE_3__["insertStyles"])(this.props.cache, this.props.serialized.next, true);
    }

    if (this.sheet.tags.length) {
      // if this doesn't exist then it will be null so the style element will be appended
      var element = this.sheet.tags[this.sheet.tags.length - 1].nextElementSibling;
      this.sheet.before = element;
      this.sheet.flush();
    }

    this.props.cache.insert("", this.props.serialized, this.sheet, false);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.sheet.flush();
  };

  _proto.render = function render() {

    return null;
  };

  return InnerGlobal;
}(react__WEBPACK_IMPORTED_MODULE_1__["Component"]);

var keyframes = function keyframes() {
  var insertable = _emotion_css__WEBPACK_IMPORTED_MODULE_6__["default"].apply(void 0, arguments);
  var name = "animation-" + insertable.name; // $FlowFixMe

  return {
    name: name,
    styles: "@keyframes " + name + "{" + insertable.styles + "}",
    anim: 1,
    toString: function toString() {
      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
    }
  };
};

var classnames = function classnames(args) {
  var len = args.length;
  var i = 0;
  var cls = '';

  for (; i < len; i++) {
    var arg = args[i];
    if (arg == null) continue;
    var toAdd = void 0;

    switch (typeof arg) {
      case 'boolean':
        break;

      case 'object':
        {
          if (Array.isArray(arg)) {
            toAdd = classnames(arg);
          } else {
            toAdd = '';

            for (var k in arg) {
              if (arg[k] && k) {
                toAdd && (toAdd += ' ');
                toAdd += k;
              }
            }
          }

          break;
        }

      default:
        {
          toAdd = arg;
        }
    }

    if (toAdd) {
      cls && (cls += ' ');
      cls += toAdd;
    }
  }

  return cls;
};

function merge(registered, css, className) {
  var registeredStyles = [];
  var rawClassName = Object(_emotion_utils__WEBPACK_IMPORTED_MODULE_3__["getRegisteredStyles"])(registered, registeredStyles, className);

  if (registeredStyles.length < 2) {
    return className;
  }

  return rawClassName + css(registeredStyles);
}

var ClassNames = withEmotionCache(function (props, context) {
  return Object(react__WEBPACK_IMPORTED_MODULE_1__["createElement"])(ThemeContext.Consumer, null, function (theme) {
    var hasRendered = false;

    var css = function css() {
      if (hasRendered && "development" !== 'production') {
        throw new Error('css can only be used during render');
      }

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var serialized = Object(_emotion_serialize__WEBPACK_IMPORTED_MODULE_4__["serializeStyles"])(args, context.registered);

      {
        Object(_emotion_utils__WEBPACK_IMPORTED_MODULE_3__["insertStyles"])(context, serialized, false);
      }

      return context.key + "-" + serialized.name;
    };

    var cx = function cx() {
      if (hasRendered && "development" !== 'production') {
        throw new Error('cx can only be used during render');
      }

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return merge(context.registered, css, classnames(args));
    };

    var content = {
      css: css,
      cx: cx,
      theme: theme
    };
    var ele = props.children(content);
    hasRendered = true;

    return ele;
  });
});




/***/ }),

/***/ "./node_modules/@emotion/css/dist/css.browser.esm.js":
/*!***********************************************************!*\
  !*** ./node_modules/@emotion/css/dist/css.browser.esm.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_serialize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/serialize */ "./node_modules/@emotion/serialize/dist/serialize.browser.esm.js");


function css() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_emotion_serialize__WEBPACK_IMPORTED_MODULE_0__["serializeStyles"])(args);
}

/* harmony default export */ __webpack_exports__["default"] = (css);


/***/ }),

/***/ "./node_modules/@emotion/hash/dist/hash.browser.esm.js":
/*!*************************************************************!*\
  !*** ./node_modules/@emotion/hash/dist/hash.browser.esm.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* eslint-disable */
// Inspired by https://github.com/garycourt/murmurhash-js
// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
function murmur2(str) {
  // 'm' and 'r' are mixing constants generated offline.
  // They're not really 'magic', they just happen to work well.
  // const m = 0x5bd1e995;
  // const r = 24;
  // Initialize the hash
  var h = 0; // Mix 4 bytes at a time into the hash

  var k,
      i = 0,
      len = str.length;

  for (; len >= 4; ++i, len -= 4) {
    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
    k =
    /* Math.imul(k, m): */
    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
    k ^=
    /* k >>> r: */
    k >>> 24;
    h =
    /* Math.imul(k, m): */
    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^
    /* Math.imul(h, m): */
    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  } // Handle the last few bytes of the input array


  switch (len) {
    case 3:
      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;

    case 2:
      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;

    case 1:
      h ^= str.charCodeAt(i) & 0xff;
      h =
      /* Math.imul(h, m): */
      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  } // Do a few final mixes of the hash to ensure the last few
  // bytes are well-incorporated.


  h ^= h >>> 13;
  h =
  /* Math.imul(h, m): */
  (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  return ((h ^ h >>> 15) >>> 0).toString(36);
}

/* harmony default export */ __webpack_exports__["default"] = (murmur2);


/***/ }),

/***/ "./node_modules/@emotion/memoize/dist/memoize.browser.esm.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@emotion/memoize/dist/memoize.browser.esm.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function memoize(fn) {
  var cache = {};
  return function (arg) {
    if (cache[arg] === undefined) cache[arg] = fn(arg);
    return cache[arg];
  };
}

/* harmony default export */ __webpack_exports__["default"] = (memoize);


/***/ }),

/***/ "./node_modules/@emotion/serialize/dist/serialize.browser.esm.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@emotion/serialize/dist/serialize.browser.esm.js ***!
  \***********************************************************************/
/*! exports provided: serializeStyles */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "serializeStyles", function() { return serializeStyles; });
/* harmony import */ var _emotion_hash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/hash */ "./node_modules/@emotion/hash/dist/hash.browser.esm.js");
/* harmony import */ var _emotion_unitless__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/unitless */ "./node_modules/@emotion/unitless/dist/unitless.browser.esm.js");
/* harmony import */ var _emotion_memoize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/memoize */ "./node_modules/@emotion/memoize/dist/memoize.browser.esm.js");




var ILLEGAL_ESCAPE_SEQUENCE_ERROR = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;

var isCustomProperty = function isCustomProperty(property) {
  return property.charCodeAt(1) === 45;
};

var isProcessableValue = function isProcessableValue(value) {
  return value != null && typeof value !== 'boolean';
};

var processStyleName = Object(_emotion_memoize__WEBPACK_IMPORTED_MODULE_2__["default"])(function (styleName) {
  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
});

var processStyleValue = function processStyleValue(key, value) {
  switch (key) {
    case 'animation':
    case 'animationName':
      {
        if (typeof value === 'string') {
          return value.replace(animationRegex, function (match, p1, p2) {
            cursor = {
              name: p1,
              styles: p2,
              next: cursor
            };
            return p1;
          });
        }
      }
  }

  if (_emotion_unitless__WEBPACK_IMPORTED_MODULE_1__["default"][key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
    return value + 'px';
  }

  return value;
};

if (true) {
  var contentValuePattern = /(attr|calc|counters?|url)\(/;
  var contentValues = ['normal', 'none', 'counter', 'open-quote', 'close-quote', 'no-open-quote', 'no-close-quote', 'initial', 'inherit', 'unset'];
  var oldProcessStyleValue = processStyleValue;
  var msPattern = /^-ms-/;
  var hyphenPattern = /-(.)/g;
  var hyphenatedCache = {};

  processStyleValue = function processStyleValue(key, value) {
    if (key === 'content') {
      if (typeof value !== 'string' || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
        console.error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
      }
    }

    var processed = oldProcessStyleValue(key, value);

    if (processed !== '' && !isCustomProperty(key) && key.indexOf('-') !== -1 && hyphenatedCache[key] === undefined) {
      hyphenatedCache[key] = true;
      console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, 'ms-').replace(hyphenPattern, function (str, _char) {
        return _char.toUpperCase();
      }) + "?");
    }

    return processed;
  };
}

var shouldWarnAboutInterpolatingClassNameFromCss = true;

function handleInterpolation(mergedProps, registered, interpolation, couldBeSelectorInterpolation) {
  if (interpolation == null) {
    return '';
  }

  if (interpolation.__emotion_styles !== undefined) {
    if ( true && interpolation.toString() === 'NO_COMPONENT_SELECTOR') {
      throw new Error('Component selectors can only be used in conjunction with babel-plugin-emotion.');
    }

    return interpolation;
  }

  switch (typeof interpolation) {
    case 'boolean':
      {
        return '';
      }

    case 'object':
      {
        if (interpolation.anim === 1) {
          cursor = {
            name: interpolation.name,
            styles: interpolation.styles,
            next: cursor
          };
          return interpolation.name;
        }

        if (interpolation.styles !== undefined) {
          var next = interpolation.next;

          if (next !== undefined) {
            // not the most efficient thing ever but this is a pretty rare case
            // and there will be very few iterations of this generally
            while (next !== undefined) {
              cursor = {
                name: next.name,
                styles: next.styles,
                next: cursor
              };
              next = next.next;
            }
          }

          var styles = interpolation.styles + ";";

          if ( true && interpolation.map !== undefined) {
            styles += interpolation.map;
          }

          return styles;
        }

        return createStringFromObject(mergedProps, registered, interpolation);
      }

    case 'function':
      {
        if (mergedProps !== undefined) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result, couldBeSelectorInterpolation);
        } else if (true) {
          console.error('Functions that are interpolated in css calls will be stringified.\n' + 'If you want to have a css call based on props, create a function that returns a css call like this\n' + 'let dynamicStyle = (props) => css`color: ${props.color}`\n' + 'It can be called directly with props or interpolated in a styled call like this\n' + "let SomeComponent = styled('div')`${dynamicStyle}`");
        }

        break;
      }

    case 'string':
      if (true) {
        var matched = [];
        var replaced = interpolation.replace(animationRegex, function (match, p1, p2) {
          var fakeVarName = "animation" + matched.length;
          matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, '') + "`");
          return "${" + fakeVarName + "}";
        });

        if (matched.length) {
          console.error('`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\n' + 'Instead of doing this:\n\n' + [].concat(matched, ["`" + replaced + "`"]).join('\n') + '\n\nYou should wrap it with `css` like this:\n\n' + ("css`" + replaced + "`"));
        }
      }

      break;
  } // finalize string values (regular strings and functions interpolated into css calls)


  if (registered == null) {
    return interpolation;
  }

  var cached = registered[interpolation];

  if ( true && couldBeSelectorInterpolation && shouldWarnAboutInterpolatingClassNameFromCss && cached !== undefined) {
    console.error('Interpolating a className from css`` is not recommended and will cause problems with composition.\n' + 'Interpolating a className from css`` will be completely unsupported in a future major version of Emotion');
    shouldWarnAboutInterpolatingClassNameFromCss = false;
  }

  return cached !== undefined && !couldBeSelectorInterpolation ? cached : interpolation;
}

function createStringFromObject(mergedProps, registered, obj) {
  var string = '';

  if (Array.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      string += handleInterpolation(mergedProps, registered, obj[i], false);
    }
  } else {
    for (var _key in obj) {
      var value = obj[_key];

      if (typeof value !== 'object') {
        if (registered != null && registered[value] !== undefined) {
          string += _key + "{" + registered[value] + "}";
        } else if (isProcessableValue(value)) {
          string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
        }
      } else {
        if (_key === 'NO_COMPONENT_SELECTOR' && "development" !== 'production') {
          throw new Error('Component selectors can only be used in conjunction with babel-plugin-emotion.');
        }

        if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
          for (var _i = 0; _i < value.length; _i++) {
            if (isProcessableValue(value[_i])) {
              string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
            }
          }
        } else {
          var interpolated = handleInterpolation(mergedProps, registered, value, false);

          switch (_key) {
            case 'animation':
            case 'animationName':
              {
                string += processStyleName(_key) + ":" + interpolated + ";";
                break;
              }

            default:
              {
                if ( true && _key === 'undefined') {
                  console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                }

                string += _key + "{" + interpolated + "}";
              }
          }
        }
      }
    }
  }

  return string;
}

var labelPattern = /label:\s*([^\s;\n{]+)\s*;/g;
var sourceMapPattern;

if (true) {
  sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//;
} // this is the cursor for keyframes
// keyframes are stored on the SerializedStyles object as a linked list


var cursor;
var serializeStyles = function serializeStyles(args, registered, mergedProps) {
  if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
    return args[0];
  }

  var stringMode = true;
  var styles = '';
  cursor = undefined;
  var strings = args[0];

  if (strings == null || strings.raw === undefined) {
    stringMode = false;
    styles += handleInterpolation(mergedProps, registered, strings, false);
  } else {
    if ( true && strings[0] === undefined) {
      console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
    }

    styles += strings[0];
  } // we start at 1 since we've already handled the first arg


  for (var i = 1; i < args.length; i++) {
    styles += handleInterpolation(mergedProps, registered, args[i], styles.charCodeAt(styles.length - 1) === 46);

    if (stringMode) {
      if ( true && strings[i] === undefined) {
        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
      }

      styles += strings[i];
    }
  }

  var sourceMap;

  if (true) {
    styles = styles.replace(sourceMapPattern, function (match) {
      sourceMap = match;
      return '';
    });
  } // using a global regex with .exec is stateful so lastIndex has to be reset each time


  labelPattern.lastIndex = 0;
  var identifierName = '';
  var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5

  while ((match = labelPattern.exec(styles)) !== null) {
    identifierName += '-' + // $FlowFixMe we know it's not null
    match[1];
  }

  var name = Object(_emotion_hash__WEBPACK_IMPORTED_MODULE_0__["default"])(styles) + identifierName;

  if (true) {
    // $FlowFixMe SerializedStyles type doesn't have toString property (and we don't want to add it)
    return {
      name: name,
      styles: styles,
      map: sourceMap,
      next: cursor,
      toString: function toString() {
        return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
      }
    };
  }

  return {
    name: name,
    styles: styles,
    next: cursor
  };
};




/***/ }),

/***/ "./node_modules/@emotion/sheet/dist/sheet.browser.esm.js":
/*!***************************************************************!*\
  !*** ./node_modules/@emotion/sheet/dist/sheet.browser.esm.js ***!
  \***************************************************************/
/*! exports provided: StyleSheet */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StyleSheet", function() { return StyleSheet; });
/*

Based off glamor's StyleSheet, thanks Sunil ❤️

high performance StyleSheet for css-in-js systems

- uses multiple style tags behind the scenes for millions of rules
- uses `insertRule` for appending in production for *much* faster performance

// usage

import { StyleSheet } from '@emotion/sheet'

let styleSheet = new StyleSheet({ key: '', container: document.head })

styleSheet.insert('#box { border: 1px solid red; }')
- appends a css rule into the stylesheet

styleSheet.flush()
- empties the stylesheet of all its contents

*/
// $FlowFixMe
function sheetForTag(tag) {
  if (tag.sheet) {
    // $FlowFixMe
    return tag.sheet;
  } // this weirdness brought to you by firefox

  /* istanbul ignore next */


  for (var i = 0; i < document.styleSheets.length; i++) {
    if (document.styleSheets[i].ownerNode === tag) {
      // $FlowFixMe
      return document.styleSheets[i];
    }
  }
}

function createStyleElement(options) {
  var tag = document.createElement('style');
  tag.setAttribute('data-emotion', options.key);

  if (options.nonce !== undefined) {
    tag.setAttribute('nonce', options.nonce);
  }

  tag.appendChild(document.createTextNode(''));
  return tag;
}

var StyleSheet =
/*#__PURE__*/
function () {
  function StyleSheet(options) {
    this.isSpeedy = options.speedy === undefined ? "development" === 'production' : options.speedy;
    this.tags = [];
    this.ctr = 0;
    this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets

    this.key = options.key;
    this.container = options.container;
    this.before = null;
  }

  var _proto = StyleSheet.prototype;

  _proto.insert = function insert(rule) {
    // the max length is how many rules we have per style tag, it's 65000 in speedy mode
    // it's 1 in dev because we insert source maps that map a single rule to a location
    // and you can only have one source map per style tag
    if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
      var _tag = createStyleElement(this);

      var before;

      if (this.tags.length === 0) {
        before = this.before;
      } else {
        before = this.tags[this.tags.length - 1].nextSibling;
      }

      this.container.insertBefore(_tag, before);
      this.tags.push(_tag);
    }

    var tag = this.tags[this.tags.length - 1];

    if (this.isSpeedy) {
      var sheet = sheetForTag(tag);

      try {
        // this is a really hot path
        // we check the second character first because having "i"
        // as the second character will happen less often than
        // having "@" as the first character
        var isImportRule = rule.charCodeAt(1) === 105 && rule.charCodeAt(0) === 64; // this is the ultrafast version, works across browsers
        // the big drawback is that the css won't be editable in devtools

        sheet.insertRule(rule, // we need to insert @import rules before anything else
        // otherwise there will be an error
        // technically this means that the @import rules will
        // _usually_(not always since there could be multiple style tags)
        // be the first ones in prod and generally later in dev
        // this shouldn't really matter in the real world though
        // @import is generally only used for font faces from google fonts and etc.
        // so while this could be technically correct then it would be slower and larger
        // for a tiny bit of correctness that won't matter in the real world
        isImportRule ? 0 : sheet.cssRules.length);
      } catch (e) {
        if (true) {
          console.warn("There was a problem inserting the following rule: \"" + rule + "\"", e);
        }
      }
    } else {
      tag.appendChild(document.createTextNode(rule));
    }

    this.ctr++;
  };

  _proto.flush = function flush() {
    // $FlowFixMe
    this.tags.forEach(function (tag) {
      return tag.parentNode.removeChild(tag);
    });
    this.tags = [];
    this.ctr = 0;
  };

  return StyleSheet;
}();




/***/ }),

/***/ "./node_modules/@emotion/stylis/dist/stylis.browser.esm.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@emotion/stylis/dist/stylis.browser.esm.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function stylis_min (W) {
  function M(d, c, e, h, a) {
    for (var m = 0, b = 0, v = 0, n = 0, q, g, x = 0, K = 0, k, u = k = q = 0, l = 0, r = 0, I = 0, t = 0, B = e.length, J = B - 1, y, f = '', p = '', F = '', G = '', C; l < B;) {
      g = e.charCodeAt(l);
      l === J && 0 !== b + n + v + m && (0 !== b && (g = 47 === b ? 10 : 47), n = v = m = 0, B++, J++);

      if (0 === b + n + v + m) {
        if (l === J && (0 < r && (f = f.replace(N, '')), 0 < f.trim().length)) {
          switch (g) {
            case 32:
            case 9:
            case 59:
            case 13:
            case 10:
              break;

            default:
              f += e.charAt(l);
          }

          g = 59;
        }

        switch (g) {
          case 123:
            f = f.trim();
            q = f.charCodeAt(0);
            k = 1;

            for (t = ++l; l < B;) {
              switch (g = e.charCodeAt(l)) {
                case 123:
                  k++;
                  break;

                case 125:
                  k--;
                  break;

                case 47:
                  switch (g = e.charCodeAt(l + 1)) {
                    case 42:
                    case 47:
                      a: {
                        for (u = l + 1; u < J; ++u) {
                          switch (e.charCodeAt(u)) {
                            case 47:
                              if (42 === g && 42 === e.charCodeAt(u - 1) && l + 2 !== u) {
                                l = u + 1;
                                break a;
                              }

                              break;

                            case 10:
                              if (47 === g) {
                                l = u + 1;
                                break a;
                              }

                          }
                        }

                        l = u;
                      }

                  }

                  break;

                case 91:
                  g++;

                case 40:
                  g++;

                case 34:
                case 39:
                  for (; l++ < J && e.charCodeAt(l) !== g;) {
                  }

              }

              if (0 === k) break;
              l++;
            }

            k = e.substring(t, l);
            0 === q && (q = (f = f.replace(ca, '').trim()).charCodeAt(0));

            switch (q) {
              case 64:
                0 < r && (f = f.replace(N, ''));
                g = f.charCodeAt(1);

                switch (g) {
                  case 100:
                  case 109:
                  case 115:
                  case 45:
                    r = c;
                    break;

                  default:
                    r = O;
                }

                k = M(c, r, k, g, a + 1);
                t = k.length;
                0 < A && (r = X(O, f, I), C = H(3, k, r, c, D, z, t, g, a, h), f = r.join(''), void 0 !== C && 0 === (t = (k = C.trim()).length) && (g = 0, k = ''));
                if (0 < t) switch (g) {
                  case 115:
                    f = f.replace(da, ea);

                  case 100:
                  case 109:
                  case 45:
                    k = f + '{' + k + '}';
                    break;

                  case 107:
                    f = f.replace(fa, '$1 $2');
                    k = f + '{' + k + '}';
                    k = 1 === w || 2 === w && L('@' + k, 3) ? '@-webkit-' + k + '@' + k : '@' + k;
                    break;

                  default:
                    k = f + k, 112 === h && (k = (p += k, ''));
                } else k = '';
                break;

              default:
                k = M(c, X(c, f, I), k, h, a + 1);
            }

            F += k;
            k = I = r = u = q = 0;
            f = '';
            g = e.charCodeAt(++l);
            break;

          case 125:
          case 59:
            f = (0 < r ? f.replace(N, '') : f).trim();
            if (1 < (t = f.length)) switch (0 === u && (q = f.charCodeAt(0), 45 === q || 96 < q && 123 > q) && (t = (f = f.replace(' ', ':')).length), 0 < A && void 0 !== (C = H(1, f, c, d, D, z, p.length, h, a, h)) && 0 === (t = (f = C.trim()).length) && (f = '\x00\x00'), q = f.charCodeAt(0), g = f.charCodeAt(1), q) {
              case 0:
                break;

              case 64:
                if (105 === g || 99 === g) {
                  G += f + e.charAt(l);
                  break;
                }

              default:
                58 !== f.charCodeAt(t - 1) && (p += P(f, q, g, f.charCodeAt(2)));
            }
            I = r = u = q = 0;
            f = '';
            g = e.charCodeAt(++l);
        }
      }

      switch (g) {
        case 13:
        case 10:
          47 === b ? b = 0 : 0 === 1 + q && 107 !== h && 0 < f.length && (r = 1, f += '\x00');
          0 < A * Y && H(0, f, c, d, D, z, p.length, h, a, h);
          z = 1;
          D++;
          break;

        case 59:
        case 125:
          if (0 === b + n + v + m) {
            z++;
            break;
          }

        default:
          z++;
          y = e.charAt(l);

          switch (g) {
            case 9:
            case 32:
              if (0 === n + m + b) switch (x) {
                case 44:
                case 58:
                case 9:
                case 32:
                  y = '';
                  break;

                default:
                  32 !== g && (y = ' ');
              }
              break;

            case 0:
              y = '\\0';
              break;

            case 12:
              y = '\\f';
              break;

            case 11:
              y = '\\v';
              break;

            case 38:
              0 === n + b + m && (r = I = 1, y = '\f' + y);
              break;

            case 108:
              if (0 === n + b + m + E && 0 < u) switch (l - u) {
                case 2:
                  112 === x && 58 === e.charCodeAt(l - 3) && (E = x);

                case 8:
                  111 === K && (E = K);
              }
              break;

            case 58:
              0 === n + b + m && (u = l);
              break;

            case 44:
              0 === b + v + n + m && (r = 1, y += '\r');
              break;

            case 34:
            case 39:
              0 === b && (n = n === g ? 0 : 0 === n ? g : n);
              break;

            case 91:
              0 === n + b + v && m++;
              break;

            case 93:
              0 === n + b + v && m--;
              break;

            case 41:
              0 === n + b + m && v--;
              break;

            case 40:
              if (0 === n + b + m) {
                if (0 === q) switch (2 * x + 3 * K) {
                  case 533:
                    break;

                  default:
                    q = 1;
                }
                v++;
              }

              break;

            case 64:
              0 === b + v + n + m + u + k && (k = 1);
              break;

            case 42:
            case 47:
              if (!(0 < n + m + v)) switch (b) {
                case 0:
                  switch (2 * g + 3 * e.charCodeAt(l + 1)) {
                    case 235:
                      b = 47;
                      break;

                    case 220:
                      t = l, b = 42;
                  }

                  break;

                case 42:
                  47 === g && 42 === x && t + 2 !== l && (33 === e.charCodeAt(t + 2) && (p += e.substring(t, l + 1)), y = '', b = 0);
              }
          }

          0 === b && (f += y);
      }

      K = x;
      x = g;
      l++;
    }

    t = p.length;

    if (0 < t) {
      r = c;
      if (0 < A && (C = H(2, p, r, d, D, z, t, h, a, h), void 0 !== C && 0 === (p = C).length)) return G + p + F;
      p = r.join(',') + '{' + p + '}';

      if (0 !== w * E) {
        2 !== w || L(p, 2) || (E = 0);

        switch (E) {
          case 111:
            p = p.replace(ha, ':-moz-$1') + p;
            break;

          case 112:
            p = p.replace(Q, '::-webkit-input-$1') + p.replace(Q, '::-moz-$1') + p.replace(Q, ':-ms-input-$1') + p;
        }

        E = 0;
      }
    }

    return G + p + F;
  }

  function X(d, c, e) {
    var h = c.trim().split(ia);
    c = h;
    var a = h.length,
        m = d.length;

    switch (m) {
      case 0:
      case 1:
        var b = 0;

        for (d = 0 === m ? '' : d[0] + ' '; b < a; ++b) {
          c[b] = Z(d, c[b], e).trim();
        }

        break;

      default:
        var v = b = 0;

        for (c = []; b < a; ++b) {
          for (var n = 0; n < m; ++n) {
            c[v++] = Z(d[n] + ' ', h[b], e).trim();
          }
        }

    }

    return c;
  }

  function Z(d, c, e) {
    var h = c.charCodeAt(0);
    33 > h && (h = (c = c.trim()).charCodeAt(0));

    switch (h) {
      case 38:
        return c.replace(F, '$1' + d.trim());

      case 58:
        return d.trim() + c.replace(F, '$1' + d.trim());

      default:
        if (0 < 1 * e && 0 < c.indexOf('\f')) return c.replace(F, (58 === d.charCodeAt(0) ? '' : '$1') + d.trim());
    }

    return d + c;
  }

  function P(d, c, e, h) {
    var a = d + ';',
        m = 2 * c + 3 * e + 4 * h;

    if (944 === m) {
      d = a.indexOf(':', 9) + 1;
      var b = a.substring(d, a.length - 1).trim();
      b = a.substring(0, d).trim() + b + ';';
      return 1 === w || 2 === w && L(b, 1) ? '-webkit-' + b + b : b;
    }

    if (0 === w || 2 === w && !L(a, 1)) return a;

    switch (m) {
      case 1015:
        return 97 === a.charCodeAt(10) ? '-webkit-' + a + a : a;

      case 951:
        return 116 === a.charCodeAt(3) ? '-webkit-' + a + a : a;

      case 963:
        return 110 === a.charCodeAt(5) ? '-webkit-' + a + a : a;

      case 1009:
        if (100 !== a.charCodeAt(4)) break;

      case 969:
      case 942:
        return '-webkit-' + a + a;

      case 978:
        return '-webkit-' + a + '-moz-' + a + a;

      case 1019:
      case 983:
        return '-webkit-' + a + '-moz-' + a + '-ms-' + a + a;

      case 883:
        if (45 === a.charCodeAt(8)) return '-webkit-' + a + a;
        if (0 < a.indexOf('image-set(', 11)) return a.replace(ja, '$1-webkit-$2') + a;
        break;

      case 932:
        if (45 === a.charCodeAt(4)) switch (a.charCodeAt(5)) {
          case 103:
            return '-webkit-box-' + a.replace('-grow', '') + '-webkit-' + a + '-ms-' + a.replace('grow', 'positive') + a;

          case 115:
            return '-webkit-' + a + '-ms-' + a.replace('shrink', 'negative') + a;

          case 98:
            return '-webkit-' + a + '-ms-' + a.replace('basis', 'preferred-size') + a;
        }
        return '-webkit-' + a + '-ms-' + a + a;

      case 964:
        return '-webkit-' + a + '-ms-flex-' + a + a;

      case 1023:
        if (99 !== a.charCodeAt(8)) break;
        b = a.substring(a.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify');
        return '-webkit-box-pack' + b + '-webkit-' + a + '-ms-flex-pack' + b + a;

      case 1005:
        return ka.test(a) ? a.replace(aa, ':-webkit-') + a.replace(aa, ':-moz-') + a : a;

      case 1e3:
        b = a.substring(13).trim();
        c = b.indexOf('-') + 1;

        switch (b.charCodeAt(0) + b.charCodeAt(c)) {
          case 226:
            b = a.replace(G, 'tb');
            break;

          case 232:
            b = a.replace(G, 'tb-rl');
            break;

          case 220:
            b = a.replace(G, 'lr');
            break;

          default:
            return a;
        }

        return '-webkit-' + a + '-ms-' + b + a;

      case 1017:
        if (-1 === a.indexOf('sticky', 9)) break;

      case 975:
        c = (a = d).length - 10;
        b = (33 === a.charCodeAt(c) ? a.substring(0, c) : a).substring(d.indexOf(':', 7) + 1).trim();

        switch (m = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {
          case 203:
            if (111 > b.charCodeAt(8)) break;

          case 115:
            a = a.replace(b, '-webkit-' + b) + ';' + a;
            break;

          case 207:
          case 102:
            a = a.replace(b, '-webkit-' + (102 < m ? 'inline-' : '') + 'box') + ';' + a.replace(b, '-webkit-' + b) + ';' + a.replace(b, '-ms-' + b + 'box') + ';' + a;
        }

        return a + ';';

      case 938:
        if (45 === a.charCodeAt(5)) switch (a.charCodeAt(6)) {
          case 105:
            return b = a.replace('-items', ''), '-webkit-' + a + '-webkit-box-' + b + '-ms-flex-' + b + a;

          case 115:
            return '-webkit-' + a + '-ms-flex-item-' + a.replace(ba, '') + a;

          default:
            return '-webkit-' + a + '-ms-flex-line-pack' + a.replace('align-content', '').replace(ba, '') + a;
        }
        break;

      case 973:
      case 989:
        if (45 !== a.charCodeAt(3) || 122 === a.charCodeAt(4)) break;

      case 931:
      case 953:
        if (!0 === la.test(d)) return 115 === (b = d.substring(d.indexOf(':') + 1)).charCodeAt(0) ? P(d.replace('stretch', 'fill-available'), c, e, h).replace(':fill-available', ':stretch') : a.replace(b, '-webkit-' + b) + a.replace(b, '-moz-' + b.replace('fill-', '')) + a;
        break;

      case 962:
        if (a = '-webkit-' + a + (102 === a.charCodeAt(5) ? '-ms-' + a : '') + a, 211 === e + h && 105 === a.charCodeAt(13) && 0 < a.indexOf('transform', 10)) return a.substring(0, a.indexOf(';', 27) + 1).replace(ma, '$1-webkit-$2') + a;
    }

    return a;
  }

  function L(d, c) {
    var e = d.indexOf(1 === c ? ':' : '{'),
        h = d.substring(0, 3 !== c ? e : 10);
    e = d.substring(e + 1, d.length - 1);
    return R(2 !== c ? h : h.replace(na, '$1'), e, c);
  }

  function ea(d, c) {
    var e = P(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));
    return e !== c + ';' ? e.replace(oa, ' or ($1)').substring(4) : '(' + c + ')';
  }

  function H(d, c, e, h, a, m, b, v, n, q) {
    for (var g = 0, x = c, w; g < A; ++g) {
      switch (w = S[g].call(B, d, x, e, h, a, m, b, v, n, q)) {
        case void 0:
        case !1:
        case !0:
        case null:
          break;

        default:
          x = w;
      }
    }

    if (x !== c) return x;
  }

  function T(d) {
    switch (d) {
      case void 0:
      case null:
        A = S.length = 0;
        break;

      default:
        if ('function' === typeof d) S[A++] = d;else if ('object' === typeof d) for (var c = 0, e = d.length; c < e; ++c) {
          T(d[c]);
        } else Y = !!d | 0;
    }

    return T;
  }

  function U(d) {
    d = d.prefix;
    void 0 !== d && (R = null, d ? 'function' !== typeof d ? w = 1 : (w = 2, R = d) : w = 0);
    return U;
  }

  function B(d, c) {
    var e = d;
    33 > e.charCodeAt(0) && (e = e.trim());
    V = e;
    e = [V];

    if (0 < A) {
      var h = H(-1, c, e, e, D, z, 0, 0, 0, 0);
      void 0 !== h && 'string' === typeof h && (c = h);
    }

    var a = M(O, e, c, 0, 0);
    0 < A && (h = H(-2, a, e, e, D, z, a.length, 0, 0, 0), void 0 !== h && (a = h));
    V = '';
    E = 0;
    z = D = 1;
    return a;
  }

  var ca = /^\0+/g,
      N = /[\0\r\f]/g,
      aa = /: */g,
      ka = /zoo|gra/,
      ma = /([,: ])(transform)/g,
      ia = /,\r+?/g,
      F = /([\t\r\n ])*\f?&/g,
      fa = /@(k\w+)\s*(\S*)\s*/,
      Q = /::(place)/g,
      ha = /:(read-only)/g,
      G = /[svh]\w+-[tblr]{2}/,
      da = /\(\s*(.*)\s*\)/g,
      oa = /([\s\S]*?);/g,
      ba = /-self|flex-/g,
      na = /[^]*?(:[rp][el]a[\w-]+)[^]*/,
      la = /stretch|:\s*\w+\-(?:conte|avail)/,
      ja = /([^-])(image-set\()/,
      z = 1,
      D = 1,
      E = 0,
      w = 1,
      O = [],
      S = [],
      A = 0,
      R = null,
      Y = 0,
      V = '';
  B.use = T;
  B.set = U;
  void 0 !== W && U(W);
  return B;
}

/* harmony default export */ __webpack_exports__["default"] = (stylis_min);


/***/ }),

/***/ "./node_modules/@emotion/unitless/dist/unitless.browser.esm.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@emotion/unitless/dist/unitless.browser.esm.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var unitlessKeys = {
  animationIterationCount: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};

/* harmony default export */ __webpack_exports__["default"] = (unitlessKeys);


/***/ }),

/***/ "./node_modules/@emotion/utils/dist/utils.browser.esm.js":
/*!***************************************************************!*\
  !*** ./node_modules/@emotion/utils/dist/utils.browser.esm.js ***!
  \***************************************************************/
/*! exports provided: getRegisteredStyles, insertStyles */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRegisteredStyles", function() { return getRegisteredStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertStyles", function() { return insertStyles; });
var isBrowser = "object" !== 'undefined';
function getRegisteredStyles(registered, registeredStyles, classNames) {
  var rawClassName = '';
  classNames.split(' ').forEach(function (className) {
    if (registered[className] !== undefined) {
      registeredStyles.push(registered[className]);
    } else {
      rawClassName += className + " ";
    }
  });
  return rawClassName;
}
var insertStyles = function insertStyles(cache, serialized, isStringTag) {
  var className = cache.key + "-" + serialized.name;

  if ( // we only need to add the styles to the registered cache if the
  // class name could be used further down
  // the tree but if it's a string tag, we know it won't
  // so we don't have to add it to registered cache.
  // this improves memory usage since we can avoid storing the whole style string
  (isStringTag === false || // we need to always store it if we're in compat mode and
  // in node since emotion-server relies on whether a style is in
  // the registered cache to know whether a style is global or not
  // also, note that this check will be dead code eliminated in the browser
  isBrowser === false && cache.compat !== undefined) && cache.registered[className] === undefined) {
    cache.registered[className] = serialized.styles;
  }

  if (cache.inserted[serialized.name] === undefined) {
    var current = serialized;

    do {
      var maybeStyles = cache.insert("." + className, current, cache.sheet, true);

      current = current.next;
    } while (current !== undefined);
  }
};




/***/ }),

/***/ "./node_modules/@emotion/weak-memoize/dist/weak-memoize.browser.esm.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@emotion/weak-memoize/dist/weak-memoize.browser.esm.js ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var weakMemoize = function weakMemoize(func) {
  // $FlowFixMe flow doesn't include all non-primitive types as allowed for weakmaps
  var cache = new WeakMap();
  return function (arg) {
    if (cache.has(arg)) {
      // $FlowFixMe
      return cache.get(arg);
    }

    var ret = func(arg);
    cache.set(arg, ret);
    return ret;
  };
};

/* harmony default export */ __webpack_exports__["default"] = (weakMemoize);


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1.js":
/*!******************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var asn1 = exports;

asn1.bignum = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");

asn1.define = __webpack_require__(/*! ./asn1/api */ "./node_modules/asn1.js/lib/asn1/api.js").define;
asn1.base = __webpack_require__(/*! ./asn1/base */ "./node_modules/asn1.js/lib/asn1/base/index.js");
asn1.constants = __webpack_require__(/*! ./asn1/constants */ "./node_modules/asn1.js/lib/asn1/constants/index.js");
asn1.decoders = __webpack_require__(/*! ./asn1/decoders */ "./node_modules/asn1.js/lib/asn1/decoders/index.js");
asn1.encoders = __webpack_require__(/*! ./asn1/encoders */ "./node_modules/asn1.js/lib/asn1/encoders/index.js");


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/api.js":
/*!**********************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/api.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var asn1 = __webpack_require__(/*! ../asn1 */ "./node_modules/asn1.js/lib/asn1.js");
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = __webpack_require__(/*! vm */ "./node_modules/vm-browserify/index.js").runInThisContext(
      '(function ' + this.name + '(entity) {\n' +
      '  this._initNamed(entity);\n' +
      '})'
    );
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/base/buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/base/buffer.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var Reporter = __webpack_require__(/*! ../base */ "./node_modules/asn1.js/lib/asn1/base/index.js").Reporter;
var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js").Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/base/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/base/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var base = exports;

base.Reporter = __webpack_require__(/*! ./reporter */ "./node_modules/asn1.js/lib/asn1/base/reporter.js").Reporter;
base.DecoderBuffer = __webpack_require__(/*! ./buffer */ "./node_modules/asn1.js/lib/asn1/base/buffer.js").DecoderBuffer;
base.EncoderBuffer = __webpack_require__(/*! ./buffer */ "./node_modules/asn1.js/lib/asn1/base/buffer.js").EncoderBuffer;
base.Node = __webpack_require__(/*! ./node */ "./node_modules/asn1.js/lib/asn1/base/node.js");


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/base/node.js":
/*!****************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/base/node.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Reporter = __webpack_require__(/*! ../base */ "./node_modules/asn1.js/lib/asn1/base/index.js").Reporter;
var EncoderBuffer = __webpack_require__(/*! ../base */ "./node_modules/asn1.js/lib/asn1/base/index.js").EncoderBuffer;
var DecoderBuffer = __webpack_require__(/*! ../base */ "./node_modules/asn1.js/lib/asn1/base/index.js").DecoderBuffer;
var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  var result = state['default'];
  var present = true;

  var prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    var tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    var start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input, options);
    else
      result = this._decodeChoice(input, options);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      var data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
          ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
        ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
};


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/base/reporter.js":
/*!********************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/base/reporter.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/constants/der.js":
/*!********************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/constants/der.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var constants = __webpack_require__(/*! ../constants */ "./node_modules/asn1.js/lib/asn1/constants/index.js");

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/constants/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/constants/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = __webpack_require__(/*! ./der */ "./node_modules/asn1.js/lib/asn1/constants/der.js");


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/decoders/der.js":
/*!*******************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/decoders/der.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var asn1 = __webpack_require__(/*! ../../asn1 */ "./node_modules/asn1.js/lib/asn1.js");
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.save();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                    options) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    var raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    var str = '';
    for (var i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    var numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    var printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var result;
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    var tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/decoders/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/decoders/index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var decoders = exports;

decoders.der = __webpack_require__(/*! ./der */ "./node_modules/asn1.js/lib/asn1/decoders/der.js");
decoders.pem = __webpack_require__(/*! ./pem */ "./node_modules/asn1.js/lib/asn1/decoders/pem.js");


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/decoders/pem.js":
/*!*******************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/decoders/pem.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js").Buffer;

var DERDecoder = __webpack_require__(/*! ./der */ "./node_modules/asn1.js/lib/asn1/decoders/der.js");

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/encoders/der.js":
/*!*******************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/encoders/der.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js").Buffer;

var asn1 = __webpack_require__(/*! ../../asn1 */ "./node_modules/asn1.js/lib/asn1.js");
var base = asn1.base;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    var buf = new Buffer(str.length * 2);
    for (var i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/encoders/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/encoders/index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var encoders = exports;

encoders.der = __webpack_require__(/*! ./der */ "./node_modules/asn1.js/lib/asn1/encoders/der.js");
encoders.pem = __webpack_require__(/*! ./pem */ "./node_modules/asn1.js/lib/asn1/encoders/pem.js");


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/encoders/pem.js":
/*!*******************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/encoders/pem.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var DEREncoder = __webpack_require__(/*! ./der */ "./node_modules/asn1.js/lib/asn1/encoders/der.js");

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = [ '-----BEGIN ' + options.label + '-----' ];
  for (var i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};


/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/bn.js/lib/bn.js":
/*!**************************************!*\
  !*** ./node_modules/bn.js/lib/bn.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = __webpack_require__(/*! buffer */ 4).Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})( false || module, this);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../next/node_modules/webpack/buildin/module.js */ "./node_modules/next/node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/brorand/index.js":
/*!***************************************!*\
  !*** ./node_modules/brorand/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = __webpack_require__(/*! crypto */ 5);
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}


/***/ }),

/***/ "./node_modules/browserify-aes/aes.js":
/*!********************************************!*\
  !*** ./node_modules/browserify-aes/aes.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer

function asUInt32Array (buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

  var len = (buf.length / 4) | 0
  var out = new Array(len)

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4)
  }

  return out
}

function scrubVec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
}

function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0]
  var SUB_MIX1 = SUB_MIX[1]
  var SUB_MIX2 = SUB_MIX[2]
  var SUB_MIX3 = SUB_MIX[3]

  var s0 = M[0] ^ keySchedule[0]
  var s1 = M[1] ^ keySchedule[1]
  var s2 = M[2] ^ keySchedule[2]
  var s3 = M[3] ^ keySchedule[3]
  var t0, t1, t2, t3
  var ksRow = 4

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }

  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  t0 = t0 >>> 0
  t1 = t1 >>> 0
  t2 = t2 >>> 0
  t3 = t3 >>> 0

  return [t0, t1, t2, t3]
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
var G = (function () {
  // Compute double table
  var d = new Array(256)
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1
    } else {
      d[j] = (j << 1) ^ 0x11b
    }
  }

  var SBOX = []
  var INV_SBOX = []
  var SUB_MIX = [[], [], [], []]
  var INV_SUB_MIX = [[], [], [], []]

  // Walk GF(2^8)
  var x = 0
  var xi = 0
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    SBOX[x] = sx
    INV_SBOX[sx] = x

    // Compute multiplication
    var x2 = d[x]
    var x4 = d[x2]
    var x8 = d[x4]

    // Compute sub bytes, mix columns tables
    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    SUB_MIX[3][x] = t

    // Compute inv sub bytes, inv mix columns tables
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    INV_SUB_MIX[3][sx] = t

    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  }
})()

function AES (key) {
  this._key = asUInt32Array(key)
  this._reset()
}

AES.blockSize = 4 * 4
AES.keySize = 256 / 8
AES.prototype.blockSize = AES.blockSize
AES.prototype.keySize = AES.keySize
AES.prototype._reset = function () {
  var keyWords = this._key
  var keySize = keyWords.length
  var nRounds = keySize + 6
  var ksRows = (nRounds + 1) * 4

  var keySchedule = []
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k]
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1]

    if (k % keySize === 0) {
      t = (t << 8) | (t >>> 24)
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])

      t ^= RCON[(k / keySize) | 0] << 24
    } else if (keySize > 6 && k % keySize === 4) {
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t
  }

  var invKeySchedule = []
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt
    } else {
      invKeySchedule[ik] =
        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
    }
  }

  this._nRounds = nRounds
  this._keySchedule = keySchedule
  this._invKeySchedule = invKeySchedule
}

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M)
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
}

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M)

  // swap
  var m1 = M[1]
  M[1] = M[3]
  M[3] = m1

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule)
  scrubVec(this._invKeySchedule)
  scrubVec(this._key)
}

module.exports.AES = AES


/***/ }),

/***/ "./node_modules/browserify-aes/authCipher.js":
/*!***************************************************!*\
  !*** ./node_modules/browserify-aes/authCipher.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var aes = __webpack_require__(/*! ./aes */ "./node_modules/browserify-aes/aes.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer
var Transform = __webpack_require__(/*! cipher-base */ "./node_modules/cipher-base/index.js")
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")
var GHASH = __webpack_require__(/*! ./ghash */ "./node_modules/browserify-aes/ghash.js")
var xor = __webpack_require__(/*! buffer-xor */ "./node_modules/buffer-xor/index.js")
var incr32 = __webpack_require__(/*! ./incr32 */ "./node_modules/browserify-aes/incr32.js")

function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) out++

  var len = Math.min(a.length, b.length)
  for (var i = 0; i < len; ++i) {
    out += (a[i] ^ b[i])
  }

  return out
}

function calcIv (self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
  }
  var ghash = new GHASH(ck)
  var len = iv.length
  var toPad = len % 16
  ghash.update(iv)
  if (toPad) {
    toPad = 16 - toPad
    ghash.update(Buffer.alloc(toPad, 0))
  }
  ghash.update(Buffer.alloc(8, 0))
  var ivBits = len * 8
  var tail = Buffer.alloc(8)
  tail.writeUIntBE(ivBits, 0, 8)
  ghash.update(tail)
  self._finID = ghash.state
  var out = Buffer.from(self._finID)
  incr32(out)
  return out
}
function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  var h = Buffer.alloc(4, 0)

  this._cipher = new aes.AES(key)
  var ck = this._cipher.encryptBlock(h)
  this._ghash = new GHASH(ck)
  iv = calcIv(this, iv, ck)

  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  this._mode = mode

  this._authTag = null
  this._called = false
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0)
      this._ghash.update(rump)
    }
  }

  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

  this._authTag = tag
  this._cipher.scrub()
}

StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

  return this._authTag
}

StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

  this._authTag = tag
}

StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state')

  this._ghash.update(buf)
  this._alen += buf.length
}

module.exports = StreamCipher


/***/ }),

/***/ "./node_modules/browserify-aes/browser.js":
/*!************************************************!*\
  !*** ./node_modules/browserify-aes/browser.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ciphers = __webpack_require__(/*! ./encrypter */ "./node_modules/browserify-aes/encrypter.js")
var deciphers = __webpack_require__(/*! ./decrypter */ "./node_modules/browserify-aes/decrypter.js")
var modes = __webpack_require__(/*! ./modes/list.json */ "./node_modules/browserify-aes/modes/list.json")

function getCiphers () {
  return Object.keys(modes)
}

exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers


/***/ }),

/***/ "./node_modules/browserify-aes/decrypter.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/decrypter.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var AuthCipher = __webpack_require__(/*! ./authCipher */ "./node_modules/browserify-aes/authCipher.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer
var MODES = __webpack_require__(/*! ./modes */ "./node_modules/browserify-aes/modes/index.js")
var StreamCipher = __webpack_require__(/*! ./streamCipher */ "./node_modules/browserify-aes/streamCipher.js")
var Transform = __webpack_require__(/*! cipher-base */ "./node_modules/cipher-base/index.js")
var aes = __webpack_require__(/*! ./aes */ "./node_modules/browserify-aes/aes.js")
var ebtk = __webpack_require__(/*! evp_bytestokey */ "./node_modules/evp_bytestokey/index.js")
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")

function Decipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Decipher, Transform)

Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}

Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }

  return null
}

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache
}

function unpad (last) {
  var padded = last[15]
  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data')
  }
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) return

  return last.slice(0, 16 - padded)
}

function createDecipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true)
  }

  return new Decipher(config.module, password, iv)
}

function createDecipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}

exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv


/***/ }),

/***/ "./node_modules/browserify-aes/encrypter.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/encrypter.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var MODES = __webpack_require__(/*! ./modes */ "./node_modules/browserify-aes/modes/index.js")
var AuthCipher = __webpack_require__(/*! ./authCipher */ "./node_modules/browserify-aes/authCipher.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer
var StreamCipher = __webpack_require__(/*! ./streamCipher */ "./node_modules/browserify-aes/streamCipher.js")
var Transform = __webpack_require__(/*! cipher-base */ "./node_modules/cipher-base/index.js")
var aes = __webpack_require__(/*! ./aes */ "./node_modules/browserify-aes/aes.js")
var ebtk = __webpack_require__(/*! evp_bytestokey */ "./node_modules/evp_bytestokey/index.js")
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")

function Cipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Cipher, Transform)

Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []

  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }

  return Buffer.concat(out)
}

var PADDING = Buffer.alloc(16, 0x10)

Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = Buffer.allocUnsafe(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }

  return Buffer.concat([this.cache, padBuff])
}

function createCipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv)
  }

  return new Cipher(config.module, password, iv)
}

function createCipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher


/***/ }),

/***/ "./node_modules/browserify-aes/ghash.js":
/*!**********************************************!*\
  !*** ./node_modules/browserify-aes/ghash.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer
var ZEROES = Buffer.alloc(16, 0)

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}

function fromArray (out) {
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0] >>> 0, 0)
  buf.writeUInt32BE(out[1] >>> 0, 4)
  buf.writeUInt32BE(out[2] >>> 0, 8)
  buf.writeUInt32BE(out[3] >>> 0, 12)
  return buf
}

function GHASH (key) {
  this.h = key
  this.state = Buffer.alloc(16, 0)
  this.cache = Buffer.allocUnsafe(0)
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsbVi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0]
      Zi[1] ^= Vi[1]
      Zi[2] ^= Vi[2]
      Zi[3] ^= Vi[3]
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16))
  }

  this.ghash(fromArray([0, abl, 0, bl]))
  return this.state
}

module.exports = GHASH


/***/ }),

/***/ "./node_modules/browserify-aes/incr32.js":
/*!***********************************************!*\
  !*** ./node_modules/browserify-aes/incr32.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}
module.exports = incr32


/***/ }),

/***/ "./node_modules/browserify-aes/modes/cbc.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/modes/cbc.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var xor = __webpack_require__(/*! buffer-xor */ "./node_modules/buffer-xor/index.js")

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}


/***/ }),

/***/ "./node_modules/browserify-aes/modes/cfb.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/modes/cfb.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer
var xor = __webpack_require__(/*! buffer-xor */ "./node_modules/buffer-xor/index.js")

function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0)
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = Buffer.allocUnsafe(0)
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}


/***/ }),

/***/ "./node_modules/browserify-aes/modes/cfb1.js":
/*!***************************************************!*\
  !*** ./node_modules/browserify-aes/modes/cfb1.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}

function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = Buffer.allocUnsafe(buffer.length)
  buffer = Buffer.concat([buffer, Buffer.from([value])])

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}


/***/ }),

/***/ "./node_modules/browserify-aes/modes/cfb8.js":
/*!***************************************************!*\
  !*** ./node_modules/browserify-aes/modes/cfb8.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam

  self._prev = Buffer.concat([
    self._prev.slice(1),
    Buffer.from([decrypt ? byteParam : out])
  ])

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}


/***/ }),

/***/ "./node_modules/browserify-aes/modes/ctr.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/modes/ctr.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var xor = __webpack_require__(/*! buffer-xor */ "./node_modules/buffer-xor/index.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer
var incr32 = __webpack_require__(/*! ../incr32 */ "./node_modules/browserify-aes/incr32.js")

function getBlock (self) {
  var out = self._cipher.encryptBlockRaw(self._prev)
  incr32(self._prev)
  return out
}

var blockSize = 16
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize)
  var start = self._cache.length
  self._cache = Buffer.concat([
    self._cache,
    Buffer.allocUnsafe(chunkNum * blockSize)
  ])
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self)
    var offset = start + i * blockSize
    self._cache.writeUInt32BE(out[0], offset + 0)
    self._cache.writeUInt32BE(out[1], offset + 4)
    self._cache.writeUInt32BE(out[2], offset + 8)
    self._cache.writeUInt32BE(out[3], offset + 12)
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}


/***/ }),

/***/ "./node_modules/browserify-aes/modes/ecb.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/modes/ecb.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}


/***/ }),

/***/ "./node_modules/browserify-aes/modes/index.js":
/*!****************************************************!*\
  !*** ./node_modules/browserify-aes/modes/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var modeModules = {
  ECB: __webpack_require__(/*! ./ecb */ "./node_modules/browserify-aes/modes/ecb.js"),
  CBC: __webpack_require__(/*! ./cbc */ "./node_modules/browserify-aes/modes/cbc.js"),
  CFB: __webpack_require__(/*! ./cfb */ "./node_modules/browserify-aes/modes/cfb.js"),
  CFB8: __webpack_require__(/*! ./cfb8 */ "./node_modules/browserify-aes/modes/cfb8.js"),
  CFB1: __webpack_require__(/*! ./cfb1 */ "./node_modules/browserify-aes/modes/cfb1.js"),
  OFB: __webpack_require__(/*! ./ofb */ "./node_modules/browserify-aes/modes/ofb.js"),
  CTR: __webpack_require__(/*! ./ctr */ "./node_modules/browserify-aes/modes/ctr.js"),
  GCM: __webpack_require__(/*! ./ctr */ "./node_modules/browserify-aes/modes/ctr.js")
}

var modes = __webpack_require__(/*! ./list.json */ "./node_modules/browserify-aes/modes/list.json")

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode]
}

module.exports = modes


/***/ }),

/***/ "./node_modules/browserify-aes/modes/list.json":
/*!*****************************************************!*\
  !*** ./node_modules/browserify-aes/modes/list.json ***!
  \*****************************************************/
/*! exports provided: aes-128-ecb, aes-192-ecb, aes-256-ecb, aes-128-cbc, aes-192-cbc, aes-256-cbc, aes128, aes192, aes256, aes-128-cfb, aes-192-cfb, aes-256-cfb, aes-128-cfb8, aes-192-cfb8, aes-256-cfb8, aes-128-cfb1, aes-192-cfb1, aes-256-cfb1, aes-128-ofb, aes-192-ofb, aes-256-ofb, aes-128-ctr, aes-192-ctr, aes-256-ctr, aes-128-gcm, aes-192-gcm, aes-256-gcm, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"aes-128-ecb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-192-ecb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-256-ecb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-128-cbc\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-192-cbc\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-256-cbc\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes128\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes192\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes256\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-128-cfb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-192-cfb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-256-cfb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-128-cfb8\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-192-cfb8\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-256-cfb8\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-128-cfb1\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-192-cfb1\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-256-cfb1\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-128-ofb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-192-ofb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-256-ofb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-128-ctr\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-192-ctr\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-256-ctr\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-128-gcm\":{\"cipher\":\"AES\",\"key\":128,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-192-gcm\":{\"cipher\":\"AES\",\"key\":192,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-256-gcm\":{\"cipher\":\"AES\",\"key\":256,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"}}");

/***/ }),

/***/ "./node_modules/browserify-aes/modes/ofb.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/modes/ofb.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(/*! buffer-xor */ "./node_modules/buffer-xor/index.js")

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/browserify-aes/streamCipher.js":
/*!*****************************************************!*\
  !*** ./node_modules/browserify-aes/streamCipher.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var aes = __webpack_require__(/*! ./aes */ "./node_modules/browserify-aes/aes.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer
var Transform = __webpack_require__(/*! cipher-base */ "./node_modules/cipher-base/index.js")
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")

function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._mode = mode
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}

StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

module.exports = StreamCipher


/***/ }),

/***/ "./node_modules/browserify-cipher/browser.js":
/*!***************************************************!*\
  !*** ./node_modules/browserify-cipher/browser.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DES = __webpack_require__(/*! browserify-des */ "./node_modules/browserify-des/index.js")
var aes = __webpack_require__(/*! browserify-aes/browser */ "./node_modules/browserify-aes/browser.js")
var aesModes = __webpack_require__(/*! browserify-aes/modes */ "./node_modules/browserify-aes/modes/index.js")
var desModes = __webpack_require__(/*! browserify-des/modes */ "./node_modules/browserify-des/modes.js")
var ebtk = __webpack_require__(/*! evp_bytestokey */ "./node_modules/evp_bytestokey/index.js")

function createCipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}

function createDecipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

  throw new TypeError('invalid suite type')
}

function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

  throw new TypeError('invalid suite type')
}

function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}

exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers


/***/ }),

/***/ "./node_modules/browserify-des/index.js":
/*!**********************************************!*\
  !*** ./node_modules/browserify-des/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var CipherBase = __webpack_require__(/*! cipher-base */ "./node_modules/cipher-base/index.js")
var des = __webpack_require__(/*! des.js */ "./node_modules/des.js/lib/des.js")
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (!Buffer.isBuffer(key)) {
    key = Buffer.from(key)
  }
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  if (!Buffer.isBuffer(iv)) {
    iv = Buffer.from(iv)
  }
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return Buffer.from(this._des.update(data))
}
DES.prototype._final = function () {
  return Buffer.from(this._des.final())
}


/***/ }),

/***/ "./node_modules/browserify-des/modes.js":
/*!**********************************************!*\
  !*** ./node_modules/browserify-des/modes.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}


/***/ }),

/***/ "./node_modules/browserify-rsa/index.js":
/*!**********************************************!*\
  !*** ./node_modules/browserify-rsa/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var bn = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var randomBytes = __webpack_require__(/*! randombytes */ "./node_modules/randombytes/browser.js");
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/browserify-sign/algos.js":
/*!***********************************************!*\
  !*** ./node_modules/browserify-sign/algos.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./browser/algorithms.json */ "./node_modules/browserify-sign/browser/algorithms.json")


/***/ }),

/***/ "./node_modules/browserify-sign/browser/algorithms.json":
/*!**************************************************************!*\
  !*** ./node_modules/browserify-sign/browser/algorithms.json ***!
  \**************************************************************/
/*! exports provided: sha224WithRSAEncryption, RSA-SHA224, sha256WithRSAEncryption, RSA-SHA256, sha384WithRSAEncryption, RSA-SHA384, sha512WithRSAEncryption, RSA-SHA512, RSA-SHA1, ecdsa-with-SHA1, sha256, sha224, sha384, sha512, DSA-SHA, DSA-SHA1, DSA, DSA-WITH-SHA224, DSA-SHA224, DSA-WITH-SHA256, DSA-SHA256, DSA-WITH-SHA384, DSA-SHA384, DSA-WITH-SHA512, DSA-SHA512, DSA-RIPEMD160, ripemd160WithRSA, RSA-RIPEMD160, md5WithRSAEncryption, RSA-MD5, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"sha224WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"RSA-SHA224\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"sha256WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"RSA-SHA256\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"sha384WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"RSA-SHA384\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"sha512WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA512\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA1\":{\"sign\":\"rsa\",\"hash\":\"sha1\",\"id\":\"3021300906052b0e03021a05000414\"},\"ecdsa-with-SHA1\":{\"sign\":\"ecdsa\",\"hash\":\"sha1\",\"id\":\"\"},\"sha256\":{\"sign\":\"ecdsa\",\"hash\":\"sha256\",\"id\":\"\"},\"sha224\":{\"sign\":\"ecdsa\",\"hash\":\"sha224\",\"id\":\"\"},\"sha384\":{\"sign\":\"ecdsa\",\"hash\":\"sha384\",\"id\":\"\"},\"sha512\":{\"sign\":\"ecdsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-SHA1\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-WITH-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-WITH-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-WITH-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-WITH-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-RIPEMD160\":{\"sign\":\"dsa\",\"hash\":\"rmd160\",\"id\":\"\"},\"ripemd160WithRSA\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"RSA-RIPEMD160\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"md5WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"},\"RSA-MD5\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"}}");

/***/ }),

/***/ "./node_modules/browserify-sign/browser/curves.json":
/*!**********************************************************!*\
  !*** ./node_modules/browserify-sign/browser/curves.json ***!
  \**********************************************************/
/*! exports provided: 1.3.132.0.10, 1.3.132.0.33, 1.2.840.10045.3.1.1, 1.2.840.10045.3.1.7, 1.3.132.0.34, 1.3.132.0.35, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"1.3.132.0.10\":\"secp256k1\",\"1.3.132.0.33\":\"p224\",\"1.2.840.10045.3.1.1\":\"p192\",\"1.2.840.10045.3.1.7\":\"p256\",\"1.3.132.0.34\":\"p384\",\"1.3.132.0.35\":\"p521\"}");

/***/ }),

/***/ "./node_modules/browserify-sign/browser/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/browserify-sign/browser/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(/*! create-hash */ "./node_modules/create-hash/browser.js")
var stream = __webpack_require__(/*! stream */ "./node_modules/stream-browserify/index.js")
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")
var sign = __webpack_require__(/*! ./sign */ "./node_modules/browserify-sign/browser/sign.js")
var verify = __webpack_require__(/*! ./verify */ "./node_modules/browserify-sign/browser/verify.js")

var algorithms = __webpack_require__(/*! ./algorithms.json */ "./node_modules/browserify-sign/browser/algorithms.json")
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = new Buffer(algorithms[key].id, 'hex')
  algorithms[key.toLowerCase()] = algorithms[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(hash, key, this._hashType, this._signType, this._tag)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') sig = new Buffer(sig, enc)

  this.end()
  var hash = this._hash.digest()
  return verify(sig, hash, key, this._signType, this._tag)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/browserify-sign/browser/sign.js":
/*!******************************************************!*\
  !*** ./node_modules/browserify-sign/browser/sign.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var createHmac = __webpack_require__(/*! create-hmac */ "./node_modules/create-hmac/browser.js")
var crt = __webpack_require__(/*! browserify-rsa */ "./node_modules/browserify-rsa/index.js")
var EC = __webpack_require__(/*! elliptic */ "./node_modules/elliptic/lib/elliptic.js").ec
var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js")
var parseKeys = __webpack_require__(/*! parse-asn1 */ "./node_modules/parse-asn1/index.js")
var curves = __webpack_require__(/*! ./curves.json */ "./node_modules/browserify-sign/browser/curves.json")

function sign (hash, key, hashType, signType, tag) {
  var priv = parseKeys(key)
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type')
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = priv.modulus.byteLength()
  var pad = [ 0, 1 ]
  while (hash.length + pad.length + 1 < len) pad.push(0xff)
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) pad.push(hash[i])

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.keyFromPrivate(priv.privateKey)
  var out = key.sign(hash)

  return new Buffer(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (s.cmpn(0) === 0) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) r = [ 0 ].concat(r)
  if (s[0] & 0x80) s = [ 0 ].concat(s)

  var total = r.length + s.length + 4
  var res = [ 0x30, total, 0x02, r.length ]
  res = res.concat(r, [ 0x02, s.length ], s)
  return new Buffer(res)
}

function getKey (x, q, hash, algo) {
  x = new Buffer(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length)
    zeros.fill(0)
    x = Buffer.concat([ zeros, x ])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = new Buffer(hlen)
  v.fill(1)
  var k = new Buffer(hlen)
  k.fill(0)
  k = createHmac(algo, k).update(v).update(new Buffer([ 0 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  k = createHmac(algo, k).update(v).update(new Buffer([ 1 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  return { k: k, v: v }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) bits.ishrn(shift)
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = new Buffer(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length)
    zeros.fill(0)
    out = Buffer.concat([ zeros, out ])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t
  var k

  do {
    t = new Buffer(0)

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      t = Buffer.concat([ t, kv.v ])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([ 0 ])).digest()
    kv.v = createHmac(algo, kv.k).update(kv.v).digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/browserify-sign/browser/verify.js":
/*!********************************************************!*\
  !*** ./node_modules/browserify-sign/browser/verify.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js")
var EC = __webpack_require__(/*! elliptic */ "./node_modules/elliptic/lib/elliptic.js").ec
var parseKeys = __webpack_require__(/*! parse-asn1 */ "./node_modules/parse-asn1/index.js")
var curves = __webpack_require__(/*! ./curves.json */ "./node_modules/browserify-sign/browser/curves.json")

function verify (sig, hash, key, signType, tag) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type')
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = pub.modulus.byteLength()
  var pad = [ 1 ]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = new Buffer(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))
  sig = new Buffer(sig.fromRed().toArray())
  var out = padNum < 8 ? 1 : 0
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) out = 1

  i = -1
  while (++i < len) out |= sig[i] ^ pad[i]
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
    .mod(p)
    .mod(q)
  return v.cmp(r) === 0
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig')
  if (b.cmp(q) >= q) throw new Error('invalid sig')
}

module.exports = verify

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/buffer-xor/index.js":
/*!******************************************!*\
  !*** ./node_modules/buffer-xor/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../next/node_modules/webpack/buildin/global.js */ "./node_modules/next/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/cipher-base/index.js":
/*!*******************************************!*\
  !*** ./node_modules/cipher-base/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer
var Transform = __webpack_require__(/*! stream */ "./node_modules/stream-browserify/index.js").Transform
var StringDecoder = __webpack_require__(/*! string_decoder */ "./node_modules/string_decoder/lib/string_decoder.js").StringDecoder
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase


/***/ }),

/***/ "./node_modules/core-util-is/lib/util.js":
/*!***********************************************!*\
  !*** ./node_modules/core-util-is/lib/util.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/create-ecdh/browser.js":
/*!*********************************************!*\
  !*** ./node_modules/create-ecdh/browser.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var elliptic = __webpack_require__(/*! elliptic */ "./node_modules/elliptic/lib/elliptic.js")
var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js")

module.exports = function createECDH (curve) {
  return new ECDH(curve)
}

var aliases = {
  secp256k1: {
    name: 'secp256k1',
    byteLength: 32
  },
  secp224r1: {
    name: 'p224',
    byteLength: 28
  },
  prime256v1: {
    name: 'p256',
    byteLength: 32
  },
  prime192v1: {
    name: 'p192',
    byteLength: 24
  },
  ed25519: {
    name: 'ed25519',
    byteLength: 32
  },
  secp384r1: {
    name: 'p384',
    byteLength: 48
  },
  secp521r1: {
    name: 'p521',
    byteLength: 66
  }
}

aliases.p224 = aliases.secp224r1
aliases.p256 = aliases.secp256r1 = aliases.prime256v1
aliases.p192 = aliases.secp192r1 = aliases.prime192v1
aliases.p384 = aliases.secp384r1
aliases.p521 = aliases.secp521r1

function ECDH (curve) {
  this.curveType = aliases[curve]
  if (!this.curveType) {
    this.curveType = {
      name: curve
    }
  }
  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
  this.keys = void 0
}

ECDH.prototype.generateKeys = function (enc, format) {
  this.keys = this.curve.genKeyPair()
  return this.getPublicKey(enc, format)
}

ECDH.prototype.computeSecret = function (other, inenc, enc) {
  inenc = inenc || 'utf8'
  if (!Buffer.isBuffer(other)) {
    other = new Buffer(other, inenc)
  }
  var otherPub = this.curve.keyFromPublic(other).getPublic()
  var out = otherPub.mul(this.keys.getPrivate()).getX()
  return formatReturnValue(out, enc, this.curveType.byteLength)
}

ECDH.prototype.getPublicKey = function (enc, format) {
  var key = this.keys.getPublic(format === 'compressed', true)
  if (format === 'hybrid') {
    if (key[key.length - 1] % 2) {
      key[0] = 7
    } else {
      key[0] = 6
    }
  }
  return formatReturnValue(key, enc)
}

ECDH.prototype.getPrivateKey = function (enc) {
  return formatReturnValue(this.keys.getPrivate(), enc)
}

ECDH.prototype.setPublicKey = function (pub, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc)
  }
  this.keys._importPublic(pub)
  return this
}

ECDH.prototype.setPrivateKey = function (priv, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc)
  }

  var _priv = new BN(priv)
  _priv = _priv.toString(16)
  this.keys = this.curve.genKeyPair()
  this.keys._importPrivate(_priv)
  return this
}

function formatReturnValue (bn, enc, len) {
  if (!Array.isArray(bn)) {
    bn = bn.toArray()
  }
  var buf = new Buffer(bn)
  if (len && buf.length < len) {
    var zeros = new Buffer(len - buf.length)
    zeros.fill(0)
    buf = Buffer.concat([zeros, buf])
  }
  if (!enc) {
    return buf
  } else {
    return buf.toString(enc)
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/create-hash/browser.js":
/*!*********************************************!*\
  !*** ./node_modules/create-hash/browser.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")
var MD5 = __webpack_require__(/*! md5.js */ "./node_modules/md5.js/index.js")
var RIPEMD160 = __webpack_require__(/*! ripemd160 */ "./node_modules/ripemd160/index.js")
var sha = __webpack_require__(/*! sha.js */ "./node_modules/sha.js/index.js")
var Base = __webpack_require__(/*! cipher-base */ "./node_modules/cipher-base/index.js")

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}


/***/ }),

/***/ "./node_modules/create-hash/md5.js":
/*!*****************************************!*\
  !*** ./node_modules/create-hash/md5.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var MD5 = __webpack_require__(/*! md5.js */ "./node_modules/md5.js/index.js")

module.exports = function (buffer) {
  return new MD5().update(buffer).digest()
}


/***/ }),

/***/ "./node_modules/create-hmac/browser.js":
/*!*********************************************!*\
  !*** ./node_modules/create-hmac/browser.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")
var Legacy = __webpack_require__(/*! ./legacy */ "./node_modules/create-hmac/legacy.js")
var Base = __webpack_require__(/*! cipher-base */ "./node_modules/cipher-base/index.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer
var md5 = __webpack_require__(/*! create-hash/md5 */ "./node_modules/create-hash/md5.js")
var RIPEMD160 = __webpack_require__(/*! ripemd160 */ "./node_modules/ripemd160/index.js")

var sha = __webpack_require__(/*! sha.js */ "./node_modules/sha.js/index.js")

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}


/***/ }),

/***/ "./node_modules/create-hmac/legacy.js":
/*!********************************************!*\
  !*** ./node_modules/create-hmac/legacy.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer

var Base = __webpack_require__(/*! cipher-base */ "./node_modules/cipher-base/index.js")

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac


/***/ }),

/***/ "./node_modules/crypto-browserify/index.js":
/*!*************************************************!*\
  !*** ./node_modules/crypto-browserify/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = __webpack_require__(/*! randombytes */ "./node_modules/randombytes/browser.js")
exports.createHash = exports.Hash = __webpack_require__(/*! create-hash */ "./node_modules/create-hash/browser.js")
exports.createHmac = exports.Hmac = __webpack_require__(/*! create-hmac */ "./node_modules/create-hmac/browser.js")

var algos = __webpack_require__(/*! browserify-sign/algos */ "./node_modules/browserify-sign/algos.js")
var algoKeys = Object.keys(algos)
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
exports.getHashes = function () {
  return hashes
}

var p = __webpack_require__(/*! pbkdf2 */ "./node_modules/pbkdf2/browser.js")
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = __webpack_require__(/*! browserify-cipher */ "./node_modules/browserify-cipher/browser.js")

exports.Cipher = aes.Cipher
exports.createCipher = aes.createCipher
exports.Cipheriv = aes.Cipheriv
exports.createCipheriv = aes.createCipheriv
exports.Decipher = aes.Decipher
exports.createDecipher = aes.createDecipher
exports.Decipheriv = aes.Decipheriv
exports.createDecipheriv = aes.createDecipheriv
exports.getCiphers = aes.getCiphers
exports.listCiphers = aes.listCiphers

var dh = __webpack_require__(/*! diffie-hellman */ "./node_modules/diffie-hellman/browser.js")

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
exports.getDiffieHellman = dh.getDiffieHellman
exports.createDiffieHellman = dh.createDiffieHellman
exports.DiffieHellman = dh.DiffieHellman

var sign = __webpack_require__(/*! browserify-sign */ "./node_modules/browserify-sign/browser/index.js")

exports.createSign = sign.createSign
exports.Sign = sign.Sign
exports.createVerify = sign.createVerify
exports.Verify = sign.Verify

exports.createECDH = __webpack_require__(/*! create-ecdh */ "./node_modules/create-ecdh/browser.js")

var publicEncrypt = __webpack_require__(/*! public-encrypt */ "./node_modules/public-encrypt/browser.js")

exports.publicEncrypt = publicEncrypt.publicEncrypt
exports.privateEncrypt = publicEncrypt.privateEncrypt
exports.publicDecrypt = publicEncrypt.publicDecrypt
exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

var rf = __webpack_require__(/*! randomfill */ "./node_modules/randomfill/browser.js")

exports.randomFill = rf.randomFill
exports.randomFillSync = rf.randomFillSync

exports.createCredentials = function () {
  throw new Error([
    'sorry, createCredentials is not implemented yet',
    'we accept pull requests',
    'https://github.com/crypto-browserify/crypto-browserify'
  ].join('\n'))
}

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
}


/***/ }),

/***/ "./node_modules/des.js/lib/des.js":
/*!****************************************!*\
  !*** ./node_modules/des.js/lib/des.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.utils = __webpack_require__(/*! ./des/utils */ "./node_modules/des.js/lib/des/utils.js");
exports.Cipher = __webpack_require__(/*! ./des/cipher */ "./node_modules/des.js/lib/des/cipher.js");
exports.DES = __webpack_require__(/*! ./des/des */ "./node_modules/des.js/lib/des/des.js");
exports.CBC = __webpack_require__(/*! ./des/cbc */ "./node_modules/des.js/lib/des/cbc.js");
exports.EDE = __webpack_require__(/*! ./des/ede */ "./node_modules/des.js/lib/des/ede.js");


/***/ }),

/***/ "./node_modules/des.js/lib/des/cbc.js":
/*!********************************************!*\
  !*** ./node_modules/des.js/lib/des/cbc.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};


/***/ }),

/***/ "./node_modules/des.js/lib/des/cipher.js":
/*!***********************************************!*\
  !*** ./node_modules/des.js/lib/des/cipher.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};


/***/ }),

/***/ "./node_modules/des.js/lib/des/des.js":
/*!********************************************!*\
  !*** ./node_modules/des.js/lib/des/des.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var utils = __webpack_require__(/*! ./utils */ "./node_modules/des.js/lib/des/utils.js");
var Cipher = __webpack_require__(/*! ./cipher */ "./node_modules/des.js/lib/des/cipher.js");

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};


/***/ }),

/***/ "./node_modules/des.js/lib/des/ede.js":
/*!********************************************!*\
  !*** ./node_modules/des.js/lib/des/ede.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var Cipher = __webpack_require__(/*! ./cipher */ "./node_modules/des.js/lib/des/cipher.js");
var DES = __webpack_require__(/*! ./des */ "./node_modules/des.js/lib/des/des.js");

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;


/***/ }),

/***/ "./node_modules/des.js/lib/des/utils.js":
/*!**********************************************!*\
  !*** ./node_modules/des.js/lib/des/utils.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};


/***/ }),

/***/ "./node_modules/diffie-hellman/browser.js":
/*!************************************************!*\
  !*** ./node_modules/diffie-hellman/browser.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var generatePrime = __webpack_require__(/*! ./lib/generatePrime */ "./node_modules/diffie-hellman/lib/generatePrime.js")
var primes = __webpack_require__(/*! ./lib/primes.json */ "./node_modules/diffie-hellman/lib/primes.json")

var DH = __webpack_require__(/*! ./lib/dh */ "./node_modules/diffie-hellman/lib/dh.js")

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/diffie-hellman/lib/dh.js":
/*!***********************************************!*\
  !*** ./node_modules/diffie-hellman/lib/dh.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var MillerRabin = __webpack_require__(/*! miller-rabin */ "./node_modules/miller-rabin/lib/mr.js");
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = __webpack_require__(/*! ./generatePrime */ "./node_modules/diffie-hellman/lib/generatePrime.js");
var randomBytes = __webpack_require__(/*! randombytes */ "./node_modules/randombytes/browser.js");
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/diffie-hellman/lib/generatePrime.js":
/*!**********************************************************!*\
  !*** ./node_modules/diffie-hellman/lib/generatePrime.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var randomBytes = __webpack_require__(/*! randombytes */ "./node_modules/randombytes/browser.js");
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var TWENTYFOUR = new BN(24);
var MillerRabin = __webpack_require__(/*! miller-rabin */ "./node_modules/miller-rabin/lib/mr.js");
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}


/***/ }),

/***/ "./node_modules/diffie-hellman/lib/primes.json":
/*!*****************************************************!*\
  !*** ./node_modules/diffie-hellman/lib/primes.json ***!
  \*****************************************************/
/*! exports provided: modp1, modp2, modp5, modp14, modp15, modp16, modp17, modp18, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"modp1\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff\"},\"modp2\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff\"},\"modp5\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff\"},\"modp14\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff\"},\"modp15\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff\"},\"modp16\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff\"},\"modp17\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff\"},\"modp18\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff\"}}");

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic.js":
/*!***********************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var elliptic = exports;

elliptic.version = __webpack_require__(/*! ../package.json */ "./node_modules/elliptic/package.json").version;
elliptic.utils = __webpack_require__(/*! ./elliptic/utils */ "./node_modules/elliptic/lib/elliptic/utils.js");
elliptic.rand = __webpack_require__(/*! brorand */ "./node_modules/brorand/index.js");
elliptic.curve = __webpack_require__(/*! ./elliptic/curve */ "./node_modules/elliptic/lib/elliptic/curve/index.js");
elliptic.curves = __webpack_require__(/*! ./elliptic/curves */ "./node_modules/elliptic/lib/elliptic/curves.js");

// Protocols
elliptic.ec = __webpack_require__(/*! ./elliptic/ec */ "./node_modules/elliptic/lib/elliptic/ec/index.js");
elliptic.eddsa = __webpack_require__(/*! ./elliptic/eddsa */ "./node_modules/elliptic/lib/elliptic/eddsa/index.js");


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/base.js":
/*!**********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/base.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var utils = __webpack_require__(/*! ../utils */ "./node_modules/elliptic/lib/elliptic/utils.js");
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len,
                                                       jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
                          bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/edwards.js":
/*!*************************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/edwards.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/elliptic/lib/elliptic/utils.js");
var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var Base = __webpack_require__(/*! ./base */ "./node_modules/elliptic/lib/elliptic/curve/base.js");

var assert = utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = exports;

curve.base = __webpack_require__(/*! ./base */ "./node_modules/elliptic/lib/elliptic/curve/base.js");
curve.short = __webpack_require__(/*! ./short */ "./node_modules/elliptic/lib/elliptic/curve/short.js");
curve.mont = __webpack_require__(/*! ./mont */ "./node_modules/elliptic/lib/elliptic/curve/mont.js");
curve.edwards = __webpack_require__(/*! ./edwards */ "./node_modules/elliptic/lib/elliptic/curve/edwards.js");


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/mont.js":
/*!**********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/mont.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var Base = __webpack_require__(/*! ./base */ "./node_modules/elliptic/lib/elliptic/curve/base.js");

var utils = __webpack_require__(/*! ../utils */ "./node_modules/elliptic/lib/elliptic/utils.js");

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/short.js":
/*!***********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/short.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/elliptic/lib/elliptic/utils.js");
var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var Base = __webpack_require__(/*! ./base */ "./node_modules/elliptic/lib/elliptic/curve/base.js");

var assert = utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curves.js":
/*!******************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curves.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curves = exports;

var hash = __webpack_require__(/*! hash.js */ "./node_modules/hash.js/lib/hash.js");
var curve = __webpack_require__(/*! ./curve */ "./node_modules/elliptic/lib/elliptic/curve/index.js");
var utils = __webpack_require__(/*! ./utils */ "./node_modules/elliptic/lib/elliptic/utils.js");

var assert = utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new curve.edwards(options);
  else
    this.curve = new curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
  ]
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = __webpack_require__(/*! ./precomputed/secp256k1 */ "./node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js");
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/ec/index.js":
/*!********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/ec/index.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var HmacDRBG = __webpack_require__(/*! hmac-drbg */ "./node_modules/hmac-drbg/lib/hmac-drbg.js");
var utils = __webpack_require__(/*! ../utils */ "./node_modules/elliptic/lib/elliptic/utils.js");
var curves = __webpack_require__(/*! ../curves */ "./node_modules/elliptic/lib/elliptic/curves.js");
var rand = __webpack_require__(/*! brorand */ "./node_modules/brorand/index.js");
var assert = utils.assert;

var KeyPair = __webpack_require__(/*! ./key */ "./node_modules/elliptic/lib/elliptic/ec/key.js");
var Signature = __webpack_require__(/*! ./signature */ "./node_modules/elliptic/lib/elliptic/ec/signature.js");

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ?
        options.k(iter) :
        new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/ec/key.js":
/*!******************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/ec/key.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var utils = __webpack_require__(/*! ../utils */ "./node_modules/elliptic/lib/elliptic/utils.js");
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/ec/signature.js":
/*!************************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/ec/signature.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");

var utils = __webpack_require__(/*! ../utils */ "./node_modules/elliptic/lib/elliptic/utils.js");
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }
  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0 && (r[1] & 0x80)) {
    r = r.slice(1);
  }
  if (s[0] === 0 && (s[1] & 0x80)) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/eddsa/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/eddsa/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(/*! hash.js */ "./node_modules/hash.js/lib/hash.js");
var curves = __webpack_require__(/*! ../curves */ "./node_modules/elliptic/lib/elliptic/curves.js");
var utils = __webpack_require__(/*! ../utils */ "./node_modules/elliptic/lib/elliptic/utils.js");
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = __webpack_require__(/*! ./key */ "./node_modules/elliptic/lib/elliptic/eddsa/key.js");
var Signature = __webpack_require__(/*! ./signature */ "./node_modules/elliptic/lib/elliptic/eddsa/signature.js");

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  var curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
               .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/eddsa/key.js":
/*!*********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/eddsa/key.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/elliptic/lib/elliptic/utils.js");
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/eddsa/signature.js":
/*!***************************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/eddsa/signature.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var utils = __webpack_require__(/*! ../utils */ "./node_modules/elliptic/lib/elliptic/utils.js");
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js":
/*!*********************************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/utils.js":
/*!*****************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/utils.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;
var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var minAssert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");
var minUtils = __webpack_require__(/*! minimalistic-crypto-utils */ "./node_modules/minimalistic-crypto-utils/lib/utils.js");

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w, bits) {
  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
  naf.fill(0);

  var ws = 1 << (w + 1);
  var k = num.clone();

  for (var i = 0; i < naf.length; i++) {
    var z;
    var mod = k.andln(ws - 1);
    if (k.isOdd()) {
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf[i] = z;
    k.iushrn(1);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
           this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                     bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;



/***/ }),

/***/ "./node_modules/elliptic/package.json":
/*!********************************************!*\
  !*** ./node_modules/elliptic/package.json ***!
  \********************************************/
/*! exports provided: _args, _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _spec, _where, author, bugs, dependencies, description, devDependencies, files, homepage, keywords, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"_args\":[[\"elliptic@6.5.2\",\"/home/clfhhc/src/github_pwa\"]],\"_from\":\"elliptic@6.5.2\",\"_id\":\"elliptic@6.5.2\",\"_inBundle\":false,\"_integrity\":\"sha512-f4x70okzZbIQl/NSRLkI/+tteV/9WqL98zx+SQ69KbXxmVrmjwsNUPn/gYJJ0sHvEak24cZgHIPegRePAtA/xw==\",\"_location\":\"/elliptic\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"version\",\"registry\":true,\"raw\":\"elliptic@6.5.2\",\"name\":\"elliptic\",\"escapedName\":\"elliptic\",\"rawSpec\":\"6.5.2\",\"saveSpec\":null,\"fetchSpec\":\"6.5.2\"},\"_requiredBy\":[\"/browserify-sign\",\"/create-ecdh\"],\"_resolved\":\"https://registry.npmjs.org/elliptic/-/elliptic-6.5.2.tgz\",\"_spec\":\"6.5.2\",\"_where\":\"/home/clfhhc/src/github_pwa\",\"author\":{\"name\":\"Fedor Indutny\",\"email\":\"fedor@indutny.com\"},\"bugs\":{\"url\":\"https://github.com/indutny/elliptic/issues\"},\"dependencies\":{\"bn.js\":\"^4.4.0\",\"brorand\":\"^1.0.1\",\"hash.js\":\"^1.0.0\",\"hmac-drbg\":\"^1.0.0\",\"inherits\":\"^2.0.1\",\"minimalistic-assert\":\"^1.0.0\",\"minimalistic-crypto-utils\":\"^1.0.0\"},\"description\":\"EC cryptography\",\"devDependencies\":{\"brfs\":\"^1.4.3\",\"coveralls\":\"^3.0.8\",\"grunt\":\"^1.0.4\",\"grunt-browserify\":\"^5.0.0\",\"grunt-cli\":\"^1.2.0\",\"grunt-contrib-connect\":\"^1.0.0\",\"grunt-contrib-copy\":\"^1.0.0\",\"grunt-contrib-uglify\":\"^1.0.1\",\"grunt-mocha-istanbul\":\"^3.0.1\",\"grunt-saucelabs\":\"^9.0.1\",\"istanbul\":\"^0.4.2\",\"jscs\":\"^3.0.7\",\"jshint\":\"^2.10.3\",\"mocha\":\"^6.2.2\"},\"files\":[\"lib\"],\"homepage\":\"https://github.com/indutny/elliptic\",\"keywords\":[\"EC\",\"Elliptic\",\"curve\",\"Cryptography\"],\"license\":\"MIT\",\"main\":\"lib/elliptic.js\",\"name\":\"elliptic\",\"repository\":{\"type\":\"git\",\"url\":\"git+ssh://git@github.com/indutny/elliptic.git\"},\"scripts\":{\"jscs\":\"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js\",\"jshint\":\"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js\",\"lint\":\"npm run jscs && npm run jshint\",\"test\":\"npm run lint && npm run unit\",\"unit\":\"istanbul test _mocha --reporter=spec test/index.js\",\"version\":\"grunt dist && git add dist/\"},\"version\":\"6.5.2\"}");

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}


/***/ }),

/***/ "./node_modules/evp_bytestokey/index.js":
/*!**********************************************!*\
  !*** ./node_modules/evp_bytestokey/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer
var MD5 = __webpack_require__(/*! md5.js */ "./node_modules/md5.js/index.js")

/* eslint-disable camelcase */
function EVP_BytesToKey (password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
  }

  var keyLen = keyBits / 8
  var key = Buffer.alloc(keyLen)
  var iv = Buffer.alloc(ivLen || 0)
  var tmp = Buffer.alloc(0)

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5()
    hash.update(tmp)
    hash.update(password)
    if (salt) hash.update(salt)
    tmp = hash.digest()

    var used = 0

    if (keyLen > 0) {
      var keyStart = key.length - keyLen
      used = Math.min(keyLen, tmp.length)
      tmp.copy(key, keyStart, 0, used)
      keyLen -= used
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen
      var length = Math.min(ivLen, tmp.length - used)
      tmp.copy(iv, ivStart, used, used + length)
      ivLen -= length
    }
  }

  tmp.fill(0)
  return { key: key, iv: iv }
}

module.exports = EVP_BytesToKey


/***/ }),

/***/ "./node_modules/function-bind/implementation.js":
/*!******************************************************!*\
  !*** ./node_modules/function-bind/implementation.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};


/***/ }),

/***/ "./node_modules/function-bind/index.js":
/*!*********************************************!*\
  !*** ./node_modules/function-bind/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/function-bind/implementation.js");

module.exports = Function.prototype.bind || implementation;


/***/ }),

/***/ "./node_modules/has/src/index.js":
/*!***************************************!*\
  !*** ./node_modules/has/src/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);


/***/ }),

/***/ "./node_modules/hash-base/index.js":
/*!*****************************************!*\
  !*** ./node_modules/hash-base/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer
var Transform = __webpack_require__(/*! stream */ "./node_modules/stream-browserify/index.js").Transform
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")

function throwIfNotStringOrBuffer (val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer')
  }
}

function HashBase (blockSize) {
  Transform.call(this)

  this._block = Buffer.allocUnsafe(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    this.update(chunk, encoding)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this.digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)

  // reset state
  this._block.fill(0)
  this._blockOffset = 0
  for (var i = 0; i < 4; ++i) this._length[i] = 0

  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase


/***/ }),

/***/ "./node_modules/hash.js/lib/hash.js":
/*!******************************************!*\
  !*** ./node_modules/hash.js/lib/hash.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var hash = exports;

hash.utils = __webpack_require__(/*! ./hash/utils */ "./node_modules/hash.js/lib/hash/utils.js");
hash.common = __webpack_require__(/*! ./hash/common */ "./node_modules/hash.js/lib/hash/common.js");
hash.sha = __webpack_require__(/*! ./hash/sha */ "./node_modules/hash.js/lib/hash/sha.js");
hash.ripemd = __webpack_require__(/*! ./hash/ripemd */ "./node_modules/hash.js/lib/hash/ripemd.js");
hash.hmac = __webpack_require__(/*! ./hash/hmac */ "./node_modules/hash.js/lib/hash/hmac.js");

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/common.js":
/*!*************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/common.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/hash.js/lib/hash/utils.js");
var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/hmac.js":
/*!***********************************************!*\
  !*** ./node_modules/hash.js/lib/hash/hmac.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/hash.js/lib/hash/utils.js");
var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/ripemd.js":
/*!*************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/ripemd.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/hash.js/lib/hash/utils.js");
var common = __webpack_require__(/*! ./common */ "./node_modules/hash.js/lib/hash/common.js");

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha.js":
/*!**********************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.sha1 = __webpack_require__(/*! ./sha/1 */ "./node_modules/hash.js/lib/hash/sha/1.js");
exports.sha224 = __webpack_require__(/*! ./sha/224 */ "./node_modules/hash.js/lib/hash/sha/224.js");
exports.sha256 = __webpack_require__(/*! ./sha/256 */ "./node_modules/hash.js/lib/hash/sha/256.js");
exports.sha384 = __webpack_require__(/*! ./sha/384 */ "./node_modules/hash.js/lib/hash/sha/384.js");
exports.sha512 = __webpack_require__(/*! ./sha/512 */ "./node_modules/hash.js/lib/hash/sha/512.js");


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/1.js":
/*!************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/1.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/hash.js/lib/hash/utils.js");
var common = __webpack_require__(/*! ../common */ "./node_modules/hash.js/lib/hash/common.js");
var shaCommon = __webpack_require__(/*! ./common */ "./node_modules/hash.js/lib/hash/sha/common.js");

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/224.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/224.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/hash.js/lib/hash/utils.js");
var SHA256 = __webpack_require__(/*! ./256 */ "./node_modules/hash.js/lib/hash/sha/256.js");

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};



/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/256.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/256.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/hash.js/lib/hash/utils.js");
var common = __webpack_require__(/*! ../common */ "./node_modules/hash.js/lib/hash/common.js");
var shaCommon = __webpack_require__(/*! ./common */ "./node_modules/hash.js/lib/hash/sha/common.js");
var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/384.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/384.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/hash.js/lib/hash/utils.js");

var SHA512 = __webpack_require__(/*! ./512 */ "./node_modules/hash.js/lib/hash/sha/512.js");

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/512.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/512.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/hash.js/lib/hash/utils.js");
var common = __webpack_require__(/*! ../common */ "./node_modules/hash.js/lib/hash/common.js");
var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/common.js":
/*!*****************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/common.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/hash.js/lib/hash/utils.js");
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/utils.js":
/*!************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/utils.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;


/***/ }),

/***/ "./node_modules/hmac-drbg/lib/hmac-drbg.js":
/*!*************************************************!*\
  !*** ./node_modules/hmac-drbg/lib/hmac-drbg.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(/*! hash.js */ "./node_modules/hash.js/lib/hash.js");
var utils = __webpack_require__(/*! minimalistic-crypto-utils */ "./node_modules/minimalistic-crypto-utils/lib/utils.js");
var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};


/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/md5.js/index.js":
/*!**************************************!*\
  !*** ./node_modules/md5.js/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")
var HashBase = __webpack_require__(/*! hash-base */ "./node_modules/hash-base/index.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5


/***/ }),

/***/ "./node_modules/miller-rabin/lib/mr.js":
/*!*********************************************!*\
  !*** ./node_modules/miller-rabin/lib/mr.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var bn = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var brorand = __webpack_require__(/*! brorand */ "./node_modules/brorand/index.js");

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do
    var a = new bn(this.rand.generate(min_bytes));
  while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};


/***/ }),

/***/ "./node_modules/minimalistic-assert/index.js":
/*!***************************************************!*\
  !*** ./node_modules/minimalistic-assert/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};


/***/ }),

/***/ "./node_modules/minimalistic-crypto-utils/lib/utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/minimalistic-crypto-utils/lib/utils.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};


/***/ }),

/***/ "./node_modules/native-url/dist/index.js":
/*!***********************************************!*\
  !*** ./node_modules/native-url/dist/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var e,t=(e=__webpack_require__(/*! querystring */ "./node_modules/querystring-es3/index.js"))&&"object"==typeof e&&"default"in e?e.default:e,r=/https?|ftp|gopher|file/;function o(e){"string"==typeof e&&(e=f(e));var o=function(e,t,r){var o=e.auth,a=e.hostname,s=e.protocol||"",h=e.pathname||"",c=e.hash||"",p=e.query||"",n=!1;o=o?encodeURIComponent(o).replace(/%3A/i,":")+"@":"",e.host?n=o+e.host:a&&(n=o+(~a.indexOf(":")?"["+a+"]":a),e.port&&(n+=":"+e.port)),p&&"object"==typeof p&&(p=t.encode(p));var l=e.search||p&&"?"+p||"";return s&&":"!==s.substr(-1)&&(s+=":"),e.slashes||(!s||r.test(s))&&!1!==n?(n="//"+(n||""),h&&"/"!==h[0]&&(h="/"+h)):n||(n=""),c&&"#"!==c[0]&&(c="#"+c),l&&"?"!==l[0]&&(l="?"+l),{protocol:s,host:n,pathname:h=h.replace(/[?#]/g,encodeURIComponent),search:l=l.replace("#","%23"),hash:c}}(e,t,r);return""+o.protocol+o.host+o.pathname+o.search+o.hash}var a="http://",s="w.w",h=a+s,c=/^https?|ftp|gopher|file/,p=/^(.*?)([#?].*)/,n=/^([a-z0-9.+-]*:)(\/{0,3})(.*)/i,l=/^([a-z0-9.+-]*:)?\/\/\/*/i,i=/^([a-z0-9.+-]*:)(\/{0,2})\[(.*)\]$/i;function u(e){try{return decodeURI(e)}catch(t){return e}}function f(e,r,a){void 0===r&&(r=!1),void 0===a&&(a=!1);var f=(e=e.trim()).match(p);e=f?u(f[1]).replace(/\\/g,"/")+f[2]:u(e).replace(/\\/g,"/"),i.test(e)&&"/"!==e.slice(-1)&&(e+="/");var m=!/(^javascript)/.test(e)&&e.match(n),v=l.test(e),d="";m&&(c.test(m[1])||(d=m[1].toLowerCase(),e=""+m[2]+m[3]),m[2]||(v=!1,c.test(m[1])?(d=m[1],e=""+m[3]):e="//"+m[3]),3!==m[2].length&&1!==m[2].length||(d=m[1],e="/"+m[3]));var g,b=e.match(/(:[0-9]+)/),y="";b&&b[1]&&3===b[1].length&&(e=e.replace(y=b[1],y+"00"));var w={},x="",R="";try{g=new URL(e)}catch(t){x=t,d||a||!/^\/\//.test(e)||/^\/\/.+[@.]/.test(e)||(R="/",e=e.substr(1));try{g=new URL(e,h)}catch(e){return w.protocol=d,w.href=d,w}}w.slashes=v&&!R,w.host=g.host===s?"":g.host,w.hostname=g.hostname===s?"":g.hostname.replace(/(\[|\])/g,""),w.protocol=x?d||null:g.protocol,w.search=g.search.replace(/\\/g,"%5C"),w.hash=g.hash.replace(/\\/g,"%5C");var U=e.split("#");!w.search&&~U[0].indexOf("?")&&(w.search="?"),w.hash||""!==U[1]||(w.hash="#"),w.query=r?t.decode(g.search.substr(1)):w.search.substr(1),w.pathname=R+u(g.pathname).replace(/"/g,"%22"),"about:"===w.protocol&&"blank"===w.pathname&&(w.protocol="",w.pathname=""),x&&"/"!==e[0]&&(w.pathname=w.pathname.substr(1)),d&&!c.test(d)&&"/"!==e.slice(-1)&&"/"===w.pathname&&(w.pathname=""),w.path=w.pathname+w.search,w.auth=[g.username,g.password].map(decodeURIComponent).filter(Boolean).join(":"),w.port=g.port,y&&(w.host=w.host.replace(y+"00",y),w.port=w.port.slice(0,-2)),w.href=R?""+w.pathname+w.search+w.hash:o(w);var j=/^(file)/.test(w.href)?["host","hostname"]:[];return Object.keys(w).forEach(function(e){~j.indexOf(e)||(w[e]=w[e]||null)}),w}var m=/^([a-z0-9.+-]*:\/\/\/)([a-z0-9.+-]:\/*)?/i,v=/https?|ftp|gopher|file/;function d(e,t){var r="string"==typeof e?f(e):e;e="object"==typeof e?o(e):e;var s=f(t),c="";r.protocol&&!r.slashes&&(c=r.protocol,e=e.replace(r.protocol,""),c+="/"===t[0]||"/"===e[0]?"/":""),c&&s.protocol&&(c="",s.slashes||(c=s.protocol,t=t.replace(s.protocol,"")));var p=e.match(m);p&&!s.protocol&&(e=e.substr((c=p[1]+(p[2]||"")).length),/^\/\/[^\/]/.test(t)&&(c=c.slice(0,-1)));var n=new URL(e,h+"/"),l=new URL(t,n).toString().replace(h,""),i=s.protocol||r.protocol;return i+=r.slashes||s.slashes?"//":"",!c&&i?l=l.replace(a,i):c&&(l=l.replace(a,"")),v.test(l)||~t.indexOf(".")||"/"===e.slice(-1)||"/"===t.slice(-1)||"/"!==l.slice(-1)||(l=l.slice(0,-1)),c&&(l=c+("/"===l[0]?l.substr(1):l)),l}exports.parse=f,exports.format=o,exports.resolve=d,exports.resolveObject=function(e,t){return f(d(e,t))};
//# sourceMappingURL=index.js.map


/***/ }),

/***/ "./node_modules/next/dist/build/polyfills/object-assign.js":
/*!***********************************************************************************************************************!*\
  !*** delegated ./node_modules/next/dist/build/polyfills/object-assign.js from dll-reference dll_2adc2403d89adc16ead0 ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(/*! dll-reference dll_2adc2403d89adc16ead0 */ "dll-reference dll_2adc2403d89adc16ead0"))("./node_modules/next/dist/build/polyfills/object-assign.js");

/***/ }),

/***/ "./node_modules/next/dist/build/polyfills/object.assign/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/next/dist/build/polyfills/object.assign/index.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var assign=Object.assign.bind(Object);function g(){return assign;}Object.defineProperties(g(),{implementation:{get:g},shim:{value:g},getPolyfill:{value:g}});module.exports=g();

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2Fdb&absolutePagePath=%2Fhome%2Fclfhhc%2Fsrc%2Fgithub_pwa%2Fsrc%2Fpages%2Fdb.tsx!./":
/*!*************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2Fdb&absolutePagePath=%2Fhome%2Fclfhhc%2Fsrc%2Fgithub_pwa%2Fsrc%2Fpages%2Fdb.tsx ***!
  \*************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


    (window.__NEXT_P=window.__NEXT_P||[]).push(["/db", function() {
      var mod = __webpack_require__(/*! ./src/pages/db.tsx */ "./src/pages/db.tsx")
      if(true) {
        module.hot.accept(/*! ./src/pages/db.tsx */ "./src/pages/db.tsx", function() {
          if(!next.router.components["/db"]) return
          var updatedPage = __webpack_require__(/*! ./src/pages/db.tsx */ "./src/pages/db.tsx")
          next.router.update("/db", updatedPage)
        })
      }
      return mod
    }]);
  

/***/ }),

/***/ "./node_modules/next/dist/client/link.js":
/*!***********************************************!*\
  !*** ./node_modules/next/dist/client/link.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _classCallCheck = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");

var _createClass = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");

var _possibleConstructorReturn = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");

var _getPrototypeOf = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");

var _inherits = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js");

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js");

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

var _url = __webpack_require__(/*! url */ "./node_modules/native-url/dist/index.js");

var _utils = __webpack_require__(/*! ../next-server/lib/utils */ "./node_modules/next/dist/next-server/lib/utils.js");

var _router = _interopRequireDefault(__webpack_require__(/*! ./router */ "./node_modules/next/dist/client/router.js"));

function isLocal(href) {
  var url = (0, _url.parse)(href, false, true);
  var origin = (0, _url.parse)((0, _utils.getLocationOrigin)(), false, true);
  return !url.host || url.protocol === origin.protocol && url.host === origin.host;
}

function memoizedFormatUrl(formatFunc) {
  var lastHref = null;
  var lastAs = null;
  var lastResult = null;
  return function (href, as) {
    if (lastResult && href === lastHref && as === lastAs) {
      return lastResult;
    }

    var result = formatFunc(href, as);
    lastHref = href;
    lastAs = as;
    lastResult = result;
    return result;
  };
}

function formatUrl(url) {
  return url && typeof url === 'object' ? (0, _utils.formatWithValidation)(url) : url;
}

var observer;
var listeners = new Map();
var IntersectionObserver = true ? window.IntersectionObserver : undefined;
var prefetched = {};

function getObserver() {
  // Return shared instance of IntersectionObserver if already created
  if (observer) {
    return observer;
  } // Only create shared IntersectionObserver if supported in browser


  if (!IntersectionObserver) {
    return undefined;
  }

  return observer = new IntersectionObserver(function (entries) {
    entries.forEach(function (entry) {
      if (!listeners.has(entry.target)) {
        return;
      }

      var cb = listeners.get(entry.target);

      if (entry.isIntersecting || entry.intersectionRatio > 0) {
        observer.unobserve(entry.target);
        listeners["delete"](entry.target);
        cb();
      }
    });
  }, {
    rootMargin: '200px'
  });
}

var listenToIntersections = function listenToIntersections(el, cb) {
  var observer = getObserver();

  if (!observer) {
    return function () {};
  }

  observer.observe(el);
  listeners.set(el, cb);
  return function () {
    try {
      observer.unobserve(el);
    } catch (err) {
      console.error(err);
    }

    listeners["delete"](el);
  };
};

var Link = /*#__PURE__*/function (_react$Component) {
  _inherits(Link, _react$Component);

  var _super = _createSuper(Link);

  function Link(props) {
    var _this;

    _classCallCheck(this, Link);

    _this = _super.call(this, props);
    _this.p = void 0;

    _this.cleanUpListeners = function () {};

    _this.formatUrls = memoizedFormatUrl(function (href, asHref) {
      return {
        href: formatUrl(href),
        as: asHref ? formatUrl(asHref) : asHref
      };
    });

    _this.linkClicked = function (e) {
      var _e$currentTarget = e.currentTarget,
          nodeName = _e$currentTarget.nodeName,
          target = _e$currentTarget.target;

      if (nodeName === 'A' && (target && target !== '_self' || e.metaKey || e.ctrlKey || e.shiftKey || e.nativeEvent && e.nativeEvent.which === 2)) {
        // ignore click for new tab / new window behavior
        return;
      }

      var _this$formatUrls = _this.formatUrls(_this.props.href, _this.props.as),
          href = _this$formatUrls.href,
          as = _this$formatUrls.as;

      if (!isLocal(href)) {
        // ignore click if it's outside our scope (e.g. https://google.com)
        return;
      }

      var pathname = window.location.pathname;
      href = (0, _url.resolve)(pathname, href);
      as = as ? (0, _url.resolve)(pathname, as) : href;
      e.preventDefault(); //  avoid scroll for urls with anchor refs

      var scroll = _this.props.scroll;

      if (scroll == null) {
        scroll = as.indexOf('#') < 0;
      } // replace state instead of push if prop is present


      _router["default"][_this.props.replace ? 'replace' : 'push'](href, as, {
        shallow: _this.props.shallow
      }).then(function (success) {
        if (!success) return;

        if (scroll) {
          window.scrollTo(0, 0);
          document.body.focus();
        }
      });
    };

    if (true) {
      if (props.prefetch) {
        console.warn('Next.js auto-prefetches automatically based on viewport. The prefetch attribute is no longer needed. More: https://err.sh/zeit/next.js/prefetch-true-deprecated');
      }
    }

    _this.p = props.prefetch !== false;
    return _this;
  }

  _createClass(Link, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.cleanUpListeners();
    }
  }, {
    key: "getPaths",
    value: function getPaths() {
      var pathname = window.location.pathname;

      var _this$formatUrls2 = this.formatUrls(this.props.href, this.props.as),
          parsedHref = _this$formatUrls2.href,
          parsedAs = _this$formatUrls2.as;

      var resolvedHref = (0, _url.resolve)(pathname, parsedHref);
      return [resolvedHref, parsedAs ? (0, _url.resolve)(pathname, parsedAs) : resolvedHref];
    }
  }, {
    key: "handleRef",
    value: function handleRef(ref) {
      var _this2 = this;

      if (this.p && IntersectionObserver && ref && ref.tagName) {
        this.cleanUpListeners();
        var isPrefetched = prefetched[this.getPaths().join( // Join on an invalid URI character
        '%')];

        if (!isPrefetched) {
          this.cleanUpListeners = listenToIntersections(ref, function () {
            _this2.prefetch();
          });
        }
      }
    } // The function is memoized so that no extra lifecycles are needed
    // as per https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html

  }, {
    key: "prefetch",
    value: function prefetch(options) {
      if (!this.p || false) return; // Prefetch the JSON page if asked (only in the client)

      var paths = this.getPaths(); // We need to handle a prefetch error here since we may be
      // loading with priority which can reject but we don't
      // want to force navigation since this is only a prefetch

      _router["default"].prefetch(paths[
      /* href */
      0], paths[
      /* asPath */
      1], options)["catch"](function (err) {
        if (true) {
          // rethrow to show invalid URL errors
          throw err;
        }
      });

      prefetched[paths.join( // Join on an invalid URI character
      '%')] = true;
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var children = this.props.children;

      var _this$formatUrls3 = this.formatUrls(this.props.href, this.props.as),
          href = _this$formatUrls3.href,
          as = _this$formatUrls3.as; // Deprecated. Warning shown by propType check. If the children provided is a string (<Link>example</Link>) we wrap it in an <a> tag


      if (typeof children === 'string') {
        children = _react["default"].createElement("a", null, children);
      } // This will return the first child, if multiple are provided it will throw an error


      var child = _react.Children.only(children);

      var props = {
        ref: function ref(el) {
          _this3.handleRef(el);

          if (child && typeof child === 'object' && child.ref) {
            if (typeof child.ref === 'function') child.ref(el);else if (typeof child.ref === 'object') {
              child.ref.current = el;
            }
          }
        },
        onMouseEnter: function onMouseEnter(e) {
          if (child.props && typeof child.props.onMouseEnter === 'function') {
            child.props.onMouseEnter(e);
          }

          _this3.prefetch({
            priority: true
          });
        },
        onClick: function onClick(e) {
          if (child.props && typeof child.props.onClick === 'function') {
            child.props.onClick(e);
          }

          if (!e.defaultPrevented) {
            _this3.linkClicked(e);
          }
        }
      }; // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is
      // defined, we specify the current 'href', so that repetition is not needed by the user

      if (this.props.passHref || child.type === 'a' && !('href' in child.props)) {
        props.href = as || href;
      } // Add the ending slash to the paths. So, we can serve the
      // "<page>/index.html" directly.


      if (false) { var rewriteUrlForNextExport; }

      return _react["default"].cloneElement(child, props);
    }
  }]);

  return Link;
}(_react.Component);

if (true) {
  var warn = (0, _utils.execOnce)(console.error); // This module gets removed by webpack.IgnorePlugin

  var PropTypes = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");

  var exact = __webpack_require__(/*! prop-types-exact */ "./node_modules/prop-types-exact/build/index.js"); // @ts-ignore the property is supported, when declaring it on the class it outputs an extra bit of code which is not needed.


  Link.propTypes = exact({
    href: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,
    as: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
    prefetch: PropTypes.bool,
    replace: PropTypes.bool,
    shallow: PropTypes.bool,
    passHref: PropTypes.bool,
    scroll: PropTypes.bool,
    children: PropTypes.oneOfType([PropTypes.element, function (props, propName) {
      var value = props[propName];

      if (typeof value === 'string') {
        warn("Warning: You're using a string directly inside <Link>. This usage has been deprecated. Please add an <a> tag as child of <Link>");
      }

      return null;
    }]).isRequired
  });
}

var _default = Link;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/next/dist/client/router.js":
/*!*************************************************!*\
  !*** ./node_modules/next/dist/client/router.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _construct = __webpack_require__(/*! @babel/runtime/helpers/construct */ "./node_modules/@babel/runtime/helpers/construct.js");

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js");

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

exports.__esModule = true;
exports.useRouter = useRouter;
exports.makePublicRouterInstance = makePublicRouterInstance;
exports.createRouter = exports.withRouter = exports["default"] = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

var _router2 = _interopRequireWildcard(__webpack_require__(/*! ../next-server/lib/router/router */ "./node_modules/next/dist/next-server/lib/router/router.js"));

exports.Router = _router2["default"];
exports.NextRouter = _router2.NextRouter;

var _routerContext = __webpack_require__(/*! ../next-server/lib/router-context */ "./node_modules/next/dist/next-server/lib/router-context.js");

var _withRouter = _interopRequireDefault(__webpack_require__(/*! ./with-router */ "./node_modules/next/dist/client/with-router.js"));

exports.withRouter = _withRouter["default"];
/* global window */

var singletonRouter = {
  router: null,
  // holds the actual router instance
  readyCallbacks: [],
  ready: function ready(cb) {
    if (this.router) return cb();

    if (true) {
      this.readyCallbacks.push(cb);
    }
  }
}; // Create public properties and methods of the router in the singletonRouter

var urlPropertyFields = ['pathname', 'route', 'query', 'asPath', 'components', 'isFallback'];
var routerEvents = ['routeChangeStart', 'beforeHistoryChange', 'routeChangeComplete', 'routeChangeError', 'hashChangeStart', 'hashChangeComplete'];
var coreMethodFields = ['push', 'replace', 'reload', 'back', 'prefetch', 'beforePopState']; // Events is a static property on the router, the router doesn't have to be initialized to use it

Object.defineProperty(singletonRouter, 'events', {
  get: function get() {
    return _router2["default"].events;
  }
});
urlPropertyFields.forEach(function (field) {
  // Here we need to use Object.defineProperty because, we need to return
  // the property assigned to the actual router
  // The value might get changed as we change routes and this is the
  // proper way to access it
  Object.defineProperty(singletonRouter, field, {
    get: function get() {
      var router = getRouter();
      return router[field];
    }
  });
});
coreMethodFields.forEach(function (field) {
  // We don't really know the types here, so we add them later instead
  ;

  singletonRouter[field] = function () {
    var router = getRouter();
    return router[field].apply(router, arguments);
  };
});
routerEvents.forEach(function (event) {
  singletonRouter.ready(function () {
    _router2["default"].events.on(event, function () {
      var eventField = "on" + event.charAt(0).toUpperCase() + event.substring(1);
      var _singletonRouter = singletonRouter;

      if (_singletonRouter[eventField]) {
        try {
          _singletonRouter[eventField].apply(_singletonRouter, arguments);
        } catch (err) {
          // tslint:disable-next-line:no-console
          console.error("Error when running the Router event: " + eventField); // tslint:disable-next-line:no-console

          console.error(err.message + "\n" + err.stack);
        }
      }
    });
  });
});

function getRouter() {
  if (!singletonRouter.router) {
    var message = 'No router instance found.\n' + 'You should only use "next/router" inside the client side of your app.\n';
    throw new Error(message);
  }

  return singletonRouter.router;
} // Export the singletonRouter and this is the public API.


var _default = singletonRouter; // Reexport the withRoute HOC

exports["default"] = _default;

function useRouter() {
  return _react["default"].useContext(_routerContext.RouterContext);
} // INTERNAL APIS
// -------------
// (do not use following exports inside the app)
// Create a router and assign it as the singleton instance.
// This is used in client side when we are initilizing the app.
// This should **not** use inside the server.


var createRouter = function createRouter() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  singletonRouter.router = _construct(_router2["default"], args);
  singletonRouter.readyCallbacks.forEach(function (cb) {
    return cb();
  });
  singletonRouter.readyCallbacks = [];
  return singletonRouter.router;
}; // This function is used to create the `withRouter` router instance


exports.createRouter = createRouter;

function makePublicRouterInstance(router) {
  var _router = router;
  var instance = {};

  var _iterator = _createForOfIteratorHelper(urlPropertyFields),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var property = _step.value;

      if (typeof _router[property] === 'object') {
        instance[property] = Object.assign({}, _router[property]); // makes sure query is not stateful

        continue;
      }

      instance[property] = _router[property];
    } // Events is a static property on the router, the router doesn't have to be initialized to use it

  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  instance.events = _router2["default"].events;
  coreMethodFields.forEach(function (field) {
    instance[field] = function () {
      return _router[field].apply(_router, arguments);
    };
  });
  return instance;
}

/***/ }),

/***/ "./node_modules/next/dist/client/with-router.js":
/*!******************************************************!*\
  !*** ./node_modules/next/dist/client/with-router.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

exports.__esModule = true;
exports["default"] = withRouter;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

var _router = __webpack_require__(/*! ./router */ "./node_modules/next/dist/client/router.js");

function withRouter(ComposedComponent) {
  function WithRouterWrapper(props) {
    return _react["default"].createElement(ComposedComponent, Object.assign({
      router: (0, _router.useRouter)()
    }, props));
  }

  WithRouterWrapper.getInitialProps = ComposedComponent.getInitialProps // This is needed to allow checking for custom getInitialProps in _app
  ;
  WithRouterWrapper.origGetInitialProps = ComposedComponent.origGetInitialProps;

  if (true) {
    var name = ComposedComponent.displayName || ComposedComponent.name || 'Unknown';
    WithRouterWrapper.displayName = "withRouter(" + name + ")";
  }

  return WithRouterWrapper;
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/amp-context.js":
/*!***************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/amp-context.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var React = __importStar(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

exports.AmpStateContext = React.createContext({});

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/amp.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/amp.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var react_1 = __importDefault(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

var amp_context_1 = __webpack_require__(/*! ./amp-context */ "./node_modules/next/dist/next-server/lib/amp-context.js");

function isInAmpMode() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$ampFirst = _ref.ampFirst,
      ampFirst = _ref$ampFirst === void 0 ? false : _ref$ampFirst,
      _ref$hybrid = _ref.hybrid,
      hybrid = _ref$hybrid === void 0 ? false : _ref$hybrid,
      _ref$hasQuery = _ref.hasQuery,
      hasQuery = _ref$hasQuery === void 0 ? false : _ref$hasQuery;

  return ampFirst || hybrid && hasQuery;
}

exports.isInAmpMode = isInAmpMode;

function useAmp() {
  // Don't assign the context value to a variable to save bytes
  return isInAmpMode(react_1["default"].useContext(amp_context_1.AmpStateContext));
}

exports.useAmp = useAmp;

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/head-manager-context.js":
/*!************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/head-manager-context.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var React = __importStar(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

exports.HeadManagerContext = React.createContext(null);

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/head.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/head.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var react_1 = __importDefault(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

var side_effect_1 = __importDefault(__webpack_require__(/*! ./side-effect */ "./node_modules/next/dist/next-server/lib/side-effect.js"));

var amp_context_1 = __webpack_require__(/*! ./amp-context */ "./node_modules/next/dist/next-server/lib/amp-context.js");

var head_manager_context_1 = __webpack_require__(/*! ./head-manager-context */ "./node_modules/next/dist/next-server/lib/head-manager-context.js");

var amp_1 = __webpack_require__(/*! ./amp */ "./node_modules/next/dist/next-server/lib/amp.js");

function defaultHead() {
  var inAmpMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var head = [react_1["default"].createElement("meta", {
    charSet: "utf-8"
  })];

  if (!inAmpMode) {
    head.push(react_1["default"].createElement("meta", {
      name: "viewport",
      content: "width=device-width"
    }));
  }

  return head;
}

exports.defaultHead = defaultHead;

function onlyReactElement(list, child) {
  // React children can be "string" or "number" in this case we ignore them for backwards compat
  if (typeof child === 'string' || typeof child === 'number') {
    return list;
  } // Adds support for React.Fragment


  if (child.type === react_1["default"].Fragment) {
    return list.concat(react_1["default"].Children.toArray(child.props.children).reduce(function (fragmentList, fragmentChild) {
      if (typeof fragmentChild === 'string' || typeof fragmentChild === 'number') {
        return fragmentList;
      }

      return fragmentList.concat(fragmentChild);
    }, []));
  }

  return list.concat(child);
}

var METATYPES = ['name', 'httpEquiv', 'charSet', 'itemProp'];
/*
 returns a function for filtering head child elements
 which shouldn't be duplicated, like <title/>
 Also adds support for deduplicated `key` properties
*/

function unique() {
  var keys = new Set();
  var tags = new Set();
  var metaTypes = new Set();
  var metaCategories = {};
  return function (h) {
    var unique = true;

    if (h.key && typeof h.key !== 'number' && h.key.indexOf('$') > 0) {
      var key = h.key.slice(h.key.indexOf('$') + 1);

      if (keys.has(key)) {
        unique = false;
      } else {
        keys.add(key);
      }
    } // eslint-disable-next-line default-case


    switch (h.type) {
      case 'title':
      case 'base':
        if (tags.has(h.type)) {
          unique = false;
        } else {
          tags.add(h.type);
        }

        break;

      case 'meta':
        for (var i = 0, len = METATYPES.length; i < len; i++) {
          var metatype = METATYPES[i];
          if (!h.props.hasOwnProperty(metatype)) continue;

          if (metatype === 'charSet') {
            if (metaTypes.has(metatype)) {
              unique = false;
            } else {
              metaTypes.add(metatype);
            }
          } else {
            var category = h.props[metatype];
            var categories = metaCategories[metatype] || new Set();

            if (categories.has(category)) {
              unique = false;
            } else {
              categories.add(category);
              metaCategories[metatype] = categories;
            }
          }
        }

        break;
    }

    return unique;
  };
}
/**
 *
 * @param headElements List of multiple <Head> instances
 */


function reduceComponents(headElements, props) {
  return headElements.reduce(function (list, headElement) {
    var headElementChildren = react_1["default"].Children.toArray(headElement.props.children);
    return list.concat(headElementChildren);
  }, []).reduce(onlyReactElement, []).reverse().concat(defaultHead(props.inAmpMode)).filter(unique()).reverse().map(function (c, i) {
    var key = c.key || i;
    return react_1["default"].cloneElement(c, {
      key: key
    });
  });
}

var Effect = side_effect_1["default"]();
/**
 * This component injects elements to `<head>` of your page.
 * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.
 */

function Head(_ref) {
  var children = _ref.children;
  return react_1["default"].createElement(amp_context_1.AmpStateContext.Consumer, null, function (ampState) {
    return react_1["default"].createElement(head_manager_context_1.HeadManagerContext.Consumer, null, function (updateHead) {
      return react_1["default"].createElement(Effect, {
        reduceComponentsToState: reduceComponents,
        handleStateChange: updateHead,
        inAmpMode: amp_1.isInAmpMode(ampState)
      }, children);
    });
  });
}

Head.rewind = Effect.rewind;
exports["default"] = Head;

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/mitt.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/mitt.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) Jason Miller (https://jasonformat.com/)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

Object.defineProperty(exports, "__esModule", {
  value: true
});

function mitt() {
  var all = Object.create(null);
  return {
    on: function on(type, handler) {
      ;
      (all[type] || (all[type] = [])).push(handler);
    },
    off: function off(type, handler) {
      if (all[type]) {
        // tslint:disable-next-line:no-bitwise
        all[type].splice(all[type].indexOf(handler) >>> 0, 1);
      }
    },
    emit: function emit(type) {
      for (var _len = arguments.length, evts = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        evts[_key - 1] = arguments[_key];
      }

      // eslint-disable-next-line array-callback-return
      ;
      (all[type] || []).slice().map(function (handler) {
        handler.apply(void 0, evts);
      });
    }
  };
}

exports["default"] = mitt;

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router-context.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router-context.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var React = __importStar(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

exports.RouterContext = React.createContext(null);

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/router.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/router.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regeneratorRuntime = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");

var _slicedToArray = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js");

var _classCallCheck = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");

var _createClass = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var url_1 = __webpack_require__(/*! url */ "./node_modules/native-url/dist/index.js");

var mitt_1 = __importDefault(__webpack_require__(/*! ../mitt */ "./node_modules/next/dist/next-server/lib/mitt.js"));

var utils_1 = __webpack_require__(/*! ../utils */ "./node_modules/next/dist/next-server/lib/utils.js");

var is_dynamic_1 = __webpack_require__(/*! ./utils/is-dynamic */ "./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js");

var route_matcher_1 = __webpack_require__(/*! ./utils/route-matcher */ "./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js");

var route_regex_1 = __webpack_require__(/*! ./utils/route-regex */ "./node_modules/next/dist/next-server/lib/router/utils/route-regex.js");

function addBasePath(path) {
  // variable is always a string
  var p = "";
  return path.indexOf(p) !== 0 ? p + path : path;
}

function toRoute(path) {
  return path.replace(/\/$/, '') || '/';
}

var prepareRoute = function prepareRoute(path) {
  return toRoute(!path || path === '/' ? '/index' : path);
};

function fetchNextData(pathname, query, isServerRender, cb) {
  var attempts = isServerRender ? 3 : 1;

  function getResponse() {
    return fetch(utils_1.formatWithValidation({
      // @ts-ignore __NEXT_DATA__
      pathname: "/_next/data/".concat(__NEXT_DATA__.buildId).concat(pathname, ".json"),
      query: query
    }), {
      // Cookies are required to be present for Next.js' SSG "Preview Mode".
      // Cookies may also be required for `getServerSideProps`.
      //
      // > `fetch` won’t send cookies, unless you set the credentials init
      // > option.
      // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
      //
      // > For maximum browser compatibility when it comes to sending &
      // > receiving cookies, always supply the `credentials: 'same-origin'`
      // > option instead of relying on the default.
      // https://github.com/github/fetch#caveats
      credentials: 'same-origin'
    }).then(function (res) {
      if (!res.ok) {
        if (--attempts > 0 && res.status >= 500) {
          return getResponse();
        }

        throw new Error("Failed to load static props");
      }

      return res.json();
    });
  }

  return getResponse().then(function (data) {
    return cb ? cb(data) : data;
  })["catch"](function (err) {
    // We should only trigger a server-side transition if this was caused
    // on a client-side transition. Otherwise, we'd get into an infinite
    // loop.
    if (!isServerRender) {
      ;
      err.code = 'PAGE_LOAD_ERROR';
    }

    throw err;
  });
}

var Router = /*#__PURE__*/function () {
  function Router(pathname, query, as, _ref) {
    var _this = this;

    var initialProps = _ref.initialProps,
        pageLoader = _ref.pageLoader,
        App = _ref.App,
        wrapApp = _ref.wrapApp,
        Component = _ref.Component,
        err = _ref.err,
        subscription = _ref.subscription,
        isFallback = _ref.isFallback;

    _classCallCheck(this, Router);

    // Static Data Cache
    this.sdc = {};

    this.onPopState = function (e) {
      if (!e.state) {
        // We get state as undefined for two reasons.
        //  1. With older safari (< 8) and older chrome (< 34)
        //  2. When the URL changed with #
        //
        // In the both cases, we don't need to proceed and change the route.
        // (as it's already changed)
        // But we can simply replace the state with the new changes.
        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.
        // So, doing the following for (1) does no harm.
        var _pathname = _this.pathname,
            _query = _this.query;

        _this.changeState('replaceState', utils_1.formatWithValidation({
          pathname: _pathname,
          query: _query
        }), utils_1.getURL());

        return;
      } // Make sure we don't re-render on initial load,
      // can be caused by navigating back from an external site


      if (e.state && _this.isSsr && e.state.as === _this.asPath && url_1.parse(e.state.url).pathname === _this.pathname) {
        return;
      } // If the downstream application returns falsy, return.
      // They will then be responsible for handling the event.


      if (_this._bps && !_this._bps(e.state)) {
        return;
      }

      var _e$state = e.state,
          url = _e$state.url,
          as = _e$state.as,
          options = _e$state.options;

      if (true) {
        if (typeof url === 'undefined' || typeof as === 'undefined') {
          console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/zeit/next.js/popstate-state-empty');
        }
      }

      _this.replace(url, as, options);
    };

    this._getStaticData = function (asPath) {
      var pathname = prepareRoute(url_1.parse(asPath).pathname);
      return  false ? undefined : fetchNextData(pathname, null, _this.isSsr, function (data) {
        return _this.sdc[pathname] = data;
      });
    };

    this._getServerData = function (asPath) {
      var _url_1$parse = url_1.parse(asPath, true),
          pathname = _url_1$parse.pathname,
          query = _url_1$parse.query;

      pathname = prepareRoute(pathname);
      return fetchNextData(pathname, query, _this.isSsr);
    }; // represents the current component key


    this.route = toRoute(pathname); // set up the component cache (by route keys)

    this.components = {}; // We should not keep the cache, if there's an error
    // Otherwise, this cause issues when when going back and
    // come again to the errored page.

    if (pathname !== '/_error') {
      this.components[this.route] = {
        Component: Component,
        props: initialProps,
        err: err,
        __N_SSG: initialProps && initialProps.__N_SSG,
        __N_SSP: initialProps && initialProps.__N_SSP
      };
    }

    this.components['/_app'] = {
      Component: App
    }; // Backwards compat for Router.router.events
    // TODO: Should be remove the following major version as it was never documented

    this.events = Router.events;
    this.pageLoader = pageLoader;
    this.pathname = pathname;
    this.query = query; // if auto prerendered and dynamic route wait to update asPath
    // until after mount to prevent hydration mismatch

    this.asPath = // @ts-ignore this is temporarily global (attached to window)
    is_dynamic_1.isDynamicRoute(pathname) && __NEXT_DATA__.autoExport ? pathname : as;
    this.sub = subscription;
    this.clc = null;
    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating
    // back from external site

    this.isSsr = true;
    this.isFallback = isFallback;

    if (true) {
      // in order for `e.state` to work on the `onpopstate` event
      // we have to register the initial route upon initialization
      this.changeState('replaceState', utils_1.formatWithValidation({
        pathname: pathname,
        query: query
      }), as);
      window.addEventListener('popstate', this.onPopState);
    }
  } // @deprecated backwards compatibility even though it's a private method.


  _createClass(Router, [{
    key: "update",
    value: function update(route, mod) {
      var Component = mod["default"] || mod;
      var data = this.components[route];

      if (!data) {
        throw new Error("Cannot update unavailable route: ".concat(route));
      }

      var newData = Object.assign(Object.assign({}, data), {
        Component: Component,
        __N_SSG: mod.__N_SSG,
        __N_SSP: mod.__N_SSP
      });
      this.components[route] = newData; // pages/_app.js updated

      if (route === '/_app') {
        this.notify(this.components[this.route]);
        return;
      }

      if (route === this.route) {
        this.notify(newData);
      }
    }
  }, {
    key: "reload",
    value: function reload() {
      window.location.reload();
    }
    /**
     * Go back in history
     */

  }, {
    key: "back",
    value: function back() {
      window.history.back();
    }
    /**
     * Performs a `pushState` with arguments
     * @param url of the route
     * @param as masks `url` for the browser
     * @param options object you can define `shallow` and other options
     */

  }, {
    key: "push",
    value: function push(url) {
      var as = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : url;
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this.change('pushState', url, as, options);
    }
    /**
     * Performs a `replaceState` with arguments
     * @param url of the route
     * @param as masks `url` for the browser
     * @param options object you can define `shallow` and other options
     */

  }, {
    key: "replace",
    value: function replace(url) {
      var as = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : url;
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this.change('replaceState', url, as, options);
    }
  }, {
    key: "change",
    value: function change(method, _url, _as, options) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        if (!options._h) {
          _this2.isSsr = false;
        } // marking route changes as a navigation start entry


        if (utils_1.ST) {
          performance.mark('routeChange');
        } // If url and as provided as an object representation,
        // we'll format them into the string version here.


        var url = typeof _url === 'object' ? utils_1.formatWithValidation(_url) : _url;
        var as = typeof _as === 'object' ? utils_1.formatWithValidation(_as) : _as; // Add the ending slash to the paths. So, we can serve the
        // "<page>/index.html" directly for the SSR page.

        if (false) { var rewriteUrlForNextExport; }

        _this2.abortComponentLoad(as); // If the url change is only related to a hash change
        // We should not proceed. We should only change the state.
        // WARNING: `_h` is an internal option for handing Next.js client-side
        // hydration. Your app should _never_ use this property. It may change at
        // any time without notice.


        if (!options._h && _this2.onlyAHashChange(as)) {
          _this2.asPath = as;
          Router.events.emit('hashChangeStart', as);

          _this2.changeState(method, url, addBasePath(as), options);

          _this2.scrollToHash(as);

          Router.events.emit('hashChangeComplete', as);
          return resolve(true);
        }

        var _url_1$parse2 = url_1.parse(url, true),
            pathname = _url_1$parse2.pathname,
            query = _url_1$parse2.query,
            protocol = _url_1$parse2.protocol;

        if (!pathname || protocol) {
          if (true) {
            throw new Error("Invalid href passed to router: ".concat(url, " https://err.sh/zeit/next.js/invalid-href-passed"));
          }

          return resolve(false);
        } // If asked to change the current URL we should reload the current page
        // (not location.reload() but reload getInitialProps and other Next.js stuffs)
        // We also need to set the method = replaceState always
        // as this should not go into the history (That's how browsers work)
        // We should compare the new asPath to the current asPath, not the url


        if (!_this2.urlIsNew(as)) {
          method = 'replaceState';
        }

        var route = toRoute(pathname);
        var _options$shallow = options.shallow,
            shallow = _options$shallow === void 0 ? false : _options$shallow;

        if (is_dynamic_1.isDynamicRoute(route)) {
          var _url_1$parse3 = url_1.parse(as),
              asPathname = _url_1$parse3.pathname;

          var routeRegex = route_regex_1.getRouteRegex(route);
          var routeMatch = route_matcher_1.getRouteMatcher(routeRegex)(asPathname);

          if (!routeMatch) {
            var missingParams = Object.keys(routeRegex.groups).filter(function (param) {
              return !query[param];
            });

            if (missingParams.length > 0) {
              if (true) {
                console.warn("Mismatching `as` and `href` failed to manually provide " + "the params: ".concat(missingParams.join(', '), " in the `href`'s `query`"));
              }

              return reject(new Error("The provided `as` value (".concat(asPathname, ") is incompatible with the `href` value (").concat(route, "). ") + "Read more: https://err.sh/zeit/next.js/incompatible-href-as"));
            }
          } else {
            // Merge params into `query`, overwriting any specified in search
            Object.assign(query, routeMatch);
          }
        }

        Router.events.emit('routeChangeStart', as); // If shallow is true and the route exists in the router cache we reuse the previous result

        _this2.getRouteInfo(route, pathname, query, as, shallow).then(function (routeInfo) {
          var error = routeInfo.error;

          if (error && error.cancelled) {
            return resolve(false);
          }

          Router.events.emit('beforeHistoryChange', as);

          _this2.changeState(method, url, addBasePath(as), options);

          if (true) {
            var appComp = _this2.components['/_app'].Component;
            window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;
          }

          _this2.set(route, pathname, query, as, routeInfo);

          if (error) {
            Router.events.emit('routeChangeError', error, as);
            throw error;
          }

          Router.events.emit('routeChangeComplete', as);
          return resolve(true);
        }, reject);
      });
    }
  }, {
    key: "changeState",
    value: function changeState(method, url, as) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      if (true) {
        if (typeof window.history === 'undefined') {
          console.error("Warning: window.history is not available.");
          return;
        }

        if (typeof window.history[method] === 'undefined') {
          console.error("Warning: window.history.".concat(method, " is not available"));
          return;
        }
      }

      if (method !== 'pushState' || utils_1.getURL() !== as) {
        window.history[method]({
          url: url,
          as: as,
          options: options
        }, // Most browsers currently ignores this parameter, although they may use it in the future.
        // Passing the empty string here should be safe against future changes to the method.
        // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState
        '', as);
      }
    }
  }, {
    key: "getRouteInfo",
    value: function getRouteInfo(route, pathname, query, as) {
      var _this3 = this;

      var shallow = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      var cachedRouteInfo = this.components[route]; // If there is a shallow route transition possible
      // If the route is already rendered on the screen.

      if (shallow && cachedRouteInfo && this.route === route) {
        return Promise.resolve(cachedRouteInfo);
      }

      var handleError = function handleError(err, loadErrorFail) {
        return new Promise(function (resolve) {
          if (err.code === 'PAGE_LOAD_ERROR' || loadErrorFail) {
            // If we can't load the page it could be one of following reasons
            //  1. Page doesn't exists
            //  2. Page does exist in a different zone
            //  3. Internal error while loading the page
            // So, doing a hard reload is the proper way to deal with this.
            window.location.href = as; // Changing the URL doesn't block executing the current code path.
            // So, we need to mark it as a cancelled error and stop the routing logic.

            err.cancelled = true; // @ts-ignore TODO: fix the control flow here

            return resolve({
              error: err
            });
          }

          if (err.cancelled) {
            // @ts-ignore TODO: fix the control flow here
            return resolve({
              error: err
            });
          }

          resolve(_this3.fetchComponent('/_error').then(function (res) {
            var Component = res.page;
            var routeInfo = {
              Component: Component,
              err: err
            };
            return new Promise(function (resolve) {
              _this3.getInitialProps(Component, {
                err: err,
                pathname: pathname,
                query: query
              }).then(function (props) {
                routeInfo.props = props;
                routeInfo.error = err;
                resolve(routeInfo);
              }, function (gipErr) {
                console.error('Error in error page `getInitialProps`: ', gipErr);
                routeInfo.error = err;
                routeInfo.props = {};
                resolve(routeInfo);
              });
            });
          })["catch"](function (err) {
            return handleError(err, true);
          }));
        });
      };

      return new Promise(function (resolve, reject) {
        if (cachedRouteInfo) {
          return resolve(cachedRouteInfo);
        }

        _this3.fetchComponent(route).then(function (res) {
          return resolve({
            Component: res.page,
            __N_SSG: res.mod.__N_SSG,
            __N_SSP: res.mod.__N_SSP
          });
        }, reject);
      }).then(function (routeInfo) {
        var Component = routeInfo.Component,
            __N_SSG = routeInfo.__N_SSG,
            __N_SSP = routeInfo.__N_SSP;

        if (true) {
          var _require = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js"),
              isValidElementType = _require.isValidElementType;

          if (!isValidElementType(Component)) {
            throw new Error("The default export is not a React Component in page: \"".concat(pathname, "\""));
          }
        }

        return _this3._getData(function () {
          return __N_SSG ? _this3._getStaticData(as) : __N_SSP ? _this3._getServerData(as) : _this3.getInitialProps(Component, // we provide AppTree later so this needs to be `any`
          {
            pathname: pathname,
            query: query,
            asPath: as
          });
        }).then(function (props) {
          routeInfo.props = props;
          _this3.components[route] = routeInfo;
          return routeInfo;
        });
      })["catch"](handleError);
    }
  }, {
    key: "set",
    value: function set(route, pathname, query, as, data) {
      this.isFallback = false;
      this.route = route;
      this.pathname = pathname;
      this.query = query;
      this.asPath = as;
      this.notify(data);
    }
    /**
     * Callback to execute before replacing router state
     * @param cb callback to be executed
     */

  }, {
    key: "beforePopState",
    value: function beforePopState(cb) {
      this._bps = cb;
    }
  }, {
    key: "onlyAHashChange",
    value: function onlyAHashChange(as) {
      if (!this.asPath) return false;

      var _this$asPath$split = this.asPath.split('#'),
          _this$asPath$split2 = _slicedToArray(_this$asPath$split, 2),
          oldUrlNoHash = _this$asPath$split2[0],
          oldHash = _this$asPath$split2[1];

      var _as$split = as.split('#'),
          _as$split2 = _slicedToArray(_as$split, 2),
          newUrlNoHash = _as$split2[0],
          newHash = _as$split2[1]; // Makes sure we scroll to the provided hash if the url/hash are the same


      if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {
        return true;
      } // If the urls are change, there's more than a hash change


      if (oldUrlNoHash !== newUrlNoHash) {
        return false;
      } // If the hash has changed, then it's a hash only change.
      // This check is necessary to handle both the enter and
      // leave hash === '' cases. The identity case falls through
      // and is treated as a next reload.


      return oldHash !== newHash;
    }
  }, {
    key: "scrollToHash",
    value: function scrollToHash(as) {
      var _as$split3 = as.split('#'),
          _as$split4 = _slicedToArray(_as$split3, 2),
          hash = _as$split4[1]; // Scroll to top if the hash is just `#` with no value


      if (hash === '') {
        window.scrollTo(0, 0);
        return;
      } // First we check if the element by id is found


      var idEl = document.getElementById(hash);

      if (idEl) {
        idEl.scrollIntoView();
        return;
      } // If there's no element with the id, we check the `name` property
      // To mirror browsers


      var nameEl = document.getElementsByName(hash)[0];

      if (nameEl) {
        nameEl.scrollIntoView();
      }
    }
  }, {
    key: "urlIsNew",
    value: function urlIsNew(asPath) {
      return this.asPath !== asPath;
    }
    /**
     * Prefetch page code, you may wait for the data during page rendering.
     * This feature only works in production!
     * @param url the href of prefetched page
     * @param asPath the as path of the prefetched page
     */

  }, {
    key: "prefetch",
    value: function prefetch(url) {
      var _this4 = this;

      var asPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : url;
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return new Promise(function (resolve, reject) {
        var _url_1$parse4 = url_1.parse(url),
            pathname = _url_1$parse4.pathname,
            protocol = _url_1$parse4.protocol;

        if (!pathname || protocol) {
          if (true) {
            throw new Error("Invalid href passed to router: ".concat(url, " https://err.sh/zeit/next.js/invalid-href-passed"));
          }

          return;
        } // Prefetch is not supported in development mode because it would trigger on-demand-entries


        if (true) {
          return;
        }

        Promise.all([_this4.pageLoader.prefetchData(url, asPath), _this4.pageLoader[options.priority ? 'loadPage' : 'prefetch'](toRoute(pathname))]).then(function () {
          return resolve();
        }, reject);
      });
    }
  }, {
    key: "fetchComponent",
    value: function fetchComponent(route) {
      var cancelled, cancel, componentResult, error;
      return _regeneratorRuntime.async(function fetchComponent$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              cancelled = false;

              cancel = this.clc = function () {
                cancelled = true;
              };

              _context.next = 4;
              return _regeneratorRuntime.awrap(this.pageLoader.loadPage(route));

            case 4:
              componentResult = _context.sent;

              if (!cancelled) {
                _context.next = 9;
                break;
              }

              error = new Error("Abort fetching component for route: \"".concat(route, "\""));
              error.cancelled = true;
              throw error;

            case 9:
              if (cancel === this.clc) {
                this.clc = null;
              }

              return _context.abrupt("return", componentResult);

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, null, Promise);
    }
  }, {
    key: "_getData",
    value: function _getData(fn) {
      var _this5 = this;

      var cancelled = false;

      var cancel = function cancel() {
        cancelled = true;
      };

      this.clc = cancel;
      return fn().then(function (data) {
        if (cancel === _this5.clc) {
          _this5.clc = null;
        }

        if (cancelled) {
          var err = new Error('Loading initial props cancelled');
          err.cancelled = true;
          throw err;
        }

        return data;
      });
    }
  }, {
    key: "getInitialProps",
    value: function getInitialProps(Component, ctx) {
      var App = this.components['/_app'].Component;

      var AppTree = this._wrapApp(App);

      ctx.AppTree = AppTree;
      return utils_1.loadGetInitialProps(App, {
        AppTree: AppTree,
        Component: Component,
        router: this,
        ctx: ctx
      });
    }
  }, {
    key: "abortComponentLoad",
    value: function abortComponentLoad(as) {
      if (this.clc) {
        var e = new Error('Route Cancelled');
        e.cancelled = true;
        Router.events.emit('routeChangeError', e, as);
        this.clc();
        this.clc = null;
      }
    }
  }, {
    key: "notify",
    value: function notify(data) {
      this.sub(data, this.components['/_app'].Component);
    }
  }], [{
    key: "_rewriteUrlForNextExport",
    value: function _rewriteUrlForNextExport(url) {
      if (false) { var rewriteUrlForNextExport; } else {
        return url;
      }
    }
  }]);

  return Router;
}();

exports["default"] = Router;
Router.events = mitt_1["default"]();

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
}); // Identify /[param]/ in route string

var TEST_ROUTE = /\/\[[^/]+?\](?=\/|$)/;

function isDynamicRoute(route) {
  return TEST_ROUTE.test(route);
}

exports.isDynamicRoute = isDynamicRoute;

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function getRouteMatcher(routeRegex) {
  var re = routeRegex.re,
      groups = routeRegex.groups;
  return function (pathname) {
    var routeMatch = re.exec(pathname);

    if (!routeMatch) {
      return false;
    }

    var decode = decodeURIComponent;
    var params = {};
    Object.keys(groups).forEach(function (slugName) {
      var g = groups[slugName];
      var m = routeMatch[g.pos];

      if (m !== undefined) {
        params[slugName] = ~m.indexOf('/') ? m.split('/').map(function (entry) {
          return decode(entry);
        }) : g.repeat ? [decode(m)] : decode(m);
      }
    });
    return params;
  };
}

exports.getRouteMatcher = getRouteMatcher;

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/route-regex.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/route-regex.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function getRouteRegex(normalizedRoute) {
  // Escape all characters that could be considered RegEx
  var escapedRoute = (normalizedRoute.replace(/\/$/, '') || '/').replace(/[|\\{}()[\]^$+*?.-]/g, '\\$&');
  var groups = {};
  var groupIndex = 1;
  var parameterizedRoute = escapedRoute.replace(/\/\\\[([^/]+?)\\\](?=\/|$)/g, function (_, $1) {
    var isCatchAll = /^(\\\.){3}/.test($1);
    groups[$1 // Un-escape key
    .replace(/\\([|\\{}()[\]^$+*?.-])/g, '$1').replace(/^\.{3}/, '') // eslint-disable-next-line no-sequences
    ] = {
      pos: groupIndex++,
      repeat: isCatchAll
    };
    return isCatchAll ? '/(.+?)' : '/([^/]+?)';
  });
  return {
    re: new RegExp('^' + parameterizedRoute + '(?:/)?$', 'i'),
    groups: groups
  };
}

exports.getRouteRegex = getRouteRegex;

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/side-effect.js":
/*!***************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/side-effect.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _classCallCheck = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");

var _assertThisInitialized = __webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js");

var _createClass = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");

var _possibleConstructorReturn = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");

var _getPrototypeOf = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");

var _inherits = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js");

var _toConsumableArray = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var react_1 = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var isServer = false;

exports["default"] = function () {
  var mountedInstances = new Set();
  var state;

  function emitChange(component) {
    state = component.props.reduceComponentsToState(_toConsumableArray(mountedInstances), component.props);

    if (component.props.handleStateChange) {
      component.props.handleStateChange(state);
    }
  }

  return /*#__PURE__*/function (_react_1$Component) {
    _inherits(_class, _react_1$Component);

    var _super = _createSuper(_class);

    _createClass(_class, null, [{
      key: "rewind",
      // Used when server rendering
      value: function rewind() {
        var recordedState = state;
        state = undefined;
        mountedInstances.clear();
        return recordedState;
      }
    }]);

    function _class(props) {
      var _this;

      _classCallCheck(this, _class);

      _this = _super.call(this, props);

      if (isServer) {
        mountedInstances.add(_assertThisInitialized(_this));
        emitChange(_assertThisInitialized(_this));
      }

      return _this;
    }

    _createClass(_class, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        mountedInstances.add(this);
        emitChange(this);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        emitChange(this);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        mountedInstances["delete"](this);
        emitChange(this);
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }]);

    return _class;
  }(react_1.Component);
};

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/utils.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regeneratorRuntime = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});

var url_1 = __webpack_require__(/*! url */ "./node_modules/native-url/dist/index.js");
/**
 * Utils
 */


function execOnce(fn) {
  var _this = this;

  var used = false;
  var result = null;
  return function () {
    if (!used) {
      used = true;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      result = fn.apply(_this, args);
    }

    return result;
  };
}

exports.execOnce = execOnce;

function getLocationOrigin() {
  var _window$location = window.location,
      protocol = _window$location.protocol,
      hostname = _window$location.hostname,
      port = _window$location.port;
  return "".concat(protocol, "//").concat(hostname).concat(port ? ':' + port : '');
}

exports.getLocationOrigin = getLocationOrigin;

function getURL() {
  var href = window.location.href;
  var origin = getLocationOrigin();
  return href.substring(origin.length);
}

exports.getURL = getURL;

function getDisplayName(Component) {
  return typeof Component === 'string' ? Component : Component.displayName || Component.name || 'Unknown';
}

exports.getDisplayName = getDisplayName;

function isResSent(res) {
  return res.finished || res.headersSent;
}

exports.isResSent = isResSent;

function loadGetInitialProps(App, ctx) {
  var _a, message, res, props, _message;

  return _regeneratorRuntime.async(function loadGetInitialProps$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (false) {}

          if (!((_a = App.prototype) === null || _a === void 0 ? void 0 : _a.getInitialProps)) {
            _context.next = 4;
            break;
          }

          message = "\"".concat(getDisplayName(App), ".getInitialProps()\" is defined as an instance method - visit https://err.sh/zeit/next.js/get-initial-props-as-an-instance-method for more information.");
          throw new Error(message);

        case 4:
          // when called from _app `ctx` is nested in `ctx`
          res = ctx.res || ctx.ctx && ctx.ctx.res;

          if (App.getInitialProps) {
            _context.next = 12;
            break;
          }

          if (!(ctx.ctx && ctx.Component)) {
            _context.next = 11;
            break;
          }

          _context.next = 9;
          return _regeneratorRuntime.awrap(loadGetInitialProps(ctx.Component, ctx.ctx));

        case 9:
          _context.t0 = _context.sent;
          return _context.abrupt("return", {
            pageProps: _context.t0
          });

        case 11:
          return _context.abrupt("return", {});

        case 12:
          _context.next = 14;
          return _regeneratorRuntime.awrap(App.getInitialProps(ctx));

        case 14:
          props = _context.sent;

          if (!(res && isResSent(res))) {
            _context.next = 17;
            break;
          }

          return _context.abrupt("return", props);

        case 17:
          if (props) {
            _context.next = 20;
            break;
          }

          _message = "\"".concat(getDisplayName(App), ".getInitialProps()\" should resolve to an object. But found \"").concat(props, "\" instead.");
          throw new Error(_message);

        case 20:
          if (true) {
            if (Object.keys(props).length === 0 && !ctx.ctx) {
              console.warn("".concat(getDisplayName(App), " returned an empty object from `getInitialProps`. This de-optimizes and prevents automatic static optimization. https://err.sh/zeit/next.js/empty-object-getInitialProps"));
            }
          }

          return _context.abrupt("return", props);

        case 22:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, null, Promise);
}

exports.loadGetInitialProps = loadGetInitialProps;
exports.urlObjectKeys = ['auth', 'hash', 'host', 'hostname', 'href', 'path', 'pathname', 'port', 'protocol', 'query', 'search', 'slashes'];

function formatWithValidation(url, options) {
  if (true) {
    if (url !== null && typeof url === 'object') {
      Object.keys(url).forEach(function (key) {
        if (exports.urlObjectKeys.indexOf(key) === -1) {
          console.warn("Unknown key passed via urlObject into url.format: ".concat(key));
        }
      });
    }
  }

  return url_1.format(url, options);
}

exports.formatWithValidation = formatWithValidation;
exports.SP = typeof performance !== 'undefined';
exports.ST = exports.SP && typeof performance.mark === 'function' && typeof performance.measure === 'function';

/***/ }),

/***/ "./node_modules/next/link.js":
/*!***********************************!*\
  !*** ./node_modules/next/link.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./dist/client/link */ "./node_modules/next/dist/client/link.js")


/***/ }),

/***/ "./node_modules/next/node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/next/node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./node_modules/node-libs-browser/mock/empty.js":
/*!******************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/empty.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./node_modules/parse-asn1/aesid.json":
/*!********************************************!*\
  !*** ./node_modules/parse-asn1/aesid.json ***!
  \********************************************/
/*! exports provided: 2.16.840.1.101.3.4.1.1, 2.16.840.1.101.3.4.1.2, 2.16.840.1.101.3.4.1.3, 2.16.840.1.101.3.4.1.4, 2.16.840.1.101.3.4.1.21, 2.16.840.1.101.3.4.1.22, 2.16.840.1.101.3.4.1.23, 2.16.840.1.101.3.4.1.24, 2.16.840.1.101.3.4.1.41, 2.16.840.1.101.3.4.1.42, 2.16.840.1.101.3.4.1.43, 2.16.840.1.101.3.4.1.44, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"2.16.840.1.101.3.4.1.1\":\"aes-128-ecb\",\"2.16.840.1.101.3.4.1.2\":\"aes-128-cbc\",\"2.16.840.1.101.3.4.1.3\":\"aes-128-ofb\",\"2.16.840.1.101.3.4.1.4\":\"aes-128-cfb\",\"2.16.840.1.101.3.4.1.21\":\"aes-192-ecb\",\"2.16.840.1.101.3.4.1.22\":\"aes-192-cbc\",\"2.16.840.1.101.3.4.1.23\":\"aes-192-ofb\",\"2.16.840.1.101.3.4.1.24\":\"aes-192-cfb\",\"2.16.840.1.101.3.4.1.41\":\"aes-256-ecb\",\"2.16.840.1.101.3.4.1.42\":\"aes-256-cbc\",\"2.16.840.1.101.3.4.1.43\":\"aes-256-ofb\",\"2.16.840.1.101.3.4.1.44\":\"aes-256-cfb\"}");

/***/ }),

/***/ "./node_modules/parse-asn1/asn1.js":
/*!*****************************************!*\
  !*** ./node_modules/parse-asn1/asn1.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.


var asn1 = __webpack_require__(/*! asn1.js */ "./node_modules/asn1.js/lib/asn1.js")

exports.certificate = __webpack_require__(/*! ./certificate */ "./node_modules/parse-asn1/certificate.js")

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})


/***/ }),

/***/ "./node_modules/parse-asn1/certificate.js":
/*!************************************************!*\
  !*** ./node_modules/parse-asn1/certificate.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen



var asn = __webpack_require__(/*! asn1.js */ "./node_modules/asn1.js/lib/asn1.js")

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  })
})

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(
    this.key('type').objid(),
    this.key('value').any()
  )
})

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional(),
    this.key('curve').objid().optional()
  )
})

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue)
})

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName)
})

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  })
})

var Validity = asn.define('Validity', function () {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  )
})

var Extension = asn.define('Extension', function () {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  )
})

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(
    this.key('version').explicit(0).int().optional(),
    this.key('serialNumber').int(),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
    this.key('extensions').explicit(3).seqof(Extension).optional()
  )
})

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signatureValue').bitstr()
  )
})

module.exports = X509Certificate


/***/ }),

/***/ "./node_modules/parse-asn1/fixProc.js":
/*!********************************************!*\
  !*** ./node_modules/parse-asn1/fixProc.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m
var evp = __webpack_require__(/*! evp_bytestokey */ "./node_modules/evp_bytestokey/index.js")
var ciphers = __webpack_require__(/*! browserify-aes */ "./node_modules/browserify-aes/browser.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = new Buffer(match2[2].replace(/[\r\n]/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = Buffer.from(match[2], 'hex')
    var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1]
  return {
    tag: tag,
    data: decrypted
  }
}


/***/ }),

/***/ "./node_modules/parse-asn1/index.js":
/*!******************************************!*\
  !*** ./node_modules/parse-asn1/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var asn1 = __webpack_require__(/*! ./asn1 */ "./node_modules/parse-asn1/asn1.js")
var aesid = __webpack_require__(/*! ./aesid.json */ "./node_modules/parse-asn1/aesid.json")
var fixProc = __webpack_require__(/*! ./fixProc */ "./node_modules/parse-asn1/fixProc.js")
var ciphers = __webpack_require__(/*! browserify-aes */ "./node_modules/browserify-aes/browser.js")
var compat = __webpack_require__(/*! pbkdf2 */ "./node_modules/pbkdf2/browser.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
      // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der')
      }
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}


/***/ }),

/***/ "./node_modules/path-browserify/index.js":
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/pbkdf2/browser.js":
/*!****************************************!*\
  !*** ./node_modules/pbkdf2/browser.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports.pbkdf2 = __webpack_require__(/*! ./lib/async */ "./node_modules/pbkdf2/lib/async.js")
exports.pbkdf2Sync = __webpack_require__(/*! ./lib/sync */ "./node_modules/pbkdf2/lib/sync-browser.js")


/***/ }),

/***/ "./node_modules/pbkdf2/lib/async.js":
/*!******************************************!*\
  !*** ./node_modules/pbkdf2/lib/async.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {var checkParameters = __webpack_require__(/*! ./precondition */ "./node_modules/pbkdf2/lib/precondition.js")
var defaultEncoding = __webpack_require__(/*! ./default-encoding */ "./node_modules/pbkdf2/lib/default-encoding.js")
var sync = __webpack_require__(/*! ./sync */ "./node_modules/pbkdf2/lib/sync-browser.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer

var ZERO_BUF
var subtle = global.crypto && global.crypto.subtle
var toBrowser = {
  'sha': 'SHA-1',
  'sha-1': 'SHA-1',
  'sha1': 'SHA-1',
  'sha256': 'SHA-256',
  'sha-256': 'SHA-256',
  'sha384': 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  'sha512': 'SHA-512'
}
var checks = []
function checkNative (algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false)
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false)
  }
  if (checks[algo] !== undefined) {
    return checks[algo]
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
    .then(function () {
      return true
    }).catch(function () {
      return false
    })
  checks[algo] = prom
  return prom
}

function browserPbkdf2 (password, salt, iterations, length, algo) {
  return subtle.importKey(
    'raw', password, {name: 'PBKDF2'}, false, ['deriveBits']
  ).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3)
  }).then(function (res) {
    return Buffer.from(res)
  })
}

function resolvePromise (promise, callback) {
  promise.then(function (out) {
    process.nextTick(function () {
      callback(null, out)
    })
  }, function (e) {
    process.nextTick(function () {
      callback(e)
    })
  })
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  digest = digest || 'sha1'
  var algo = toBrowser[digest.toLowerCase()]

  if (!algo || typeof global.Promise !== 'function') {
    return process.nextTick(function () {
      var out
      try {
        out = sync(password, salt, iterations, keylen, digest)
      } catch (e) {
        return callback(e)
      }
      callback(null, out)
    })
  }

  checkParameters(password, salt, iterations, keylen)
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

    return sync(password, salt, iterations, keylen, digest)
  }), callback)
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../next/node_modules/webpack/buildin/global.js */ "./node_modules/next/node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/pbkdf2/lib/default-encoding.js":
/*!*****************************************************!*\
  !*** ./node_modules/pbkdf2/lib/default-encoding.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var defaultEncoding
/* istanbul ignore next */
if (true) {
  defaultEncoding = 'utf-8'
} else { var pVersionMajor; }
module.exports = defaultEncoding


/***/ }),

/***/ "./node_modules/pbkdf2/lib/precondition.js":
/*!*************************************************!*\
  !*** ./node_modules/pbkdf2/lib/precondition.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

function checkBuffer (buf, name) {
  if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {
    throw new TypeError(name + ' must be a buffer or string')
  }
}

module.exports = function (password, salt, iterations, keylen) {
  checkBuffer(password, 'Password')
  checkBuffer(salt, 'Salt')

  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/pbkdf2/lib/sync-browser.js":
/*!*************************************************!*\
  !*** ./node_modules/pbkdf2/lib/sync-browser.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var md5 = __webpack_require__(/*! create-hash/md5 */ "./node_modules/create-hash/md5.js")
var RIPEMD160 = __webpack_require__(/*! ripemd160 */ "./node_modules/ripemd160/index.js")
var sha = __webpack_require__(/*! sha.js */ "./node_modules/sha.js/index.js")

var checkParameters = __webpack_require__(/*! ./precondition */ "./node_modules/pbkdf2/lib/precondition.js")
var defaultEncoding = __webpack_require__(/*! ./default-encoding */ "./node_modules/pbkdf2/lib/default-encoding.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer
var ZEROS = Buffer.alloc(128)
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
}

function Hmac (alg, key, saltLen) {
  var hash = getDigest(alg)
  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  if (key.length > blocksize) {
    key = hash(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
  ipad.copy(ipad1, 0, 0, blocksize)
  this.ipad1 = ipad1
  this.ipad2 = ipad
  this.opad = opad
  this.alg = alg
  this.blocksize = blocksize
  this.hash = hash
  this.size = sizes[alg]
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize)
  var h = this.hash(ipad)
  h.copy(this.opad, this.blocksize)
  return this.hash(this.opad)
}

function getDigest (alg) {
  function shaFunc (data) {
    return sha(alg).update(data).digest()
  }
  function rmd160Func (data) {
    return new RIPEMD160().update(data).digest()
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
  if (alg === 'md5') return md5
  return shaFunc
}

function pbkdf2 (password, salt, iterations, keylen, digest) {
  checkParameters(password, salt, iterations, keylen)

  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

  digest = digest || 'sha1'

  var hmac = new Hmac(digest, password, salt.length)

  var DK = Buffer.allocUnsafe(keylen)
  var block1 = Buffer.allocUnsafe(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var destPos = 0
  var hLen = sizes[digest]
  var l = Math.ceil(keylen / hLen)

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)

    var T = hmac.run(block1, hmac.ipad1)
    var U = T

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2)
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    T.copy(DK, destPos)
    destPos += hLen
  }

  return DK
}

module.exports = pbkdf2


/***/ }),

/***/ "./node_modules/process-nextick-args/index.js":
/*!****************************************************!*\
  !*** ./node_modules/process-nextick-args/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (typeof process === 'undefined' ||
    !process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/prop-types-exact/build/helpers/isPlainObject.js":
/*!**********************************************************************!*\
  !*** ./node_modules/prop-types-exact/build/helpers/isPlainObject.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports['default'] = isPlainObject;
function isPlainObject(x) {
  return x && (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object' && !Array.isArray(x);
}
module.exports = exports['default'];
//# sourceMappingURL=isPlainObject.js.map

/***/ }),

/***/ "./node_modules/prop-types-exact/build/index.js":
/*!******************************************************!*\
  !*** ./node_modules/prop-types-exact/build/index.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports['default'] = forbidExtraProps;

var _object = __webpack_require__(/*! object.assign */ "./node_modules/next/dist/build/polyfills/object.assign/index.js");

var _object2 = _interopRequireDefault(_object);

var _has = __webpack_require__(/*! has */ "./node_modules/has/src/index.js");

var _has2 = _interopRequireDefault(_has);

var _isPlainObject = __webpack_require__(/*! ./helpers/isPlainObject */ "./node_modules/prop-types-exact/build/helpers/isPlainObject.js");

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var zeroWidthSpace = '\u200B';
var specialProperty = 'prop-types-exact: ' + zeroWidthSpace;
var semaphore = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' ? Symbol['for'](specialProperty) : /* istanbul ignore next */specialProperty;

function brand(fn) {
  return (0, _object2['default'])(fn, _defineProperty({}, specialProperty, semaphore));
}

function isBranded(value) {
  return value && value[specialProperty] === semaphore;
}

function forbidExtraProps(propTypes) {
  if (!(0, _isPlainObject2['default'])(propTypes)) {
    throw new TypeError('given propTypes must be an object');
  }
  if ((0, _has2['default'])(propTypes, specialProperty) && !isBranded(propTypes[specialProperty])) {
    throw new TypeError('Against all odds, you created a propType for a prop that uses both the zero-width space and our custom string - which, sadly, conflicts with `prop-types-exact`');
  }

  return (0, _object2['default'])({}, propTypes, _defineProperty({}, specialProperty, brand(function () {
    function forbidUnknownProps(props, _, componentName) {
      var unknownProps = Object.keys(props).filter(function (prop) {
        return !(0, _has2['default'])(propTypes, prop);
      });
      if (unknownProps.length > 0) {
        return new TypeError(String(componentName) + ': unknown props found: ' + String(unknownProps.join(', ')));
      }
      return null;
    }

    return forbidUnknownProps;
  }())));
}
module.exports = exports['default'];
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/prop-types/checkPropTypes.js":
/*!*********************************************************************************************************!*\
  !*** delegated ./node_modules/prop-types/checkPropTypes.js from dll-reference dll_2adc2403d89adc16ead0 ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(/*! dll-reference dll_2adc2403d89adc16ead0 */ "dll-reference dll_2adc2403d89adc16ead0"))("./node_modules/prop-types/checkPropTypes.js");

/***/ }),

/***/ "./node_modules/prop-types/factoryWithTypeCheckers.js":
/*!************************************************************!*\
  !*** ./node_modules/prop-types/factoryWithTypeCheckers.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactIs = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");
var assign = __webpack_require__(/*! object-assign */ "./node_modules/next/dist/build/polyfills/object-assign.js");

var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ "./node_modules/prop-types/lib/ReactPropTypesSecret.js");
var checkPropTypes = __webpack_require__(/*! ./checkPropTypes */ "./node_modules/prop-types/checkPropTypes.js");

var has = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning = function() {};

if (true) {
  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (true) {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if ( true && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            printWarning(
              'You are manually calling a React.PropTypes validation ' +
              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!ReactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (true) {
        if (arguments.length > 1) {
          printWarning(
            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
          );
        } else {
          printWarning('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
       true ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : undefined;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
        );
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // falsy value can't be a Symbol
    if (!propValue) {
      return false;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),

/***/ "./node_modules/prop-types/index.js":
/*!******************************************!*\
  !*** ./node_modules/prop-types/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (true) {
  var ReactIs = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = __webpack_require__(/*! ./factoryWithTypeCheckers */ "./node_modules/prop-types/factoryWithTypeCheckers.js")(ReactIs.isElement, throwOnDirectAccess);
} else {}


/***/ }),

/***/ "./node_modules/prop-types/lib/ReactPropTypesSecret.js":
/*!*******************************************************************************************************************!*\
  !*** delegated ./node_modules/prop-types/lib/ReactPropTypesSecret.js from dll-reference dll_2adc2403d89adc16ead0 ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(/*! dll-reference dll_2adc2403d89adc16ead0 */ "dll-reference dll_2adc2403d89adc16ead0"))("./node_modules/prop-types/lib/ReactPropTypesSecret.js");

/***/ }),

/***/ "./node_modules/public-encrypt/browser.js":
/*!************************************************!*\
  !*** ./node_modules/public-encrypt/browser.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports.publicEncrypt = __webpack_require__(/*! ./publicEncrypt */ "./node_modules/public-encrypt/publicEncrypt.js")
exports.privateDecrypt = __webpack_require__(/*! ./privateDecrypt */ "./node_modules/public-encrypt/privateDecrypt.js")

exports.privateEncrypt = function privateEncrypt (key, buf) {
  return exports.publicEncrypt(key, buf, true)
}

exports.publicDecrypt = function publicDecrypt (key, buf) {
  return exports.privateDecrypt(key, buf, true)
}


/***/ }),

/***/ "./node_modules/public-encrypt/mgf.js":
/*!********************************************!*\
  !*** ./node_modules/public-encrypt/mgf.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var createHash = __webpack_require__(/*! create-hash */ "./node_modules/create-hash/browser.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer

module.exports = function (seed, len) {
  var t = Buffer.alloc(0)
  var i = 0
  var c
  while (t.length < len) {
    c = i2ops(i++)
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
  }
  return t.slice(0, len)
}

function i2ops (c) {
  var out = Buffer.allocUnsafe(4)
  out.writeUInt32BE(c, 0)
  return out
}


/***/ }),

/***/ "./node_modules/public-encrypt/privateDecrypt.js":
/*!*******************************************************!*\
  !*** ./node_modules/public-encrypt/privateDecrypt.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parseKeys = __webpack_require__(/*! parse-asn1 */ "./node_modules/parse-asn1/index.js")
var mgf = __webpack_require__(/*! ./mgf */ "./node_modules/public-encrypt/mgf.js")
var xor = __webpack_require__(/*! ./xor */ "./node_modules/public-encrypt/xor.js")
var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js")
var crt = __webpack_require__(/*! browserify-rsa */ "./node_modules/browserify-rsa/index.js")
var createHash = __webpack_require__(/*! create-hash */ "./node_modules/create-hash/browser.js")
var withPublic = __webpack_require__(/*! ./withPublic */ "./node_modules/public-encrypt/withPublic.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer

module.exports = function privateDecrypt (privateKey, enc, reverse) {
  var padding
  if (privateKey.padding) {
    padding = privateKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }

  var key = parseKeys(privateKey)
  var k = key.modulus.byteLength()
  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error')
  }
  var msg
  if (reverse) {
    msg = withPublic(new BN(enc), key)
  } else {
    msg = crt(enc, key)
  }
  var zBuffer = Buffer.alloc(k - msg.length)
  msg = Buffer.concat([zBuffer, msg], k)
  if (padding === 4) {
    return oaep(key, msg)
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    return msg
  } else {
    throw new Error('unknown padding')
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  if (msg[0] !== 0) {
    throw new Error('decryption error')
  }
  var maskedSeed = msg.slice(1, hLen + 1)
  var maskedDb = msg.slice(hLen + 1)
  var seed = xor(maskedSeed, mgf(maskedDb, hLen))
  var db = xor(maskedDb, mgf(seed, k - hLen - 1))
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error')
  }
  var i = hLen
  while (db[i] === 0) {
    i++
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error')
  }
  return db.slice(i)
}

function pkcs1 (key, msg, reverse) {
  var p1 = msg.slice(0, 2)
  var i = 2
  var status = 0
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++
      break
    }
  }
  var ps = msg.slice(2, i - 1)

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
    status++
  }
  if (ps.length < 8) {
    status++
  }
  if (status) {
    throw new Error('decryption error')
  }
  return msg.slice(i)
}
function compare (a, b) {
  a = Buffer.from(a)
  b = Buffer.from(b)
  var dif = 0
  var len = a.length
  if (a.length !== b.length) {
    dif++
    len = Math.min(a.length, b.length)
  }
  var i = -1
  while (++i < len) {
    dif += (a[i] ^ b[i])
  }
  return dif
}


/***/ }),

/***/ "./node_modules/public-encrypt/publicEncrypt.js":
/*!******************************************************!*\
  !*** ./node_modules/public-encrypt/publicEncrypt.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parseKeys = __webpack_require__(/*! parse-asn1 */ "./node_modules/parse-asn1/index.js")
var randomBytes = __webpack_require__(/*! randombytes */ "./node_modules/randombytes/browser.js")
var createHash = __webpack_require__(/*! create-hash */ "./node_modules/create-hash/browser.js")
var mgf = __webpack_require__(/*! ./mgf */ "./node_modules/public-encrypt/mgf.js")
var xor = __webpack_require__(/*! ./xor */ "./node_modules/public-encrypt/xor.js")
var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js")
var withPublic = __webpack_require__(/*! ./withPublic */ "./node_modules/public-encrypt/withPublic.js")
var crt = __webpack_require__(/*! browserify-rsa */ "./node_modules/browserify-rsa/index.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer

module.exports = function publicEncrypt (publicKey, msg, reverse) {
  var padding
  if (publicKey.padding) {
    padding = publicKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }
  var key = parseKeys(publicKey)
  var paddedMsg
  if (padding === 4) {
    paddedMsg = oaep(key, msg)
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    paddedMsg = new BN(msg)
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus')
    }
  } else {
    throw new Error('unknown padding')
  }
  if (reverse) {
    return crt(paddedMsg, key)
  } else {
    return withPublic(paddedMsg, key)
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var mLen = msg.length
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  var hLen2 = 2 * hLen
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long')
  }
  var ps = Buffer.alloc(k - mLen - hLen2 - 2)
  var dblen = k - hLen - 1
  var seed = randomBytes(hLen)
  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
  var maskedSeed = xor(seed, mgf(maskedDb, hLen))
  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
}
function pkcs1 (key, msg, reverse) {
  var mLen = msg.length
  var k = key.modulus.byteLength()
  if (mLen > k - 11) {
    throw new Error('message too long')
  }
  var ps
  if (reverse) {
    ps = Buffer.alloc(k - mLen - 3, 0xff)
  } else {
    ps = nonZero(k - mLen - 3)
  }
  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
}
function nonZero (len) {
  var out = Buffer.allocUnsafe(len)
  var i = 0
  var cache = randomBytes(len * 2)
  var cur = 0
  var num
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2)
      cur = 0
    }
    num = cache[cur++]
    if (num) {
      out[i++] = num
    }
  }
  return out
}


/***/ }),

/***/ "./node_modules/public-encrypt/withPublic.js":
/*!***************************************************!*\
  !*** ./node_modules/public-encrypt/withPublic.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer

function withPublic (paddedMsg, key) {
  return Buffer.from(paddedMsg
    .toRed(BN.mont(key.modulus))
    .redPow(new BN(key.publicExponent))
    .fromRed()
    .toArray())
}

module.exports = withPublic


/***/ }),

/***/ "./node_modules/public-encrypt/xor.js":
/*!********************************************!*\
  !*** ./node_modules/public-encrypt/xor.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function xor (a, b) {
  var len = a.length
  var i = -1
  while (++i < len) {
    a[i] ^= b[i]
  }
  return a
}


/***/ }),

/***/ "./node_modules/querystring-es3/decode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/decode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),

/***/ "./node_modules/querystring-es3/encode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/encode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),

/***/ "./node_modules/querystring-es3/index.js":
/*!***********************************************!*\
  !*** ./node_modules/querystring-es3/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(/*! ./decode */ "./node_modules/querystring-es3/decode.js");
exports.encode = exports.stringify = __webpack_require__(/*! ./encode */ "./node_modules/querystring-es3/encode.js");


/***/ }),

/***/ "./node_modules/randombytes/browser.js":
/*!*********************************************!*\
  !*** ./node_modules/randombytes/browser.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../next/node_modules/webpack/buildin/global.js */ "./node_modules/next/node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/randomfill/browser.js":
/*!********************************************!*\
  !*** ./node_modules/randomfill/browser.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}
var safeBuffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js")
var randombytes = __webpack_require__(/*! randombytes */ "./node_modules/randombytes/browser.js")
var Buffer = safeBuffer.Buffer
var kBufferMaxLength = safeBuffer.kMaxLength
var crypto = global.crypto || global.msCrypto
var kMaxUint32 = Math.pow(2, 32) - 1
function assertOffset (offset, length) {
  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number')
  }

  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32')
  }

  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range')
  }
}

function assertSize (size, offset, length) {
  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number')
  }

  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32')
  }

  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small')
  }
}
if ((crypto && crypto.getRandomValues) || !true) {
  exports.randomFill = randomFill
  exports.randomFillSync = randomFillSync
} else {
  exports.randomFill = oldBrowser
  exports.randomFillSync = oldBrowser
}
function randomFill (buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  if (typeof offset === 'function') {
    cb = offset
    offset = 0
    size = buf.length
  } else if (typeof size === 'function') {
    cb = size
    size = buf.length - offset
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function')
  }
  assertOffset(offset, buf.length)
  assertSize(size, offset, buf.length)
  return actualFill(buf, offset, size, cb)
}

function actualFill (buf, offset, size, cb) {
  if (true) {
    var ourBuf = buf.buffer
    var uint = new Uint8Array(ourBuf, offset, size)
    crypto.getRandomValues(uint)
    if (cb) {
      process.nextTick(function () {
        cb(null, buf)
      })
      return
    }
    return buf
  }
  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err)
      }
      bytes.copy(buf, offset)
      cb(null, buf)
    })
    return
  }
  var bytes = randombytes(size)
  bytes.copy(buf, offset)
  return buf
}
function randomFillSync (buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0
  }
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  assertOffset(offset, buf.length)

  if (size === undefined) size = buf.length - offset

  assertSize(size, offset, buf.length)

  return actualFill(buf, offset, size)
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../next/node_modules/webpack/buildin/global.js */ "./node_modules/next/node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/react-is/cjs/react-is.development.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-is/cjs/react-is.development.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.8.6
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;

var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' ||
  // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
}

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

{
  var printWarning = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

var lowPriorityWarning$1 = lowPriorityWarning;

function typeOf(object) {
  if (typeof object === 'object' && object !== null) {
    var $$typeof = object.$$typeof;
    switch ($$typeof) {
      case REACT_ELEMENT_TYPE:
        var type = object.type;

        switch (type) {
          case REACT_ASYNC_MODE_TYPE:
          case REACT_CONCURRENT_MODE_TYPE:
          case REACT_FRAGMENT_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_SUSPENSE_TYPE:
            return type;
          default:
            var $$typeofType = type && type.$$typeof;

            switch ($$typeofType) {
              case REACT_CONTEXT_TYPE:
              case REACT_FORWARD_REF_TYPE:
              case REACT_PROVIDER_TYPE:
                return $$typeofType;
              default:
                return $$typeof;
            }
        }
      case REACT_LAZY_TYPE:
      case REACT_MEMO_TYPE:
      case REACT_PORTAL_TYPE:
        return $$typeof;
    }
  }

  return undefined;
}

// AsyncMode is deprecated along with isAsyncMode
var AsyncMode = REACT_ASYNC_MODE_TYPE;
var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
var ContextConsumer = REACT_CONTEXT_TYPE;
var ContextProvider = REACT_PROVIDER_TYPE;
var Element = REACT_ELEMENT_TYPE;
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Fragment = REACT_FRAGMENT_TYPE;
var Lazy = REACT_LAZY_TYPE;
var Memo = REACT_MEMO_TYPE;
var Portal = REACT_PORTAL_TYPE;
var Profiler = REACT_PROFILER_TYPE;
var StrictMode = REACT_STRICT_MODE_TYPE;
var Suspense = REACT_SUSPENSE_TYPE;

var hasWarnedAboutDeprecatedIsAsyncMode = false;

// AsyncMode should be deprecated
function isAsyncMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
      hasWarnedAboutDeprecatedIsAsyncMode = true;
      lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    }
  }
  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
}
function isConcurrentMode(object) {
  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
}
function isContextConsumer(object) {
  return typeOf(object) === REACT_CONTEXT_TYPE;
}
function isContextProvider(object) {
  return typeOf(object) === REACT_PROVIDER_TYPE;
}
function isElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}
function isForwardRef(object) {
  return typeOf(object) === REACT_FORWARD_REF_TYPE;
}
function isFragment(object) {
  return typeOf(object) === REACT_FRAGMENT_TYPE;
}
function isLazy(object) {
  return typeOf(object) === REACT_LAZY_TYPE;
}
function isMemo(object) {
  return typeOf(object) === REACT_MEMO_TYPE;
}
function isPortal(object) {
  return typeOf(object) === REACT_PORTAL_TYPE;
}
function isProfiler(object) {
  return typeOf(object) === REACT_PROFILER_TYPE;
}
function isStrictMode(object) {
  return typeOf(object) === REACT_STRICT_MODE_TYPE;
}
function isSuspense(object) {
  return typeOf(object) === REACT_SUSPENSE_TYPE;
}

exports.typeOf = typeOf;
exports.AsyncMode = AsyncMode;
exports.ConcurrentMode = ConcurrentMode;
exports.ContextConsumer = ContextConsumer;
exports.ContextProvider = ContextProvider;
exports.Element = Element;
exports.ForwardRef = ForwardRef;
exports.Fragment = Fragment;
exports.Lazy = Lazy;
exports.Memo = Memo;
exports.Portal = Portal;
exports.Profiler = Profiler;
exports.StrictMode = StrictMode;
exports.Suspense = Suspense;
exports.isValidElementType = isValidElementType;
exports.isAsyncMode = isAsyncMode;
exports.isConcurrentMode = isConcurrentMode;
exports.isContextConsumer = isContextConsumer;
exports.isContextProvider = isContextProvider;
exports.isElement = isElement;
exports.isForwardRef = isForwardRef;
exports.isFragment = isFragment;
exports.isLazy = isLazy;
exports.isMemo = isMemo;
exports.isPortal = isPortal;
exports.isProfiler = isProfiler;
exports.isStrictMode = isStrictMode;
exports.isSuspense = isSuspense;
  })();
}


/***/ }),

/***/ "./node_modules/react-is/index.js":
/*!****************************************!*\
  !*** ./node_modules/react-is/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ "./node_modules/react-is/cjs/react-is.development.js");
}


/***/ }),

/***/ "./node_modules/react/index.js":
/*!*******************************************************************************************!*\
  !*** delegated ./node_modules/react/index.js from dll-reference dll_2adc2403d89adc16ead0 ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(/*! dll-reference dll_2adc2403d89adc16ead0 */ "dll-reference dll_2adc2403d89adc16ead0"))("./node_modules/react/index.js");

/***/ }),

/***/ "./node_modules/readable-stream/duplex-browser.js":
/*!********************************************************!*\
  !*** ./node_modules/readable-stream/duplex-browser.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib/_stream_duplex.js */ "./node_modules/readable-stream/lib/_stream_duplex.js");


/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_duplex.js":
/*!************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_duplex.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var pna = __webpack_require__(/*! process-nextick-args */ "./node_modules/process-nextick-args/index.js");
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = Object.create(__webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js"));
util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

var Readable = __webpack_require__(/*! ./_stream_readable */ "./node_modules/readable-stream/lib/_stream_readable.js");
var Writable = __webpack_require__(/*! ./_stream_writable */ "./node_modules/readable-stream/lib/_stream_writable.js");

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_passthrough.js":
/*!*****************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_passthrough.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__(/*! ./_stream_transform */ "./node_modules/readable-stream/lib/_stream_transform.js");

/*<replacement>*/
var util = Object.create(__webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js"));
util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_readable.js":
/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_readable.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var pna = __webpack_require__(/*! process-nextick-args */ "./node_modules/process-nextick-args/index.js");
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js");
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__(/*! events */ "./node_modules/events/events.js").EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(/*! ./internal/streams/stream */ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js");
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = Object.create(__webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js"));
util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(/*! util */ 2);
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = __webpack_require__(/*! ./internal/streams/BufferList */ "./node_modules/readable-stream/lib/internal/streams/BufferList.js");
var destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ "./node_modules/readable-stream/lib/internal/streams/destroy.js");
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js");

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ "./node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js");

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ "./node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../next/node_modules/webpack/buildin/global.js */ "./node_modules/next/node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_transform.js":
/*!***************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_transform.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js");

/*<replacement>*/
var util = Object.create(__webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js"));
util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_writable.js":
/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_writable.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



/*<replacement>*/

var pna = __webpack_require__(/*! process-nextick-args */ "./node_modules/process-nextick-args/index.js");
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite =  false ? undefined : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = Object.create(__webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js"));
util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(/*! util-deprecate */ "./node_modules/util-deprecate/browser.js")
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(/*! ./internal/streams/stream */ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js");
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ "./node_modules/readable-stream/lib/internal/streams/destroy.js");

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js");

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js");

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../next/node_modules/webpack/buildin/global.js */ "./node_modules/next/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/BufferList.js":
/*!*************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/BufferList.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var util = __webpack_require__(/*! util */ 3);

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/destroy.js":
/*!**********************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/destroy.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*<replacement>*/

var pna = __webpack_require__(/*! process-nextick-args */ "./node_modules/process-nextick-args/index.js");
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/stream-browser.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! events */ "./node_modules/events/events.js").EventEmitter;


/***/ }),

/***/ "./node_modules/readable-stream/passthrough.js":
/*!*****************************************************!*\
  !*** ./node_modules/readable-stream/passthrough.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./readable */ "./node_modules/readable-stream/readable-browser.js").PassThrough


/***/ }),

/***/ "./node_modules/readable-stream/readable-browser.js":
/*!**********************************************************!*\
  !*** ./node_modules/readable-stream/readable-browser.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ./lib/_stream_readable.js */ "./node_modules/readable-stream/lib/_stream_readable.js");
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(/*! ./lib/_stream_writable.js */ "./node_modules/readable-stream/lib/_stream_writable.js");
exports.Duplex = __webpack_require__(/*! ./lib/_stream_duplex.js */ "./node_modules/readable-stream/lib/_stream_duplex.js");
exports.Transform = __webpack_require__(/*! ./lib/_stream_transform.js */ "./node_modules/readable-stream/lib/_stream_transform.js");
exports.PassThrough = __webpack_require__(/*! ./lib/_stream_passthrough.js */ "./node_modules/readable-stream/lib/_stream_passthrough.js");


/***/ }),

/***/ "./node_modules/readable-stream/transform.js":
/*!***************************************************!*\
  !*** ./node_modules/readable-stream/transform.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./readable */ "./node_modules/readable-stream/readable-browser.js").Transform


/***/ }),

/***/ "./node_modules/readable-stream/writable-browser.js":
/*!**********************************************************!*\
  !*** ./node_modules/readable-stream/writable-browser.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib/_stream_writable.js */ "./node_modules/readable-stream/lib/_stream_writable.js");


/***/ }),

/***/ "./node_modules/reflect-metadata/Reflect.js":
/*!**************************************************!*\
  !*** ./node_modules/reflect-metadata/Reflect.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global) {/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var Reflect;
(function (Reflect) {
    // Metadata Proposal
    // https://rbuckton.github.io/reflect-metadata/
    (function (factory) {
        var root = typeof global === "object" ? global :
            typeof self === "object" ? self :
                typeof this === "object" ? this :
                    Function("return this;")();
        var exporter = makeExporter(Reflect);
        if (typeof root.Reflect === "undefined") {
            root.Reflect = Reflect;
        }
        else {
            exporter = makeExporter(root.Reflect, exporter);
        }
        factory(exporter);
        function makeExporter(target, previous) {
            return function (key, value) {
                if (typeof target[key] !== "function") {
                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });
                }
                if (previous)
                    previous(key, value);
            };
        }
    })(function (exporter) {
        var hasOwn = Object.prototype.hasOwnProperty;
        // feature test for Symbol support
        var supportsSymbol = typeof Symbol === "function";
        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
        var supportsCreate = typeof Object.create === "function"; // feature test for Object.create support
        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support
        var downLevel = !supportsCreate && !supportsProto;
        var HashMap = {
            // create an object in dictionary mode (a.k.a. "slow" mode in v8)
            create: supportsCreate
                ? function () { return MakeDictionary(Object.create(null)); }
                : supportsProto
                    ? function () { return MakeDictionary({ __proto__: null }); }
                    : function () { return MakeDictionary({}); },
            has: downLevel
                ? function (map, key) { return hasOwn.call(map, key); }
                : function (map, key) { return key in map; },
            get: downLevel
                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }
                : function (map, key) { return map[key]; },
        };
        // Load global or shim versions of Map, Set, and WeakMap
        var functionPrototype = Object.getPrototypeOf(Function);
        var usePolyfill = typeof process === "object" && process.env && process.env["REFLECT_METADATA_USE_MAP_POLYFILL"] === "true";
        var _Map = !usePolyfill && typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
        var _Set = !usePolyfill && typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
        var _WeakMap = !usePolyfill && typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
        // [[Metadata]] internal slot
        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots
        var Metadata = new _WeakMap();
        /**
         * Applies a set of decorators to a property of a target object.
         * @param decorators An array of decorators.
         * @param target The target object.
         * @param propertyKey (Optional) The property key to decorate.
         * @param attributes (Optional) The property descriptor for the target key.
         * @remarks Decorators are applied in reverse order.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     Example = Reflect.decorate(decoratorsArray, Example);
         *
         *     // property (on constructor)
         *     Reflect.decorate(decoratorsArray, Example, "staticProperty");
         *
         *     // property (on prototype)
         *     Reflect.decorate(decoratorsArray, Example.prototype, "property");
         *
         *     // method (on constructor)
         *     Object.defineProperty(Example, "staticMethod",
         *         Reflect.decorate(decoratorsArray, Example, "staticMethod",
         *             Object.getOwnPropertyDescriptor(Example, "staticMethod")));
         *
         *     // method (on prototype)
         *     Object.defineProperty(Example.prototype, "method",
         *         Reflect.decorate(decoratorsArray, Example.prototype, "method",
         *             Object.getOwnPropertyDescriptor(Example.prototype, "method")));
         *
         */
        function decorate(decorators, target, propertyKey, attributes) {
            if (!IsUndefined(propertyKey)) {
                if (!IsArray(decorators))
                    throw new TypeError();
                if (!IsObject(target))
                    throw new TypeError();
                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))
                    throw new TypeError();
                if (IsNull(attributes))
                    attributes = undefined;
                propertyKey = ToPropertyKey(propertyKey);
                return DecorateProperty(decorators, target, propertyKey, attributes);
            }
            else {
                if (!IsArray(decorators))
                    throw new TypeError();
                if (!IsConstructor(target))
                    throw new TypeError();
                return DecorateConstructor(decorators, target);
            }
        }
        exporter("decorate", decorate);
        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)
        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata
        /**
         * A default metadata decorator factory that can be used on a class, class member, or parameter.
         * @param metadataKey The key for the metadata entry.
         * @param metadataValue The value for the metadata entry.
         * @returns A decorator function.
         * @remarks
         * If `metadataKey` is already defined for the target and target key, the
         * metadataValue for that key will be overwritten.
         * @example
         *
         *     // constructor
         *     @Reflect.metadata(key, value)
         *     class Example {
         *     }
         *
         *     // property (on constructor, TypeScript only)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         static staticProperty;
         *     }
         *
         *     // property (on prototype, TypeScript only)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         property;
         *     }
         *
         *     // method (on constructor)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         static staticMethod() { }
         *     }
         *
         *     // method (on prototype)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         method() { }
         *     }
         *
         */
        function metadata(metadataKey, metadataValue) {
            function decorator(target, propertyKey) {
                if (!IsObject(target))
                    throw new TypeError();
                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))
                    throw new TypeError();
                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
            }
            return decorator;
        }
        exporter("metadata", metadata);
        /**
         * Define a unique metadata entry on the target.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param metadataValue A value that contains attached metadata.
         * @param target The target object on which to define metadata.
         * @param propertyKey (Optional) The property key for the target.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     Reflect.defineMetadata("custom:annotation", options, Example);
         *
         *     // property (on constructor)
         *     Reflect.defineMetadata("custom:annotation", options, Example, "staticProperty");
         *
         *     // property (on prototype)
         *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "property");
         *
         *     // method (on constructor)
         *     Reflect.defineMetadata("custom:annotation", options, Example, "staticMethod");
         *
         *     // method (on prototype)
         *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "method");
         *
         *     // decorator factory as metadata-producing annotation.
         *     function MyAnnotation(options): Decorator {
         *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
         *     }
         *
         */
        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
        }
        exporter("defineMetadata", defineMetadata);
        /**
         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.hasMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.hasMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.hasMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function hasMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryHasMetadata(metadataKey, target, propertyKey);
        }
        exporter("hasMetadata", hasMetadata);
        /**
         * Gets a value indicating whether the target object has the provided metadata key defined.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function hasOwnMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);
        }
        exporter("hasOwnMetadata", hasOwnMetadata);
        /**
         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function getMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryGetMetadata(metadataKey, target, propertyKey);
        }
        exporter("getMetadata", getMetadata);
        /**
         * Gets the metadata value for the provided metadata key on the target object.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getOwnMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function getOwnMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);
        }
        exporter("getOwnMetadata", getOwnMetadata);
        /**
         * Gets the metadata keys defined on the target object or its prototype chain.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns An array of unique metadata keys.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getMetadataKeys(Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getMetadataKeys(Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getMetadataKeys(Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getMetadataKeys(Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getMetadataKeys(Example.prototype, "method");
         *
         */
        function getMetadataKeys(target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryMetadataKeys(target, propertyKey);
        }
        exporter("getMetadataKeys", getMetadataKeys);
        /**
         * Gets the unique metadata keys defined on the target object.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns An array of unique metadata keys.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getOwnMetadataKeys(Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getOwnMetadataKeys(Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getOwnMetadataKeys(Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getOwnMetadataKeys(Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getOwnMetadataKeys(Example.prototype, "method");
         *
         */
        function getOwnMetadataKeys(target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryOwnMetadataKeys(target, propertyKey);
        }
        exporter("getOwnMetadataKeys", getOwnMetadataKeys);
        /**
         * Deletes the metadata entry from the target object with the provided key.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns `true` if the metadata entry was found and deleted; otherwise, false.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.deleteMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function deleteMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return false;
            if (!metadataMap.delete(metadataKey))
                return false;
            if (metadataMap.size > 0)
                return true;
            var targetMetadata = Metadata.get(target);
            targetMetadata.delete(propertyKey);
            if (targetMetadata.size > 0)
                return true;
            Metadata.delete(target);
            return true;
        }
        exporter("deleteMetadata", deleteMetadata);
        function DecorateConstructor(decorators, target) {
            for (var i = decorators.length - 1; i >= 0; --i) {
                var decorator = decorators[i];
                var decorated = decorator(target);
                if (!IsUndefined(decorated) && !IsNull(decorated)) {
                    if (!IsConstructor(decorated))
                        throw new TypeError();
                    target = decorated;
                }
            }
            return target;
        }
        function DecorateProperty(decorators, target, propertyKey, descriptor) {
            for (var i = decorators.length - 1; i >= 0; --i) {
                var decorator = decorators[i];
                var decorated = decorator(target, propertyKey, descriptor);
                if (!IsUndefined(decorated) && !IsNull(decorated)) {
                    if (!IsObject(decorated))
                        throw new TypeError();
                    descriptor = decorated;
                }
            }
            return descriptor;
        }
        function GetOrCreateMetadataMap(O, P, Create) {
            var targetMetadata = Metadata.get(O);
            if (IsUndefined(targetMetadata)) {
                if (!Create)
                    return undefined;
                targetMetadata = new _Map();
                Metadata.set(O, targetMetadata);
            }
            var metadataMap = targetMetadata.get(P);
            if (IsUndefined(metadataMap)) {
                if (!Create)
                    return undefined;
                metadataMap = new _Map();
                targetMetadata.set(P, metadataMap);
            }
            return metadataMap;
        }
        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata
        function OrdinaryHasMetadata(MetadataKey, O, P) {
            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
            if (hasOwn)
                return true;
            var parent = OrdinaryGetPrototypeOf(O);
            if (!IsNull(parent))
                return OrdinaryHasMetadata(MetadataKey, parent, P);
            return false;
        }
        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata
        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return false;
            return ToBoolean(metadataMap.has(MetadataKey));
        }
        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata
        function OrdinaryGetMetadata(MetadataKey, O, P) {
            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
            if (hasOwn)
                return OrdinaryGetOwnMetadata(MetadataKey, O, P);
            var parent = OrdinaryGetPrototypeOf(O);
            if (!IsNull(parent))
                return OrdinaryGetMetadata(MetadataKey, parent, P);
            return undefined;
        }
        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata
        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return undefined;
            return metadataMap.get(MetadataKey);
        }
        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata
        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);
            metadataMap.set(MetadataKey, MetadataValue);
        }
        // 3.1.6.1 OrdinaryMetadataKeys(O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys
        function OrdinaryMetadataKeys(O, P) {
            var ownKeys = OrdinaryOwnMetadataKeys(O, P);
            var parent = OrdinaryGetPrototypeOf(O);
            if (parent === null)
                return ownKeys;
            var parentKeys = OrdinaryMetadataKeys(parent, P);
            if (parentKeys.length <= 0)
                return ownKeys;
            if (ownKeys.length <= 0)
                return parentKeys;
            var set = new _Set();
            var keys = [];
            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
                var key = ownKeys_1[_i];
                var hasKey = set.has(key);
                if (!hasKey) {
                    set.add(key);
                    keys.push(key);
                }
            }
            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
                var key = parentKeys_1[_a];
                var hasKey = set.has(key);
                if (!hasKey) {
                    set.add(key);
                    keys.push(key);
                }
            }
            return keys;
        }
        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys
        function OrdinaryOwnMetadataKeys(O, P) {
            var keys = [];
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return keys;
            var keysObj = metadataMap.keys();
            var iterator = GetIterator(keysObj);
            var k = 0;
            while (true) {
                var next = IteratorStep(iterator);
                if (!next) {
                    keys.length = k;
                    return keys;
                }
                var nextValue = IteratorValue(next);
                try {
                    keys[k] = nextValue;
                }
                catch (e) {
                    try {
                        IteratorClose(iterator);
                    }
                    finally {
                        throw e;
                    }
                }
                k++;
            }
        }
        // 6 ECMAScript Data Typ0es and Values
        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values
        function Type(x) {
            if (x === null)
                return 1 /* Null */;
            switch (typeof x) {
                case "undefined": return 0 /* Undefined */;
                case "boolean": return 2 /* Boolean */;
                case "string": return 3 /* String */;
                case "symbol": return 4 /* Symbol */;
                case "number": return 5 /* Number */;
                case "object": return x === null ? 1 /* Null */ : 6 /* Object */;
                default: return 6 /* Object */;
            }
        }
        // 6.1.1 The Undefined Type
        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type
        function IsUndefined(x) {
            return x === undefined;
        }
        // 6.1.2 The Null Type
        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type
        function IsNull(x) {
            return x === null;
        }
        // 6.1.5 The Symbol Type
        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type
        function IsSymbol(x) {
            return typeof x === "symbol";
        }
        // 6.1.7 The Object Type
        // https://tc39.github.io/ecma262/#sec-object-type
        function IsObject(x) {
            return typeof x === "object" ? x !== null : typeof x === "function";
        }
        // 7.1 Type Conversion
        // https://tc39.github.io/ecma262/#sec-type-conversion
        // 7.1.1 ToPrimitive(input [, PreferredType])
        // https://tc39.github.io/ecma262/#sec-toprimitive
        function ToPrimitive(input, PreferredType) {
            switch (Type(input)) {
                case 0 /* Undefined */: return input;
                case 1 /* Null */: return input;
                case 2 /* Boolean */: return input;
                case 3 /* String */: return input;
                case 4 /* Symbol */: return input;
                case 5 /* Number */: return input;
            }
            var hint = PreferredType === 3 /* String */ ? "string" : PreferredType === 5 /* Number */ ? "number" : "default";
            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
            if (exoticToPrim !== undefined) {
                var result = exoticToPrim.call(input, hint);
                if (IsObject(result))
                    throw new TypeError();
                return result;
            }
            return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
        }
        // 7.1.1.1 OrdinaryToPrimitive(O, hint)
        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive
        function OrdinaryToPrimitive(O, hint) {
            if (hint === "string") {
                var toString_1 = O.toString;
                if (IsCallable(toString_1)) {
                    var result = toString_1.call(O);
                    if (!IsObject(result))
                        return result;
                }
                var valueOf = O.valueOf;
                if (IsCallable(valueOf)) {
                    var result = valueOf.call(O);
                    if (!IsObject(result))
                        return result;
                }
            }
            else {
                var valueOf = O.valueOf;
                if (IsCallable(valueOf)) {
                    var result = valueOf.call(O);
                    if (!IsObject(result))
                        return result;
                }
                var toString_2 = O.toString;
                if (IsCallable(toString_2)) {
                    var result = toString_2.call(O);
                    if (!IsObject(result))
                        return result;
                }
            }
            throw new TypeError();
        }
        // 7.1.2 ToBoolean(argument)
        // https://tc39.github.io/ecma262/2016/#sec-toboolean
        function ToBoolean(argument) {
            return !!argument;
        }
        // 7.1.12 ToString(argument)
        // https://tc39.github.io/ecma262/#sec-tostring
        function ToString(argument) {
            return "" + argument;
        }
        // 7.1.14 ToPropertyKey(argument)
        // https://tc39.github.io/ecma262/#sec-topropertykey
        function ToPropertyKey(argument) {
            var key = ToPrimitive(argument, 3 /* String */);
            if (IsSymbol(key))
                return key;
            return ToString(key);
        }
        // 7.2 Testing and Comparison Operations
        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations
        // 7.2.2 IsArray(argument)
        // https://tc39.github.io/ecma262/#sec-isarray
        function IsArray(argument) {
            return Array.isArray
                ? Array.isArray(argument)
                : argument instanceof Object
                    ? argument instanceof Array
                    : Object.prototype.toString.call(argument) === "[object Array]";
        }
        // 7.2.3 IsCallable(argument)
        // https://tc39.github.io/ecma262/#sec-iscallable
        function IsCallable(argument) {
            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.
            return typeof argument === "function";
        }
        // 7.2.4 IsConstructor(argument)
        // https://tc39.github.io/ecma262/#sec-isconstructor
        function IsConstructor(argument) {
            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.
            return typeof argument === "function";
        }
        // 7.2.7 IsPropertyKey(argument)
        // https://tc39.github.io/ecma262/#sec-ispropertykey
        function IsPropertyKey(argument) {
            switch (Type(argument)) {
                case 3 /* String */: return true;
                case 4 /* Symbol */: return true;
                default: return false;
            }
        }
        // 7.3 Operations on Objects
        // https://tc39.github.io/ecma262/#sec-operations-on-objects
        // 7.3.9 GetMethod(V, P)
        // https://tc39.github.io/ecma262/#sec-getmethod
        function GetMethod(V, P) {
            var func = V[P];
            if (func === undefined || func === null)
                return undefined;
            if (!IsCallable(func))
                throw new TypeError();
            return func;
        }
        // 7.4 Operations on Iterator Objects
        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects
        function GetIterator(obj) {
            var method = GetMethod(obj, iteratorSymbol);
            if (!IsCallable(method))
                throw new TypeError(); // from Call
            var iterator = method.call(obj);
            if (!IsObject(iterator))
                throw new TypeError();
            return iterator;
        }
        // 7.4.4 IteratorValue(iterResult)
        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue
        function IteratorValue(iterResult) {
            return iterResult.value;
        }
        // 7.4.5 IteratorStep(iterator)
        // https://tc39.github.io/ecma262/#sec-iteratorstep
        function IteratorStep(iterator) {
            var result = iterator.next();
            return result.done ? false : result;
        }
        // 7.4.6 IteratorClose(iterator, completion)
        // https://tc39.github.io/ecma262/#sec-iteratorclose
        function IteratorClose(iterator) {
            var f = iterator["return"];
            if (f)
                f.call(iterator);
        }
        // 9.1 Ordinary Object Internal Methods and Internal Slots
        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots
        // 9.1.1.1 OrdinaryGetPrototypeOf(O)
        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof
        function OrdinaryGetPrototypeOf(O) {
            var proto = Object.getPrototypeOf(O);
            if (typeof O !== "function" || O === functionPrototype)
                return proto;
            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.
            // Try to determine the superclass constructor. Compatible implementations
            // must either set __proto__ on a subclass constructor to the superclass constructor,
            // or ensure each class has a valid `constructor` property on its prototype that
            // points back to the constructor.
            // If this is not the same as Function.[[Prototype]], then this is definately inherited.
            // This is the case when in ES6 or when using __proto__ in a compatible browser.
            if (proto !== functionPrototype)
                return proto;
            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
            var prototype = O.prototype;
            var prototypeProto = prototype && Object.getPrototypeOf(prototype);
            if (prototypeProto == null || prototypeProto === Object.prototype)
                return proto;
            // If the constructor was not a function, then we cannot determine the heritage.
            var constructor = prototypeProto.constructor;
            if (typeof constructor !== "function")
                return proto;
            // If we have some kind of self-reference, then we cannot determine the heritage.
            if (constructor === O)
                return proto;
            // we have a pretty good guess at the heritage.
            return constructor;
        }
        // naive Map shim
        function CreateMapPolyfill() {
            var cacheSentinel = {};
            var arraySentinel = [];
            var MapIterator = /** @class */ (function () {
                function MapIterator(keys, values, selector) {
                    this._index = 0;
                    this._keys = keys;
                    this._values = values;
                    this._selector = selector;
                }
                MapIterator.prototype["@@iterator"] = function () { return this; };
                MapIterator.prototype[iteratorSymbol] = function () { return this; };
                MapIterator.prototype.next = function () {
                    var index = this._index;
                    if (index >= 0 && index < this._keys.length) {
                        var result = this._selector(this._keys[index], this._values[index]);
                        if (index + 1 >= this._keys.length) {
                            this._index = -1;
                            this._keys = arraySentinel;
                            this._values = arraySentinel;
                        }
                        else {
                            this._index++;
                        }
                        return { value: result, done: false };
                    }
                    return { value: undefined, done: true };
                };
                MapIterator.prototype.throw = function (error) {
                    if (this._index >= 0) {
                        this._index = -1;
                        this._keys = arraySentinel;
                        this._values = arraySentinel;
                    }
                    throw error;
                };
                MapIterator.prototype.return = function (value) {
                    if (this._index >= 0) {
                        this._index = -1;
                        this._keys = arraySentinel;
                        this._values = arraySentinel;
                    }
                    return { value: value, done: true };
                };
                return MapIterator;
            }());
            return /** @class */ (function () {
                function Map() {
                    this._keys = [];
                    this._values = [];
                    this._cacheKey = cacheSentinel;
                    this._cacheIndex = -2;
                }
                Object.defineProperty(Map.prototype, "size", {
                    get: function () { return this._keys.length; },
                    enumerable: true,
                    configurable: true
                });
                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };
                Map.prototype.get = function (key) {
                    var index = this._find(key, /*insert*/ false);
                    return index >= 0 ? this._values[index] : undefined;
                };
                Map.prototype.set = function (key, value) {
                    var index = this._find(key, /*insert*/ true);
                    this._values[index] = value;
                    return this;
                };
                Map.prototype.delete = function (key) {
                    var index = this._find(key, /*insert*/ false);
                    if (index >= 0) {
                        var size = this._keys.length;
                        for (var i = index + 1; i < size; i++) {
                            this._keys[i - 1] = this._keys[i];
                            this._values[i - 1] = this._values[i];
                        }
                        this._keys.length--;
                        this._values.length--;
                        if (key === this._cacheKey) {
                            this._cacheKey = cacheSentinel;
                            this._cacheIndex = -2;
                        }
                        return true;
                    }
                    return false;
                };
                Map.prototype.clear = function () {
                    this._keys.length = 0;
                    this._values.length = 0;
                    this._cacheKey = cacheSentinel;
                    this._cacheIndex = -2;
                };
                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };
                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };
                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };
                Map.prototype["@@iterator"] = function () { return this.entries(); };
                Map.prototype[iteratorSymbol] = function () { return this.entries(); };
                Map.prototype._find = function (key, insert) {
                    if (this._cacheKey !== key) {
                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);
                    }
                    if (this._cacheIndex < 0 && insert) {
                        this._cacheIndex = this._keys.length;
                        this._keys.push(key);
                        this._values.push(undefined);
                    }
                    return this._cacheIndex;
                };
                return Map;
            }());
            function getKey(key, _) {
                return key;
            }
            function getValue(_, value) {
                return value;
            }
            function getEntry(key, value) {
                return [key, value];
            }
        }
        // naive Set shim
        function CreateSetPolyfill() {
            return /** @class */ (function () {
                function Set() {
                    this._map = new _Map();
                }
                Object.defineProperty(Set.prototype, "size", {
                    get: function () { return this._map.size; },
                    enumerable: true,
                    configurable: true
                });
                Set.prototype.has = function (value) { return this._map.has(value); };
                Set.prototype.add = function (value) { return this._map.set(value, value), this; };
                Set.prototype.delete = function (value) { return this._map.delete(value); };
                Set.prototype.clear = function () { this._map.clear(); };
                Set.prototype.keys = function () { return this._map.keys(); };
                Set.prototype.values = function () { return this._map.values(); };
                Set.prototype.entries = function () { return this._map.entries(); };
                Set.prototype["@@iterator"] = function () { return this.keys(); };
                Set.prototype[iteratorSymbol] = function () { return this.keys(); };
                return Set;
            }());
        }
        // naive WeakMap shim
        function CreateWeakMapPolyfill() {
            var UUID_SIZE = 16;
            var keys = HashMap.create();
            var rootKey = CreateUniqueKey();
            return /** @class */ (function () {
                function WeakMap() {
                    this._key = CreateUniqueKey();
                }
                WeakMap.prototype.has = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                    return table !== undefined ? HashMap.has(table, this._key) : false;
                };
                WeakMap.prototype.get = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                    return table !== undefined ? HashMap.get(table, this._key) : undefined;
                };
                WeakMap.prototype.set = function (target, value) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);
                    table[this._key] = value;
                    return this;
                };
                WeakMap.prototype.delete = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                    return table !== undefined ? delete table[this._key] : false;
                };
                WeakMap.prototype.clear = function () {
                    // NOTE: not a real clear, just makes the previous data unreachable
                    this._key = CreateUniqueKey();
                };
                return WeakMap;
            }());
            function CreateUniqueKey() {
                var key;
                do
                    key = "@@WeakMap@@" + CreateUUID();
                while (HashMap.has(keys, key));
                keys[key] = true;
                return key;
            }
            function GetOrCreateWeakMapTable(target, create) {
                if (!hasOwn.call(target, rootKey)) {
                    if (!create)
                        return undefined;
                    Object.defineProperty(target, rootKey, { value: HashMap.create() });
                }
                return target[rootKey];
            }
            function FillRandomBytes(buffer, size) {
                for (var i = 0; i < size; ++i)
                    buffer[i] = Math.random() * 0xff | 0;
                return buffer;
            }
            function GenRandomBytes(size) {
                if (typeof Uint8Array === "function") {
                    if (typeof crypto !== "undefined")
                        return crypto.getRandomValues(new Uint8Array(size));
                    if (typeof msCrypto !== "undefined")
                        return msCrypto.getRandomValues(new Uint8Array(size));
                    return FillRandomBytes(new Uint8Array(size), size);
                }
                return FillRandomBytes(new Array(size), size);
            }
            function CreateUUID() {
                var data = GenRandomBytes(UUID_SIZE);
                // mark as random - RFC 4122 § 4.4
                data[6] = data[6] & 0x4f | 0x40;
                data[8] = data[8] & 0xbf | 0x80;
                var result = "";
                for (var offset = 0; offset < UUID_SIZE; ++offset) {
                    var byte = data[offset];
                    if (offset === 4 || offset === 6 || offset === 8)
                        result += "-";
                    if (byte < 16)
                        result += "0";
                    result += byte.toString(16).toLowerCase();
                }
                return result;
            }
        }
        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.
        function MakeDictionary(obj) {
            obj.__ = undefined;
            delete obj.__;
            return obj;
        }
    });
})(Reflect || (Reflect = {}));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js"), __webpack_require__(/*! ./../next/node_modules/webpack/buildin/global.js */ "./node_modules/next/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : undefined
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}


/***/ }),

/***/ "./node_modules/ripemd160/index.js":
/*!*****************************************!*\
  !*** ./node_modules/ripemd160/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js").Buffer
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")
var HashBase = __webpack_require__(/*! hash-base */ "./node_modules/hash-base/index.js")

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160


/***/ }),

/***/ "./node_modules/safe-buffer/index.js":
/*!*******************************************!*\
  !*** ./node_modules/safe-buffer/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),

/***/ "./node_modules/sha.js/hash.js":
/*!*************************************!*\
  !*** ./node_modules/sha.js/hash.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash


/***/ }),

/***/ "./node_modules/sha.js/index.js":
/*!**************************************!*\
  !*** ./node_modules/sha.js/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = __webpack_require__(/*! ./sha */ "./node_modules/sha.js/sha.js")
exports.sha1 = __webpack_require__(/*! ./sha1 */ "./node_modules/sha.js/sha1.js")
exports.sha224 = __webpack_require__(/*! ./sha224 */ "./node_modules/sha.js/sha224.js")
exports.sha256 = __webpack_require__(/*! ./sha256 */ "./node_modules/sha.js/sha256.js")
exports.sha384 = __webpack_require__(/*! ./sha384 */ "./node_modules/sha.js/sha384.js")
exports.sha512 = __webpack_require__(/*! ./sha512 */ "./node_modules/sha.js/sha512.js")


/***/ }),

/***/ "./node_modules/sha.js/sha.js":
/*!************************************!*\
  !*** ./node_modules/sha.js/sha.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")
var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha


/***/ }),

/***/ "./node_modules/sha.js/sha1.js":
/*!*************************************!*\
  !*** ./node_modules/sha.js/sha1.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")
var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1


/***/ }),

/***/ "./node_modules/sha.js/sha224.js":
/*!***************************************!*\
  !*** ./node_modules/sha.js/sha224.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")
var Sha256 = __webpack_require__(/*! ./sha256 */ "./node_modules/sha.js/sha256.js")
var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224


/***/ }),

/***/ "./node_modules/sha.js/sha256.js":
/*!***************************************!*\
  !*** ./node_modules/sha.js/sha256.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")
var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256


/***/ }),

/***/ "./node_modules/sha.js/sha384.js":
/*!***************************************!*\
  !*** ./node_modules/sha.js/sha384.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")
var SHA512 = __webpack_require__(/*! ./sha512 */ "./node_modules/sha.js/sha512.js")
var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384


/***/ }),

/***/ "./node_modules/sha.js/sha512.js":
/*!***************************************!*\
  !*** ./node_modules/sha.js/sha512.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")
var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512


/***/ }),

/***/ "./node_modules/sql.js/dist/sql-wasm.js":
/*!**********************************************!*\
  !*** ./node_modules/sql.js/dist/sql-wasm.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, process, __dirname, Buffer) {
// We are modularizing this manually because the current modularize setting in Emscripten has some issues:
// https://github.com/kripken/emscripten/issues/5820
// In addition, When you use emcc's modularization, it still expects to export a global object called `Module`,
// which is able to be used/called before the WASM is loaded.
// The modularization below exports a promise that loads and resolves to the actual sql.js module.
// That way, this module can't be used before the WASM is finished loading.

// We are going to define a function that a user will call to start loading initializing our Sql.js library
// However, that function might be called multiple times, and on subsequent calls, we don't actually want it to instantiate a new instance of the Module
// Instead, we want to return the previously loaded module

// TODO: Make this not declare a global if used in the browser
var initSqlJsPromise = undefined;

var initSqlJs = function (moduleConfig) {

    if (initSqlJsPromise){
      return initSqlJsPromise;
    }
    // If we're here, we've never called this function before
    initSqlJsPromise = new Promise(function (resolveModule, reject) {

        // We are modularizing this manually because the current modularize setting in Emscripten has some issues:
        // https://github.com/kripken/emscripten/issues/5820

        // The way to affect the loading of emcc compiled modules is to create a variable called `Module` and add
        // properties to it, like `preRun`, `postRun`, etc
        // We are using that to get notified when the WASM has finished loading.
        // Only then will we return our promise

        // If they passed in a moduleConfig object, use that
        // Otherwise, initialize Module to the empty object
        var Module = typeof moduleConfig !== 'undefined' ? moduleConfig : {};

        // EMCC only allows for a single onAbort function (not an array of functions)
        // So if the user defined their own onAbort function, we remember it and call it
        var originalOnAbortFunction = Module['onAbort'];
        Module['onAbort'] = function (errorThatCausedAbort) {
            reject(new Error(errorThatCausedAbort));
            if (originalOnAbortFunction){
              originalOnAbortFunction(errorThatCausedAbort);
            }
        };

        Module['postRun'] = Module['postRun'] || [];
        Module['postRun'].push(function () {
            // When Emscripted calls postRun, this promise resolves with the built Module
            resolveModule(Module);
        });

        // There is a section of code in the emcc-generated code below that looks like this:
        // (Note that this is lowercase `module`)
        // if (typeof module !== 'undefined') {
        //     module['exports'] = Module;
        // }
        // When that runs, it's going to overwrite our own modularization export efforts in shell-post.js!
        // The only way to tell emcc not to emit it is to pass the MODULARIZE=1 or MODULARIZE_INSTANCE=1 flags,
        // but that carries with it additional unnecessary baggage/bugs we don't want either.
        // So, we have three options:
        // 1) We undefine `module`
        // 2) We remember what `module['exports']` was at the beginning of this function and we restore it later
        // 3) We write a script to remove those lines of code as part of the Make process.
        //
        // Since those are the only lines of code that care about module, we will undefine it. It's the most straightforward
        // of the options, and has the side effect of reducing emcc's efforts to modify the module if its output were to change in the future.
        // That's a nice side effect since we're handling the modularization efforts ourselves
        module = undefined;

        // The emcc-generated code and shell-post.js code goes below,
        // meaning that all of it runs inside of this promise. If anything throws an exception, our promise will abort
var e;e||(e=typeof Module !== 'undefined' ? Module : {});
e.onRuntimeInitialized=function(){function a(h,m){this.Na=h;this.db=m;this.Ma=1;this.eb=[]}function b(h){this.filename="dbfile_"+(4294967295*Math.random()>>>0);if(null!=h){var m=this.filename,q=m?k("//"+m):"/";m=aa(!0,!0);q=ba(q,(void 0!==m?m:438)&4095|32768,0);if(h){if("string"===typeof h){for(var v=Array(h.length),B=0,Q=h.length;B<Q;++B)v[B]=h.charCodeAt(B);h=v}ca(q,m|146);v=l(q,"w");da(v,h,0,h.length,0,void 0);ea(v);ca(q,m)}}this.handleError(f(this.filename,c));this.db=p(c,"i32");qc(this.db);this.bb=
{};this.Ta={}}var c=t(4),d=e.cwrap,f=d("sqlite3_open","number",["string","number"]),g=d("sqlite3_close_v2","number",["number"]),n=d("sqlite3_exec","number",["number","string","number","number","number"]),r=d("sqlite3_changes","number",["number"]),w=d("sqlite3_prepare_v2","number",["number","string","number","number","number"]),u=d("sqlite3_prepare_v2","number",["number","number","number","number","number"]),C=d("sqlite3_bind_text","number",["number","number","number","number","number"]),H=d("sqlite3_bind_blob",
"number",["number","number","number","number","number"]),ka=d("sqlite3_bind_double","number",["number","number","number"]),la=d("sqlite3_bind_int","number",["number","number","number"]),rc=d("sqlite3_bind_parameter_index","number",["number","string"]),sc=d("sqlite3_step","number",["number"]),tc=d("sqlite3_errmsg","string",["number"]),ub=d("sqlite3_data_count","number",["number"]),uc=d("sqlite3_column_double","number",["number","number"]),vc=d("sqlite3_column_text","string",["number","number"]),wc=
d("sqlite3_column_blob","number",["number","number"]),xc=d("sqlite3_column_bytes","number",["number","number"]),yc=d("sqlite3_column_type","number",["number","number"]),zc=d("sqlite3_column_name","string",["number","number"]),Ac=d("sqlite3_reset","number",["number"]),Bc=d("sqlite3_clear_bindings","number",["number"]),Cc=d("sqlite3_finalize","number",["number"]),Dc=d("sqlite3_create_function_v2","number","number string number number number number number number number".split(" ")),Ec=d("sqlite3_value_type",
"number",["number"]),Fc=d("sqlite3_value_bytes","number",["number"]),Gc=d("sqlite3_value_text","string",["number"]),Hc=d("sqlite3_value_blob","number",["number"]),Ic=d("sqlite3_value_double","number",["number"]),Jc=d("sqlite3_result_double","",["number","number"]),vb=d("sqlite3_result_null","",["number"]),Kc=d("sqlite3_result_text","",["number","string","number","number"]),Lc=d("sqlite3_result_blob","",["number","number","number","number"]),Mc=d("sqlite3_result_int","",["number","number"]),wb=d("sqlite3_result_error",
"",["number","string","number"]),qc=d("RegisterExtensionFunctions","number",["number"]);a.prototype.bind=function(h){if(!this.Na)throw"Statement closed";this.reset();return Array.isArray(h)?this.sb(h):null!=h&&"object"===typeof h?this.tb(h):!0};a.prototype.step=function(){if(!this.Na)throw"Statement closed";this.Ma=1;var h=sc(this.Na);switch(h){case 100:return!0;case 101:return!1;default:throw this.db.handleError(h);}};a.prototype.zb=function(h){null==h&&(h=this.Ma,this.Ma+=1);return uc(this.Na,h)};
a.prototype.Ab=function(h){null==h&&(h=this.Ma,this.Ma+=1);return vc(this.Na,h)};a.prototype.getBlob=function(h){null==h&&(h=this.Ma,this.Ma+=1);var m=xc(this.Na,h);var q=wc(this.Na,h);var v=new Uint8Array(m);for(h=0;h<m;)v[h]=x[q+h],h+=1;return v};a.prototype.get=function(h){var m;null!=h&&this.bind(h)&&this.step();var q=[];h=0;for(m=ub(this.Na);h<m;){switch(yc(this.Na,h)){case 1:case 2:q.push(this.zb(h));break;case 3:q.push(this.Ab(h));break;case 4:q.push(this.getBlob(h));break;default:q.push(null)}h+=
1}return q};a.prototype.getColumnNames=function(){var h;var m=[];var q=0;for(h=ub(this.Na);q<h;)m.push(zc(this.Na,q)),q+=1;return m};a.prototype.getAsObject=function(h){var m;var q=this.get(h);var v=this.getColumnNames();var B={};h=0;for(m=v.length;h<m;){var Q=v[h];B[Q]=q[h];h+=1}return B};a.prototype.run=function(h){null!=h&&this.bind(h);this.step();return this.reset()};a.prototype.wb=function(h,m){null==m&&(m=this.Ma,this.Ma+=1);h=fa(h);var q=ha(h);this.eb.push(q);this.db.handleError(C(this.Na,
m,q,h.length-1,0))};a.prototype.rb=function(h,m){null==m&&(m=this.Ma,this.Ma+=1);var q=ha(h);this.eb.push(q);this.db.handleError(H(this.Na,m,q,h.length,0))};a.prototype.vb=function(h,m){null==m&&(m=this.Ma,this.Ma+=1);this.db.handleError((h===(h|0)?la:ka)(this.Na,m,h))};a.prototype.ub=function(h){null==h&&(h=this.Ma,this.Ma+=1);H(this.Na,h,0,0,0)};a.prototype.kb=function(h,m){null==m&&(m=this.Ma,this.Ma+=1);switch(typeof h){case "string":this.wb(h,m);return;case "number":case "boolean":this.vb(h+
0,m);return;case "object":if(null===h){this.ub(m);return}if(null!=h.length){this.rb(h,m);return}}throw"Wrong API use : tried to bind a value of an unknown type ("+h+").";};a.prototype.tb=function(h){var m=this;Object.keys(h).forEach(function(q){var v=rc(m.Na,q);0!==v&&m.kb(h[q],v)});return!0};a.prototype.sb=function(h){var m;for(m=0;m<h.length;)this.kb(h[m],m+1),m+=1;return!0};a.prototype.reset=function(){return 0===Bc(this.Na)&&0===Ac(this.Na)};a.prototype.freemem=function(){for(var h;void 0!==(h=
this.eb.pop());)ia(h)};a.prototype.free=function(){var h=0===Cc(this.Na);delete this.db.bb[this.Na];this.Na=0;return h};b.prototype.run=function(h,m){if(!this.db)throw"Database closed";if(m){h=this.prepare(h,m);try{h.step()}finally{h.free()}}else this.handleError(n(this.db,h,0,0,c));return this};b.prototype.exec=function(h,m){if(!this.db)throw"Database closed";var q=ja();try{var v=ma(h)+1,B=t(v);y(h,x,B,v);var Q=B;var F=t(4);for(h=[];0!==p(Q,"i8");){oa(c);oa(F);this.handleError(u(this.db,Q,-1,c,F));
var na=p(c,"i32");Q=p(F,"i32");if(0!==na){var S=null;var A=new a(na,this);for(null!=m&&A.bind(m);A.step();)null===S&&(S={columns:A.getColumnNames(),values:[]},h.push(S)),S.values.push(A.get());A.free()}}return h}catch(M){throw A&&A.free(),M;}finally{pa(q)}};b.prototype.each=function(h,m,q,v){"function"===typeof m&&(v=q,q=m,m=void 0);h=this.prepare(h,m);try{for(;h.step();)q(h.getAsObject())}finally{h.free()}if("function"===typeof v)return v()};b.prototype.prepare=function(h,m){oa(c);this.handleError(w(this.db,
h,-1,c,0));h=p(c,"i32");if(0===h)throw"Nothing to prepare";var q=new a(h,this);null!=m&&q.bind(m);return this.bb[h]=q};b.prototype["export"]=function(){Object.values(this.bb).forEach(function(m){m.free()});Object.values(this.Ta).forEach(qa);this.Ta={};this.handleError(g(this.db));var h=ra(this.filename);this.handleError(f(this.filename,c));this.db=p(c,"i32");return h};b.prototype.close=function(){null!==this.db&&(Object.values(this.bb).forEach(function(h){h.free()}),Object.values(this.Ta).forEach(qa),
this.Ta={},this.handleError(g(this.db)),sa("/"+this.filename),this.db=null)};b.prototype.handleError=function(h){if(0===h)return null;h=tc(this.db);throw Error(h);};b.prototype.getRowsModified=function(){return r(this.db)};b.prototype.create_function=function(h,m){Object.prototype.hasOwnProperty.call(this.Ta,h)&&(ta.push(this.Ta[h]),delete this.Ta[h]);var q=ua(function(v,B,Q){for(var F,na=[],S=0;S<B;S+=1){var A=p(Q+4*S,"i32"),M=Ec(A);if(1===M||2===M)A=Ic(A);else if(3===M)A=Gc(A);else if(4===M){M=
A;A=Fc(M);M=Hc(M);for(var Ab=new Uint8Array(A),Da=0;Da<A;Da+=1)Ab[Da]=x[M+Da];A=Ab}else A=null;na.push(A)}try{F=m.apply(null,na)}catch(Pc){wb(v,Pc,-1);return}switch(typeof F){case "boolean":Mc(v,F?1:0);break;case "number":Jc(v,F);break;case "string":Kc(v,F,-1,-1);break;case "object":null===F?vb(v):null!=F.length?(B=ha(F),Lc(v,B,F.length,-1),ia(B)):wb(v,"Wrong API use : tried to return a value of an unknown type ("+F+").",-1);break;default:vb(v)}});this.Ta[h]=q;this.handleError(Dc(this.db,h,m.length,
1,0,q,0,0,0));return this};e.Database=b};var va={},z;for(z in e)e.hasOwnProperty(z)&&(va[z]=e[z]);var wa="./this.program",xa=!1,ya=!1,za=!1,Aa=!1;xa="object"===typeof window;ya="function"===typeof importScripts;za="object"===typeof process&&"object"===typeof process.versions&&"string"===typeof process.versions.node;Aa=!xa&&!za&&!ya;var D="",Ba,Ca,Ea,Fa;
if(za)D=ya?__webpack_require__(/*! path */ "./node_modules/path-browserify/index.js").dirname(D)+"/":__dirname+"/",Ba=function(a,b){Ea||(Ea=__webpack_require__(/*! fs */ "./node_modules/node-libs-browser/mock/empty.js"));Fa||(Fa=__webpack_require__(/*! path */ "./node_modules/path-browserify/index.js"));a=Fa.normalize(a);return Ea.readFileSync(a,b?null:"utf8")},Ca=function(a){a=Ba(a,!0);a.buffer||(a=new Uint8Array(a));assert(a.buffer);return a},1<process.argv.length&&(wa=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2), true&&(module.exports=e),process.on("unhandledRejection",E),e.inspect=function(){return"[Emscripten Module object]"};else if(Aa)"undefined"!=
typeof read&&(Ba=function(a){return read(a)}),Ca=function(a){if("function"===typeof readbuffer)return new Uint8Array(readbuffer(a));a=read(a,"binary");assert("object"===typeof a);return a},"undefined"!==typeof print&&("undefined"===typeof console&&(console={}),console.log=print,console.warn=console.error="undefined"!==typeof printErr?printErr:print);else if(xa||ya)ya?D=self.location.href:document.currentScript&&(D=document.currentScript.src),D=0!==D.indexOf("blob:")?D.substr(0,D.lastIndexOf("/")+
1):"",Ba=function(a){var b=new XMLHttpRequest;b.open("GET",a,!1);b.send(null);return b.responseText},ya&&(Ca=function(a){var b=new XMLHttpRequest;b.open("GET",a,!1);b.responseType="arraybuffer";b.send(null);return new Uint8Array(b.response)});var Ga=e.print||console.log.bind(console),G=e.printErr||console.warn.bind(console);for(z in va)va.hasOwnProperty(z)&&(e[z]=va[z]);va=null;e.thisProgram&&(wa=e.thisProgram);function Ha(a){var b=I[Ia>>2];I[Ia>>2]=b+a+15&-16;return b}var ta=[];
function ua(a){if(ta.length)var b=ta.pop();else{b=Ja.length;try{Ja.grow(1)}catch(g){if(!(g instanceof RangeError))throw g;throw"Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.";}}try{Ja.set(b,a)}catch(g){if(!(g instanceof TypeError))throw g;assert(!0,"Missing signature argument to addFunction");if("function"===typeof WebAssembly.Function){for(var c={i:"i32",j:"i64",f:"f32",d:"f64"},d={parameters:[],results:[]},f=1;4>f;++f)d.parameters.push(c["viii"[f]]);a=new WebAssembly.Function(d,a)}else{c=[1,
0,1,96];d={i:127,j:126,f:125,d:124};c.push(3);for(f=0;3>f;++f)c.push(d["iii"[f]]);c.push(0);c[1]=c.length-2;f=new Uint8Array([0,97,115,109,1,0,0,0].concat(c,[2,7,1,1,101,1,102,0,0,7,5,1,1,102,0,0]));f=new WebAssembly.Module(f);a=(new WebAssembly.Instance(f,{e:{f:a}})).exports.f}Ja.set(b,a)}return b}function qa(a){ta.push(a)}var Ka;e.wasmBinary&&(Ka=e.wasmBinary);var noExitRuntime;e.noExitRuntime&&(noExitRuntime=e.noExitRuntime);"object"!==typeof WebAssembly&&G("no native wasm support detected");
function oa(a){var b="i32";"*"===b.charAt(b.length-1)&&(b="i32");switch(b){case "i1":x[a>>0]=0;break;case "i8":x[a>>0]=0;break;case "i16":La[a>>1]=0;break;case "i32":I[a>>2]=0;break;case "i64":J=[0,(K=0,1<=+Ma(K)?0<K?(Na(+Oa(K/4294967296),4294967295)|0)>>>0:~~+Pa((K-+(~~K>>>0))/4294967296)>>>0:0)];I[a>>2]=J[0];I[a+4>>2]=J[1];break;case "float":Qa[a>>2]=0;break;case "double":Ra[a>>3]=0;break;default:E("invalid type for setValue: "+b)}}
function p(a,b){b=b||"i8";"*"===b.charAt(b.length-1)&&(b="i32");switch(b){case "i1":return x[a>>0];case "i8":return x[a>>0];case "i16":return La[a>>1];case "i32":return I[a>>2];case "i64":return I[a>>2];case "float":return Qa[a>>2];case "double":return Ra[a>>3];default:E("invalid type for getValue: "+b)}return null}var Sa,Ja=new WebAssembly.Table({initial:384,element:"anyfunc"}),Ta=!1;function assert(a,b){a||E("Assertion failed: "+b)}
function Ua(a){var b=e["_"+a];assert(b,"Cannot call unknown function "+a+", make sure it is exported");return b}
function Va(a,b,c,d){var f={string:function(u){var C=0;if(null!==u&&void 0!==u&&0!==u){var H=(u.length<<2)+1;C=t(H);y(u,L,C,H)}return C},array:function(u){var C=t(u.length);x.set(u,C);return C}},g=Ua(a),n=[];a=0;if(d)for(var r=0;r<d.length;r++){var w=f[c[r]];w?(0===a&&(a=ja()),n[r]=w(d[r])):n[r]=d[r]}c=g.apply(null,n);c=function(u){return"string"===b?N(u):"boolean"===b?!!u:u}(c);0!==a&&pa(a);return c}var Wa=0,Xa=3;
function ha(a){var b=Wa;if("number"===typeof a){var c=!0;var d=a}else c=!1,d=a.length;var f;b==Xa?f=g:f=[Ya,t,Ha][b](Math.max(d,1));if(c){var g=f;assert(0==(f&3));for(a=f+(d&-4);g<a;g+=4)I[g>>2]=0;for(a=f+d;g<a;)x[g++>>0]=0;return f}a.subarray||a.slice?L.set(a,f):L.set(new Uint8Array(a),f);return f}var Za="undefined"!==typeof TextDecoder?new TextDecoder("utf8"):void 0;
function $a(a,b,c){var d=b+c;for(c=b;a[c]&&!(c>=d);)++c;if(16<c-b&&a.subarray&&Za)return Za.decode(a.subarray(b,c));for(d="";b<c;){var f=a[b++];if(f&128){var g=a[b++]&63;if(192==(f&224))d+=String.fromCharCode((f&31)<<6|g);else{var n=a[b++]&63;f=224==(f&240)?(f&15)<<12|g<<6|n:(f&7)<<18|g<<12|n<<6|a[b++]&63;65536>f?d+=String.fromCharCode(f):(f-=65536,d+=String.fromCharCode(55296|f>>10,56320|f&1023))}}else d+=String.fromCharCode(f)}return d}function N(a){return a?$a(L,a,void 0):""}
function y(a,b,c,d){if(!(0<d))return 0;var f=c;d=c+d-1;for(var g=0;g<a.length;++g){var n=a.charCodeAt(g);if(55296<=n&&57343>=n){var r=a.charCodeAt(++g);n=65536+((n&1023)<<10)|r&1023}if(127>=n){if(c>=d)break;b[c++]=n}else{if(2047>=n){if(c+1>=d)break;b[c++]=192|n>>6}else{if(65535>=n){if(c+2>=d)break;b[c++]=224|n>>12}else{if(c+3>=d)break;b[c++]=240|n>>18;b[c++]=128|n>>12&63}b[c++]=128|n>>6&63}b[c++]=128|n&63}}b[c]=0;return c-f}
function ma(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&(d=65536+((d&1023)<<10)|a.charCodeAt(++c)&1023);127>=d?++b:b=2047>=d?b+2:65535>=d?b+3:b+4}return b}"undefined"!==typeof TextDecoder&&new TextDecoder("utf-16le");function ab(a){var b=ma(a)+1,c=Ya(b);c&&y(a,x,c,b);return c}var bb,x,L,La,I,Qa,Ra;
function cb(a){bb=a;e.HEAP8=x=new Int8Array(a);e.HEAP16=La=new Int16Array(a);e.HEAP32=I=new Int32Array(a);e.HEAPU8=L=new Uint8Array(a);e.HEAPU16=new Uint16Array(a);e.HEAPU32=new Uint32Array(a);e.HEAPF32=Qa=new Float32Array(a);e.HEAPF64=Ra=new Float64Array(a)}var Ia=62880,db=e.INITIAL_MEMORY||16777216;e.wasmMemory?Sa=e.wasmMemory:Sa=new WebAssembly.Memory({initial:db/65536});Sa&&(bb=Sa.buffer);db=bb.byteLength;cb(bb);I[Ia>>2]=5305920;
function eb(a){for(;0<a.length;){var b=a.shift();if("function"==typeof b)b();else{var c=b.yb;"number"===typeof c?void 0===b.fb?e.dynCall_v(c):e.dynCall_vi(c,b.fb):c(void 0===b.fb?null:b.fb)}}}var fb=[],gb=[],hb=[],ib=[];function jb(){var a=e.preRun.shift();fb.unshift(a)}var Ma=Math.abs,Pa=Math.ceil,Oa=Math.floor,Na=Math.min,kb=0,lb=null,mb=null;e.preloadedImages={};e.preloadedAudios={};
function E(a){if(e.onAbort)e.onAbort(a);Ga(a);G(a);Ta=!0;throw new WebAssembly.RuntimeError("abort("+a+"). Build with -s ASSERTIONS=1 for more info.");}function nb(){var a=ob;return String.prototype.startsWith?a.startsWith("data:application/octet-stream;base64,"):0===a.indexOf("data:application/octet-stream;base64,")}var ob="sql-wasm.wasm";if(!nb()){var pb=ob;ob=e.locateFile?e.locateFile(pb,D):D+pb}
function qb(){try{if(Ka)return new Uint8Array(Ka);if(Ca)return Ca(ob);throw"both async and sync fetching of the wasm failed";}catch(a){E(a)}}function rb(){return Ka||!xa&&!ya||"function"!==typeof fetch?new Promise(function(a){a(qb())}):fetch(ob,{credentials:"same-origin"}).then(function(a){if(!a.ok)throw"failed to load wasm binary file at '"+ob+"'";return a.arrayBuffer()}).catch(function(){return qb()})}var K,J;gb.push({yb:function(){sb()}});
function tb(a){return a.replace(/\b_Z[\w\d_]+/g,function(b){return b===b?b:b+" ["+b+"]"})}function xb(a,b){for(var c=0,d=a.length-1;0<=d;d--){var f=a[d];"."===f?a.splice(d,1):".."===f?(a.splice(d,1),c++):c&&(a.splice(d,1),c--)}if(b)for(;c;c--)a.unshift("..");return a}function k(a){var b="/"===a.charAt(0),c="/"===a.substr(-1);(a=xb(a.split("/").filter(function(d){return!!d}),!b).join("/"))||b||(a=".");a&&c&&(a+="/");return(b?"/":"")+a}
function yb(a){var b=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(a).slice(1);a=b[0];b=b[1];if(!a&&!b)return".";b&&(b=b.substr(0,b.length-1));return a+b}function zb(a){if("/"===a)return"/";var b=a.lastIndexOf("/");return-1===b?a:a.substr(b+1)}function Bb(a){e.___errno_location&&(I[e.___errno_location()>>2]=a)}
function Cb(){for(var a="",b=!1,c=arguments.length-1;-1<=c&&!b;c--){b=0<=c?arguments[c]:"/";if("string"!==typeof b)throw new TypeError("Arguments to path.resolve must be strings");if(!b)return"";a=b+"/"+a;b="/"===b.charAt(0)}a=xb(a.split("/").filter(function(d){return!!d}),!b).join("/");return(b?"/":"")+a||"."}var Db=[];function Eb(a,b){Db[a]={input:[],output:[],Ya:b};Fb(a,Gb)}
var Gb={open:function(a){var b=Db[a.node.rdev];if(!b)throw new O(43);a.tty=b;a.seekable=!1},close:function(a){a.tty.Ya.flush(a.tty)},flush:function(a){a.tty.Ya.flush(a.tty)},read:function(a,b,c,d){if(!a.tty||!a.tty.Ya.ob)throw new O(60);for(var f=0,g=0;g<d;g++){try{var n=a.tty.Ya.ob(a.tty)}catch(r){throw new O(29);}if(void 0===n&&0===f)throw new O(6);if(null===n||void 0===n)break;f++;b[c+g]=n}f&&(a.node.timestamp=Date.now());return f},write:function(a,b,c,d){if(!a.tty||!a.tty.Ya.hb)throw new O(60);
try{for(var f=0;f<d;f++)a.tty.Ya.hb(a.tty,b[c+f])}catch(g){throw new O(29);}d&&(a.node.timestamp=Date.now());return f}},Hb={ob:function(a){if(!a.input.length){var b=null;if(za){var c=Buffer.qb?Buffer.qb(256):new Buffer(256),d=0;try{d=Ea.readSync(process.stdin.fd,c,0,256,null)}catch(f){if(-1!=f.toString().indexOf("EOF"))d=0;else throw f;}0<d?b=c.slice(0,d).toString("utf-8"):b=null}else"undefined"!=typeof window&&"function"==typeof window.prompt?(b=window.prompt("Input: "),null!==b&&(b+="\n")):"function"==
typeof readline&&(b=readline(),null!==b&&(b+="\n"));if(!b)return null;a.input=fa(b,!0)}return a.input.shift()},hb:function(a,b){null===b||10===b?(Ga($a(a.output,0)),a.output=[]):0!=b&&a.output.push(b)},flush:function(a){a.output&&0<a.output.length&&(Ga($a(a.output,0)),a.output=[])}},Ib={hb:function(a,b){null===b||10===b?(G($a(a.output,0)),a.output=[]):0!=b&&a.output.push(b)},flush:function(a){a.output&&0<a.output.length&&(G($a(a.output,0)),a.output=[])}},P={Ra:null,Sa:function(){return P.createNode(null,
"/",16895,0)},createNode:function(a,b,c,d){if(24576===(c&61440)||4096===(c&61440))throw new O(63);P.Ra||(P.Ra={dir:{node:{Qa:P.Ja.Qa,Pa:P.Ja.Pa,lookup:P.Ja.lookup,Za:P.Ja.Za,rename:P.Ja.rename,unlink:P.Ja.unlink,rmdir:P.Ja.rmdir,readdir:P.Ja.readdir,symlink:P.Ja.symlink},stream:{Va:P.Ka.Va}},file:{node:{Qa:P.Ja.Qa,Pa:P.Ja.Pa},stream:{Va:P.Ka.Va,read:P.Ka.read,write:P.Ka.write,jb:P.Ka.jb,$a:P.Ka.$a,ab:P.Ka.ab}},link:{node:{Qa:P.Ja.Qa,Pa:P.Ja.Pa,readlink:P.Ja.readlink},stream:{}},lb:{node:{Qa:P.Ja.Qa,
Pa:P.Ja.Pa},stream:Jb}});c=Kb(a,b,c,d);R(c.mode)?(c.Ja=P.Ra.dir.node,c.Ka=P.Ra.dir.stream,c.Ia={}):32768===(c.mode&61440)?(c.Ja=P.Ra.file.node,c.Ka=P.Ra.file.stream,c.Oa=0,c.Ia=null):40960===(c.mode&61440)?(c.Ja=P.Ra.link.node,c.Ka=P.Ra.link.stream):8192===(c.mode&61440)&&(c.Ja=P.Ra.lb.node,c.Ka=P.Ra.lb.stream);c.timestamp=Date.now();a&&(a.Ia[b]=c);return c},Ib:function(a){if(a.Ia&&a.Ia.subarray){for(var b=[],c=0;c<a.Oa;++c)b.push(a.Ia[c]);return b}return a.Ia},Jb:function(a){return a.Ia?a.Ia.subarray?
a.Ia.subarray(0,a.Oa):new Uint8Array(a.Ia):new Uint8Array(0)},mb:function(a,b){var c=a.Ia?a.Ia.length:0;c>=b||(b=Math.max(b,c*(1048576>c?2:1.125)|0),0!=c&&(b=Math.max(b,256)),c=a.Ia,a.Ia=new Uint8Array(b),0<a.Oa&&a.Ia.set(c.subarray(0,a.Oa),0))},Fb:function(a,b){if(a.Oa!=b)if(0==b)a.Ia=null,a.Oa=0;else{if(!a.Ia||a.Ia.subarray){var c=a.Ia;a.Ia=new Uint8Array(b);c&&a.Ia.set(c.subarray(0,Math.min(b,a.Oa)))}else if(a.Ia||(a.Ia=[]),a.Ia.length>b)a.Ia.length=b;else for(;a.Ia.length<b;)a.Ia.push(0);a.Oa=
b}},Ja:{Qa:function(a){var b={};b.dev=8192===(a.mode&61440)?a.id:1;b.ino=a.id;b.mode=a.mode;b.nlink=1;b.uid=0;b.gid=0;b.rdev=a.rdev;R(a.mode)?b.size=4096:32768===(a.mode&61440)?b.size=a.Oa:40960===(a.mode&61440)?b.size=a.link.length:b.size=0;b.atime=new Date(a.timestamp);b.mtime=new Date(a.timestamp);b.ctime=new Date(a.timestamp);b.xb=4096;b.blocks=Math.ceil(b.size/b.xb);return b},Pa:function(a,b){void 0!==b.mode&&(a.mode=b.mode);void 0!==b.timestamp&&(a.timestamp=b.timestamp);void 0!==b.size&&P.Fb(a,
b.size)},lookup:function(){throw Lb[44];},Za:function(a,b,c,d){return P.createNode(a,b,c,d)},rename:function(a,b,c){if(R(a.mode)){try{var d=Mb(b,c)}catch(g){}if(d)for(var f in d.Ia)throw new O(55);}delete a.parent.Ia[a.name];a.name=c;b.Ia[c]=a;a.parent=b},unlink:function(a,b){delete a.Ia[b]},rmdir:function(a,b){var c=Mb(a,b),d;for(d in c.Ia)throw new O(55);delete a.Ia[b]},readdir:function(a){var b=[".",".."],c;for(c in a.Ia)a.Ia.hasOwnProperty(c)&&b.push(c);return b},symlink:function(a,b,c){a=P.createNode(a,
b,41471,0);a.link=c;return a},readlink:function(a){if(40960!==(a.mode&61440))throw new O(28);return a.link}},Ka:{read:function(a,b,c,d,f){var g=a.node.Ia;if(f>=a.node.Oa)return 0;a=Math.min(a.node.Oa-f,d);if(8<a&&g.subarray)b.set(g.subarray(f,f+a),c);else for(d=0;d<a;d++)b[c+d]=g[f+d];return a},write:function(a,b,c,d,f,g){b.buffer===x.buffer&&(g=!1);if(!d)return 0;a=a.node;a.timestamp=Date.now();if(b.subarray&&(!a.Ia||a.Ia.subarray)){if(g)return a.Ia=b.subarray(c,c+d),a.Oa=d;if(0===a.Oa&&0===f)return a.Ia=
b.slice(c,c+d),a.Oa=d;if(f+d<=a.Oa)return a.Ia.set(b.subarray(c,c+d),f),d}P.mb(a,f+d);if(a.Ia.subarray&&b.subarray)a.Ia.set(b.subarray(c,c+d),f);else for(g=0;g<d;g++)a.Ia[f+g]=b[c+g];a.Oa=Math.max(a.Oa,f+d);return d},Va:function(a,b,c){1===c?b+=a.position:2===c&&32768===(a.node.mode&61440)&&(b+=a.node.Oa);if(0>b)throw new O(28);return b},jb:function(a,b,c){P.mb(a.node,b+c);a.node.Oa=Math.max(a.node.Oa,b+c)},$a:function(a,b,c,d,f,g,n){if(32768!==(a.node.mode&61440))throw new O(43);a=a.node.Ia;if(n&
2||a.buffer!==b.buffer){if(0<f||f+d<a.length)a.subarray?a=a.subarray(f,f+d):a=Array.prototype.slice.call(a,f,f+d);f=!0;n=b.buffer==x.buffer;d=Ya(d);if(!d)throw new O(48);(n?x:b).set(a,d)}else f=!1,d=a.byteOffset;return{Eb:d,cb:f}},ab:function(a,b,c,d,f){if(32768!==(a.node.mode&61440))throw new O(43);if(f&2)return 0;P.Ka.write(a,b,0,d,c,!1);return 0}}},Nb=null,Ob={},T=[],Pb=1,U=null,Qb=!0,V={},O=null,Lb={};
function W(a,b){a=Cb("/",a);b=b||{};if(!a)return{path:"",node:null};var c={nb:!0,ib:0},d;for(d in c)void 0===b[d]&&(b[d]=c[d]);if(8<b.ib)throw new O(32);a=xb(a.split("/").filter(function(n){return!!n}),!1);var f=Nb;c="/";for(d=0;d<a.length;d++){var g=d===a.length-1;if(g&&b.parent)break;f=Mb(f,a[d]);c=k(c+"/"+a[d]);f.Wa&&(!g||g&&b.nb)&&(f=f.Wa.root);if(!g||b.Ua)for(g=0;40960===(f.mode&61440);)if(f=Rb(c),c=Cb(yb(c),f),f=W(c,{ib:b.ib}).node,40<g++)throw new O(32);}return{path:c,node:f}}
function Sb(a){for(var b;;){if(a===a.parent)return a=a.Sa.pb,b?"/"!==a[a.length-1]?a+"/"+b:a+b:a;b=b?a.name+"/"+b:a.name;a=a.parent}}function Tb(a,b){for(var c=0,d=0;d<b.length;d++)c=(c<<5)-c+b.charCodeAt(d)|0;return(a+c>>>0)%U.length}function Ub(a){var b=Tb(a.parent.id,a.name);if(U[b]===a)U[b]=a.Xa;else for(b=U[b];b;){if(b.Xa===a){b.Xa=a.Xa;break}b=b.Xa}}
function Mb(a,b){var c;if(c=(c=Vb(a,"x"))?c:a.Ja.lookup?0:2)throw new O(c,a);for(c=U[Tb(a.id,b)];c;c=c.Xa){var d=c.name;if(c.parent.id===a.id&&d===b)return c}return a.Ja.lookup(a,b)}function Kb(a,b,c,d){a=new Wb(a,b,c,d);b=Tb(a.parent.id,a.name);a.Xa=U[b];return U[b]=a}function R(a){return 16384===(a&61440)}var Xb={r:0,rs:1052672,"r+":2,w:577,wx:705,xw:705,"w+":578,"wx+":706,"xw+":706,a:1089,ax:1217,xa:1217,"a+":1090,"ax+":1218,"xa+":1218};
function Yb(a){var b=["r","w","rw"][a&3];a&512&&(b+="w");return b}function Vb(a,b){if(Qb)return 0;if(-1===b.indexOf("r")||a.mode&292){if(-1!==b.indexOf("w")&&!(a.mode&146)||-1!==b.indexOf("x")&&!(a.mode&73))return 2}else return 2;return 0}function Zb(a,b){try{return Mb(a,b),20}catch(c){}return Vb(a,"wx")}function $b(a,b,c){try{var d=Mb(a,b)}catch(f){return f.La}if(a=Vb(a,"wx"))return a;if(c){if(!R(d.mode))return 54;if(d===d.parent||"/"===Sb(d))return 10}else if(R(d.mode))return 31;return 0}
function ac(a){var b=4096;for(a=a||0;a<=b;a++)if(!T[a])return a;throw new O(33);}function bc(a,b){cc||(cc=function(){},cc.prototype={});var c=new cc,d;for(d in a)c[d]=a[d];a=c;b=ac(b);a.fd=b;return T[b]=a}var Jb={open:function(a){a.Ka=Ob[a.node.rdev].Ka;a.Ka.open&&a.Ka.open(a)},Va:function(){throw new O(70);}};function Fb(a,b){Ob[a]={Ka:b}}
function dc(a,b){var c="/"===b,d=!b;if(c&&Nb)throw new O(10);if(!c&&!d){var f=W(b,{nb:!1});b=f.path;f=f.node;if(f.Wa)throw new O(10);if(!R(f.mode))throw new O(54);}b={type:a,Kb:{},pb:b,Db:[]};a=a.Sa(b);a.Sa=b;b.root=a;c?Nb=a:f&&(f.Wa=b,f.Sa&&f.Sa.Db.push(b))}function ba(a,b,c){var d=W(a,{parent:!0}).node;a=zb(a);if(!a||"."===a||".."===a)throw new O(28);var f=Zb(d,a);if(f)throw new O(f);if(!d.Ja.Za)throw new O(63);return d.Ja.Za(d,a,b,c)}function X(a,b){ba(a,(void 0!==b?b:511)&1023|16384,0)}
function ec(a,b,c){"undefined"===typeof c&&(c=b,b=438);ba(a,b|8192,c)}function fc(a,b){if(!Cb(a))throw new O(44);var c=W(b,{parent:!0}).node;if(!c)throw new O(44);b=zb(b);var d=Zb(c,b);if(d)throw new O(d);if(!c.Ja.symlink)throw new O(63);c.Ja.symlink(c,b,a)}
function sa(a){var b=W(a,{parent:!0}).node,c=zb(a),d=Mb(b,c),f=$b(b,c,!1);if(f)throw new O(f);if(!b.Ja.unlink)throw new O(63);if(d.Wa)throw new O(10);try{V.willDeletePath&&V.willDeletePath(a)}catch(g){G("FS.trackingDelegate['willDeletePath']('"+a+"') threw an exception: "+g.message)}b.Ja.unlink(b,c);Ub(d);try{if(V.onDeletePath)V.onDeletePath(a)}catch(g){G("FS.trackingDelegate['onDeletePath']('"+a+"') threw an exception: "+g.message)}}
function Rb(a){a=W(a).node;if(!a)throw new O(44);if(!a.Ja.readlink)throw new O(28);return Cb(Sb(a.parent),a.Ja.readlink(a))}function hc(a,b){a=W(a,{Ua:!b}).node;if(!a)throw new O(44);if(!a.Ja.Qa)throw new O(63);return a.Ja.Qa(a)}function ic(a){return hc(a,!0)}function ca(a,b){var c;"string"===typeof a?c=W(a,{Ua:!0}).node:c=a;if(!c.Ja.Pa)throw new O(63);c.Ja.Pa(c,{mode:b&4095|c.mode&-4096,timestamp:Date.now()})}
function jc(a){var b;"string"===typeof a?b=W(a,{Ua:!0}).node:b=a;if(!b.Ja.Pa)throw new O(63);b.Ja.Pa(b,{timestamp:Date.now()})}function kc(a,b){if(0>b)throw new O(28);var c;"string"===typeof a?c=W(a,{Ua:!0}).node:c=a;if(!c.Ja.Pa)throw new O(63);if(R(c.mode))throw new O(31);if(32768!==(c.mode&61440))throw new O(28);if(a=Vb(c,"w"))throw new O(a);c.Ja.Pa(c,{size:b,timestamp:Date.now()})}
function l(a,b,c,d){if(""===a)throw new O(44);if("string"===typeof b){var f=Xb[b];if("undefined"===typeof f)throw Error("Unknown file open mode: "+b);b=f}c=b&64?("undefined"===typeof c?438:c)&4095|32768:0;if("object"===typeof a)var g=a;else{a=k(a);try{g=W(a,{Ua:!(b&131072)}).node}catch(n){}}f=!1;if(b&64)if(g){if(b&128)throw new O(20);}else g=ba(a,c,0),f=!0;if(!g)throw new O(44);8192===(g.mode&61440)&&(b&=-513);if(b&65536&&!R(g.mode))throw new O(54);if(!f&&(c=g?40960===(g.mode&61440)?32:R(g.mode)&&
("r"!==Yb(b)||b&512)?31:Vb(g,Yb(b)):44))throw new O(c);b&512&&kc(g,0);b&=-641;d=bc({node:g,path:Sb(g),flags:b,seekable:!0,position:0,Ka:g.Ka,Hb:[],error:!1},d);d.Ka.open&&d.Ka.open(d);!e.logReadFiles||b&1||(lc||(lc={}),a in lc||(lc[a]=1,G("FS.trackingDelegate error on read file: "+a)));try{V.onOpenFile&&(g=0,1!==(b&2097155)&&(g|=1),0!==(b&2097155)&&(g|=2),V.onOpenFile(a,g))}catch(n){G("FS.trackingDelegate['onOpenFile']('"+a+"', flags) threw an exception: "+n.message)}return d}
function ea(a){if(null===a.fd)throw new O(8);a.gb&&(a.gb=null);try{a.Ka.close&&a.Ka.close(a)}catch(b){throw b;}finally{T[a.fd]=null}a.fd=null}function mc(a,b,c){if(null===a.fd)throw new O(8);if(!a.seekable||!a.Ka.Va)throw new O(70);if(0!=c&&1!=c&&2!=c)throw new O(28);a.position=a.Ka.Va(a,b,c);a.Hb=[]}
function nc(a,b,c,d,f){if(0>d||0>f)throw new O(28);if(null===a.fd)throw new O(8);if(1===(a.flags&2097155))throw new O(8);if(R(a.node.mode))throw new O(31);if(!a.Ka.read)throw new O(28);var g="undefined"!==typeof f;if(!g)f=a.position;else if(!a.seekable)throw new O(70);b=a.Ka.read(a,b,c,d,f);g||(a.position+=b);return b}
function da(a,b,c,d,f,g){if(0>d||0>f)throw new O(28);if(null===a.fd)throw new O(8);if(0===(a.flags&2097155))throw new O(8);if(R(a.node.mode))throw new O(31);if(!a.Ka.write)throw new O(28);a.flags&1024&&mc(a,0,2);var n="undefined"!==typeof f;if(!n)f=a.position;else if(!a.seekable)throw new O(70);b=a.Ka.write(a,b,c,d,f,g);n||(a.position+=b);try{if(a.path&&V.onWriteToFile)V.onWriteToFile(a.path)}catch(r){G("FS.trackingDelegate['onWriteToFile']('"+a.path+"') threw an exception: "+r.message)}return b}
function ra(a){var b={encoding:"binary"};b=b||{};b.flags=b.flags||"r";b.encoding=b.encoding||"binary";if("utf8"!==b.encoding&&"binary"!==b.encoding)throw Error('Invalid encoding type "'+b.encoding+'"');var c,d=l(a,b.flags);a=hc(a).size;var f=new Uint8Array(a);nc(d,f,0,a,0);"utf8"===b.encoding?c=$a(f,0):"binary"===b.encoding&&(c=f);ea(d);return c}
function oc(){O||(O=function(a,b){this.node=b;this.Gb=function(c){this.La=c};this.Gb(a);this.message="FS error"},O.prototype=Error(),O.prototype.constructor=O,[44].forEach(function(a){Lb[a]=new O(a);Lb[a].stack="<generic error, no stack>"}))}var pc;function aa(a,b){var c=0;a&&(c|=365);b&&(c|=146);return c}
function Nc(a,b,c){a=k("/dev/"+a);var d=aa(!!b,!!c);Oc||(Oc=64);var f=Oc++<<8|0;Fb(f,{open:function(g){g.seekable=!1},close:function(){c&&c.buffer&&c.buffer.length&&c(10)},read:function(g,n,r,w){for(var u=0,C=0;C<w;C++){try{var H=b()}catch(ka){throw new O(29);}if(void 0===H&&0===u)throw new O(6);if(null===H||void 0===H)break;u++;n[r+C]=H}u&&(g.node.timestamp=Date.now());return u},write:function(g,n,r,w){for(var u=0;u<w;u++)try{c(n[r+u])}catch(C){throw new O(29);}w&&(g.node.timestamp=Date.now());return u}});
ec(a,d,f)}var Oc,Y={},cc,lc,Qc={};
function Rc(a,b,c){try{var d=a(b)}catch(f){if(f&&f.node&&k(b)!==k(Sb(f.node)))return-54;throw f;}I[c>>2]=d.dev;I[c+4>>2]=0;I[c+8>>2]=d.ino;I[c+12>>2]=d.mode;I[c+16>>2]=d.nlink;I[c+20>>2]=d.uid;I[c+24>>2]=d.gid;I[c+28>>2]=d.rdev;I[c+32>>2]=0;J=[d.size>>>0,(K=d.size,1<=+Ma(K)?0<K?(Na(+Oa(K/4294967296),4294967295)|0)>>>0:~~+Pa((K-+(~~K>>>0))/4294967296)>>>0:0)];I[c+40>>2]=J[0];I[c+44>>2]=J[1];I[c+48>>2]=4096;I[c+52>>2]=d.blocks;I[c+56>>2]=d.atime.getTime()/1E3|0;I[c+60>>2]=0;I[c+64>>2]=d.mtime.getTime()/
1E3|0;I[c+68>>2]=0;I[c+72>>2]=d.ctime.getTime()/1E3|0;I[c+76>>2]=0;J=[d.ino>>>0,(K=d.ino,1<=+Ma(K)?0<K?(Na(+Oa(K/4294967296),4294967295)|0)>>>0:~~+Pa((K-+(~~K>>>0))/4294967296)>>>0:0)];I[c+80>>2]=J[0];I[c+84>>2]=J[1];return 0}var Sc=void 0;function Tc(){Sc+=4;return I[Sc-4>>2]}function Z(a){a=T[a];if(!a)throw new O(8);return a}var Uc={};
function Vc(){if(!Wc){var a={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"===typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:wa||"./this.program"},b;for(b in Uc)a[b]=Uc[b];var c=[];for(b in a)c.push(b+"="+a[b]);Wc=c}return Wc}var Wc;y("GMT",L,62944,4);
function Xc(){function a(g){return(g=g.toTimeString().match(/\(([A-Za-z ]+)\)$/))?g[1]:"GMT"}if(!Yc){Yc=!0;I[Zc()>>2]=60*(new Date).getTimezoneOffset();var b=(new Date).getFullYear(),c=new Date(b,0,1);b=new Date(b,6,1);I[$c()>>2]=Number(c.getTimezoneOffset()!=b.getTimezoneOffset());var d=a(c),f=a(b);d=ab(d);f=ab(f);b.getTimezoneOffset()<c.getTimezoneOffset()?(I[ad()>>2]=d,I[ad()+4>>2]=f):(I[ad()>>2]=f,I[ad()+4>>2]=d)}}var Yc,bd;
za?bd=function(){var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:"undefined"!==typeof dateNow?bd=dateNow:bd=function(){return performance.now()};function cd(a){for(var b=bd();bd()-b<a/1E3;);}e._usleep=cd;function Wb(a,b,c,d){a||(a=this);this.parent=a;this.Sa=a.Sa;this.Wa=null;this.id=Pb++;this.name=b;this.mode=c;this.Ja={};this.Ka={};this.rdev=d}
Object.defineProperties(Wb.prototype,{read:{get:function(){return 365===(this.mode&365)},set:function(a){a?this.mode|=365:this.mode&=-366}},write:{get:function(){return 146===(this.mode&146)},set:function(a){a?this.mode|=146:this.mode&=-147}}});oc();U=Array(4096);dc(P,"/");X("/tmp");X("/home");X("/home/web_user");
(function(){X("/dev");Fb(259,{read:function(){return 0},write:function(d,f,g,n){return n}});ec("/dev/null",259);Eb(1280,Hb);Eb(1536,Ib);ec("/dev/tty",1280);ec("/dev/tty1",1536);if("object"===typeof crypto&&"function"===typeof crypto.getRandomValues){var a=new Uint8Array(1);var b=function(){crypto.getRandomValues(a);return a[0]}}else if(za)try{var c=__webpack_require__(/*! crypto */ "./node_modules/crypto-browserify/index.js");b=function(){return c.randomBytes(1)[0]}}catch(d){}b||(b=function(){E("random_device")});Nc("random",b);Nc("urandom",b);X("/dev/shm");
X("/dev/shm/tmp")})();X("/proc");X("/proc/self");X("/proc/self/fd");dc({Sa:function(){var a=Kb("/proc/self","fd",16895,73);a.Ja={lookup:function(b,c){var d=T[+c];if(!d)throw new O(8);b={parent:null,Sa:{pb:"fake"},Ja:{readlink:function(){return d.path}}};return b.parent=b}};return a}},"/proc/self/fd");function fa(a,b){var c=Array(ma(a)+1);a=y(a,c,0,c.length);b&&(c.length=a);return c}
var fd={a:function(a,b,c,d){E("Assertion failed: "+N(a)+", at: "+[b?N(b):"unknown filename",c,d?N(d):"unknown function"])},x:function(a){try{return a=N(a),sa(a),0}catch(b){return"undefined"!==typeof Y&&b instanceof O||E(b),-b.La}},t:function(a,b){try{return a=N(a),ca(a,b),0}catch(c){return"undefined"!==typeof Y&&c instanceof O||E(c),-c.La}},E:function(a,b){try{if(0===b)return-28;if(b<ma("/")+1)return-68;y("/",L,a,b);return a}catch(c){return"undefined"!==typeof Y&&c instanceof O||E(c),-c.La}},w:function(a,
b,c,d,f,g){try{a:{g<<=12;var n=!1;if(0!==(d&16)&&0!==a%16384)var r=-28;else{if(0!==(d&32)){var w=dd(16384,b);if(!w){r=-48;break a}ed(w,0,b);n=!0}else{var u=T[f];if(!u){r=-8;break a}var C=g,H=L;if(0!==(c&2)&&0===(d&2)&&2!==(u.flags&2097155))throw new O(2);if(1===(u.flags&2097155))throw new O(2);if(!u.Ka.$a)throw new O(43);var ka=u.Ka.$a(u,H,a,b,C,c,d);w=ka.Eb;n=ka.cb}Qc[w]={Cb:w,Bb:b,cb:n,fd:f,flags:d,offset:g};r=w}}return r}catch(la){return"undefined"!==typeof Y&&la instanceof O||E(la),-la.La}},G:function(a,
b,c){try{var d=T[a];if(!d)throw new O(8);if(0===(d.flags&2097155))throw new O(28);kc(d.node,c);return 0}catch(f){return"undefined"!==typeof Y&&f instanceof O||E(f),-f.La}},f:function(a,b){try{return a=N(a),Rc(hc,a,b)}catch(c){return"undefined"!==typeof Y&&c instanceof O||E(c),-c.La}},s:function(a,b){try{return a=N(a),Rc(ic,a,b)}catch(c){return"undefined"!==typeof Y&&c instanceof O||E(c),-c.La}},r:function(a,b){try{var c=Z(a);return Rc(hc,c.path,b)}catch(d){return"undefined"!==typeof Y&&d instanceof
O||E(d),-d.La}},d:function(){return 42},I:function(){return 0},C:function(a){try{var b=T[a];if(!b)throw new O(8);jc(b.node);return 0}catch(c){return"undefined"!==typeof Y&&c instanceof O||E(c),-c.La}},B:function(a){try{return a=N(a),jc(a),0}catch(b){return"undefined"!==typeof Y&&b instanceof O||E(b),-b.La}},b:function(a,b,c){Sc=c;try{var d=Z(a);switch(b){case 0:var f=Tc();return 0>f?-28:l(d.path,d.flags,0,f).fd;case 1:case 2:return 0;case 3:return d.flags;case 4:return f=Tc(),d.flags|=f,0;case 12:return f=
Tc(),La[f+0>>1]=2,0;case 13:case 14:return 0;case 16:case 8:return-28;case 9:return Bb(28),-1;default:return-28}}catch(g){return"undefined"!==typeof Y&&g instanceof O||E(g),-g.La}},F:function(a,b,c){try{var d=Z(a);return nc(d,x,b,c)}catch(f){return"undefined"!==typeof Y&&f instanceof O||E(f),-f.La}},h:function(a,b){try{a=N(a);if(b&-8)var c=-28;else{var d;(d=W(a,{Ua:!0}).node)?(a="",b&4&&(a+="r"),b&2&&(a+="w"),b&1&&(a+="x"),c=a&&Vb(d,a)?-2:0):c=-44}return c}catch(f){return"undefined"!==typeof Y&&f instanceof
O||E(f),-f.La}},p:function(a,b){try{return a=N(a),a=k(a),"/"===a[a.length-1]&&(a=a.substr(0,a.length-1)),X(a,b),0}catch(c){return"undefined"!==typeof Y&&c instanceof O||E(c),-c.La}},A:function(a){try{a=N(a);var b=W(a,{parent:!0}).node,c=zb(a),d=Mb(b,c),f=$b(b,c,!0);if(f)throw new O(f);if(!b.Ja.rmdir)throw new O(63);if(d.Wa)throw new O(10);try{V.willDeletePath&&V.willDeletePath(a)}catch(g){G("FS.trackingDelegate['willDeletePath']('"+a+"') threw an exception: "+g.message)}b.Ja.rmdir(b,c);Ub(d);try{if(V.onDeletePath)V.onDeletePath(a)}catch(g){G("FS.trackingDelegate['onDeletePath']('"+
a+"') threw an exception: "+g.message)}return 0}catch(g){return"undefined"!==typeof Y&&g instanceof O||E(g),-g.La}},i:function(a,b,c){Sc=c;try{var d=N(a),f=Tc();return l(d,b,f).fd}catch(g){return"undefined"!==typeof Y&&g instanceof O||E(g),-g.La}},y:function(a,b,c){try{a=N(a);if(0>=c)var d=-28;else{var f=Rb(a),g=Math.min(c,ma(f)),n=x[b+g];y(f,L,b,c+1);x[b+g]=n;d=g}return d}catch(r){return"undefined"!==typeof Y&&r instanceof O||E(r),-r.La}},v:function(a,b){try{if(-1===a||0===b)var c=-28;else{var d=
Qc[a];if(d&&b===d.Bb){var f=T[d.fd],g=d.flags,n=d.offset,r=L.slice(a,a+b);f&&f.Ka.ab&&f.Ka.ab(f,r,n,b,g);Qc[a]=null;d.cb&&ia(d.Cb)}c=0}return c}catch(w){return"undefined"!==typeof Y&&w instanceof O||E(w),-w.La}},u:function(a,b){try{var c=T[a];if(!c)throw new O(8);ca(c.node,b);return 0}catch(d){return"undefined"!==typeof Y&&d instanceof O||E(d),-d.La}},l:function(a,b,c){L.copyWithin(a,b,b+c)},c:function(a){var b=L.length;if(2147418112<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,
a+100663296);d=Math.max(16777216,a,d);0<d%65536&&(d+=65536-d%65536);a:{try{Sa.grow(Math.min(2147418112,d)-bb.byteLength+65535>>16);cb(Sa.buffer);var f=1;break a}catch(g){}f=void 0}if(f)return!0}return!1},n:function(a,b){var c=0;Vc().forEach(function(d,f){var g=b+c;f=I[a+4*f>>2]=g;for(g=0;g<d.length;++g)x[f++>>0]=d.charCodeAt(g);x[f>>0]=0;c+=d.length+1});return 0},o:function(a,b){var c=Vc();I[a>>2]=c.length;var d=0;c.forEach(function(f){d+=f.length+1});I[b>>2]=d;return 0},e:function(a){try{var b=Z(a);
ea(b);return 0}catch(c){return"undefined"!==typeof Y&&c instanceof O||E(c),c.La}},m:function(a,b){try{var c=Z(a);x[b>>0]=c.tty?2:R(c.mode)?3:40960===(c.mode&61440)?7:4;return 0}catch(d){return"undefined"!==typeof Y&&d instanceof O||E(d),d.La}},k:function(a,b,c,d,f){try{var g=Z(a);a=4294967296*c+(b>>>0);if(-9007199254740992>=a||9007199254740992<=a)return-61;mc(g,a,d);J=[g.position>>>0,(K=g.position,1<=+Ma(K)?0<K?(Na(+Oa(K/4294967296),4294967295)|0)>>>0:~~+Pa((K-+(~~K>>>0))/4294967296)>>>0:0)];I[f>>
2]=J[0];I[f+4>>2]=J[1];g.gb&&0===a&&0===d&&(g.gb=null);return 0}catch(n){return"undefined"!==typeof Y&&n instanceof O||E(n),n.La}},D:function(a){try{var b=Z(a);return b.Ka&&b.Ka.fsync?-b.Ka.fsync(b):0}catch(c){return"undefined"!==typeof Y&&c instanceof O||E(c),c.La}},H:function(a,b,c,d){try{a:{for(var f=Z(a),g=a=0;g<c;g++){var n=da(f,x,I[b+8*g>>2],I[b+(8*g+4)>>2],void 0);if(0>n){var r=-1;break a}a+=n}r=a}I[d>>2]=r;return 0}catch(w){return"undefined"!==typeof Y&&w instanceof O||E(w),w.La}},g:function(a){var b=
Date.now();I[a>>2]=b/1E3|0;I[a+4>>2]=b%1E3*1E3|0;return 0},j:function(a){Xc();a=new Date(1E3*I[a>>2]);I[15724]=a.getSeconds();I[15725]=a.getMinutes();I[15726]=a.getHours();I[15727]=a.getDate();I[15728]=a.getMonth();I[15729]=a.getFullYear()-1900;I[15730]=a.getDay();var b=new Date(a.getFullYear(),0,1);I[15731]=(a.getTime()-b.getTime())/864E5|0;I[15733]=-(60*a.getTimezoneOffset());var c=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();b=b.getTimezoneOffset();a=(c!=b&&a.getTimezoneOffset()==Math.min(b,
c))|0;I[15732]=a;a=I[ad()+(a?4:0)>>2];I[15734]=a;return 62896},memory:Sa,J:function(a,b){if(0===a)return Bb(28),-1;var c=I[a>>2];a=I[a+4>>2];if(0>a||999999999<a||0>c)return Bb(28),-1;0!==b&&(I[b>>2]=0,I[b+4>>2]=0);return cd(1E6*c+a/1E3)},z:function(a){switch(a){case 30:return 16384;case 85:return 131068;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:case 79:return 200809;
case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;
case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1E3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return"object"===typeof navigator?navigator.hardwareConcurrency||1:1}Bb(28);return-1},
table:Ja,K:function(a){var b=Date.now()/1E3|0;a&&(I[a>>2]=b);return b},q:function(a,b){if(b){var c=1E3*I[b+8>>2];c+=I[b+12>>2]/1E3}else c=Date.now();a=N(a);try{b=c;var d=W(a,{Ua:!0}).node;d.Ja.Pa(d,{timestamp:Math.max(b,c)});return 0}catch(f){a=f;if(!(a instanceof O)){a+=" : ";a:{d=Error();if(!d.stack){try{throw Error();}catch(g){d=g}if(!d.stack){d="(no stack trace available)";break a}}d=d.stack.toString()}e.extraStackTrace&&(d+="\n"+e.extraStackTrace());d=tb(d);throw a+d;}Bb(a.La);return-1}}},gd=
function(){function a(f){e.asm=f.exports;kb--;e.monitorRunDependencies&&e.monitorRunDependencies(kb);0==kb&&(null!==lb&&(clearInterval(lb),lb=null),mb&&(f=mb,mb=null,f()))}function b(f){a(f.instance)}function c(f){return rb().then(function(g){return WebAssembly.instantiate(g,d)}).then(f,function(g){G("failed to asynchronously prepare wasm: "+g);E(g)})}var d={a:fd};kb++;e.monitorRunDependencies&&e.monitorRunDependencies(kb);if(e.instantiateWasm)try{return e.instantiateWasm(d,a)}catch(f){return G("Module.instantiateWasm callback failed with error: "+
f),!1}(function(){if(Ka||"function"!==typeof WebAssembly.instantiateStreaming||nb()||"function"!==typeof fetch)return c(b);fetch(ob,{credentials:"same-origin"}).then(function(f){return WebAssembly.instantiateStreaming(f,d).then(b,function(g){G("wasm streaming compile failed: "+g);G("falling back to ArrayBuffer instantiation");c(b)})})})();return{}}();e.asm=gd;
var sb=e.___wasm_call_ctors=function(){return(sb=e.___wasm_call_ctors=e.asm.L).apply(null,arguments)},ed=e._memset=function(){return(ed=e._memset=e.asm.M).apply(null,arguments)};e._sqlite3_free=function(){return(e._sqlite3_free=e.asm.N).apply(null,arguments)};e.___errno_location=function(){return(e.___errno_location=e.asm.O).apply(null,arguments)};e._sqlite3_finalize=function(){return(e._sqlite3_finalize=e.asm.P).apply(null,arguments)};
e._sqlite3_reset=function(){return(e._sqlite3_reset=e.asm.Q).apply(null,arguments)};e._sqlite3_clear_bindings=function(){return(e._sqlite3_clear_bindings=e.asm.R).apply(null,arguments)};e._sqlite3_value_blob=function(){return(e._sqlite3_value_blob=e.asm.S).apply(null,arguments)};e._sqlite3_value_text=function(){return(e._sqlite3_value_text=e.asm.T).apply(null,arguments)};e._sqlite3_value_bytes=function(){return(e._sqlite3_value_bytes=e.asm.U).apply(null,arguments)};
e._sqlite3_value_double=function(){return(e._sqlite3_value_double=e.asm.V).apply(null,arguments)};e._sqlite3_value_int=function(){return(e._sqlite3_value_int=e.asm.W).apply(null,arguments)};e._sqlite3_value_type=function(){return(e._sqlite3_value_type=e.asm.X).apply(null,arguments)};e._sqlite3_result_blob=function(){return(e._sqlite3_result_blob=e.asm.Y).apply(null,arguments)};e._sqlite3_result_double=function(){return(e._sqlite3_result_double=e.asm.Z).apply(null,arguments)};
e._sqlite3_result_error=function(){return(e._sqlite3_result_error=e.asm._).apply(null,arguments)};e._sqlite3_result_int=function(){return(e._sqlite3_result_int=e.asm.$).apply(null,arguments)};e._sqlite3_result_int64=function(){return(e._sqlite3_result_int64=e.asm.aa).apply(null,arguments)};e._sqlite3_result_null=function(){return(e._sqlite3_result_null=e.asm.ba).apply(null,arguments)};e._sqlite3_result_text=function(){return(e._sqlite3_result_text=e.asm.ca).apply(null,arguments)};
e._sqlite3_step=function(){return(e._sqlite3_step=e.asm.da).apply(null,arguments)};e._sqlite3_data_count=function(){return(e._sqlite3_data_count=e.asm.ea).apply(null,arguments)};e._sqlite3_column_blob=function(){return(e._sqlite3_column_blob=e.asm.fa).apply(null,arguments)};e._sqlite3_column_bytes=function(){return(e._sqlite3_column_bytes=e.asm.ga).apply(null,arguments)};e._sqlite3_column_double=function(){return(e._sqlite3_column_double=e.asm.ha).apply(null,arguments)};
e._sqlite3_column_text=function(){return(e._sqlite3_column_text=e.asm.ia).apply(null,arguments)};e._sqlite3_column_type=function(){return(e._sqlite3_column_type=e.asm.ja).apply(null,arguments)};e._sqlite3_column_name=function(){return(e._sqlite3_column_name=e.asm.ka).apply(null,arguments)};e._sqlite3_bind_blob=function(){return(e._sqlite3_bind_blob=e.asm.la).apply(null,arguments)};e._sqlite3_bind_double=function(){return(e._sqlite3_bind_double=e.asm.ma).apply(null,arguments)};
e._sqlite3_bind_int=function(){return(e._sqlite3_bind_int=e.asm.na).apply(null,arguments)};e._sqlite3_bind_text=function(){return(e._sqlite3_bind_text=e.asm.oa).apply(null,arguments)};e._sqlite3_bind_parameter_index=function(){return(e._sqlite3_bind_parameter_index=e.asm.pa).apply(null,arguments)};e._sqlite3_errmsg=function(){return(e._sqlite3_errmsg=e.asm.qa).apply(null,arguments)};e._sqlite3_exec=function(){return(e._sqlite3_exec=e.asm.ra).apply(null,arguments)};
e._sqlite3_prepare_v2=function(){return(e._sqlite3_prepare_v2=e.asm.sa).apply(null,arguments)};e._sqlite3_changes=function(){return(e._sqlite3_changes=e.asm.ta).apply(null,arguments)};e._sqlite3_close_v2=function(){return(e._sqlite3_close_v2=e.asm.ua).apply(null,arguments)};e._sqlite3_create_function_v2=function(){return(e._sqlite3_create_function_v2=e.asm.va).apply(null,arguments)};e._sqlite3_open=function(){return(e._sqlite3_open=e.asm.wa).apply(null,arguments)};
var Ya=e._malloc=function(){return(Ya=e._malloc=e.asm.xa).apply(null,arguments)},ia=e._free=function(){return(ia=e._free=e.asm.ya).apply(null,arguments)};e._RegisterExtensionFunctions=function(){return(e._RegisterExtensionFunctions=e.asm.za).apply(null,arguments)};
var ad=e.__get_tzname=function(){return(ad=e.__get_tzname=e.asm.Aa).apply(null,arguments)},$c=e.__get_daylight=function(){return($c=e.__get_daylight=e.asm.Ba).apply(null,arguments)},Zc=e.__get_timezone=function(){return(Zc=e.__get_timezone=e.asm.Ca).apply(null,arguments)},dd=e._memalign=function(){return(dd=e._memalign=e.asm.Da).apply(null,arguments)},ja=e.stackSave=function(){return(ja=e.stackSave=e.asm.Ea).apply(null,arguments)},t=e.stackAlloc=function(){return(t=e.stackAlloc=e.asm.Fa).apply(null,
arguments)},pa=e.stackRestore=function(){return(pa=e.stackRestore=e.asm.Ga).apply(null,arguments)};e.dynCall_vi=function(){return(e.dynCall_vi=e.asm.Ha).apply(null,arguments)};e.asm=gd;e.cwrap=function(a,b,c,d){c=c||[];var f=c.every(function(g){return"number"===g});return"string"!==b&&f&&!d?Ua(a):function(){return Va(a,b,c,arguments)}};e.stackSave=ja;e.stackRestore=pa;e.stackAlloc=t;var hd;mb=function id(){hd||jd();hd||(mb=id)};
function jd(){function a(){if(!hd&&(hd=!0,e.calledRun=!0,!Ta)){e.noFSInit||pc||(pc=!0,oc(),e.stdin=e.stdin,e.stdout=e.stdout,e.stderr=e.stderr,e.stdin?Nc("stdin",e.stdin):fc("/dev/tty","/dev/stdin"),e.stdout?Nc("stdout",null,e.stdout):fc("/dev/tty","/dev/stdout"),e.stderr?Nc("stderr",null,e.stderr):fc("/dev/tty1","/dev/stderr"),l("/dev/stdin","r"),l("/dev/stdout","w"),l("/dev/stderr","w"));eb(gb);Qb=!1;eb(hb);if(e.onRuntimeInitialized)e.onRuntimeInitialized();if(e.postRun)for("function"==typeof e.postRun&&
(e.postRun=[e.postRun]);e.postRun.length;){var b=e.postRun.shift();ib.unshift(b)}eb(ib)}}if(!(0<kb)){if(e.preRun)for("function"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)jb();eb(fb);0<kb||(e.setStatus?(e.setStatus("Running..."),setTimeout(function(){setTimeout(function(){e.setStatus("")},1);a()},1)):a())}}e.run=jd;if(e.preInit)for("function"==typeof e.preInit&&(e.preInit=[e.preInit]);0<e.preInit.length;)e.preInit.pop()();noExitRuntime=!0;jd();


        // The shell-pre.js and emcc-generated code goes above
        return Module;
    }); // The end of the promise being returned

  return initSqlJsPromise;
} // The end of our initSqlJs function

// This bit below is copied almost exactly from what you get when you use the MODULARIZE=1 flag with emcc
// However, we don't want to use the emcc modularization. See shell-pre.js
if (true){
    module.exports = initSqlJs;
    // This will allow the module to be used in ES6 or CommonJS
    module.exports.default = initSqlJs;
}
else {}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../next/node_modules/webpack/buildin/module.js */ "./node_modules/next/node_modules/webpack/buildin/module.js")(module), __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js"), "/", __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/stream-browserify/index.js":
/*!*************************************************!*\
  !*** ./node_modules/stream-browserify/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = __webpack_require__(/*! events */ "./node_modules/events/events.js").EventEmitter;
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

inherits(Stream, EE);
Stream.Readable = __webpack_require__(/*! readable-stream/readable.js */ "./node_modules/readable-stream/readable-browser.js");
Stream.Writable = __webpack_require__(/*! readable-stream/writable.js */ "./node_modules/readable-stream/writable-browser.js");
Stream.Duplex = __webpack_require__(/*! readable-stream/duplex.js */ "./node_modules/readable-stream/duplex-browser.js");
Stream.Transform = __webpack_require__(/*! readable-stream/transform.js */ "./node_modules/readable-stream/transform.js");
Stream.PassThrough = __webpack_require__(/*! readable-stream/passthrough.js */ "./node_modules/readable-stream/passthrough.js");

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};


/***/ }),

/***/ "./node_modules/string_decoder/lib/string_decoder.js":
/*!***********************************************************!*\
  !*** ./node_modules/string_decoder/lib/string_decoder.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),

/***/ "./node_modules/tslib/tslib.es6.js":
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/*! exports provided: __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __values, __read, __spread, __spreadArrays, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault, __classPrivateFieldGet, __classPrivateFieldSet */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__extends", function() { return __extends; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__rest", function() { return __rest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__decorate", function() { return __decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__param", function() { return __param; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__metadata", function() { return __metadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__awaiter", function() { return __awaiter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__generator", function() { return __generator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__exportStar", function() { return __exportStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__values", function() { return __values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__read", function() { return __read; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spread", function() { return __spread; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spreadArrays", function() { return __spreadArrays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__await", function() { return __await; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncGenerator", function() { return __asyncGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncDelegator", function() { return __asyncDelegator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncValues", function() { return __asyncValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__makeTemplateObject", function() { return __makeTemplateObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importStar", function() { return __importStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importDefault", function() { return __importDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__classPrivateFieldGet", function() { return __classPrivateFieldGet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__classPrivateFieldSet", function() { return __classPrivateFieldSet; });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __exportStar(m, exports) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}


/***/ }),

/***/ "./node_modules/typeorm/browser/cache/DbQueryResultCache.js":
/*!******************************************************************!*\
  !*** ./node_modules/typeorm/browser/cache/DbQueryResultCache.js ***!
  \******************************************************************/
/*! exports provided: DbQueryResultCache */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DbQueryResultCache", function() { return DbQueryResultCache; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _driver_oracle_OracleDriver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../driver/oracle/OracleDriver */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");
/* harmony import */ var _driver_sqlserver_MssqlParameter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../driver/sqlserver/MssqlParameter */ "./node_modules/typeorm/browser/driver/sqlserver/MssqlParameter.js");
/* harmony import */ var _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../schema-builder/table/Table */ "./node_modules/typeorm/browser/schema-builder/table/Table.js");





/**
 * Caches query result into current database, into separate table called "query-result-cache".
 */

var DbQueryResultCache =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function DbQueryResultCache(connection) {
    this.connection = connection;
    var options = this.connection.driver.options;
    var cacheOptions = typeof this.connection.options.cache === "object" ? this.connection.options.cache : {};
    var cacheTableName = cacheOptions.tableName || "query-result-cache";
    this.queryResultCacheTable = this.connection.driver.buildTableName(cacheTableName, options.schema, options.database);
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Creates a connection with given cache provider.
   */


  DbQueryResultCache.prototype.connect = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        ];
      });
    });
  };
  /**
   * Disconnects with given cache provider.
   */


  DbQueryResultCache.prototype.disconnect = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        ];
      });
    });
  };
  /**
   * Creates table for storing cache if it does not exist yet.
   */


  DbQueryResultCache.prototype.synchronize = function (queryRunner) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var driver, tableExist;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            queryRunner = this.getQueryRunner(queryRunner);
            driver = this.connection.driver;
            return [4
            /*yield*/
            , queryRunner.hasTable(this.queryResultCacheTable)];

          case 1:
            tableExist = _a.sent();
            if (tableExist) return [2
            /*return*/
            ];
            return [4
            /*yield*/
            , queryRunner.createTable(new _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_3__["Table"]({
              name: this.queryResultCacheTable,
              columns: [{
                name: "id",
                isPrimary: true,
                isNullable: false,
                type: driver.normalizeType({
                  type: driver.mappedDataTypes.cacheId
                }),
                generationStrategy: "increment",
                isGenerated: true
              }, {
                name: "identifier",
                type: driver.normalizeType({
                  type: driver.mappedDataTypes.cacheIdentifier
                }),
                isNullable: true
              }, {
                name: "time",
                type: driver.normalizeType({
                  type: driver.mappedDataTypes.cacheTime
                }),
                isPrimary: false,
                isNullable: false
              }, {
                name: "duration",
                type: driver.normalizeType({
                  type: driver.mappedDataTypes.cacheDuration
                }),
                isPrimary: false,
                isNullable: false
              }, {
                name: "query",
                type: driver.normalizeType({
                  type: driver.mappedDataTypes.cacheQuery
                }),
                isPrimary: false,
                isNullable: false
              }, {
                name: "result",
                type: driver.normalizeType({
                  type: driver.mappedDataTypes.cacheResult
                }),
                isNullable: false
              }]
            }))];

          case 2:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Caches given query result.
   * Returns cache result if found.
   * Returns undefined if result is not cached.
   */


  DbQueryResultCache.prototype.getFromCache = function (options, queryRunner) {
    queryRunner = this.getQueryRunner(queryRunner);
    var qb = this.connection.createQueryBuilder(queryRunner).select().from(this.queryResultCacheTable, "cache");

    if (options.identifier) {
      return qb.where(qb.escape("cache") + "." + qb.escape("identifier") + " = :identifier").setParameters({
        identifier: this.connection.driver instanceof _driver_oracle_OracleDriver__WEBPACK_IMPORTED_MODULE_1__["SqlServerDriver"] ? new _driver_sqlserver_MssqlParameter__WEBPACK_IMPORTED_MODULE_2__["MssqlParameter"](options.identifier, "nvarchar") : options.identifier
      }).getRawOne();
    } else if (options.query) {
      if (this.connection.driver instanceof _driver_oracle_OracleDriver__WEBPACK_IMPORTED_MODULE_1__["OracleDriver"]) {
        return qb.where("dbms_lob.compare(" + qb.escape("cache") + "." + qb.escape("query") + ", :query) = 0", {
          query: options.query
        }).getRawOne();
      }

      return qb.where(qb.escape("cache") + "." + qb.escape("query") + " = :query").setParameters({
        query: this.connection.driver instanceof _driver_oracle_OracleDriver__WEBPACK_IMPORTED_MODULE_1__["SqlServerDriver"] ? new _driver_sqlserver_MssqlParameter__WEBPACK_IMPORTED_MODULE_2__["MssqlParameter"](options.query, "nvarchar") : options.query
      }).getRawOne();
    }

    return Promise.resolve(undefined);
  };
  /**
   * Checks if cache is expired or not.
   */


  DbQueryResultCache.prototype.isExpired = function (savedCache) {
    var duration = typeof savedCache.duration === "string" ? parseInt(savedCache.duration) : savedCache.duration;
    return (typeof savedCache.time === "string" ? parseInt(savedCache.time) : savedCache.time) + duration < new Date().getTime();
  };
  /**
   * Stores given query result in the cache.
   */


  DbQueryResultCache.prototype.storeInCache = function (options, savedCache, queryRunner) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var insertedValues, qb, qb;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            queryRunner = this.getQueryRunner(queryRunner);
            insertedValues = options;

            if (this.connection.driver instanceof _driver_oracle_OracleDriver__WEBPACK_IMPORTED_MODULE_1__["SqlServerDriver"]) {
              // todo: bad abstraction, re-implement this part, probably better if we create an entity metadata for cache table
              insertedValues = {
                identifier: new _driver_sqlserver_MssqlParameter__WEBPACK_IMPORTED_MODULE_2__["MssqlParameter"](options.identifier, "nvarchar"),
                time: new _driver_sqlserver_MssqlParameter__WEBPACK_IMPORTED_MODULE_2__["MssqlParameter"](options.time, "bigint"),
                duration: new _driver_sqlserver_MssqlParameter__WEBPACK_IMPORTED_MODULE_2__["MssqlParameter"](options.duration, "int"),
                query: new _driver_sqlserver_MssqlParameter__WEBPACK_IMPORTED_MODULE_2__["MssqlParameter"](options.query, "nvarchar"),
                result: new _driver_sqlserver_MssqlParameter__WEBPACK_IMPORTED_MODULE_2__["MssqlParameter"](options.result, "nvarchar")
              };
            }

            if (!(savedCache && savedCache.identifier)) return [3
            /*break*/
            , 2];
            qb = queryRunner.manager.createQueryBuilder().update(this.queryResultCacheTable).set(insertedValues);
            qb.where(qb.escape("identifier") + " = :condition", {
              condition: insertedValues.identifier
            });
            return [4
            /*yield*/
            , qb.execute()];

          case 1:
            _a.sent();

            return [3
            /*break*/
            , 6];

          case 2:
            if (!(savedCache && savedCache.query)) return [3
            /*break*/
            , 4];
            qb = queryRunner.manager.createQueryBuilder().update(this.queryResultCacheTable).set(insertedValues);

            if (this.connection.driver instanceof _driver_oracle_OracleDriver__WEBPACK_IMPORTED_MODULE_1__["OracleDriver"]) {
              qb.where("dbms_lob.compare(\"query\", :condition) = 0", {
                condition: insertedValues.query
              });
            } else {
              qb.where(qb.escape("query") + " = :condition", {
                condition: insertedValues.query
              });
            }

            return [4
            /*yield*/
            , qb.execute()];

          case 3:
            _a.sent();

            return [3
            /*break*/
            , 6];

          case 4:
            // otherwise insert
            return [4
            /*yield*/
            , queryRunner.manager.createQueryBuilder().insert().into(this.queryResultCacheTable).values(insertedValues).execute()];

          case 5:
            _a.sent();

            _a.label = 6;

          case 6:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Clears everything stored in the cache.
   */


  DbQueryResultCache.prototype.clear = function (queryRunner) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , this.getQueryRunner(queryRunner).clearTable(this.queryResultCacheTable)];
      });
    });
  };
  /**
   * Removes all cached results by given identifiers from cache.
   */


  DbQueryResultCache.prototype.remove = function (identifiers, queryRunner) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , Promise.all(identifiers.map(function (identifier) {
              var qb = _this.getQueryRunner(queryRunner).manager.createQueryBuilder();

              return qb["delete"]().from(_this.queryResultCacheTable).where(qb.escape("identifier") + " = :identifier", {
                identifier: identifier
              }).execute();
            }))];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Gets a query runner to work with.
   */


  DbQueryResultCache.prototype.getQueryRunner = function (queryRunner) {
    if (queryRunner) return queryRunner;
    return this.connection.createQueryRunner("master");
  };

  return DbQueryResultCache;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/cache/QueryResultCacheFactory.js":
/*!***********************************************************************!*\
  !*** ./node_modules/typeorm/browser/cache/QueryResultCacheFactory.js ***!
  \***********************************************************************/
/*! exports provided: QueryResultCacheFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueryResultCacheFactory", function() { return QueryResultCacheFactory; });
/* harmony import */ var _RedisQueryResultCache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RedisQueryResultCache */ "./node_modules/typeorm/browser/cache/RedisQueryResultCache.js");
/* harmony import */ var _DbQueryResultCache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DbQueryResultCache */ "./node_modules/typeorm/browser/cache/DbQueryResultCache.js");


/**
 * Caches query result into Redis database.
 */

var QueryResultCacheFactory =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function QueryResultCacheFactory(connection) {
    this.connection = connection;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Creates a new query result cache based on connection options.
   */


  QueryResultCacheFactory.prototype.create = function () {
    if (!this.connection.options.cache) throw new Error("To use cache you need to enable it in connection options by setting cache: true or providing some caching options. Example: { host: ..., username: ..., cache: true }");
    var cache = this.connection.options.cache;

    if (cache.provider && typeof cache.provider === "function") {
      return cache.provider(this.connection);
    }

    if (cache.type === "redis" || cache.type === "ioredis" || cache.type === "ioredis/cluster") {
      return new _RedisQueryResultCache__WEBPACK_IMPORTED_MODULE_0__["RedisQueryResultCache"](this.connection, cache.type);
    } else {
      return new _DbQueryResultCache__WEBPACK_IMPORTED_MODULE_1__["DbQueryResultCache"](this.connection);
    }
  };

  return QueryResultCacheFactory;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/cache/RedisQueryResultCache.js":
/*!*********************************************************************!*\
  !*** ./node_modules/typeorm/browser/cache/RedisQueryResultCache.js ***!
  \*********************************************************************/
/*! exports provided: RedisQueryResultCache */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RedisQueryResultCache", function() { return RedisQueryResultCache; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../platform/PlatformTools */ "./node_modules/typeorm/browser/platform/PlatformTools.js");


/**
 * Caches query result into Redis database.
 */

var RedisQueryResultCache =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function RedisQueryResultCache(connection, clientType) {
    this.connection = connection;
    this.clientType = clientType;
    this.redis = this.loadRedis();
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Creates a connection with given cache provider.
   */


  RedisQueryResultCache.prototype.connect = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var cacheOptions;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        cacheOptions = this.connection.options.cache;

        if (this.clientType === "redis") {
          if (cacheOptions && cacheOptions.options) {
            this.client = this.redis.createClient(cacheOptions.options);
          } else {
            this.client = this.redis.createClient();
          }
        } else if (this.clientType === "ioredis") {
          if (cacheOptions && cacheOptions.options) {
            this.client = new this.redis(cacheOptions.options);
          } else {
            this.client = new this.redis();
          }
        } else if (this.clientType === "ioredis/cluster") {
          if (cacheOptions && cacheOptions.options && cacheOptions.options instanceof Array) {
            this.client = new this.redis.Cluster(cacheOptions.options);
          } else if (cacheOptions && cacheOptions.options && cacheOptions.options.startupNodes) {
            this.client = new this.redis.Cluster(cacheOptions.options.startupNodes, cacheOptions.options.options);
          } else {
            throw new Error("options.startupNodes required for " + this.clientType + ".");
          }
        }

        return [2
        /*return*/
        ];
      });
    });
  };
  /**
   * Disconnects the connection
   */


  RedisQueryResultCache.prototype.disconnect = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , new Promise(function (ok, fail) {
          _this.client.quit(function (err, result) {
            if (err) return fail(err);
            ok();
            _this.client = undefined;
          });
        })];
      });
    });
  };
  /**
   * Creates table for storing cache if it does not exist yet.
   */


  RedisQueryResultCache.prototype.synchronize = function (queryRunner) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        ];
      });
    });
  };
  /**
   * Caches given query result.
   * Returns cache result if found.
   * Returns undefined if result is not cached.
   */


  RedisQueryResultCache.prototype.getFromCache = function (options, queryRunner) {
    var _this = this;

    return new Promise(function (ok, fail) {
      if (options.identifier) {
        _this.client.get(options.identifier, function (err, result) {
          if (err) return fail(err);
          ok(JSON.parse(result));
        });
      } else if (options.query) {
        _this.client.get(options.query, function (err, result) {
          if (err) return fail(err);
          ok(JSON.parse(result));
        });
      } else {
        ok(undefined);
      }
    });
  };
  /**
   * Checks if cache is expired or not.
   */


  RedisQueryResultCache.prototype.isExpired = function (savedCache) {
    return savedCache.time + savedCache.duration < new Date().getTime();
  };
  /**
   * Stores given query result in the cache.
   */


  RedisQueryResultCache.prototype.storeInCache = function (options, savedCache, queryRunner) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , new Promise(function (ok, fail) {
          if (options.identifier) {
            _this.client.set(options.identifier, JSON.stringify(options), "PX", options.duration, function (err, result) {
              if (err) return fail(err);
              ok();
            });
          } else if (options.query) {
            _this.client.set(options.query, JSON.stringify(options), "PX", options.duration, function (err, result) {
              if (err) return fail(err);
              ok();
            });
          }
        })];
      });
    });
  };
  /**
   * Clears everything stored in the cache.
   */


  RedisQueryResultCache.prototype.clear = function (queryRunner) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , new Promise(function (ok, fail) {
          _this.client.flushdb(function (err, result) {
            if (err) return fail(err);
            ok();
          });
        })];
      });
    });
  };
  /**
   * Removes all cached results by given identifiers from cache.
   */


  RedisQueryResultCache.prototype.remove = function (identifiers, queryRunner) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , Promise.all(identifiers.map(function (identifier) {
              return _this.deleteKey(identifier);
            }))];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Removes a single key from redis database.
   */


  RedisQueryResultCache.prototype.deleteKey = function (key) {
    var _this = this;

    return new Promise(function (ok, fail) {
      _this.client.del(key, function (err, result) {
        if (err) return fail(err);
        ok();
      });
    });
  };
  /**
   * Loads redis dependency.
   */


  RedisQueryResultCache.prototype.loadRedis = function () {
    try {
      return _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_1__["PlatformTools"].load(this.clientType);
    } catch (e) {
      throw new Error("Cannot use cache because " + this.clientType + " is not installed. Please run \"npm i " + this.clientType + " --save\".");
    }
  };

  return RedisQueryResultCache;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/connection/Connection.js":
/*!***************************************************************!*\
  !*** ./node_modules/typeorm/browser/connection/Connection.js ***!
  \***************************************************************/
/*! exports provided: Connection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Connection", function() { return Connection; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _naming_strategy_DefaultNamingStrategy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../naming-strategy/DefaultNamingStrategy */ "./node_modules/typeorm/browser/naming-strategy/DefaultNamingStrategy.js");
/* harmony import */ var _error_CannotExecuteNotConnectedError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/CannotExecuteNotConnectedError */ "./node_modules/typeorm/browser/error/CannotExecuteNotConnectedError.js");
/* harmony import */ var _error_CannotConnectAlreadyConnectedError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/CannotConnectAlreadyConnectedError */ "./node_modules/typeorm/browser/error/CannotConnectAlreadyConnectedError.js");
/* harmony import */ var _error_EntityMetadataNotFoundError__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/EntityMetadataNotFoundError */ "./node_modules/typeorm/browser/error/EntityMetadataNotFoundError.js");
/* harmony import */ var _migration_MigrationExecutor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../migration/MigrationExecutor */ "./node_modules/typeorm/browser/migration/MigrationExecutor.js");
/* harmony import */ var _driver_mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../driver/mongodb/MongoDriver */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");
/* harmony import */ var _metadata_builder_EntityMetadataValidator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../metadata-builder/EntityMetadataValidator */ "./node_modules/typeorm/browser/metadata-builder/EntityMetadataValidator.js");
/* harmony import */ var _error_QueryRunnerProviderAlreadyReleasedError__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../error/QueryRunnerProviderAlreadyReleasedError */ "./node_modules/typeorm/browser/error/QueryRunnerProviderAlreadyReleasedError.js");
/* harmony import */ var _entity_manager_EntityManagerFactory__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../entity-manager/EntityManagerFactory */ "./node_modules/typeorm/browser/entity-manager/EntityManagerFactory.js");
/* harmony import */ var _driver_DriverFactory__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../driver/DriverFactory */ "./node_modules/typeorm/browser/driver/DriverFactory.js");
/* harmony import */ var _ConnectionMetadataBuilder__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ConnectionMetadataBuilder */ "./node_modules/typeorm/browser/connection/ConnectionMetadataBuilder.js");
/* harmony import */ var _query_builder_SelectQueryBuilder__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../query-builder/SelectQueryBuilder */ "./node_modules/typeorm/browser/query-builder/SelectQueryBuilder.js");
/* harmony import */ var _logger_LoggerFactory__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../logger/LoggerFactory */ "./node_modules/typeorm/browser/logger/LoggerFactory.js");
/* harmony import */ var _cache_QueryResultCacheFactory__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../cache/QueryResultCacheFactory */ "./node_modules/typeorm/browser/cache/QueryResultCacheFactory.js");
/* harmony import */ var _entity_manager_SqljsEntityManager__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../entity-manager/SqljsEntityManager */ "./node_modules/typeorm/browser/entity-manager/SqljsEntityManager.js");
/* harmony import */ var _query_builder_RelationLoader__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../query-builder/RelationLoader */ "./node_modules/typeorm/browser/query-builder/RelationLoader.js");
/* harmony import */ var _query_builder_RelationIdLoader__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../query-builder/RelationIdLoader */ "./node_modules/typeorm/browser/query-builder/RelationIdLoader.js");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../ */ "./node_modules/typeorm/browser/index.js");
/* harmony import */ var _util_ObjectUtils__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../util/ObjectUtils */ "./node_modules/typeorm/browser/util/ObjectUtils.js");
/* harmony import */ var _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../driver/aurora-data-api/AuroraDataApiDriver */ "./node_modules/typeorm/browser/driver/aurora-data-api/AuroraDataApiDriver.js");

























/**
 * Connection is a single database ORM connection to a specific database.
 * Its not required to be a database connection, depend on database type it can create connection pool.
 * You can have multiple connections to multiple databases in your application.
 */

var Connection =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function Connection(options) {
    /**
     * Migration instances that are registered for this connection.
     */
    this.migrations = [];
    /**
     * Entity subscriber instances that are registered for this connection.
     */

    this.subscribers = [];
    /**
     * All entity metadatas that are registered for this connection.
     */

    this.entityMetadatas = [];
    this.name = options.name || "default";
    this.options = options;
    this.logger = new _logger_LoggerFactory__WEBPACK_IMPORTED_MODULE_13__["LoggerFactory"]().create(this.options.logger, this.options.logging);
    this.driver = new _driver_DriverFactory__WEBPACK_IMPORTED_MODULE_10__["DriverFactory"]().create(this);
    this.manager = this.createEntityManager();
    this.namingStrategy = options.namingStrategy || new _naming_strategy_DefaultNamingStrategy__WEBPACK_IMPORTED_MODULE_1__["DefaultNamingStrategy"]();
    this.queryResultCache = options.cache ? new _cache_QueryResultCacheFactory__WEBPACK_IMPORTED_MODULE_14__["QueryResultCacheFactory"](this).create() : undefined;
    this.relationLoader = new _query_builder_RelationLoader__WEBPACK_IMPORTED_MODULE_16__["RelationLoader"](this);
    this.relationIdLoader = new _query_builder_RelationIdLoader__WEBPACK_IMPORTED_MODULE_17__["RelationIdLoader"](this);
    this.isConnected = false;
  }

  Object.defineProperty(Connection.prototype, "mongoManager", {
    // -------------------------------------------------------------------------
    // Public Accessors
    // -------------------------------------------------------------------------

    /**
     * Gets the mongodb entity manager that allows to perform mongodb-specific repository operations
     * with any entity in this connection.
     *
     * Available only in mongodb connections.
     */
    get: function get() {
      if (!(this.manager instanceof _driver_mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_6__["MongoEntityManager"])) throw new Error("MongoEntityManager is only available for MongoDB databases.");
      return this.manager;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Connection.prototype, "sqljsManager", {
    /**
     * Gets a sql.js specific Entity Manager that allows to perform special load and save operations
     *
     * Available only in connection with the sqljs driver.
     */
    get: function get() {
      if (!(this.manager instanceof _entity_manager_SqljsEntityManager__WEBPACK_IMPORTED_MODULE_15__["SqljsEntityManager"])) throw new Error("SqljsEntityManager is only available for Sqljs databases.");
      return this.manager;
    },
    enumerable: true,
    configurable: true
  }); // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Performs connection to the database.
   * This method should be called once on application bootstrap.
   * This method not necessarily creates database connection (depend on database type),
   * but it also can setup a connection pool with database to use.
   */

  Connection.prototype.connect = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var error_1;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (this.isConnected) throw new _error_CannotConnectAlreadyConnectedError__WEBPACK_IMPORTED_MODULE_3__["CannotConnectAlreadyConnectedError"](this.name); // connect to the database via its driver

            return [4
            /*yield*/
            , this.driver.connect()];

          case 1:
            // connect to the database via its driver
            _a.sent();

            if (!this.queryResultCache) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , this.queryResultCache.connect()];

          case 2:
            _a.sent();

            _a.label = 3;

          case 3:
            // set connected status for the current connection
            _util_ObjectUtils__WEBPACK_IMPORTED_MODULE_19__["ObjectUtils"].assign(this, {
              isConnected: true
            });
            _a.label = 4;

          case 4:
            _a.trys.push([4, 12,, 14]); // build all metadatas registered in the current connection


            this.buildMetadatas();
            return [4
            /*yield*/
            , this.driver.afterConnect()];

          case 5:
            _a.sent();

            if (!this.options.dropSchema) return [3
            /*break*/
            , 7];
            return [4
            /*yield*/
            , this.dropDatabase()];

          case 6:
            _a.sent();

            _a.label = 7;

          case 7:
            if (!this.options.synchronize) return [3
            /*break*/
            , 9];
            return [4
            /*yield*/
            , this.synchronize()];

          case 8:
            _a.sent();

            _a.label = 9;

          case 9:
            if (!this.options.migrationsRun) return [3
            /*break*/
            , 11];
            return [4
            /*yield*/
            , this.runMigrations({
              transaction: this.options.migrationsTransactionMode
            })];

          case 10:
            _a.sent();

            _a.label = 11;

          case 11:
            return [3
            /*break*/
            , 14];

          case 12:
            error_1 = _a.sent(); // if for some reason build metadata fail (for example validation error during entity metadata check)
            // connection needs to be closed

            return [4
            /*yield*/
            , this.close()];

          case 13:
            // if for some reason build metadata fail (for example validation error during entity metadata check)
            // connection needs to be closed
            _a.sent();

            throw error_1;

          case 14:
            return [2
            /*return*/
            , this];
        }
      });
    });
  };
  /**
   * Closes connection with the database.
   * Once connection is closed, you cannot use repositories or perform any operations except opening connection again.
   */


  Connection.prototype.close = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!this.isConnected) throw new _error_CannotExecuteNotConnectedError__WEBPACK_IMPORTED_MODULE_2__["CannotExecuteNotConnectedError"](this.name);
            return [4
            /*yield*/
            , this.driver.disconnect()];

          case 1:
            _a.sent();

            if (!this.queryResultCache) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , this.queryResultCache.disconnect()];

          case 2:
            _a.sent();

            _a.label = 3;

          case 3:
            _util_ObjectUtils__WEBPACK_IMPORTED_MODULE_19__["ObjectUtils"].assign(this, {
              isConnected: false
            });
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates database schema for all entities registered in this connection.
   * Can be used only after connection to the database is established.
   *
   * @param dropBeforeSync If set to true then it drops the database with all its tables and data
   */


  Connection.prototype.synchronize = function (dropBeforeSync) {
    if (dropBeforeSync === void 0) {
      dropBeforeSync = false;
    }

    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var schemaBuilder;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!this.isConnected) throw new _error_CannotExecuteNotConnectedError__WEBPACK_IMPORTED_MODULE_2__["CannotExecuteNotConnectedError"](this.name);
            if (!dropBeforeSync) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , this.dropDatabase()];

          case 1:
            _a.sent();

            _a.label = 2;

          case 2:
            schemaBuilder = this.driver.createSchemaBuilder();
            return [4
            /*yield*/
            , schemaBuilder.build()];

          case 3:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops the database and all its data.
   * Be careful with this method on production since this method will erase all your database tables and their data.
   * Can be used only after connection to the database is established.
   */
  // TODO rename


  Connection.prototype.dropDatabase = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var queryRunner, databases_1;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            queryRunner = this.createQueryRunner("master");
            _a.label = 1;

          case 1:
            _a.trys.push([1,, 6, 8]);

            if (!(this.driver instanceof _driver_mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_6__["SqlServerDriver"] || this.driver instanceof _driver_mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_6__["MysqlDriver"] || this.driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_20__["AuroraDataApiDriver"])) return [3
            /*break*/
            , 3];
            databases_1 = this.driver.database ? [this.driver.database] : [];
            this.entityMetadatas.forEach(function (metadata) {
              if (metadata.database && databases_1.indexOf(metadata.database) === -1) databases_1.push(metadata.database);
            });
            return [4
            /*yield*/
            , ___WEBPACK_IMPORTED_MODULE_18__["PromiseUtils"].runInSequence(databases_1, function (database) {
              return queryRunner.clearDatabase(database);
            })];

          case 2:
            _a.sent();

            return [3
            /*break*/
            , 5];

          case 3:
            return [4
            /*yield*/
            , queryRunner.clearDatabase()];

          case 4:
            _a.sent();

            _a.label = 5;

          case 5:
            return [3
            /*break*/
            , 8];

          case 6:
            return [4
            /*yield*/
            , queryRunner.release()];

          case 7:
            _a.sent();

            return [7
            /*endfinally*/
            ];

          case 8:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Runs all pending migrations.
   * Can be used only after connection to the database is established.
   */


  Connection.prototype.runMigrations = function (options) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var migrationExecutor, successMigrations;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!this.isConnected) throw new _error_CannotExecuteNotConnectedError__WEBPACK_IMPORTED_MODULE_2__["CannotExecuteNotConnectedError"](this.name);
            migrationExecutor = new _migration_MigrationExecutor__WEBPACK_IMPORTED_MODULE_5__["MigrationExecutor"](this);
            migrationExecutor.transaction = options && options.transaction || "all";
            return [4
            /*yield*/
            , migrationExecutor.executePendingMigrations()];

          case 1:
            successMigrations = _a.sent();
            return [2
            /*return*/
            , successMigrations];
        }
      });
    });
  };
  /**
   * Reverts last executed migration.
   * Can be used only after connection to the database is established.
   */


  Connection.prototype.undoLastMigration = function (options) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var migrationExecutor;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!this.isConnected) throw new _error_CannotExecuteNotConnectedError__WEBPACK_IMPORTED_MODULE_2__["CannotExecuteNotConnectedError"](this.name);
            migrationExecutor = new _migration_MigrationExecutor__WEBPACK_IMPORTED_MODULE_5__["MigrationExecutor"](this);
            migrationExecutor.transaction = options && options.transaction || "all";
            return [4
            /*yield*/
            , migrationExecutor.undoLastMigration()];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Lists all migrations and whether they have been run.
   * Returns true if there are pending migrations
   */


  Connection.prototype.showMigrations = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var migrationExecutor;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!this.isConnected) {
              throw new _error_CannotExecuteNotConnectedError__WEBPACK_IMPORTED_MODULE_2__["CannotExecuteNotConnectedError"](this.name);
            }

            migrationExecutor = new _migration_MigrationExecutor__WEBPACK_IMPORTED_MODULE_5__["MigrationExecutor"](this);
            return [4
            /*yield*/
            , migrationExecutor.showMigrations()];

          case 1:
            return [2
            /*return*/
            , _a.sent()];
        }
      });
    });
  };
  /**
   * Checks if entity metadata exist for the given entity class, target name or table name.
   */


  Connection.prototype.hasMetadata = function (target) {
    return !!this.findMetadata(target);
  };
  /**
   * Gets entity metadata for the given entity class or schema name.
   */


  Connection.prototype.getMetadata = function (target) {
    var metadata = this.findMetadata(target);
    if (!metadata) throw new _error_EntityMetadataNotFoundError__WEBPACK_IMPORTED_MODULE_4__["EntityMetadataNotFoundError"](target);
    return metadata;
  };
  /**
   * Gets repository for the given entity.
   */


  Connection.prototype.getRepository = function (target) {
    return this.manager.getRepository(target);
  };
  /**
   * Gets tree repository for the given entity class or name.
   * Only tree-type entities can have a TreeRepository, like ones decorated with @Tree decorator.
   */


  Connection.prototype.getTreeRepository = function (target) {
    return this.manager.getTreeRepository(target);
  };
  /**
   * Gets mongodb-specific repository for the given entity class or name.
   * Works only if connection is mongodb-specific.
   */


  Connection.prototype.getMongoRepository = function (target) {
    if (!(this.driver instanceof _driver_mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_6__["MongoDriver"])) throw new Error("You can use getMongoRepository only for MongoDB connections.");
    return this.manager.getRepository(target);
  };
  /**
   * Gets custom entity repository marked with @EntityRepository decorator.
   */


  Connection.prototype.getCustomRepository = function (customRepository) {
    return this.manager.getCustomRepository(customRepository);
  };

  Connection.prototype.transaction = function (isolationOrRunInTransaction, runInTransactionParam) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , this.manager.transaction(isolationOrRunInTransaction, runInTransactionParam)];
      });
    });
  };
  /**
   * Executes raw SQL query and returns raw database results.
   */


  Connection.prototype.query = function (query, parameters, queryRunner) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var usedQueryRunner;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (this instanceof _driver_mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_6__["MongoEntityManager"]) throw new Error("Queries aren't supported by MongoDB.");
            if (queryRunner && queryRunner.isReleased) throw new _error_QueryRunnerProviderAlreadyReleasedError__WEBPACK_IMPORTED_MODULE_8__["QueryRunnerProviderAlreadyReleasedError"]();
            usedQueryRunner = queryRunner || this.createQueryRunner("master");
            _a.label = 1;

          case 1:
            _a.trys.push([1,, 3, 6]);

            return [4
            /*yield*/
            , usedQueryRunner.query(query, parameters)];

          case 2:
            return [2
            /*return*/
            , _a.sent()];
          // await is needed here because we are using finally

          case 3:
            if (!!queryRunner) return [3
            /*break*/
            , 5];
            return [4
            /*yield*/
            , usedQueryRunner.release()];

          case 4:
            _a.sent();

            _a.label = 5;

          case 5:
            return [7
            /*endfinally*/
            ];

          case 6:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new query builder that can be used to build a sql query.
   */


  Connection.prototype.createQueryBuilder = function (entityOrRunner, alias, queryRunner) {
    if (this instanceof _driver_mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_6__["MongoEntityManager"]) throw new Error("Query Builder is not supported by MongoDB.");

    if (alias) {
      var metadata = this.getMetadata(entityOrRunner);
      return new _query_builder_SelectQueryBuilder__WEBPACK_IMPORTED_MODULE_12__["SelectQueryBuilder"](this, queryRunner).select(alias).from(metadata.target, alias);
    } else {
      return new _query_builder_SelectQueryBuilder__WEBPACK_IMPORTED_MODULE_12__["SelectQueryBuilder"](this, entityOrRunner);
    }
  };
  /**
   * Creates a query runner used for perform queries on a single database connection.
   * Using query runners you can control your queries to execute using single database connection and
   * manually control your database transaction.
   *
   * Mode is used in replication mode and indicates whatever you want to connect
   * to master database or any of slave databases.
   * If you perform writes you must use master database,
   * if you perform reads you can use slave databases.
   */


  Connection.prototype.createQueryRunner = function (mode) {
    if (mode === void 0) {
      mode = "master";
    }

    var queryRunner = this.driver.createQueryRunner(mode);
    var manager = this.createEntityManager(queryRunner);
    Object.assign(queryRunner, {
      manager: manager
    });
    return queryRunner;
  };
  /**
   * Gets entity metadata of the junction table (many-to-many table).
   */


  Connection.prototype.getManyToManyMetadata = function (entityTarget, relationPropertyPath) {
    var relationMetadata = this.getMetadata(entityTarget).findRelationWithPropertyPath(relationPropertyPath);
    if (!relationMetadata) throw new Error("Relation \"" + relationPropertyPath + "\" was not found in " + entityTarget + " entity.");
    if (!relationMetadata.isManyToMany) throw new Error("Relation \"" + entityTarget + "#" + relationPropertyPath + "\" does not have a many-to-many relationship." + "You can use this method only on many-to-many relations.");
    return relationMetadata.junctionEntityMetadata;
  };
  /**
   * Creates an Entity Manager for the current connection with the help of the EntityManagerFactory.
   */


  Connection.prototype.createEntityManager = function (queryRunner) {
    return new _entity_manager_EntityManagerFactory__WEBPACK_IMPORTED_MODULE_9__["EntityManagerFactory"]().create(this, queryRunner);
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Finds exist entity metadata by the given entity class, target name or table name.
   */


  Connection.prototype.findMetadata = function (target) {
    return this.entityMetadatas.find(function (metadata) {
      if (metadata.target === target) return true;

      if (target instanceof ___WEBPACK_IMPORTED_MODULE_18__["EntitySchema"]) {
        return metadata.name === target.options.name;
      }

      if (typeof target === "string") {
        if (target.indexOf(".") !== -1) {
          return metadata.tablePath === target;
        } else {
          return metadata.name === target || metadata.tableName === target;
        }
      }

      return false;
    });
  };
  /**
   * Builds metadatas for all registered classes inside this connection.
   */


  Connection.prototype.buildMetadatas = function () {
    var connectionMetadataBuilder = new _ConnectionMetadataBuilder__WEBPACK_IMPORTED_MODULE_11__["ConnectionMetadataBuilder"](this);
    var entityMetadataValidator = new _metadata_builder_EntityMetadataValidator__WEBPACK_IMPORTED_MODULE_7__["EntityMetadataValidator"](); // create subscribers instances if they are not disallowed from high-level (for example they can disallowed from migrations run process)

    var subscribers = connectionMetadataBuilder.buildSubscribers(this.options.subscribers || []);
    _util_ObjectUtils__WEBPACK_IMPORTED_MODULE_19__["ObjectUtils"].assign(this, {
      subscribers: subscribers
    }); // build entity metadatas

    var entityMetadatas = connectionMetadataBuilder.buildEntityMetadatas(this.options.entities || []);
    _util_ObjectUtils__WEBPACK_IMPORTED_MODULE_19__["ObjectUtils"].assign(this, {
      entityMetadatas: entityMetadatas
    }); // create migration instances

    var migrations = connectionMetadataBuilder.buildMigrations(this.options.migrations || []);
    _util_ObjectUtils__WEBPACK_IMPORTED_MODULE_19__["ObjectUtils"].assign(this, {
      migrations: migrations
    });
    this.driver.database = this.getDatabaseName(); // validate all created entity metadatas to make sure user created entities are valid and correct

    entityMetadataValidator.validateMany(this.entityMetadatas.filter(function (metadata) {
      return metadata.tableType !== "view";
    }), this.driver);
  }; // This database name property is nested for replication configs.


  Connection.prototype.getDatabaseName = function () {
    var options = this.options;

    switch (options.type) {
      case "mysql":
      case "mariadb":
      case "postgres":
      case "cockroachdb":
      case "mssql":
      case "oracle":
        return options.replication ? options.replication.master.database : options.database;

      default:
        return options.database;
    }
  };

  return Connection;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/connection/ConnectionManager.js":
/*!**********************************************************************!*\
  !*** ./node_modules/typeorm/browser/connection/ConnectionManager.js ***!
  \**********************************************************************/
/*! exports provided: ConnectionManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionManager", function() { return ConnectionManager; });
/* harmony import */ var _Connection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Connection */ "./node_modules/typeorm/browser/connection/Connection.js");
/* harmony import */ var _error_ConnectionNotFoundError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ConnectionNotFoundError */ "./node_modules/typeorm/browser/error/ConnectionNotFoundError.js");
/* harmony import */ var _error_AlreadyHasActiveConnectionError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/AlreadyHasActiveConnectionError */ "./node_modules/typeorm/browser/error/AlreadyHasActiveConnectionError.js");



/**
 * ConnectionManager is used to store and manage multiple orm connections.
 * It also provides useful factory methods to simplify connection creation.
 */

var ConnectionManager =
/** @class */
function () {
  function ConnectionManager() {
    // -------------------------------------------------------------------------
    // Protected Properties
    // -------------------------------------------------------------------------

    /**
     * List of connections registered in this connection manager.
     */
    this.connections = [];
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Checks if connection with the given name exist in the manager.
   */


  ConnectionManager.prototype.has = function (name) {
    return !!this.connections.find(function (connection) {
      return connection.name === name;
    });
  };
  /**
   * Gets registered connection with the given name.
   * If connection name is not given then it will get a default connection.
   * Throws error if connection with the given name was not found.
   */


  ConnectionManager.prototype.get = function (name) {
    if (name === void 0) {
      name = "default";
    }

    var connection = this.connections.find(function (connection) {
      return connection.name === name;
    });
    if (!connection) throw new _error_ConnectionNotFoundError__WEBPACK_IMPORTED_MODULE_1__["ConnectionNotFoundError"](name);
    return connection;
  };
  /**
   * Creates a new connection based on the given connection options and registers it in the manager.
   * Connection won't be established, you'll need to manually call connect method to establish connection.
   */


  ConnectionManager.prototype.create = function (options) {
    // check if such connection is already registered
    var existConnection = this.connections.find(function (connection) {
      return connection.name === (options.name || "default");
    });

    if (existConnection) {
      // if connection is registered and its not closed then throw an error
      if (existConnection.isConnected) throw new _error_AlreadyHasActiveConnectionError__WEBPACK_IMPORTED_MODULE_2__["AlreadyHasActiveConnectionError"](options.name || "default"); // if its registered but closed then simply remove it from the manager

      this.connections.splice(this.connections.indexOf(existConnection), 1);
    } // create a new connection


    var connection = new _Connection__WEBPACK_IMPORTED_MODULE_0__["Connection"](options);
    this.connections.push(connection);
    return connection;
  };

  return ConnectionManager;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/connection/ConnectionMetadataBuilder.js":
/*!******************************************************************************!*\
  !*** ./node_modules/typeorm/browser/connection/ConnectionMetadataBuilder.js ***!
  \******************************************************************************/
/*! exports provided: ConnectionMetadataBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionMetadataBuilder", function() { return ConnectionMetadataBuilder; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_DirectoryExportedClassesLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/DirectoryExportedClassesLoader */ "./node_modules/typeorm/browser/util/DirectoryExportedClassesLoader.js");
/* harmony import */ var _util_OrmUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/OrmUtils */ "./node_modules/typeorm/browser/util/OrmUtils.js");
/* harmony import */ var _container__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../container */ "./node_modules/typeorm/browser/container.js");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../index */ "./node_modules/typeorm/browser/index.js");
/* harmony import */ var _metadata_builder_EntityMetadataBuilder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../metadata-builder/EntityMetadataBuilder */ "./node_modules/typeorm/browser/metadata-builder/EntityMetadataBuilder.js");
/* harmony import */ var _entity_schema_EntitySchemaTransformer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../entity-schema/EntitySchemaTransformer */ "./node_modules/typeorm/browser/entity-schema/EntitySchemaTransformer.js");
/* harmony import */ var _entity_schema_EntitySchema__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../entity-schema/EntitySchema */ "./node_modules/typeorm/browser/entity-schema/EntitySchema.js");








/**
 * Builds migration instances, subscriber instances and entity metadatas for the given classes.
 */

var ConnectionMetadataBuilder =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function ConnectionMetadataBuilder(connection) {
    this.connection = connection;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Builds migration instances for the given classes or directories.
   */


  ConnectionMetadataBuilder.prototype.buildMigrations = function (migrations) {
    var _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](_util_OrmUtils__WEBPACK_IMPORTED_MODULE_2__["OrmUtils"].splitClassesAndStrings(migrations), 2),
        migrationClasses = _a[0],
        migrationDirectories = _a[1];

    var allMigrationClasses = tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](migrationClasses, Object(_util_DirectoryExportedClassesLoader__WEBPACK_IMPORTED_MODULE_1__["importClassesFromDirectories"])(this.connection.logger, migrationDirectories));

    return allMigrationClasses.map(function (migrationClass) {
      return Object(_container__WEBPACK_IMPORTED_MODULE_3__["getFromContainer"])(migrationClass);
    });
  };
  /**
   * Builds subscriber instances for the given classes or directories.
   */


  ConnectionMetadataBuilder.prototype.buildSubscribers = function (subscribers) {
    var _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](_util_OrmUtils__WEBPACK_IMPORTED_MODULE_2__["OrmUtils"].splitClassesAndStrings(subscribers || []), 2),
        subscriberClasses = _a[0],
        subscriberDirectories = _a[1];

    var allSubscriberClasses = tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](subscriberClasses, Object(_util_DirectoryExportedClassesLoader__WEBPACK_IMPORTED_MODULE_1__["importClassesFromDirectories"])(this.connection.logger, subscriberDirectories));

    return Object(_index__WEBPACK_IMPORTED_MODULE_4__["getMetadataArgsStorage"])().filterSubscribers(allSubscriberClasses).map(function (metadata) {
      return Object(_container__WEBPACK_IMPORTED_MODULE_3__["getFromContainer"])(metadata.target);
    });
  };
  /**
   * Builds entity metadatas for the given classes or directories.
   */


  ConnectionMetadataBuilder.prototype.buildEntityMetadatas = function (entities) {
    // todo: instead we need to merge multiple metadata args storages
    var _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](_util_OrmUtils__WEBPACK_IMPORTED_MODULE_2__["OrmUtils"].splitClassesAndStrings(entities || []), 2),
        entityClassesOrSchemas = _a[0],
        entityDirectories = _a[1];

    var entityClasses = entityClassesOrSchemas.filter(function (entityClass) {
      return entityClass instanceof _entity_schema_EntitySchema__WEBPACK_IMPORTED_MODULE_7__["EntitySchema"] === false;
    });
    var entitySchemas = entityClassesOrSchemas.filter(function (entityClass) {
      return entityClass instanceof _entity_schema_EntitySchema__WEBPACK_IMPORTED_MODULE_7__["EntitySchema"];
    });

    var allEntityClasses = tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](entityClasses, Object(_util_DirectoryExportedClassesLoader__WEBPACK_IMPORTED_MODULE_1__["importClassesFromDirectories"])(this.connection.logger, entityDirectories));

    allEntityClasses.forEach(function (entityClass) {
      if (entityClass instanceof _entity_schema_EntitySchema__WEBPACK_IMPORTED_MODULE_7__["EntitySchema"]) {
        entitySchemas.push(entityClass);
        allEntityClasses.slice(allEntityClasses.indexOf(entityClass), 1);
      }
    });
    var decoratorEntityMetadatas = new _metadata_builder_EntityMetadataBuilder__WEBPACK_IMPORTED_MODULE_5__["EntityMetadataBuilder"](this.connection, Object(_index__WEBPACK_IMPORTED_MODULE_4__["getMetadataArgsStorage"])()).build(allEntityClasses);
    var metadataArgsStorageFromSchema = new _entity_schema_EntitySchemaTransformer__WEBPACK_IMPORTED_MODULE_6__["EntitySchemaTransformer"]().transform(entitySchemas);
    var schemaEntityMetadatas = new _metadata_builder_EntityMetadataBuilder__WEBPACK_IMPORTED_MODULE_5__["EntityMetadataBuilder"](this.connection, metadataArgsStorageFromSchema).build();
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](decoratorEntityMetadatas, schemaEntityMetadatas);
  };

  return ConnectionMetadataBuilder;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/connection/ConnectionOptionsReader.js":
/*!****************************************************************************!*\
  !*** ./node_modules/typeorm/browser/connection/ConnectionOptionsReader.js ***!
  \****************************************************************************/
/*! exports provided: ConnectionOptionsReader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionOptionsReader", function() { return ConnectionOptionsReader; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../platform/PlatformTools */ "./node_modules/typeorm/browser/platform/PlatformTools.js");
/* harmony import */ var _options_reader_ConnectionOptionsEnvReader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./options-reader/ConnectionOptionsEnvReader */ "./node_modules/typeorm/browser/connection/options-reader/ConnectionOptionsEnvReader.js");
/* harmony import */ var _options_reader_ConnectionOptionsYmlReader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./options-reader/ConnectionOptionsYmlReader */ "./node_modules/typeorm/browser/connection/options-reader/ConnectionOptionsYmlReader.js");
/* harmony import */ var _options_reader_ConnectionOptionsXmlReader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./options-reader/ConnectionOptionsXmlReader */ "./node_modules/typeorm/browser/connection/options-reader/ConnectionOptionsXmlReader.js");





/**
 * Reads connection options from the ormconfig.
 * Can read from multiple file extensions including env, json, js, xml and yml.
 */

var ConnectionOptionsReader =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function ConnectionOptionsReader(options) {
    this.options = options;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Returns all connection options read from the ormconfig.
   */


  ConnectionOptionsReader.prototype.all = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var options;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.load()];

          case 1:
            options = _a.sent();
            if (!options) throw new Error("No connection options were found in any of configurations file.");
            return [2
            /*return*/
            , options];
        }
      });
    });
  };
  /**
   * Gets a connection with a given name read from ormconfig.
   * If connection with such name would not be found then it throw error.
   */


  ConnectionOptionsReader.prototype.get = function (name) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var allOptions, targetOptions;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.all()];

          case 1:
            allOptions = _a.sent();
            targetOptions = allOptions.find(function (options) {
              return options.name === name || name === "default" && !options.name;
            });
            if (!targetOptions) throw new Error("Cannot find connection " + name + " because its not defined in any orm configuration files.");
            return [2
            /*return*/
            , targetOptions];
        }
      });
    });
  };
  /**
   * Checks if there is a TypeORM configuration file.
   */


  ConnectionOptionsReader.prototype.has = function (name) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var allOptions, targetOptions;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.load()];

          case 1:
            allOptions = _a.sent();
            if (!allOptions) return [2
            /*return*/
            , false];
            targetOptions = allOptions.find(function (options) {
              return options.name === name || name === "default" && !options.name;
            });
            return [2
            /*return*/
            , !!targetOptions];
        }
      });
    });
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Loads all connection options from a configuration file.
   *
   * todo: get in count NODE_ENV somehow
   */


  ConnectionOptionsReader.prototype.load = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var connectionOptions, fileFormats, possibleExtension, fileExtension, foundFileFormat, dotenv, dotenv, configFile;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            connectionOptions = undefined;
            fileFormats = ["env", "js", "ts", "json", "yml", "yaml", "xml"];
            possibleExtension = this.baseFilePath.substr(this.baseFilePath.lastIndexOf("."));
            fileExtension = fileFormats.find(function (extension) {
              return "." + extension === possibleExtension;
            });
            foundFileFormat = fileExtension || fileFormats.find(function (format) {
              return _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_1__["PlatformTools"].fileExist(_this.baseFilePath + "." + format);
            }); // if .env file found then load all its variables into process.env using dotenv package

            if (foundFileFormat === "env") {
              dotenv = _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_1__["PlatformTools"].load("dotenv");
              dotenv.config({
                path: this.baseFilePath
              });
            } else if (_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_1__["PlatformTools"].fileExist(".env")) {
              dotenv = _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_1__["PlatformTools"].load("dotenv");
              dotenv.config({
                path: ".env"
              });
            }

            configFile = fileExtension ? this.baseFilePath : this.baseFilePath + "." + foundFileFormat;
            if (!(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_1__["PlatformTools"].getEnvVariable("TYPEORM_CONNECTION") || _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_1__["PlatformTools"].getEnvVariable("TYPEORM_URL"))) return [3
            /*break*/
            , 1];
            connectionOptions = new _options_reader_ConnectionOptionsEnvReader__WEBPACK_IMPORTED_MODULE_2__["ConnectionOptionsEnvReader"]().read();
            return [3
            /*break*/
            , 10];

          case 1:
            if (!(foundFileFormat === "js")) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_1__["PlatformTools"].load(configFile)];

          case 2:
            connectionOptions = _a.sent();
            return [3
            /*break*/
            , 10];

          case 3:
            if (!(foundFileFormat === "ts")) return [3
            /*break*/
            , 5];
            return [4
            /*yield*/
            , _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_1__["PlatformTools"].load(configFile)];

          case 4:
            connectionOptions = _a.sent();
            return [3
            /*break*/
            , 10];

          case 5:
            if (!(foundFileFormat === "json")) return [3
            /*break*/
            , 6];
            connectionOptions = _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_1__["PlatformTools"].load(configFile);
            return [3
            /*break*/
            , 10];

          case 6:
            if (!(foundFileFormat === "yml")) return [3
            /*break*/
            , 7];
            connectionOptions = new _options_reader_ConnectionOptionsYmlReader__WEBPACK_IMPORTED_MODULE_3__["ConnectionOptionsYmlReader"]().read(configFile);
            return [3
            /*break*/
            , 10];

          case 7:
            if (!(foundFileFormat === "yaml")) return [3
            /*break*/
            , 8];
            connectionOptions = new _options_reader_ConnectionOptionsYmlReader__WEBPACK_IMPORTED_MODULE_3__["ConnectionOptionsYmlReader"]().read(configFile);
            return [3
            /*break*/
            , 10];

          case 8:
            if (!(foundFileFormat === "xml")) return [3
            /*break*/
            , 10];
            return [4
            /*yield*/
            , new _options_reader_ConnectionOptionsXmlReader__WEBPACK_IMPORTED_MODULE_4__["ConnectionOptionsXmlReader"]().read(configFile)];

          case 9:
            connectionOptions = _a.sent();
            _a.label = 10;

          case 10:
            // normalize and return connection options
            if (connectionOptions) {
              return [2
              /*return*/
              , this.normalizeConnectionOptions(connectionOptions)];
            }

            return [2
            /*return*/
            , undefined];
        }
      });
    });
  };
  /**
   * Normalize connection options.
   */


  ConnectionOptionsReader.prototype.normalizeConnectionOptions = function (connectionOptions) {
    var _this = this;

    if (!Array.isArray(connectionOptions)) connectionOptions = [connectionOptions];
    connectionOptions.forEach(function (options) {
      if (options.entities) {
        var entities = options.entities.map(function (entity) {
          if (typeof entity === "string" && entity.substr(0, 1) !== "/") return _this.baseDirectory + "/" + entity;
          return entity;
        });
        Object.assign(connectionOptions, {
          entities: entities
        });
      }

      if (options.subscribers) {
        var subscribers = options.subscribers.map(function (subscriber) {
          if (typeof subscriber === "string" && subscriber.substr(0, 1) !== "/") return _this.baseDirectory + "/" + subscriber;
          return subscriber;
        });
        Object.assign(connectionOptions, {
          subscribers: subscribers
        });
      }

      if (options.migrations) {
        var migrations = options.migrations.map(function (migration) {
          if (typeof migration === "string" && migration.substr(0, 1) !== "/") return _this.baseDirectory + "/" + migration;
          return migration;
        });
        Object.assign(connectionOptions, {
          migrations: migrations
        });
      } // make database path file in sqlite relative to package.json


      if (options.type === "sqlite") {
        if (typeof options.database === "string" && options.database.substr(0, 1) !== "/" && // unix absolute
        options.database.substr(1, 2) !== ":\\" && // windows absolute
        options.database !== ":memory:") {
          Object.assign(options, {
            database: _this.baseDirectory + "/" + options.database
          });
        }
      }
    });
    return connectionOptions;
  };

  Object.defineProperty(ConnectionOptionsReader.prototype, "baseFilePath", {
    /**
     * Gets directory where configuration file should be located and configuration file name.
     */
    get: function get() {
      return this.baseDirectory + "/" + this.baseConfigName;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ConnectionOptionsReader.prototype, "baseDirectory", {
    /**
     * Gets directory where configuration file should be located.
     */
    get: function get() {
      if (this.options && this.options.root) return this.options.root;
      return _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_1__["PlatformTools"].load("app-root-path").path;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ConnectionOptionsReader.prototype, "baseConfigName", {
    /**
     * Gets configuration file name.
     */
    get: function get() {
      if (this.options && this.options.configName) return this.options.configName;
      return "ormconfig";
    },
    enumerable: true,
    configurable: true
  });
  return ConnectionOptionsReader;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/connection/options-reader/ConnectionOptionsEnvReader.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/connection/options-reader/ConnectionOptionsEnvReader.js ***!
  \**********************************************************************************************/
/*! exports provided: ConnectionOptionsEnvReader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionOptionsEnvReader", function() { return ConnectionOptionsEnvReader; });
/* harmony import */ var _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../platform/PlatformTools */ "./node_modules/typeorm/browser/platform/PlatformTools.js");
/* harmony import */ var _util_OrmUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/OrmUtils */ "./node_modules/typeorm/browser/util/OrmUtils.js");


/**
 * Reads connection options from environment variables.
 * Environment variables can have only a single connection.
 * Its strongly required to define TYPEORM_CONNECTION env variable.
 */

var ConnectionOptionsEnvReader =
/** @class */
function () {
  function ConnectionOptionsEnvReader() {} // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Reads connection options from environment variables.
   */


  ConnectionOptionsEnvReader.prototype.read = function () {
    return {
      type: _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_CONNECTION") || (_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_URL") ? _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_URL").split("://")[0] : undefined),
      url: _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_URL"),
      host: _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_HOST"),
      port: _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_PORT"),
      username: _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_USERNAME"),
      password: _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_PASSWORD"),
      database: _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_DATABASE"),
      sid: _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_SID"),
      schema: _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_SCHEMA"),
      extra: _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_DRIVER_EXTRA") ? JSON.parse(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_DRIVER_EXTRA")) : undefined,
      synchronize: _util_OrmUtils__WEBPACK_IMPORTED_MODULE_1__["OrmUtils"].toBoolean(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_SYNCHRONIZE")),
      dropSchema: _util_OrmUtils__WEBPACK_IMPORTED_MODULE_1__["OrmUtils"].toBoolean(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_DROP_SCHEMA")),
      migrationsRun: _util_OrmUtils__WEBPACK_IMPORTED_MODULE_1__["OrmUtils"].toBoolean(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_MIGRATIONS_RUN")),
      entities: this.stringToArray(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_ENTITIES")),
      migrations: this.stringToArray(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_MIGRATIONS")),
      migrationsTableName: _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_MIGRATIONS_TABLE_NAME"),
      subscribers: this.stringToArray(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_SUBSCRIBERS")),
      logging: this.transformLogging(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_LOGGING")),
      logger: _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_LOGGER"),
      entityPrefix: _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_ENTITY_PREFIX"),
      maxQueryExecutionTime: _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_MAX_QUERY_EXECUTION_TIME"),
      debug: _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_DEBUG"),
      cli: {
        entitiesDir: _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_ENTITIES_DIR"),
        migrationsDir: _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_MIGRATIONS_DIR"),
        subscribersDir: _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_SUBSCRIBERS_DIR")
      },
      cache: this.transformCaching(),
      uuidExtension: _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_UUID_EXTENSION")
    };
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Transforms logging string into real logging value connection requires.
   */


  ConnectionOptionsEnvReader.prototype.transformLogging = function (logging) {
    if (logging === "true" || logging === "TRUE" || logging === "1") return true;
    if (logging === "all") return "all";
    return this.stringToArray(logging);
  };
  /**
   * Transforms caching option into real caching value option requires.
   */


  ConnectionOptionsEnvReader.prototype.transformCaching = function () {
    var caching = _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_CACHE");
    if (caching === "true" || caching === "TRUE" || caching === "1") return true;
    if (caching === "false" || caching === "FALSE" || caching === "0") return false;
    if (caching === "redis" || caching === "database") return {
      type: caching,
      options: _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_CACHE_OPTIONS") ? JSON.parse(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_CACHE_OPTIONS")) : undefined,
      alwaysEnabled: _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_CACHE_ALWAYS_ENABLED"),
      duration: parseInt(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].getEnvVariable("TYPEORM_CACHE_DURATION"))
    };
    return undefined;
  };
  /**
   * Converts a string which contains multiple elements split by comma into a string array of strings.
   */


  ConnectionOptionsEnvReader.prototype.stringToArray = function (variable) {
    if (!variable) return [];
    return variable.split(",").map(function (str) {
      return str.trim();
    });
  };

  return ConnectionOptionsEnvReader;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/connection/options-reader/ConnectionOptionsXmlReader.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/connection/options-reader/ConnectionOptionsXmlReader.js ***!
  \**********************************************************************************************/
/*! exports provided: ConnectionOptionsXmlReader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionOptionsXmlReader", function() { return ConnectionOptionsXmlReader; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../platform/PlatformTools */ "./node_modules/typeorm/browser/platform/PlatformTools.js");


/**
 * Reads connection options defined in the xml file.
 */

var ConnectionOptionsXmlReader =
/** @class */
function () {
  function ConnectionOptionsXmlReader() {} // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Reads connection options from given xml file.
   */


  ConnectionOptionsXmlReader.prototype.read = function (path) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var xml;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.readXml(path)];

          case 1:
            xml = _a.sent();
            return [2
            /*return*/
            , xml.connection.map(function (connection) {
              return {
                name: connection.$.name,
                type: connection.$.type,
                url: connection.url ? connection.url[0] : undefined,
                host: connection.host ? connection.host[0] : undefined,
                port: connection.port && connection.port[0] ? parseInt(connection.port[0]) : undefined,
                username: connection.username ? connection.username[0] : undefined,
                password: connection.password ? connection.password[0] : undefined,
                database: connection.database ? connection.database[0] : undefined,
                sid: connection.sid ? connection.sid[0] : undefined,
                extra: connection.extra ? connection.extra[0] : undefined,
                synchronize: connection.synchronize ? connection.synchronize[0] : undefined,
                entities: connection.entities ? connection.entities[0].entity : [],
                subscribers: connection.subscribers ? connection.subscribers[0].entity : [],
                logging: connection.logging[0] ? connection.logging[0].split(",") : undefined
              };
            })];
        }
      });
    });
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Reads xml file contents and returns them in a promise.
   */


  ConnectionOptionsXmlReader.prototype.readXml = function (path) {
    var xmlParser = _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_1__["PlatformTools"].load("xml2js").parseString;
    var xmlOptions = {
      trim: true,
      explicitRoot: false
    };
    return new Promise(function (ok, fail) {
      xmlParser(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_1__["PlatformTools"].readFileSync(path), xmlOptions, function (err, result) {
        return err ? fail(err) : ok(result);
      });
    });
  };

  return ConnectionOptionsXmlReader;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/connection/options-reader/ConnectionOptionsYmlReader.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/connection/options-reader/ConnectionOptionsYmlReader.js ***!
  \**********************************************************************************************/
/*! exports provided: ConnectionOptionsYmlReader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionOptionsYmlReader", function() { return ConnectionOptionsYmlReader; });
/* harmony import */ var _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../platform/PlatformTools */ "./node_modules/typeorm/browser/platform/PlatformTools.js");

/**
 * Reads connection options defined in the yml file.
 */

var ConnectionOptionsYmlReader =
/** @class */
function () {
  function ConnectionOptionsYmlReader() {} // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Reads connection options from given yml file.
   */


  ConnectionOptionsYmlReader.prototype.read = function (path) {
    var ymlParser = _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].load("js-yaml");
    var config = ymlParser.safeLoad(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].readFileSync(path));
    return Object.keys(config).map(function (connectionName) {
      return Object.assign({
        name: connectionName
      }, config[connectionName]);
    });
  };

  return ConnectionOptionsYmlReader;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/container.js":
/*!***************************************************!*\
  !*** ./node_modules/typeorm/browser/container.js ***!
  \***************************************************/
/*! exports provided: useContainer, getFromContainer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useContainer", function() { return useContainer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFromContainer", function() { return getFromContainer; });
/**
 * Container to be used by this library for inversion control. If container was not implicitly set then by default
 * container simply creates a new instance of the given class.
 */
var defaultContainer = new (
/** @class */
function () {
  function class_1() {
    this.instances = [];
  }

  class_1.prototype.get = function (someClass) {
    var instance = this.instances.find(function (i) {
      return i.type === someClass;
    });

    if (!instance) {
      instance = {
        type: someClass,
        object: new someClass()
      };
      this.instances.push(instance);
    }

    return instance.object;
  };

  return class_1;
}())();
var userContainer;
var userContainerOptions;
/**
 * Sets container to be used by this library.
 */

function useContainer(iocContainer, options) {
  userContainer = iocContainer;
  userContainerOptions = options;
}
/**
 * Gets the IOC container used by this library.
 */

function getFromContainer(someClass) {
  if (userContainer) {
    try {
      var instance = userContainer.get(someClass);
      if (instance) return instance;
      if (!userContainerOptions || !userContainerOptions.fallback) return instance;
    } catch (error) {
      if (!userContainerOptions || !userContainerOptions.fallbackOnErrors) throw error;
    }
  }

  return defaultContainer.get(someClass);
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/Check.js":
/*!*********************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/Check.js ***!
  \*********************************************************/
/*! exports provided: Check */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Check", function() { return Check; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ */ "./node_modules/typeorm/browser/index.js");

/**
 * Creates a database check.
 * Can be used on entity property or on entity.
 * Can create checks with composite columns when used on entity.
 */

function Check(nameOrExpression, maybeExpression) {
  var name = maybeExpression ? nameOrExpression : undefined;
  var expression = maybeExpression ? maybeExpression : nameOrExpression;
  if (!expression) throw new Error("Check expression is required");
  return function (clsOrObject, propertyName) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().checks.push({
      target: propertyName ? clsOrObject.constructor : clsOrObject,
      name: name,
      expression: expression
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/EntityRepository.js":
/*!********************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/EntityRepository.js ***!
  \********************************************************************/
/*! exports provided: EntityRepository */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntityRepository", function() { return EntityRepository; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ */ "./node_modules/typeorm/browser/index.js");

/**
 * Used to declare a class as a custom repository.
 * Custom repository can manage some specific entity or just be generic.
 * Custom repository optionally can extend AbstractRepository, Repository or TreeRepository.
 */

function EntityRepository(entity) {
  return function (target) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().entityRepositories.push({
      target: target,
      entity: entity
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/Exclusion.js":
/*!*************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/Exclusion.js ***!
  \*************************************************************/
/*! exports provided: Exclusion */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Exclusion", function() { return Exclusion; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ */ "./node_modules/typeorm/browser/index.js");

/**
 * Creates a database exclusion.
 * Can be used on entity.
 * Can create exclusions with composite columns when used on entity.
 */

function Exclusion(nameOrExpression, maybeExpression) {
  var name = maybeExpression ? nameOrExpression : undefined;
  var expression = maybeExpression ? maybeExpression : nameOrExpression;
  if (!expression) throw new Error("Exclusion expression is required");
  return function (clsOrObject, propertyName) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().exclusions.push({
      target: propertyName ? clsOrObject.constructor : clsOrObject,
      name: name,
      expression: expression
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/Generated.js":
/*!*************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/Generated.js ***!
  \*************************************************************/
/*! exports provided: Generated */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Generated", function() { return Generated; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ */ "./node_modules/typeorm/browser/index.js");

/**
 * Marks a column to generate a value on entity insertion.
 * There are three types of generation strategy - increment, uuid and rowid (cockroachdb only).
 * Increment uses a number which increases by one on each insertion.
 * Uuid generates a special UUID token.
 * Rowid supports only in CockroachDB and uses `unique_rowid()` function
 *
 * Note, some databases do not support non-primary generation columns.
 */

function Generated(strategy) {
  if (strategy === void 0) {
    strategy = "increment";
  }

  return function (object, propertyName) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().generations.push({
      target: object.constructor,
      propertyName: propertyName,
      strategy: strategy
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/Index.js":
/*!*********************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/Index.js ***!
  \*********************************************************/
/*! exports provided: Index */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Index", function() { return Index; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ */ "./node_modules/typeorm/browser/index.js");

/**
 * Creates a database index.
 * Can be used on entity property or on entity.
 * Can create indices with composite columns when used on entity.
 */

function Index(nameOrFieldsOrOptions, maybeFieldsOrOptions, maybeOptions) {
  // normalize parameters
  var name = typeof nameOrFieldsOrOptions === "string" ? nameOrFieldsOrOptions : undefined;
  var fields = typeof nameOrFieldsOrOptions === "string" ? maybeFieldsOrOptions : nameOrFieldsOrOptions;
  var options = typeof nameOrFieldsOrOptions === "object" && !Array.isArray(nameOrFieldsOrOptions) ? nameOrFieldsOrOptions : maybeOptions;
  if (!options) options = typeof maybeFieldsOrOptions === "object" && !Array.isArray(maybeFieldsOrOptions) ? maybeFieldsOrOptions : maybeOptions;
  return function (clsOrObject, propertyName) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().indices.push({
      target: propertyName ? clsOrObject.constructor : clsOrObject,
      name: name,
      columns: propertyName ? [propertyName] : fields,
      synchronize: options && options.synchronize === false ? false : true,
      where: options ? options.where : undefined,
      unique: options && options.unique ? true : false,
      spatial: options && options.spatial ? true : false,
      fulltext: options && options.fulltext ? true : false,
      parser: options ? options.parser : undefined,
      sparse: options && options.sparse ? true : false,
      background: options && options.background ? true : false,
      expireAfterSeconds: options ? options.expireAfterSeconds : undefined
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/Unique.js":
/*!**********************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/Unique.js ***!
  \**********************************************************/
/*! exports provided: Unique */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Unique", function() { return Unique; });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ "./node_modules/typeorm/browser/index.js");

/**
 * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.
 */

function Unique(nameOrFields, maybeFields) {
  var name = typeof nameOrFields === "string" ? nameOrFields : undefined;
  var fields = typeof nameOrFields === "string" ? maybeFields : nameOrFields;
  return function (clsOrObject, propertyName) {
    var args = {
      target: propertyName ? clsOrObject.constructor : clsOrObject,
      name: name,
      columns: propertyName ? [propertyName] : fields
    };
    Object(_index__WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().uniques.push(args);
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/columns/Column.js":
/*!******************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/columns/Column.js ***!
  \******************************************************************/
/*! exports provided: Column */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Column", function() { return Column; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");
/* harmony import */ var _error_ColumnTypeUndefinedError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error/ColumnTypeUndefinedError */ "./node_modules/typeorm/browser/error/ColumnTypeUndefinedError.js");


/**
 * Column decorator is used to mark a specific class property as a table column.
 * Only properties decorated with this decorator will be persisted to the database when entity be saved.
 */

function Column(typeOrOptions, options) {
  return function (object, propertyName) {
    // normalize parameters
    var type;

    if (typeof typeOrOptions === "string" || typeOrOptions instanceof Function) {
      type = typeOrOptions;
    } else if (typeOrOptions) {
      options = typeOrOptions;
      type = typeOrOptions.type;
    }

    if (!options) options = {}; // if type is not given explicitly then try to guess it

    var reflectMetadataType = Reflect && Reflect.getMetadata ? Reflect.getMetadata("design:type", object, propertyName) : undefined;
    if (!type && reflectMetadataType) // if type is not given explicitly then try to guess it
      type = reflectMetadataType; // check if there is no type in column options then set type from first function argument, or guessed one

    if (!options.type && type) options.type = type; // specify HSTORE type if column is HSTORE

    if (options.type === "hstore" && !options.hstoreType) options.hstoreType = reflectMetadataType === Object ? "object" : "string";

    if (typeOrOptions instanceof Function) {
      // register an embedded
      Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().embeddeds.push({
        target: object.constructor,
        propertyName: propertyName,
        isArray: reflectMetadataType === Array || options.array === true,
        prefix: options.prefix !== undefined ? options.prefix : undefined,
        type: typeOrOptions
      });
    } else {
      // register a regular column
      // if we still don't have a type then we need to give error to user that type is required
      if (!options.type) throw new _error_ColumnTypeUndefinedError__WEBPACK_IMPORTED_MODULE_1__["ColumnTypeUndefinedError"](object, propertyName); // create unique

      if (options.unique === true) Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().uniques.push({
        target: object.constructor,
        columns: [propertyName]
      });
      Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().columns.push({
        target: object.constructor,
        propertyName: propertyName,
        mode: "regular",
        options: options
      });

      if (options.generated) {
        Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().generations.push({
          target: object.constructor,
          propertyName: propertyName,
          strategy: typeof options.generated === "string" ? options.generated : "increment"
        });
      }
    }
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/columns/CreateDateColumn.js":
/*!****************************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/columns/CreateDateColumn.js ***!
  \****************************************************************************/
/*! exports provided: CreateDateColumn */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateDateColumn", function() { return CreateDateColumn; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * This column will store a creation date of the inserted object.
 * Creation date is generated and inserted only once,
 * at the first time when you create an object, the value is inserted into the table, and is never touched again.
 */

function CreateDateColumn(options) {
  return function (object, propertyName) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().columns.push({
      target: object.constructor,
      propertyName: propertyName,
      mode: "createDate",
      options: options || {}
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/columns/DeleteDateColumn.js":
/*!****************************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/columns/DeleteDateColumn.js ***!
  \****************************************************************************/
/*! exports provided: DeleteDateColumn */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeleteDateColumn", function() { return DeleteDateColumn; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * This column will store a delete date of the soft-deleted object.
 * This date is being updated each time you soft-delete the object.
 */

function DeleteDateColumn(options) {
  return function (object, propertyName) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().columns.push({
      target: object.constructor,
      propertyName: propertyName,
      mode: "deleteDate",
      options: options || {}
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/columns/ObjectIdColumn.js":
/*!**************************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/columns/ObjectIdColumn.js ***!
  \**************************************************************************/
/*! exports provided: ObjectIdColumn */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectIdColumn", function() { return ObjectIdColumn; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * Special type of column that is available only for MongoDB database.
 * Marks your entity's column to be an object id.
 */

function ObjectIdColumn(options) {
  return function (object, propertyName) {
    // if column options are not given then create a new empty options
    if (!options) options = {};
    options.primary = true;
    if (!options.name) options.name = "_id"; // create and register a new column metadata

    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().columns.push({
      target: object.constructor,
      propertyName: propertyName,
      mode: "objectId",
      options: options
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/columns/PrimaryColumn.js":
/*!*************************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/columns/PrimaryColumn.js ***!
  \*************************************************************************/
/*! exports provided: PrimaryColumn */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrimaryColumn", function() { return PrimaryColumn; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");
/* harmony import */ var _error_ColumnTypeUndefinedError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error/ColumnTypeUndefinedError */ "./node_modules/typeorm/browser/error/ColumnTypeUndefinedError.js");
/* harmony import */ var _error_PrimaryColumnCannotBeNullableError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../error/PrimaryColumnCannotBeNullableError */ "./node_modules/typeorm/browser/error/PrimaryColumnCannotBeNullableError.js");



/**
 * Column decorator is used to mark a specific class property as a table column.
 * Only properties decorated with this decorator will be persisted to the database when entity be saved.
 * Primary columns also creates a PRIMARY KEY for this column in a db.
 */

function PrimaryColumn(typeOrOptions, options) {
  return function (object, propertyName) {
    // normalize parameters
    var type;

    if (typeof typeOrOptions === "string") {
      type = typeOrOptions;
    } else {
      options = Object.assign({}, typeOrOptions);
    }

    if (!options) options = {}; // if type is not given explicitly then try to guess it

    var reflectMetadataType = Reflect && Reflect.getMetadata ? Reflect.getMetadata("design:type", object, propertyName) : undefined;
    if (!type && reflectMetadataType) type = reflectMetadataType; // check if there is no type in column options then set type from first function argument, or guessed one

    if (!options.type && type) options.type = type; // if we still don't have a type then we need to give error to user that type is required

    if (!options.type) throw new _error_ColumnTypeUndefinedError__WEBPACK_IMPORTED_MODULE_1__["ColumnTypeUndefinedError"](object, propertyName); // check if column is not nullable, because we cannot allow a primary key to be nullable

    if (options.nullable) throw new _error_PrimaryColumnCannotBeNullableError__WEBPACK_IMPORTED_MODULE_2__["PrimaryColumnCannotBeNullableError"](object, propertyName); // explicitly set a primary to column options

    options.primary = true; // create and register a new column metadata

    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().columns.push({
      target: object.constructor,
      propertyName: propertyName,
      mode: "regular",
      options: options
    });

    if (options.generated) {
      Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().generations.push({
        target: object.constructor,
        propertyName: propertyName,
        strategy: typeof options.generated === "string" ? options.generated : "increment"
      });
    }
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/columns/PrimaryGeneratedColumn.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/columns/PrimaryGeneratedColumn.js ***!
  \**********************************************************************************/
/*! exports provided: PrimaryGeneratedColumn */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrimaryGeneratedColumn", function() { return PrimaryGeneratedColumn; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * Column decorator is used to mark a specific class property as a table column.
 * Only properties decorated with this decorator will be persisted to the database when entity be saved.
 * This column creates an integer PRIMARY COLUMN with generated set to true.
 */

function PrimaryGeneratedColumn(strategyOrOptions, maybeOptions) {
  // normalize parameters
  var options = {};
  var strategy;

  if (strategyOrOptions) {
    if (typeof strategyOrOptions === "string") strategy = strategyOrOptions;

    if (strategyOrOptions instanceof Object) {
      strategy = "increment";
      Object.assign(options, strategyOrOptions);
    }
  } else {
    strategy = "increment";
  }

  if (maybeOptions instanceof Object) Object.assign(options, maybeOptions);
  return function (object, propertyName) {
    // if column type is not explicitly set then determine it based on generation strategy
    if (!options.type) {
      if (strategy === "increment") {
        options.type = Number;
      } else if (strategy === "uuid") {
        options.type = "uuid";
      } else if (strategy === "rowid") {
        options.type = "int";
      }
    } // explicitly set a primary and generated to column options


    options.primary = true; // register column metadata args

    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().columns.push({
      target: object.constructor,
      propertyName: propertyName,
      mode: "regular",
      options: options
    }); // register generated metadata args

    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().generations.push({
      target: object.constructor,
      propertyName: propertyName,
      strategy: strategy
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/columns/UpdateDateColumn.js":
/*!****************************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/columns/UpdateDateColumn.js ***!
  \****************************************************************************/
/*! exports provided: UpdateDateColumn */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UpdateDateColumn", function() { return UpdateDateColumn; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * This column will store an update date of the updated object.
 * This date is being updated each time you persist the object.
 */

function UpdateDateColumn(options) {
  return function (object, propertyName) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().columns.push({
      target: object.constructor,
      propertyName: propertyName,
      mode: "updateDate",
      options: options ? options : {}
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/columns/VersionColumn.js":
/*!*************************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/columns/VersionColumn.js ***!
  \*************************************************************************/
/*! exports provided: VersionColumn */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VersionColumn", function() { return VersionColumn; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * This column will store a number - version of the entity.
 * Every time your entity will be persisted, this number will be increased by one -
 * so you can organize visioning and update strategies of your entity.
 */

function VersionColumn(options) {
  return function (object, propertyName) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().columns.push({
      target: object.constructor,
      propertyName: propertyName,
      mode: "version",
      options: options || {}
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/columns/ViewColumn.js":
/*!**********************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/columns/ViewColumn.js ***!
  \**********************************************************************/
/*! exports provided: ViewColumn */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewColumn", function() { return ViewColumn; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * ViewColumn decorator is used to mark a specific class property as a view column.
 */

function ViewColumn() {
  return function (object, propertyName) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().columns.push({
      target: object.constructor,
      propertyName: propertyName,
      mode: "regular",
      options: {}
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/entity-view/ViewEntity.js":
/*!**************************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/entity-view/ViewEntity.js ***!
  \**************************************************************************/
/*! exports provided: ViewEntity */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewEntity", function() { return ViewEntity; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * This decorator is used to mark classes that will be an entity view.
 * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.
 */

function ViewEntity(nameOrOptions, maybeOptions) {
  var options = (typeof nameOrOptions === "object" ? nameOrOptions : maybeOptions) || {};
  var name = typeof nameOrOptions === "string" ? nameOrOptions : options.name;
  return function (target) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().tables.push({
      target: target,
      name: name,
      expression: options.expression,
      type: "view",
      database: options.database ? options.database : undefined,
      schema: options.schema ? options.schema : undefined,
      synchronize: options.synchronize === false ? false : true,
      materialized: !!options.materialized
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/entity/ChildEntity.js":
/*!**********************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/entity/ChildEntity.js ***!
  \**********************************************************************/
/*! exports provided: ChildEntity */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChildEntity", function() { return ChildEntity; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * Special type of the table used in the single-table inherited tables.
 */

function ChildEntity(discriminatorValue) {
  return function (target) {
    // register a table metadata
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().tables.push({
      target: target,
      type: "entity-child"
    }); // register discriminator value if it was provided

    if (discriminatorValue) {
      Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().discriminatorValues.push({
        target: target,
        value: discriminatorValue
      });
    }
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/entity/Entity.js":
/*!*****************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/entity/Entity.js ***!
  \*****************************************************************/
/*! exports provided: Entity */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Entity", function() { return Entity; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * This decorator is used to mark classes that will be an entity (table or document depend on database type).
 * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.
 */

function Entity(nameOrOptions, maybeOptions) {
  var options = (typeof nameOrOptions === "object" ? nameOrOptions : maybeOptions) || {};
  var name = typeof nameOrOptions === "string" ? nameOrOptions : options.name;
  return function (target) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().tables.push({
      target: target,
      name: name,
      type: "regular",
      orderBy: options.orderBy ? options.orderBy : undefined,
      engine: options.engine ? options.engine : undefined,
      database: options.database ? options.database : undefined,
      schema: options.schema ? options.schema : undefined,
      synchronize: options.synchronize,
      withoutRowid: options.withoutRowid
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/entity/TableInheritance.js":
/*!***************************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/entity/TableInheritance.js ***!
  \***************************************************************************/
/*! exports provided: TableInheritance */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableInheritance", function() { return TableInheritance; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * Sets for entity to use table inheritance pattern.
 */

function TableInheritance(options) {
  return function (target) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().inheritances.push({
      target: target,
      pattern: options && options.pattern ? options.pattern : "STI",
      column: options && options.column ? typeof options.column === "string" ? {
        name: options.column
      } : options.column : undefined
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/listeners/AfterInsert.js":
/*!*************************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/listeners/AfterInsert.js ***!
  \*************************************************************************/
/*! exports provided: AfterInsert */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AfterInsert", function() { return AfterInsert; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");
/* harmony import */ var _metadata_types_EventListenerTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../metadata/types/EventListenerTypes */ "./node_modules/typeorm/browser/metadata/types/EventListenerTypes.js");


/**
 * Calls a method on which this decorator is applied after this entity insertion.
 */

function AfterInsert() {
  return function (object, propertyName) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().entityListeners.push({
      target: object.constructor,
      propertyName: propertyName,
      type: _metadata_types_EventListenerTypes__WEBPACK_IMPORTED_MODULE_1__["EventListenerTypes"].AFTER_INSERT
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/listeners/AfterLoad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/listeners/AfterLoad.js ***!
  \***********************************************************************/
/*! exports provided: AfterLoad */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AfterLoad", function() { return AfterLoad; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");
/* harmony import */ var _metadata_types_EventListenerTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../metadata/types/EventListenerTypes */ "./node_modules/typeorm/browser/metadata/types/EventListenerTypes.js");


/**
 * Calls a method on which this decorator is applied after entity is loaded.
 */

function AfterLoad() {
  return function (object, propertyName) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().entityListeners.push({
      target: object.constructor,
      propertyName: propertyName,
      type: _metadata_types_EventListenerTypes__WEBPACK_IMPORTED_MODULE_1__["EventListenerTypes"].AFTER_LOAD
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/listeners/AfterRemove.js":
/*!*************************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/listeners/AfterRemove.js ***!
  \*************************************************************************/
/*! exports provided: AfterRemove */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AfterRemove", function() { return AfterRemove; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");
/* harmony import */ var _metadata_types_EventListenerTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../metadata/types/EventListenerTypes */ "./node_modules/typeorm/browser/metadata/types/EventListenerTypes.js");


/**
 * Calls a method on which this decorator is applied after this entity removal.
 */

function AfterRemove() {
  return function (object, propertyName) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().entityListeners.push({
      target: object.constructor,
      propertyName: propertyName,
      type: _metadata_types_EventListenerTypes__WEBPACK_IMPORTED_MODULE_1__["EventListenerTypes"].AFTER_REMOVE
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/listeners/AfterUpdate.js":
/*!*************************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/listeners/AfterUpdate.js ***!
  \*************************************************************************/
/*! exports provided: AfterUpdate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AfterUpdate", function() { return AfterUpdate; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");
/* harmony import */ var _metadata_types_EventListenerTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../metadata/types/EventListenerTypes */ "./node_modules/typeorm/browser/metadata/types/EventListenerTypes.js");


/**
 * Calls a method on which this decorator is applied after this entity update.
 */

function AfterUpdate() {
  return function (object, propertyName) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().entityListeners.push({
      target: object.constructor,
      propertyName: propertyName,
      type: _metadata_types_EventListenerTypes__WEBPACK_IMPORTED_MODULE_1__["EventListenerTypes"].AFTER_UPDATE
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/listeners/BeforeInsert.js":
/*!**************************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/listeners/BeforeInsert.js ***!
  \**************************************************************************/
/*! exports provided: BeforeInsert */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BeforeInsert", function() { return BeforeInsert; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");
/* harmony import */ var _metadata_types_EventListenerTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../metadata/types/EventListenerTypes */ "./node_modules/typeorm/browser/metadata/types/EventListenerTypes.js");


/**
 * Calls a method on which this decorator is applied before this entity insertion.
 */

function BeforeInsert() {
  return function (object, propertyName) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().entityListeners.push({
      target: object.constructor,
      propertyName: propertyName,
      type: _metadata_types_EventListenerTypes__WEBPACK_IMPORTED_MODULE_1__["EventListenerTypes"].BEFORE_INSERT
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/listeners/BeforeRemove.js":
/*!**************************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/listeners/BeforeRemove.js ***!
  \**************************************************************************/
/*! exports provided: BeforeRemove */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BeforeRemove", function() { return BeforeRemove; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");
/* harmony import */ var _metadata_types_EventListenerTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../metadata/types/EventListenerTypes */ "./node_modules/typeorm/browser/metadata/types/EventListenerTypes.js");


/**
 * Calls a method on which this decorator is applied before this entity removal.
 */

function BeforeRemove() {
  return function (object, propertyName) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().entityListeners.push({
      target: object.constructor,
      propertyName: propertyName,
      type: _metadata_types_EventListenerTypes__WEBPACK_IMPORTED_MODULE_1__["EventListenerTypes"].BEFORE_REMOVE
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/listeners/BeforeUpdate.js":
/*!**************************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/listeners/BeforeUpdate.js ***!
  \**************************************************************************/
/*! exports provided: BeforeUpdate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BeforeUpdate", function() { return BeforeUpdate; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");
/* harmony import */ var _metadata_types_EventListenerTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../metadata/types/EventListenerTypes */ "./node_modules/typeorm/browser/metadata/types/EventListenerTypes.js");


/**
 * Calls a method on which this decorator is applied before this entity update.
 */

function BeforeUpdate() {
  return function (object, propertyName) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().entityListeners.push({
      target: object.constructor,
      propertyName: propertyName,
      type: _metadata_types_EventListenerTypes__WEBPACK_IMPORTED_MODULE_1__["EventListenerTypes"].BEFORE_UPDATE
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/listeners/EventSubscriber.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/listeners/EventSubscriber.js ***!
  \*****************************************************************************/
/*! exports provided: EventSubscriber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventSubscriber", function() { return EventSubscriber; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * Classes decorated with this decorator will listen to ORM events and their methods will be triggered when event
 * occurs. Those classes must implement EventSubscriberInterface interface.
 */

function EventSubscriber() {
  return function (target) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().entitySubscribers.push({
      target: target
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/relations/JoinColumn.js":
/*!************************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/relations/JoinColumn.js ***!
  \************************************************************************/
/*! exports provided: JoinColumn */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JoinColumn", function() { return JoinColumn; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.
 * It also can be used on both one-to-one and many-to-one relations to specify custom column name
 * or custom referenced column.
 */

function JoinColumn(optionsOrOptionsArray) {
  return function (object, propertyName) {
    var options = Array.isArray(optionsOrOptionsArray) ? optionsOrOptionsArray : [optionsOrOptionsArray || {}];
    options.forEach(function (options) {
      Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().joinColumns.push({
        target: object.constructor,
        propertyName: propertyName,
        name: options.name,
        referencedColumnName: options.referencedColumnName
      });
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/relations/JoinTable.js":
/*!***********************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/relations/JoinTable.js ***!
  \***********************************************************************/
/*! exports provided: JoinTable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JoinTable", function() { return JoinTable; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.
 * Its also used to set a custom junction table's name, column names and referenced columns.
 */

function JoinTable(options) {
  return function (object, propertyName) {
    options = options || {};
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().joinTables.push({
      target: object.constructor,
      propertyName: propertyName,
      name: options.name,
      joinColumns: options && options.joinColumn ? [options.joinColumn] : options.joinColumns,
      inverseJoinColumns: options && options.inverseJoinColumn ? [options.inverseJoinColumn] : options.inverseJoinColumns,
      schema: options && options.schema ? options.schema : undefined,
      database: options && options.database ? options.database : undefined
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/relations/ManyToMany.js":
/*!************************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/relations/ManyToMany.js ***!
  \************************************************************************/
/*! exports provided: ManyToMany */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ManyToMany", function() { return ManyToMany; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have
 * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage
 * entity1 and entity2 ids. This is owner side of the relationship.
 */

function ManyToMany(typeFunctionOrTarget, inverseSideOrOptions, options) {
  // normalize parameters
  var inverseSideProperty;

  if (typeof inverseSideOrOptions === "object") {
    options = inverseSideOrOptions;
  } else {
    inverseSideProperty = inverseSideOrOptions;
  }

  return function (object, propertyName) {
    if (!options) options = {}; // now try to determine it its lazy relation

    var isLazy = options.lazy === true;

    if (!isLazy && Reflect && Reflect.getMetadata) {
      // automatic determination
      var reflectedType = Reflect.getMetadata("design:type", object, propertyName);
      if (reflectedType && typeof reflectedType.name === "string" && reflectedType.name.toLowerCase() === "promise") isLazy = true;
    }

    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().relations.push({
      target: object.constructor,
      propertyName: propertyName,
      // propertyType: reflectedType,
      relationType: "many-to-many",
      isLazy: isLazy,
      type: typeFunctionOrTarget,
      inverseSideProperty: inverseSideProperty,
      options: options
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/relations/ManyToOne.js":
/*!***********************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/relations/ManyToOne.js ***!
  \***********************************************************************/
/*! exports provided: ManyToOne */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ManyToOne", function() { return ManyToOne; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * Many-to-one relation allows to create type of relation when Entity1 can have single instance of Entity2, but
 * Entity2 can have a multiple instances of Entity1. Entity1 is an owner of the relationship, and storages Entity2 id
 * on its own side.
 */

function ManyToOne(typeFunctionOrTarget, inverseSideOrOptions, options) {
  // normalize parameters
  var inverseSideProperty;

  if (typeof inverseSideOrOptions === "object") {
    options = inverseSideOrOptions;
  } else {
    inverseSideProperty = inverseSideOrOptions;
  }

  return function (object, propertyName) {
    if (!options) options = {}; // now try to determine it its lazy relation

    var isLazy = options && options.lazy === true ? true : false;

    if (!isLazy && Reflect && Reflect.getMetadata) {
      // automatic determination
      var reflectedType = Reflect.getMetadata("design:type", object, propertyName);
      if (reflectedType && typeof reflectedType.name === "string" && reflectedType.name.toLowerCase() === "promise") isLazy = true;
    }

    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().relations.push({
      target: object.constructor,
      propertyName: propertyName,
      // propertyType: reflectedType,
      relationType: "many-to-one",
      isLazy: isLazy,
      type: typeFunctionOrTarget,
      inverseSideProperty: inverseSideProperty,
      options: options
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/relations/OneToMany.js":
/*!***********************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/relations/OneToMany.js ***!
  \***********************************************************************/
/*! exports provided: OneToMany */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneToMany", function() { return OneToMany; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * One-to-many relation allows to create type of relation when Entity2 can have multiple instances of Entity1.
 * Entity1 have only one Entity2. Entity1 is an owner of the relationship, and storages Entity2 id on its own side.
 */

function OneToMany(typeFunctionOrTarget, inverseSide, options) {
  return function (object, propertyName) {
    if (!options) options = {}; // now try to determine it its lazy relation

    var isLazy = options && options.lazy === true ? true : false;

    if (!isLazy && Reflect && Reflect.getMetadata) {
      // automatic determination
      var reflectedType = Reflect.getMetadata("design:type", object, propertyName);
      if (reflectedType && typeof reflectedType.name === "string" && reflectedType.name.toLowerCase() === "promise") isLazy = true;
    }

    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().relations.push({
      target: object.constructor,
      propertyName: propertyName,
      // propertyType: reflectedType,
      isLazy: isLazy,
      relationType: "one-to-many",
      type: typeFunctionOrTarget,
      inverseSideProperty: inverseSide,
      options: options
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/relations/OneToOne.js":
/*!**********************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/relations/OneToOne.js ***!
  \**********************************************************************/
/*! exports provided: OneToOne */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneToOne", function() { return OneToOne; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.
 * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.
 */

function OneToOne(typeFunctionOrTarget, inverseSideOrOptions, options) {
  // normalize parameters
  var inverseSideProperty;

  if (typeof inverseSideOrOptions === "object") {
    options = inverseSideOrOptions;
  } else {
    inverseSideProperty = inverseSideOrOptions;
  }

  return function (object, propertyName) {
    if (!options) options = {}; // now try to determine it its lazy relation

    var isLazy = options && options.lazy === true ? true : false;

    if (!isLazy && Reflect && Reflect.getMetadata) {
      // automatic determination
      var reflectedType = Reflect.getMetadata("design:type", object, propertyName);
      if (reflectedType && typeof reflectedType.name === "string" && reflectedType.name.toLowerCase() === "promise") isLazy = true;
    }

    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().relations.push({
      target: object.constructor,
      propertyName: propertyName,
      // propertyType: reflectedType,
      isLazy: isLazy,
      relationType: "one-to-one",
      type: typeFunctionOrTarget,
      inverseSideProperty: inverseSideProperty,
      options: options
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/relations/RelationCount.js":
/*!***************************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/relations/RelationCount.js ***!
  \***************************************************************************/
/*! exports provided: RelationCount */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RelationCount", function() { return RelationCount; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * Holds a number of children in the closure table of the column.
 *
 * @deprecated Do not use this decorator, it may be removed in the future versions
 */

function RelationCount(relation, alias, queryBuilderFactory) {
  return function (object, propertyName) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().relationCounts.push({
      target: object.constructor,
      propertyName: propertyName,
      relation: relation,
      alias: alias,
      queryBuilderFactory: queryBuilderFactory
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/relations/RelationId.js":
/*!************************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/relations/RelationId.js ***!
  \************************************************************************/
/*! exports provided: RelationId */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RelationId", function() { return RelationId; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * Special decorator used to extract relation id into separate entity property.
 *
 * @experimental
 */

function RelationId(relation, alias, queryBuilderFactory) {
  return function (object, propertyName) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().relationIds.push({
      target: object.constructor,
      propertyName: propertyName,
      relation: relation,
      alias: alias,
      queryBuilderFactory: queryBuilderFactory
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/transaction/Transaction.js":
/*!***************************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/transaction/Transaction.js ***!
  \***************************************************************************/
/*! exports provided: Transaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Transaction", function() { return Transaction; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");


function Transaction(connectionOrOptions) {
  return function (target, methodName, descriptor) {
    // save original method - we gonna need it
    var originalMethod = descriptor.value; // override method descriptor with proxy method

    descriptor.value = function () {
      var _this = this;

      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      var connectionName = "default";
      var isolationLevel = undefined;

      if (connectionOrOptions) {
        if (typeof connectionOrOptions === "string") {
          connectionName = connectionOrOptions;
        } else {
          if (connectionOrOptions.connectionName) {
            connectionName = connectionOrOptions.connectionName;
          }

          if (connectionOrOptions.isolation) {
            isolationLevel = connectionOrOptions.isolation;
          }
        }
      }

      var transactionCallback = function transactionCallback(entityManager) {
        var argsWithInjectedTransactionManagerAndRepositories; // filter all @TransactionEntityManager() and @TransactionRepository() decorator usages for this method

        var transactionEntityManagerMetadatas = Object(___WEBPACK_IMPORTED_MODULE_1__["getMetadataArgsStorage"])().filterTransactionEntityManagers(target.constructor, methodName).reverse();
        var transactionRepositoryMetadatas = Object(___WEBPACK_IMPORTED_MODULE_1__["getMetadataArgsStorage"])().filterTransactionRepository(target.constructor, methodName).reverse(); // if there are @TransactionEntityManager() decorator usages the inject them

        if (transactionEntityManagerMetadatas.length > 0) {
          argsWithInjectedTransactionManagerAndRepositories = tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](args); // replace method params with injection of transactionEntityManager

          transactionEntityManagerMetadatas.forEach(function (metadata) {
            argsWithInjectedTransactionManagerAndRepositories.splice(metadata.index, 0, entityManager);
          });
        } else if (transactionRepositoryMetadatas.length === 0) {
          // otherwise if there's no transaction repositories in use, inject it as a first parameter
          argsWithInjectedTransactionManagerAndRepositories = tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"]([entityManager], args);
        } else {
          argsWithInjectedTransactionManagerAndRepositories = tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](args);
        } // for every usage of @TransactionRepository decorator


        transactionRepositoryMetadatas.forEach(function (metadata) {
          var repositoryInstance; // detect type of the repository and get instance from transaction entity manager

          switch (metadata.repositoryType) {
            case ___WEBPACK_IMPORTED_MODULE_1__["Repository"]:
              repositoryInstance = entityManager.getRepository(metadata.entityType);
              break;

            case ___WEBPACK_IMPORTED_MODULE_1__["MongoRepository"]:
              repositoryInstance = entityManager.getMongoRepository(metadata.entityType);
              break;

            case ___WEBPACK_IMPORTED_MODULE_1__["TreeRepository"]:
              repositoryInstance = entityManager.getTreeRepository(metadata.entityType);
              break;
            // if not the TypeORM's ones, there must be custom repository classes

            default:
              repositoryInstance = entityManager.getCustomRepository(metadata.repositoryType);
          } // replace method param with injection of repository instance


          argsWithInjectedTransactionManagerAndRepositories.splice(metadata.index, 0, repositoryInstance);
        });
        return originalMethod.apply(_this, argsWithInjectedTransactionManagerAndRepositories);
      };

      if (isolationLevel) {
        return Object(___WEBPACK_IMPORTED_MODULE_1__["getConnection"])(connectionName).manager.transaction(isolationLevel, transactionCallback);
      } else {
        return Object(___WEBPACK_IMPORTED_MODULE_1__["getConnection"])(connectionName).manager.transaction(transactionCallback);
      }
    };
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/transaction/TransactionManager.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/transaction/TransactionManager.js ***!
  \**********************************************************************************/
/*! exports provided: TransactionManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransactionManager", function() { return TransactionManager; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * Injects transaction's entity manager into the method wrapped with @Transaction decorator.
 */

function TransactionManager() {
  return function (object, methodName, index) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().transactionEntityManagers.push({
      target: object.constructor,
      methodName: methodName,
      index: index
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/transaction/TransactionRepository.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/transaction/TransactionRepository.js ***!
  \*************************************************************************************/
/*! exports provided: TransactionRepository */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransactionRepository", function() { return TransactionRepository; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");
/* harmony import */ var _error_CannotReflectMethodParameterTypeError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error/CannotReflectMethodParameterTypeError */ "./node_modules/typeorm/browser/error/CannotReflectMethodParameterTypeError.js");


/**
 * Injects transaction's repository into the method wrapped with @Transaction decorator.
 */

function TransactionRepository(entityType) {
  return function (object, methodName, index) {
    // get repository type
    var repositoryType;

    try {
      repositoryType = Reflect.getOwnMetadata("design:paramtypes", object, methodName)[index];
    } catch (err) {
      throw new _error_CannotReflectMethodParameterTypeError__WEBPACK_IMPORTED_MODULE_1__["CannotReflectMethodParameterTypeError"](object.constructor, methodName);
    }

    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().transactionRepositories.push({
      target: object.constructor,
      methodName: methodName,
      index: index,
      repositoryType: repositoryType,
      entityType: entityType
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/tree/Tree.js":
/*!*************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/tree/Tree.js ***!
  \*************************************************************/
/*! exports provided: Tree */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tree", function() { return Tree; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * Marks entity to work like a tree.
 * Tree pattern that will be used for the tree entity should be specified.
 * @TreeParent decorator must be used in tree entities.
 * TreeRepository can be used to manipulate with tree entities.
 */

function Tree(type) {
  return function (target) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().trees.push({
      target: target,
      type: type
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/tree/TreeChildren.js":
/*!*********************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/tree/TreeChildren.js ***!
  \*********************************************************************/
/*! exports provided: TreeChildren */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TreeChildren", function() { return TreeChildren; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * Marks a entity property as a children of the tree.
 * "Tree children" will contain all children (bind) of this entity.
 */

function TreeChildren(options) {
  return function (object, propertyName) {
    if (!options) options = {}; // now try to determine it its lazy relation

    var reflectedType = Reflect && Reflect.getMetadata ? Reflect.getMetadata("design:type", object, propertyName) : undefined;
    var isLazy = reflectedType && typeof reflectedType.name === "string" && reflectedType.name.toLowerCase() === "promise" || false; // add one-to-many relation for this

    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().relations.push({
      isTreeChildren: true,
      target: object.constructor,
      propertyName: propertyName,
      isLazy: isLazy,
      relationType: "one-to-many",
      type: function type() {
        return object.constructor;
      },
      options: options
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/tree/TreeLevelColumn.js":
/*!************************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/tree/TreeLevelColumn.js ***!
  \************************************************************************/
/*! exports provided: TreeLevelColumn */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TreeLevelColumn", function() { return TreeLevelColumn; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * Creates a "level"/"length" column to the table that holds a closure table.
 */

function TreeLevelColumn() {
  return function (object, propertyName) {
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().columns.push({
      target: object.constructor,
      propertyName: propertyName,
      mode: "treeLevel",
      options: {}
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/decorator/tree/TreeParent.js":
/*!*******************************************************************!*\
  !*** ./node_modules/typeorm/browser/decorator/tree/TreeParent.js ***!
  \*******************************************************************/
/*! exports provided: TreeParent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TreeParent", function() { return TreeParent; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");

/**
 * Marks a entity property as a parent of the tree.
 * "Tree parent" indicates who owns (is a parent) of this entity in tree structure.
 */

function TreeParent() {
  return function (object, propertyName) {
    // now try to determine it its lazy relation
    var reflectedType = Reflect && Reflect.getMetadata ? Reflect.getMetadata("design:type", object, propertyName) : undefined;
    var isLazy = reflectedType && typeof reflectedType.name === "string" && reflectedType.name.toLowerCase() === "promise" || false;
    Object(___WEBPACK_IMPORTED_MODULE_0__["getMetadataArgsStorage"])().relations.push({
      isTreeParent: true,
      target: object.constructor,
      propertyName: propertyName,
      isLazy: isLazy,
      relationType: "many-to-one",
      type: function type() {
        return object.constructor;
      },
      options: {}
    });
  };
}

/***/ }),

/***/ "./node_modules/typeorm/browser/driver/DriverFactory.js":
/*!**************************************************************!*\
  !*** ./node_modules/typeorm/browser/driver/DriverFactory.js ***!
  \**************************************************************/
/*! exports provided: DriverFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DriverFactory", function() { return DriverFactory; });
/* harmony import */ var _error_MissingDriverError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/MissingDriverError */ "./node_modules/typeorm/browser/error/MissingDriverError.js");
/* harmony import */ var _cockroachdb_CockroachDriver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cockroachdb/CockroachDriver */ "./node_modules/typeorm/browser/driver/cockroachdb/CockroachDriver.js");
/* harmony import */ var _mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mongodb/MongoDriver */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");
/* harmony import */ var _sqlite_SqliteDriver__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sqlite/SqliteDriver */ "./node_modules/typeorm/browser/driver/sqlite/SqliteDriver.js");
/* harmony import */ var _cordova_CordovaDriver__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cordova/CordovaDriver */ "./node_modules/typeorm/browser/driver/cordova/CordovaDriver.js");
/* harmony import */ var _react_native_ReactNativeDriver__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./react-native/ReactNativeDriver */ "./node_modules/typeorm/browser/driver/react-native/ReactNativeDriver.js");
/* harmony import */ var _nativescript_NativescriptDriver__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./nativescript/NativescriptDriver */ "./node_modules/typeorm/browser/driver/nativescript/NativescriptDriver.js");
/* harmony import */ var _sqljs_SqljsDriver__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./sqljs/SqljsDriver */ "./node_modules/typeorm/browser/driver/sqljs/SqljsDriver.js");
/* harmony import */ var _expo_ExpoDriver__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./expo/ExpoDriver */ "./node_modules/typeorm/browser/driver/expo/ExpoDriver.js");
/* harmony import */ var _aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./aurora-data-api/AuroraDataApiDriver */ "./node_modules/typeorm/browser/driver/aurora-data-api/AuroraDataApiDriver.js");















/**
 * Helps to create drivers.
 */

var DriverFactory =
/** @class */
function () {
  function DriverFactory() {}
  /**
   * Creates a new driver depend on a given connection's driver type.
   */


  DriverFactory.prototype.create = function (connection) {
    var type = connection.options.type;

    switch (type) {
      case "mysql":
        return new _mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_2__["MysqlDriver"](connection);

      case "postgres":
        return new _mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_2__["PostgresDriver"](connection);

      case "cockroachdb":
        return new _cockroachdb_CockroachDriver__WEBPACK_IMPORTED_MODULE_1__["CockroachDriver"](connection);

      case "sap":
        return new _mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_2__["SapDriver"](connection);

      case "mariadb":
        return new _mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_2__["MysqlDriver"](connection);

      case "sqlite":
        return new _sqlite_SqliteDriver__WEBPACK_IMPORTED_MODULE_3__["SqliteDriver"](connection);

      case "cordova":
        return new _cordova_CordovaDriver__WEBPACK_IMPORTED_MODULE_4__["CordovaDriver"](connection);

      case "nativescript":
        return new _nativescript_NativescriptDriver__WEBPACK_IMPORTED_MODULE_6__["NativescriptDriver"](connection);

      case "react-native":
        return new _react_native_ReactNativeDriver__WEBPACK_IMPORTED_MODULE_5__["ReactNativeDriver"](connection);

      case "sqljs":
        return new _sqljs_SqljsDriver__WEBPACK_IMPORTED_MODULE_7__["SqljsDriver"](connection);

      case "oracle":
        return new _mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_2__["OracleDriver"](connection);

      case "mssql":
        return new _mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_2__["SqlServerDriver"](connection);

      case "mongodb":
        return new _mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_2__["MongoDriver"](connection);

      case "expo":
        return new _expo_ExpoDriver__WEBPACK_IMPORTED_MODULE_8__["ExpoDriver"](connection);

      case "aurora-data-api":
        return new _aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_9__["AuroraDataApiDriver"](connection);

      default:
        throw new _error_MissingDriverError__WEBPACK_IMPORTED_MODULE_0__["MissingDriverError"](type);
    }
  };

  return DriverFactory;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/driver/DriverUtils.js":
/*!************************************************************!*\
  !*** ./node_modules/typeorm/browser/driver/DriverUtils.js ***!
  \************************************************************/
/*! exports provided: DriverUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DriverUtils", function() { return DriverUtils; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_StringUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/StringUtils */ "./node_modules/typeorm/browser/util/StringUtils.js");


/**
* Common driver utility functions.
*/

var DriverUtils =
/** @class */
function () {
  function DriverUtils() {} // -------------------------------------------------------------------------
  // Public Static Methods
  // -------------------------------------------------------------------------

  /**
   * Normalizes and builds a new driver options.
   * Extracts settings from connection url and sets to a new options object.
   */


  DriverUtils.buildDriverOptions = function (options, buildOptions) {
    if (options.url) {
      var parsedUrl = this.parseConnectionUrl(options.url);
      var urlDriverOptions = {
        type: parsedUrl.type,
        host: parsedUrl.host,
        username: parsedUrl.username,
        password: parsedUrl.password,
        port: parsedUrl.port,
        database: parsedUrl.database
      };

      if (buildOptions && buildOptions.useSid) {
        urlDriverOptions.sid = parsedUrl.database;
      }

      return Object.assign({}, options, urlDriverOptions);
    }

    return Object.assign({}, options);
  };
  /**
   * Builds column alias from given alias name and column name.
   *
   * If alias length is greater than the limit (if any) allowed by the current
   * driver, replaces it with a hashed string.
   *
   * @param driver Current `Driver`.
   * @param alias Alias part.
   * @param column Name of the column to be concatened to `alias`.
   *
   * @return An alias allowing to select/transform the target `column`.
   */


  DriverUtils.buildColumnAlias = function (_a, alias, column) {
    var maxAliasLength = _a.maxAliasLength;
    var columnAliasName = alias + "_" + column;

    if (maxAliasLength && maxAliasLength > 0 && columnAliasName.length > maxAliasLength) {
      return Object(_util_StringUtils__WEBPACK_IMPORTED_MODULE_1__["hash"])(columnAliasName, {
        length: maxAliasLength
      });
    }

    return columnAliasName;
  }; // -------------------------------------------------------------------------
  // Private Static Methods
  // -------------------------------------------------------------------------

  /**
   * Extracts connection data from the connection url.
   */


  DriverUtils.parseConnectionUrl = function (url) {
    var type = url.split(":")[0];
    var firstSlashes = url.indexOf("//");
    var preBase = url.substr(firstSlashes + 2);
    var secondSlash = preBase.indexOf("/");
    var base = secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase;
    var afterBase = secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined;
    var lastAtSign = base.lastIndexOf("@");
    var usernameAndPassword = base.substr(0, lastAtSign);
    var hostAndPort = base.substr(lastAtSign + 1);
    var username = usernameAndPassword;
    var password = "";
    var firstColon = usernameAndPassword.indexOf(":");

    if (firstColon !== -1) {
      username = usernameAndPassword.substr(0, firstColon);
      password = usernameAndPassword.substr(firstColon + 1);
    }

    var _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](hostAndPort.split(":"), 2),
        host = _a[0],
        port = _a[1];

    return {
      type: type,
      host: host,
      username: decodeURIComponent(username),
      password: decodeURIComponent(password),
      port: port ? parseInt(port) : undefined,
      database: afterBase || undefined
    };
  };

  return DriverUtils;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/driver/Query.js":
/*!******************************************************!*\
  !*** ./node_modules/typeorm/browser/driver/Query.js ***!
  \******************************************************/
/*! exports provided: Query */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Query", function() { return Query; });
/**
 * This class stores query and its parameters
 */
var Query =
/** @class */
function () {
  function Query(query, parameters) {
    this.query = query;
    this.parameters = parameters;
  }

  return Query;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/driver/SqlInMemory.js":
/*!************************************************************!*\
  !*** ./node_modules/typeorm/browser/driver/SqlInMemory.js ***!
  \************************************************************/
/*! exports provided: SqlInMemory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SqlInMemory", function() { return SqlInMemory; });
/**
 * This class stores up and down queries needed for migrations functionality.
 */
var SqlInMemory =
/** @class */
function () {
  function SqlInMemory() {
    this.upQueries = [];
    this.downQueries = [];
  }

  return SqlInMemory;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/driver/aurora-data-api/AuroraDataApiDriver.js":
/*!************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/driver/aurora-data-api/AuroraDataApiDriver.js ***!
  \************************************************************************************/
/*! exports provided: AuroraDataApiDriver */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AuroraDataApiDriver", function() { return AuroraDataApiDriver; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _DriverUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../DriverUtils */ "./node_modules/typeorm/browser/driver/DriverUtils.js");
/* harmony import */ var _AuroraDataApiQueryRunner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AuroraDataApiQueryRunner */ "./node_modules/typeorm/browser/driver/aurora-data-api/AuroraDataApiQueryRunner.js");
/* harmony import */ var _util_DateUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/DateUtils */ "./node_modules/typeorm/browser/util/DateUtils.js");
/* harmony import */ var _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../platform/PlatformTools */ "./node_modules/typeorm/browser/platform/PlatformTools.js");
/* harmony import */ var _schema_builder_RdbmsSchemaBuilder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../schema-builder/RdbmsSchemaBuilder */ "./node_modules/typeorm/browser/schema-builder/RdbmsSchemaBuilder.js");
/* harmony import */ var _util_OrmUtils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/OrmUtils */ "./node_modules/typeorm/browser/util/OrmUtils.js");
/* harmony import */ var _util_ApplyValueTransformers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util/ApplyValueTransformers */ "./node_modules/typeorm/browser/util/ApplyValueTransformers.js");








/**
 * Organizes communication with MySQL DBMS.
 */

var AuroraDataApiDriver =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function AuroraDataApiDriver(connection) {
    var _this = this;
    /**
     * Indicates if replication is enabled.
     */


    this.isReplicated = false;
    /**
     * Indicates if tree tables are supported by this driver.
     */

    this.treeSupport = true;
    /**
     * Gets list of supported column data types by a driver.
     *
     * @see https://www.tutorialspoint.com/mysql/mysql-data-types.htm
     * @see https://dev.mysql.com/doc/refman/8.0/en/data-types.html
     */

    this.supportedDataTypes = [// numeric types
    "bit", "int", "integer", "tinyint", "smallint", "mediumint", "bigint", "float", "double", "double precision", "real", "decimal", "dec", "numeric", "fixed", "bool", "boolean", // date and time types
    "date", "datetime", "timestamp", "time", "year", // string types
    "char", "nchar", "national char", "varchar", "nvarchar", "national varchar", "blob", "text", "tinyblob", "tinytext", "mediumblob", "mediumtext", "longblob", "longtext", "enum", "binary", "varbinary", // json data type
    "json", // spatial data types
    "geometry", "point", "linestring", "polygon", "multipoint", "multilinestring", "multipolygon", "geometrycollection"];
    /**
     * Gets list of spatial column data types.
     */

    this.spatialTypes = ["geometry", "point", "linestring", "polygon", "multipoint", "multilinestring", "multipolygon", "geometrycollection"];
    /**
     * Gets list of column data types that support length by a driver.
     */

    this.withLengthColumnTypes = ["char", "varchar", "nvarchar", "binary", "varbinary"];
    /**
     * Gets list of column data types that support length by a driver.
     */

    this.withWidthColumnTypes = ["bit", "tinyint", "smallint", "mediumint", "int", "integer", "bigint"];
    /**
     * Gets list of column data types that support precision by a driver.
     */

    this.withPrecisionColumnTypes = ["decimal", "dec", "numeric", "fixed", "float", "double", "double precision", "real", "time", "datetime", "timestamp"];
    /**
     * Gets list of column data types that supports scale by a driver.
     */

    this.withScaleColumnTypes = ["decimal", "dec", "numeric", "fixed", "float", "double", "double precision", "real"];
    /**
     * Gets list of column data types that supports UNSIGNED and ZEROFILL attributes.
     */

    this.unsignedAndZerofillTypes = ["int", "integer", "smallint", "tinyint", "mediumint", "bigint", "decimal", "dec", "numeric", "fixed", "float", "double", "double precision", "real"];
    /**
     * ORM has special columns and we need to know what database column types should be for those columns.
     * Column types are driver dependant.
     */

    this.mappedDataTypes = {
      createDate: "datetime",
      createDatePrecision: 6,
      createDateDefault: "CURRENT_TIMESTAMP(6)",
      updateDate: "datetime",
      updateDatePrecision: 6,
      updateDateDefault: "CURRENT_TIMESTAMP(6)",
      deleteDate: "datetime",
      deleteDatePrecision: 6,
      deleteDateNullable: true,
      version: "int",
      treeLevel: "int",
      migrationId: "int",
      migrationName: "varchar",
      migrationTimestamp: "bigint",
      cacheId: "int",
      cacheIdentifier: "varchar",
      cacheTime: "bigint",
      cacheDuration: "int",
      cacheQuery: "text",
      cacheResult: "text",
      metadataType: "varchar",
      metadataDatabase: "varchar",
      metadataSchema: "varchar",
      metadataTable: "varchar",
      metadataName: "varchar",
      metadataValue: "text"
    };
    /**
     * Default values of length, precision and scale depends on column data type.
     * Used in the cases when length/precision/scale is not specified by user.
     */

    this.dataTypeDefaults = {
      "varchar": {
        length: 255
      },
      "nvarchar": {
        length: 255
      },
      "national varchar": {
        length: 255
      },
      "char": {
        length: 1
      },
      "binary": {
        length: 1
      },
      "varbinary": {
        length: 255
      },
      "decimal": {
        precision: 10,
        scale: 0
      },
      "dec": {
        precision: 10,
        scale: 0
      },
      "numeric": {
        precision: 10,
        scale: 0
      },
      "fixed": {
        precision: 10,
        scale: 0
      },
      "float": {
        precision: 12
      },
      "double": {
        precision: 22
      },
      "time": {
        precision: 0
      },
      "datetime": {
        precision: 0
      },
      "timestamp": {
        precision: 0
      },
      "bit": {
        width: 1
      },
      "int": {
        width: 11
      },
      "integer": {
        width: 11
      },
      "tinyint": {
        width: 4
      },
      "smallint": {
        width: 6
      },
      "mediumint": {
        width: 9
      },
      "bigint": {
        width: 20
      }
    };
    /**
     * Max length allowed by MySQL for aliases.
     * @see https://dev.mysql.com/doc/refman/5.5/en/identifiers.html
     */

    this.maxAliasLength = 63;
    this.connection = connection;
    this.options = connection.options; // load mysql package

    this.loadDependencies();
    this.client = new this.DataApiDriver(this.options.region, this.options.secretArn, this.options.resourceArn, this.options.database, function (query, parameters) {
      return _this.connection.logger.logQuery(query, parameters);
    }); // validate options to make sure everything is set
    // todo: revisit validation with replication in mind
    // if (!(this.options.host || (this.options.extra && this.options.extra.socketPath)) && !this.options.socketPath)
    //     throw new DriverOptionNotSetError("socketPath and host");
    // if (!this.options.username)
    //     throw new DriverOptionNotSetError("username");
    // if (!this.options.database)
    //     throw new DriverOptionNotSetError("database");
    // todo: check what is going on when connection is setup without database and how to connect to a database then?
    // todo: provide options to auto-create a database if it does not exist yet
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Performs connection to the database.
   */


  AuroraDataApiDriver.prototype.connect = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        ];
      });
    });
  };
  /**
   * Makes any action after connection (e.g. create extensions in Postgres driver).
   */


  AuroraDataApiDriver.prototype.afterConnect = function () {
    return Promise.resolve();
  };
  /**
   * Closes connection with the database.
   */


  AuroraDataApiDriver.prototype.disconnect = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        ];
      });
    });
  };
  /**
   * Creates a schema builder used to build and sync a schema.
   */


  AuroraDataApiDriver.prototype.createSchemaBuilder = function () {
    return new _schema_builder_RdbmsSchemaBuilder__WEBPACK_IMPORTED_MODULE_5__["RdbmsSchemaBuilder"](this.connection);
  };
  /**
   * Creates a query runner used to execute database queries.
   */


  AuroraDataApiDriver.prototype.createQueryRunner = function (mode) {
    if (mode === void 0) {
      mode = "master";
    }

    return new _AuroraDataApiQueryRunner__WEBPACK_IMPORTED_MODULE_2__["AuroraDataApiQueryRunner"](this);
  };
  /**
   * Replaces parameters in the given sql with special escaping character
   * and an array of parameter names to be passed to a query.
   */


  AuroraDataApiDriver.prototype.escapeQueryWithParameters = function (sql, parameters, nativeParameters) {
    var escapedParameters = Object.keys(nativeParameters).map(function (key) {
      return nativeParameters[key];
    });
    if (!parameters || !Object.keys(parameters).length) return [sql, escapedParameters];
    var keys = Object.keys(parameters).map(function (parameter) {
      return "(:(\\.\\.\\.)?" + parameter + "\\b)";
    }).join("|");
    sql = sql.replace(new RegExp(keys, "g"), function (key) {
      var value;

      if (key.substr(0, 4) === ":...") {
        value = parameters[key.substr(4)];
      } else {
        value = parameters[key.substr(1)];
      }

      if (value instanceof Function) {
        return value();
      } else {
        escapedParameters.push(value);
        return "?";
      }
    }); // todo: make replace only in value statements, otherwise problems

    return [sql, escapedParameters];
  };
  /**
   * Escapes a column name.
   */


  AuroraDataApiDriver.prototype.escape = function (columnName) {
    return "`" + columnName + "`";
  };
  /**
   * Build full table name with database name, schema name and table name.
   * E.g. "myDB"."mySchema"."myTable"
   */


  AuroraDataApiDriver.prototype.buildTableName = function (tableName, schema, database) {
    return database ? database + "." + tableName : tableName;
  };
  /**
   * Prepares given value to a value to be persisted, based on its column type and metadata.
   */


  AuroraDataApiDriver.prototype.preparePersistentValue = function (value, columnMetadata) {
    if (columnMetadata.transformer) value = _util_ApplyValueTransformers__WEBPACK_IMPORTED_MODULE_7__["ApplyValueTransformers"].transformTo(columnMetadata.transformer, value);
    if (value === null || value === undefined) return value;

    if (columnMetadata.type === Boolean) {
      return value === true ? 1 : 0;
    } else if (columnMetadata.type === "date") {
      return _util_DateUtils__WEBPACK_IMPORTED_MODULE_3__["DateUtils"].mixedDateToDateString(value);
    } else if (columnMetadata.type === "time") {
      return _util_DateUtils__WEBPACK_IMPORTED_MODULE_3__["DateUtils"].mixedDateToTimeString(value);
    } else if (columnMetadata.type === "json") {
      return JSON.stringify(value);
    } else if (columnMetadata.type === "timestamp" || columnMetadata.type === "datetime" || columnMetadata.type === Date) {
      return _util_DateUtils__WEBPACK_IMPORTED_MODULE_3__["DateUtils"].mixedDateToDate(value);
    } else if (columnMetadata.type === "simple-array") {
      return _util_DateUtils__WEBPACK_IMPORTED_MODULE_3__["DateUtils"].simpleArrayToString(value);
    } else if (columnMetadata.type === "simple-json") {
      return _util_DateUtils__WEBPACK_IMPORTED_MODULE_3__["DateUtils"].simpleJsonToString(value);
    } else if (columnMetadata.type === "enum" || columnMetadata.type === "simple-enum") {
      return "" + value;
    }

    return value;
  };
  /**
   * Prepares given value to a value to be persisted, based on its column type or metadata.
   */


  AuroraDataApiDriver.prototype.prepareHydratedValue = function (value, columnMetadata) {
    if (value === null || value === undefined) return columnMetadata.transformer ? _util_ApplyValueTransformers__WEBPACK_IMPORTED_MODULE_7__["ApplyValueTransformers"].transformFrom(columnMetadata.transformer, value) : value;

    if (columnMetadata.type === Boolean || columnMetadata.type === "bool" || columnMetadata.type === "boolean") {
      value = value ? true : false;
    } else if (columnMetadata.type === "datetime" || columnMetadata.type === Date) {
      value = _util_DateUtils__WEBPACK_IMPORTED_MODULE_3__["DateUtils"].normalizeHydratedDate(value);
    } else if (columnMetadata.type === "date") {
      value = _util_DateUtils__WEBPACK_IMPORTED_MODULE_3__["DateUtils"].mixedDateToDateString(value);
    } else if (columnMetadata.type === "json") {
      value = typeof value === "string" ? JSON.parse(value) : value;
    } else if (columnMetadata.type === "time") {
      value = _util_DateUtils__WEBPACK_IMPORTED_MODULE_3__["DateUtils"].mixedTimeToString(value);
    } else if (columnMetadata.type === "simple-array") {
      value = _util_DateUtils__WEBPACK_IMPORTED_MODULE_3__["DateUtils"].stringToSimpleArray(value);
    } else if (columnMetadata.type === "simple-json") {
      value = _util_DateUtils__WEBPACK_IMPORTED_MODULE_3__["DateUtils"].stringToSimpleJson(value);
    } else if ((columnMetadata.type === "enum" || columnMetadata.type === "simple-enum") && columnMetadata["enum"] && !isNaN(value) && columnMetadata["enum"].indexOf(parseInt(value)) >= 0) {
      // convert to number if that exists in possible enum options
      value = parseInt(value);
    }

    if (columnMetadata.transformer) value = _util_ApplyValueTransformers__WEBPACK_IMPORTED_MODULE_7__["ApplyValueTransformers"].transformFrom(columnMetadata.transformer, value);
    return value;
  };
  /**
   * Creates a database type from a given column metadata.
   */


  AuroraDataApiDriver.prototype.normalizeType = function (column) {
    if (column.type === Number || column.type === "integer") {
      return "int";
    } else if (column.type === String) {
      return "varchar";
    } else if (column.type === Date) {
      return "datetime";
    } else if (column.type === Buffer) {
      return "blob";
    } else if (column.type === Boolean) {
      return "tinyint";
    } else if (column.type === "uuid") {
      return "varchar";
    } else if (column.type === "simple-array" || column.type === "simple-json") {
      return "text";
    } else if (column.type === "simple-enum") {
      return "enum";
    } else if (column.type === "double precision" || column.type === "real") {
      return "double";
    } else if (column.type === "dec" || column.type === "numeric" || column.type === "fixed") {
      return "decimal";
    } else if (column.type === "bool" || column.type === "boolean") {
      return "tinyint";
    } else if (column.type === "nvarchar" || column.type === "national varchar") {
      return "varchar";
    } else if (column.type === "nchar" || column.type === "national char") {
      return "char";
    } else {
      return column.type || "";
    }
  };
  /**
   * Normalizes "default" value of the column.
   */


  AuroraDataApiDriver.prototype.normalizeDefault = function (columnMetadata) {
    var defaultValue = columnMetadata["default"];

    if ((columnMetadata.type === "enum" || columnMetadata.type === "simple-enum") && defaultValue !== undefined) {
      return "'" + defaultValue + "'";
    }

    if (typeof defaultValue === "number") {
      return "" + defaultValue;
    } else if (typeof defaultValue === "boolean") {
      return defaultValue === true ? "1" : "0";
    } else if (typeof defaultValue === "function") {
      return defaultValue();
    } else if (typeof defaultValue === "string") {
      return "'" + defaultValue + "'";
    } else if (defaultValue === null) {
      return "null";
    } else {
      return defaultValue;
    }
  };
  /**
   * Normalizes "isUnique" value of the column.
   */


  AuroraDataApiDriver.prototype.normalizeIsUnique = function (column) {
    return column.entityMetadata.indices.some(function (idx) {
      return idx.isUnique && idx.columns.length === 1 && idx.columns[0] === column;
    });
  };
  /**
   * Returns default column lengths, which is required on column creation.
   */


  AuroraDataApiDriver.prototype.getColumnLength = function (column) {
    if (column.length) return column.length.toString();
    /**
     * fix https://github.com/typeorm/typeorm/issues/1139
     */

    if (column.generationStrategy === "uuid") return "36";

    switch (column.type) {
      case String:
      case "varchar":
      case "nvarchar":
      case "national varchar":
        return "255";

      case "varbinary":
        return "255";

      default:
        return "";
    }
  };
  /**
   * Creates column type definition including length, precision and scale
   */


  AuroraDataApiDriver.prototype.createFullType = function (column) {
    var type = column.type; // used 'getColumnLength()' method, because MySQL requires column length for `varchar`, `nvarchar` and `varbinary` data types

    if (this.getColumnLength(column)) {
      type += "(" + this.getColumnLength(column) + ")";
    } else if (column.width) {
      type += "(" + column.width + ")";
    } else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {
      type += "(" + column.precision + "," + column.scale + ")";
    } else if (column.precision !== null && column.precision !== undefined) {
      type += "(" + column.precision + ")";
    }

    if (column.isArray) type += " array";
    return type;
  };
  /**
   * Obtains a new database connection to a master server.
   * Used for replication.
   * If replication is not setup then returns default connection's database connection.
   */


  AuroraDataApiDriver.prototype.obtainMasterConnection = function () {
    var _this = this;

    return new Promise(function (ok, fail) {
      if (_this.poolCluster) {
        _this.poolCluster.getConnection("MASTER", function (err, dbConnection) {
          err ? fail(err) : ok(_this.prepareDbConnection(dbConnection));
        });
      } else if (_this.pool) {
        _this.pool.getConnection(function (err, dbConnection) {
          err ? fail(err) : ok(_this.prepareDbConnection(dbConnection));
        });
      } else {
        fail(new Error("Connection is not established with mysql database"));
      }
    });
  };
  /**
   * Obtains a new database connection to a slave server.
   * Used for replication.
   * If replication is not setup then returns master (default) connection's database connection.
   */


  AuroraDataApiDriver.prototype.obtainSlaveConnection = function () {
    var _this = this;

    if (!this.poolCluster) return this.obtainMasterConnection();
    return new Promise(function (ok, fail) {
      _this.poolCluster.getConnection("SLAVE*", function (err, dbConnection) {
        err ? fail(err) : ok(dbConnection);
      });
    });
  };
  /**
   * Creates generated map of values generated or returned by database after INSERT query.
   */


  AuroraDataApiDriver.prototype.createGeneratedMap = function (metadata, insertResult) {
    var generatedMap = metadata.generatedColumns.reduce(function (map, generatedColumn) {
      var value;

      if (generatedColumn.generationStrategy === "increment" && insertResult.insertId) {
        value = insertResult.insertId; // } else if (generatedColumn.generationStrategy === "uuid") {
        //     console.log("getting db value:", generatedColumn.databaseName);
        //     value = generatedColumn.getEntityValue(uuidMap);
      }

      return _util_OrmUtils__WEBPACK_IMPORTED_MODULE_6__["OrmUtils"].mergeDeep(map, generatedColumn.createValueMap(value));
    }, {});
    return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;
  };
  /**
   * Differentiate columns of this table and columns from the given column metadatas columns
   * and returns only changed.
   */


  AuroraDataApiDriver.prototype.findChangedColumns = function (tableColumns, columnMetadatas) {
    var _this = this;

    return columnMetadatas.filter(function (columnMetadata) {
      var tableColumn = tableColumns.find(function (c) {
        return c.name === columnMetadata.databaseName;
      });
      if (!tableColumn) return false; // we don't need new columns, we only need exist and changed
      // console.log("table:", columnMetadata.entityMetadata.tableName);
      // console.log("name:", tableColumn.name, columnMetadata.databaseName);
      // console.log("type:", tableColumn.type, this.normalizeType(columnMetadata));
      // console.log("length:", tableColumn.length, columnMetadata.length);
      // console.log("width:", tableColumn.width, columnMetadata.width);
      // console.log("precision:", tableColumn.precision, columnMetadata.precision);
      // console.log("scale:", tableColumn.scale, columnMetadata.scale);
      // console.log("zerofill:", tableColumn.zerofill, columnMetadata.zerofill);
      // console.log("unsigned:", tableColumn.unsigned, columnMetadata.unsigned);
      // console.log("asExpression:", tableColumn.asExpression, columnMetadata.asExpression);
      // console.log("generatedType:", tableColumn.generatedType, columnMetadata.generatedType);
      // console.log("comment:", tableColumn.comment, columnMetadata.comment);
      // console.log("default:", tableColumn.default, columnMetadata.default);
      // console.log("enum:", tableColumn.enum, columnMetadata.enum);
      // console.log("default changed:", !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default));
      // console.log("onUpdate:", tableColumn.onUpdate, columnMetadata.onUpdate);
      // console.log("isPrimary:", tableColumn.isPrimary, columnMetadata.isPrimary);
      // console.log("isNullable:", tableColumn.isNullable, columnMetadata.isNullable);
      // console.log("isUnique:", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));
      // console.log("isGenerated:", tableColumn.isGenerated, columnMetadata.isGenerated);
      // console.log((columnMetadata.generationStrategy !== "uuid" && tableColumn.isGenerated !== columnMetadata.isGenerated));
      // console.log("==========================================");

      var columnMetadataLength = columnMetadata.length;

      if (!columnMetadataLength && columnMetadata.generationStrategy === "uuid") {
        // fixing #3374
        columnMetadataLength = _this.getColumnLength(columnMetadata);
      }

      return tableColumn.name !== columnMetadata.databaseName || tableColumn.type !== _this.normalizeType(columnMetadata) || tableColumn.length !== columnMetadataLength || tableColumn.width !== columnMetadata.width || tableColumn.precision !== columnMetadata.precision || tableColumn.scale !== columnMetadata.scale || tableColumn.zerofill !== columnMetadata.zerofill || tableColumn.unsigned !== columnMetadata.unsigned || tableColumn.asExpression !== columnMetadata.asExpression || tableColumn.generatedType !== columnMetadata.generatedType // || tableColumn.comment !== columnMetadata.comment // todo
      || !_this.compareDefaultValues(_this.normalizeDefault(columnMetadata), tableColumn["default"]) || tableColumn["enum"] && columnMetadata["enum"] && !_util_OrmUtils__WEBPACK_IMPORTED_MODULE_6__["OrmUtils"].isArraysEqual(tableColumn["enum"], columnMetadata["enum"].map(function (val) {
        return val + "";
      })) || tableColumn.onUpdate !== columnMetadata.onUpdate || tableColumn.isPrimary !== columnMetadata.isPrimary || tableColumn.isNullable !== columnMetadata.isNullable || tableColumn.isUnique !== _this.normalizeIsUnique(columnMetadata) || columnMetadata.generationStrategy !== "uuid" && tableColumn.isGenerated !== columnMetadata.isGenerated;
    });
  };
  /**
   * Returns true if driver supports RETURNING / OUTPUT statement.
   */


  AuroraDataApiDriver.prototype.isReturningSqlSupported = function () {
    return false;
  };
  /**
   * Returns true if driver supports uuid values generation on its own.
   */


  AuroraDataApiDriver.prototype.isUUIDGenerationSupported = function () {
    return false;
  };
  /**
   * Creates an escaped parameter.
   */


  AuroraDataApiDriver.prototype.createParameter = function (parameterName, index) {
    return "?";
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Loads all driver dependencies.
   */


  AuroraDataApiDriver.prototype.loadDependencies = function () {
    this.DataApiDriver = _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_4__["PlatformTools"].load("typeorm-aurora-data-api-driver"); // Driver uses rollup for publishing, which has issues when using typeorm in combination with webpack
    // See https://github.com/webpack/webpack/issues/4742#issuecomment-295556787

    this.DataApiDriver = this.DataApiDriver["default"] || this.DataApiDriver;
  };
  /**
   * Creates a new connection pool for a given database credentials.
   */


  AuroraDataApiDriver.prototype.createConnectionOptions = function (options, credentials) {
    credentials = Object.assign({}, credentials, _DriverUtils__WEBPACK_IMPORTED_MODULE_1__["DriverUtils"].buildDriverOptions(credentials)); // todo: do it better way
    // build connection options for the driver

    return Object.assign({}, {
      resourceArn: options.resourceArn,
      secretArn: options.secretArn,
      database: options.database,
      region: options.region,
      type: options.type
    }, {
      host: credentials.host,
      user: credentials.username,
      password: credentials.password,
      database: credentials.database,
      port: credentials.port,
      ssl: options.ssl
    }, options.extra || {});
  };
  /**
   * Creates a new connection pool for a given database credentials.
   */


  AuroraDataApiDriver.prototype.createPool = function (connectionOptions) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , {}];
      });
    });
  };
  /**
   * Attaches all required base handlers to a database connection, such as the unhandled error handler.
   */


  AuroraDataApiDriver.prototype.prepareDbConnection = function (connection) {
    var logger = this.connection.logger;
    /*
      Attaching an error handler to connection errors is essential, as, otherwise, errors raised will go unhandled and
      cause the hosting app to crash.
     */

    if (connection.listeners("error").length === 0) {
      connection.on("error", function (error) {
        return logger.log("warn", "MySQL connection raised an error. " + error);
      });
    }

    return connection;
  };
  /**
   * Checks if "DEFAULT" values in the column metadata and in the database are equal.
   */


  AuroraDataApiDriver.prototype.compareDefaultValues = function (columnMetadataValue, databaseValue) {
    if (typeof columnMetadataValue === "string" && typeof databaseValue === "string") {
      // we need to cut out "'" because in mysql we can understand returned value is a string or a function
      // as result compare cannot understand if default is really changed or not
      columnMetadataValue = columnMetadataValue.replace(/^'+|'+$/g, "");
      databaseValue = databaseValue.replace(/^'+|'+$/g, "");
    }

    return columnMetadataValue === databaseValue;
  };

  return AuroraDataApiDriver;
}();


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/typeorm/browser/driver/aurora-data-api/AuroraDataApiQueryRunner.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/driver/aurora-data-api/AuroraDataApiQueryRunner.js ***!
  \*****************************************************************************************/
/*! exports provided: AuroraDataApiQueryRunner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AuroraDataApiQueryRunner", function() { return AuroraDataApiQueryRunner; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _error_TransactionAlreadyStartedError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error/TransactionAlreadyStartedError */ "./node_modules/typeorm/browser/error/TransactionAlreadyStartedError.js");
/* harmony import */ var _error_TransactionNotStartedError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../error/TransactionNotStartedError */ "./node_modules/typeorm/browser/error/TransactionNotStartedError.js");
/* harmony import */ var _schema_builder_table_TableColumn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../schema-builder/table/TableColumn */ "./node_modules/typeorm/browser/schema-builder/table/TableColumn.js");
/* harmony import */ var _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../schema-builder/table/Table */ "./node_modules/typeorm/browser/schema-builder/table/Table.js");
/* harmony import */ var _schema_builder_table_TableForeignKey__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../schema-builder/table/TableForeignKey */ "./node_modules/typeorm/browser/schema-builder/table/TableForeignKey.js");
/* harmony import */ var _schema_builder_table_TableIndex__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../schema-builder/table/TableIndex */ "./node_modules/typeorm/browser/schema-builder/table/TableIndex.js");
/* harmony import */ var _error_QueryRunnerAlreadyReleasedError__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../error/QueryRunnerAlreadyReleasedError */ "./node_modules/typeorm/browser/error/QueryRunnerAlreadyReleasedError.js");
/* harmony import */ var _schema_builder_view_View__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../schema-builder/view/View */ "./node_modules/typeorm/browser/schema-builder/view/View.js");
/* harmony import */ var _Query__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../Query */ "./node_modules/typeorm/browser/driver/Query.js");
/* harmony import */ var _util_OrmUtils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../util/OrmUtils */ "./node_modules/typeorm/browser/util/OrmUtils.js");
/* harmony import */ var _schema_builder_table_TableUnique__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../schema-builder/table/TableUnique */ "./node_modules/typeorm/browser/schema-builder/table/TableUnique.js");
/* harmony import */ var _query_runner_BaseQueryRunner__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../query-runner/BaseQueryRunner */ "./node_modules/typeorm/browser/query-runner/BaseQueryRunner.js");
/* harmony import */ var _subscriber_Broadcaster__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../subscriber/Broadcaster */ "./node_modules/typeorm/browser/subscriber/Broadcaster.js");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../index */ "./node_modules/typeorm/browser/index.js");















/**
 * Runs queries on a single mysql database connection.
 */

var AuroraDataApiQueryRunner =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](AuroraDataApiQueryRunner, _super); // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------


  function AuroraDataApiQueryRunner(driver) {
    var _this = _super.call(this) || this;

    _this.driver = driver;
    _this.connection = driver.connection;
    _this.broadcaster = new _subscriber_Broadcaster__WEBPACK_IMPORTED_MODULE_13__["Broadcaster"](_this);
    return _this;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Creates/uses database connection from the connection pool to perform further operations.
   * Returns obtained database connection.
   */


  AuroraDataApiQueryRunner.prototype.connect = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , {}];
      });
    });
  };
  /**
   * Releases used database connection.
   * You cannot use query runner methods once its released.
   */


  AuroraDataApiQueryRunner.prototype.release = function () {
    this.isReleased = true;
    if (this.databaseConnection) this.databaseConnection.release();
    return Promise.resolve();
  };
  /**
   * Starts transaction on the current connection.
   */


  AuroraDataApiQueryRunner.prototype.startTransaction = function (isolationLevel) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (this.isTransactionActive) throw new _error_TransactionAlreadyStartedError__WEBPACK_IMPORTED_MODULE_1__["TransactionAlreadyStartedError"]();
            this.isTransactionActive = true;
            return [4
            /*yield*/
            , this.driver.client.startTransaction()];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Commits transaction.
   * Error will be thrown if transaction was not started.
   */


  AuroraDataApiQueryRunner.prototype.commitTransaction = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!this.isTransactionActive) throw new _error_TransactionNotStartedError__WEBPACK_IMPORTED_MODULE_2__["TransactionNotStartedError"]();
            return [4
            /*yield*/
            , this.driver.client.commitTransaction()];

          case 1:
            _a.sent();

            this.isTransactionActive = false;
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Rollbacks transaction.
   * Error will be thrown if transaction was not started.
   */


  AuroraDataApiQueryRunner.prototype.rollbackTransaction = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!this.isTransactionActive) throw new _error_TransactionNotStartedError__WEBPACK_IMPORTED_MODULE_2__["TransactionNotStartedError"]();
            return [4
            /*yield*/
            , this.driver.client.rollbackTransaction()];

          case 1:
            _a.sent();

            this.isTransactionActive = false;
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Executes a raw SQL query.
   */


  AuroraDataApiQueryRunner.prototype.query = function (query, parameters) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var result;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (this.isReleased) throw new _error_QueryRunnerAlreadyReleasedError__WEBPACK_IMPORTED_MODULE_7__["QueryRunnerAlreadyReleasedError"]();
            return [4
            /*yield*/
            , this.driver.client.query(query, parameters)];

          case 1:
            result = _a.sent();

            if (result.records) {
              return [2
              /*return*/
              , result.records];
            }

            return [2
            /*return*/
            , result];
        }
      });
    });
  };
  /**
   * Returns raw data stream.
   */


  AuroraDataApiQueryRunner.prototype.stream = function (query, parameters, onEnd, onError) {
    var _this = this;

    if (this.isReleased) throw new _error_QueryRunnerAlreadyReleasedError__WEBPACK_IMPORTED_MODULE_7__["QueryRunnerAlreadyReleasedError"]();
    return new Promise(function (ok, fail) {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
        var databaseConnection, stream, err_1;
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2,, 3]);

              return [4
              /*yield*/
              , this.connect()];

            case 1:
              databaseConnection = _a.sent();
              stream = databaseConnection.query(query, parameters);
              if (onEnd) stream.on("end", onEnd);
              if (onError) stream.on("error", onError);
              ok(stream);
              return [3
              /*break*/
              , 3];

            case 2:
              err_1 = _a.sent();
              fail(err_1);
              return [3
              /*break*/
              , 3];

            case 3:
              return [2
              /*return*/
              ];
          }
        });
      });
    });
  };
  /**
   * Returns all available database names including system databases.
   */


  AuroraDataApiQueryRunner.prototype.getDatabases = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , Promise.resolve([])];
      });
    });
  };
  /**
   * Returns all available schema names including system schemas.
   * If database parameter specified, returns schemas of that database.
   */


  AuroraDataApiQueryRunner.prototype.getSchemas = function (database) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("MySql driver does not support table schemas");
      });
    });
  };
  /**
   * Checks if database with the given name exist.
   */


  AuroraDataApiQueryRunner.prototype.hasDatabase = function (database) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var result;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.query("SELECT * FROM `INFORMATION_SCHEMA`.`SCHEMATA` WHERE `SCHEMA_NAME` = '" + database + "'")];

          case 1:
            result = _a.sent();
            return [2
            /*return*/
            , result.length ? true : false];
        }
      });
    });
  };
  /**
   * Checks if schema with the given name exist.
   */


  AuroraDataApiQueryRunner.prototype.hasSchema = function (schema) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("MySql driver does not support table schemas");
      });
    });
  };
  /**
   * Checks if table with the given name exist in the database.
   */


  AuroraDataApiQueryRunner.prototype.hasTable = function (tableOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var parsedTableName, sql, result;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            parsedTableName = this.parseTableName(tableOrName);
            sql = "SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '" + parsedTableName.database + "' AND `TABLE_NAME` = '" + parsedTableName.tableName + "'";
            return [4
            /*yield*/
            , this.query(sql)];

          case 1:
            result = _a.sent();
            return [2
            /*return*/
            , result.length ? true : false];
        }
      });
    });
  };
  /**
   * Checks if column with the given name exist in the given table.
   */


  AuroraDataApiQueryRunner.prototype.hasColumn = function (tableOrName, column) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var parsedTableName, columnName, sql, result;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            parsedTableName = this.parseTableName(tableOrName);
            columnName = column instanceof _schema_builder_table_TableColumn__WEBPACK_IMPORTED_MODULE_3__["TableColumn"] ? column.name : column;
            sql = "SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '" + parsedTableName.database + "' AND `TABLE_NAME` = '" + parsedTableName.tableName + "' AND `COLUMN_NAME` = '" + columnName + "'";
            return [4
            /*yield*/
            , this.query(sql)];

          case 1:
            result = _a.sent();
            return [2
            /*return*/
            , result.length ? true : false];
        }
      });
    });
  };
  /**
   * Creates a new database.
   */


  AuroraDataApiQueryRunner.prototype.createDatabase = function (database, ifNotExist) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var up, down;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            up = ifNotExist ? "CREATE DATABASE IF NOT EXISTS `" + database + "`" : "CREATE DATABASE `" + database + "`";
            down = "DROP DATABASE `" + database + "`";
            return [4
            /*yield*/
            , this.executeQueries(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](up), new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](down))];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops database.
   */


  AuroraDataApiQueryRunner.prototype.dropDatabase = function (database, ifExist) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var up, down;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            up = ifExist ? "DROP DATABASE IF EXISTS `" + database + "`" : "DROP DATABASE `" + database + "`";
            down = "CREATE DATABASE `" + database + "`";
            return [4
            /*yield*/
            , this.executeQueries(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](up), new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](down))];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new table schema.
   */


  AuroraDataApiQueryRunner.prototype.createSchema = function (schema, ifNotExist) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("Schema create queries are not supported by MySql driver.");
      });
    });
  };
  /**
   * Drops table schema.
   */


  AuroraDataApiQueryRunner.prototype.dropSchema = function (schemaPath, ifExist) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("Schema drop queries are not supported by MySql driver.");
      });
    });
  };
  /**
   * Creates a new table.
   */


  AuroraDataApiQueryRunner.prototype.createTable = function (table, ifNotExist, createForeignKeys) {
    if (ifNotExist === void 0) {
      ifNotExist = false;
    }

    if (createForeignKeys === void 0) {
      createForeignKeys = true;
    }

    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var isTableExist, upQueries, downQueries;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!ifNotExist) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , this.hasTable(table)];

          case 1:
            isTableExist = _a.sent();
            if (isTableExist) return [2
            /*return*/
            , Promise.resolve()];
            _a.label = 2;

          case 2:
            upQueries = [];
            downQueries = [];
            upQueries.push(this.createTableSql(table, createForeignKeys));
            downQueries.push(this.dropTableSql(table)); // we must first drop indices, than drop foreign keys, because drop queries runs in reversed order
            // and foreign keys will be dropped first as indices. This order is very important, because we can't drop index
            // if it related to the foreign key.
            // createTable does not need separate method to create indices, because it create indices in the same query with table creation.

            table.indices.forEach(function (index) {
              return downQueries.push(_this.dropIndexSql(table, index));
            }); // if createForeignKeys is true, we must drop created foreign keys in down query.
            // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.

            if (createForeignKeys) table.foreignKeys.forEach(function (foreignKey) {
              return downQueries.push(_this.dropForeignKeySql(table, foreignKey));
            });
            return [2
            /*return*/
            , this.executeQueries(upQueries, downQueries)];
        }
      });
    });
  };
  /**
   * Drop the table.
   */


  AuroraDataApiQueryRunner.prototype.dropTable = function (target, ifExist, dropForeignKeys) {
    if (dropForeignKeys === void 0) {
      dropForeignKeys = true;
    }

    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var isTableExist, createForeignKeys, tableName, table, upQueries, downQueries;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!ifExist) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , this.hasTable(target)];

          case 1:
            isTableExist = _a.sent();
            if (!isTableExist) return [2
            /*return*/
            , Promise.resolve()];
            _a.label = 2;

          case 2:
            createForeignKeys = dropForeignKeys;
            tableName = target instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"] ? target.name : target;
            return [4
            /*yield*/
            , this.getCachedTable(tableName)];

          case 3:
            table = _a.sent();
            upQueries = [];
            downQueries = [];
            if (dropForeignKeys) table.foreignKeys.forEach(function (foreignKey) {
              return upQueries.push(_this.dropForeignKeySql(table, foreignKey));
            });
            table.indices.forEach(function (index) {
              return upQueries.push(_this.dropIndexSql(table, index));
            });
            upQueries.push(this.dropTableSql(table));
            downQueries.push(this.createTableSql(table, createForeignKeys));
            return [4
            /*yield*/
            , this.executeQueries(upQueries, downQueries)];

          case 4:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new view.
   */


  AuroraDataApiQueryRunner.prototype.createView = function (view) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var upQueries, downQueries, _a, _b, _c, _d;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_e) {
        switch (_e.label) {
          case 0:
            upQueries = [];
            downQueries = [];
            upQueries.push(this.createViewSql(view));
            _b = (_a = upQueries).push;
            return [4
            /*yield*/
            , this.insertViewDefinitionSql(view)];

          case 1:
            _b.apply(_a, [_e.sent()]);

            downQueries.push(this.dropViewSql(view));
            _d = (_c = downQueries).push;
            return [4
            /*yield*/
            , this.deleteViewDefinitionSql(view)];

          case 2:
            _d.apply(_c, [_e.sent()]);

            return [4
            /*yield*/
            , this.executeQueries(upQueries, downQueries)];

          case 3:
            _e.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops the view.
   */


  AuroraDataApiQueryRunner.prototype.dropView = function (target) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var viewName, view, upQueries, downQueries, _a, _b, _c, _d;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_e) {
        switch (_e.label) {
          case 0:
            viewName = target instanceof _schema_builder_view_View__WEBPACK_IMPORTED_MODULE_8__["View"] ? target.name : target;
            return [4
            /*yield*/
            , this.getCachedView(viewName)];

          case 1:
            view = _e.sent();
            upQueries = [];
            downQueries = [];
            _b = (_a = upQueries).push;
            return [4
            /*yield*/
            , this.deleteViewDefinitionSql(view)];

          case 2:
            _b.apply(_a, [_e.sent()]);

            upQueries.push(this.dropViewSql(view));
            _d = (_c = downQueries).push;
            return [4
            /*yield*/
            , this.insertViewDefinitionSql(view)];

          case 3:
            _d.apply(_c, [_e.sent()]);

            downQueries.push(this.createViewSql(view));
            return [4
            /*yield*/
            , this.executeQueries(upQueries, downQueries)];

          case 4:
            _e.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Renames a table.
   */


  AuroraDataApiQueryRunner.prototype.renameTable = function (oldTableOrName, newTableName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var upQueries, downQueries, oldTable, _a, newTable, dbName;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            upQueries = [];
            downQueries = [];
            if (!(oldTableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = oldTableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(oldTableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            oldTable = _a;
            newTable = oldTable.clone();
            dbName = oldTable.name.indexOf(".") === -1 ? undefined : oldTable.name.split(".")[0];
            newTable.name = dbName ? dbName + "." + newTableName : newTableName; // rename table

            upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("RENAME TABLE " + this.escapePath(oldTable.name) + " TO " + this.escapePath(newTable.name)));
            downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("RENAME TABLE " + this.escapePath(newTable.name) + " TO " + this.escapePath(oldTable.name))); // rename index constraints

            newTable.indices.forEach(function (index) {
              // build new constraint name
              var columnNames = index.columnNames.map(function (column) {
                return "`" + column + "`";
              }).join(", ");

              var newIndexName = _this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where); // build queries


              var indexType = "";
              if (index.isUnique) indexType += "UNIQUE ";
              if (index.isSpatial) indexType += "SPATIAL ";
              if (index.isFulltext) indexType += "FULLTEXT ";
              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + _this.escapePath(newTable) + " DROP INDEX `" + index.name + "`, ADD " + indexType + "INDEX `" + newIndexName + "` (" + columnNames + ")"));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + _this.escapePath(newTable) + " DROP INDEX `" + newIndexName + "`, ADD " + indexType + "INDEX `" + index.name + "` (" + columnNames + ")")); // replace constraint name

              index.name = newIndexName;
            }); // rename foreign key constraint

            newTable.foreignKeys.forEach(function (foreignKey) {
              // build new constraint name
              var columnNames = foreignKey.columnNames.map(function (column) {
                return "`" + column + "`";
              }).join(", ");
              var referencedColumnNames = foreignKey.referencedColumnNames.map(function (column) {
                return "`" + column + "`";
              }).join(",");

              var newForeignKeyName = _this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames); // build queries


              var up = "ALTER TABLE " + _this.escapePath(newTable) + " DROP FOREIGN KEY `" + foreignKey.name + "`, ADD CONSTRAINT `" + newForeignKeyName + "` FOREIGN KEY (" + columnNames + ") " + ("REFERENCES " + _this.escapePath(foreignKey.referencedTableName) + "(" + referencedColumnNames + ")");
              if (foreignKey.onDelete) up += " ON DELETE " + foreignKey.onDelete;
              if (foreignKey.onUpdate) up += " ON UPDATE " + foreignKey.onUpdate;
              var down = "ALTER TABLE " + _this.escapePath(newTable) + " DROP FOREIGN KEY `" + newForeignKeyName + "`, ADD CONSTRAINT `" + foreignKey.name + "` FOREIGN KEY (" + columnNames + ") " + ("REFERENCES " + _this.escapePath(foreignKey.referencedTableName) + "(" + referencedColumnNames + ")");
              if (foreignKey.onDelete) down += " ON DELETE " + foreignKey.onDelete;
              if (foreignKey.onUpdate) down += " ON UPDATE " + foreignKey.onUpdate;
              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](up));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](down)); // replace constraint name

              foreignKey.name = newForeignKeyName;
            });
            return [4
            /*yield*/
            , this.executeQueries(upQueries, downQueries)];

          case 4:
            _b.sent(); // rename old table and replace it in cached tabled;


            oldTable.name = newTable.name;
            this.replaceCachedTable(oldTable, newTable);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new column from the column in the table.
   */


  AuroraDataApiQueryRunner.prototype.addColumn = function (tableOrName, column) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, clonedTable, upQueries, downQueries, skipColumnLevelPrimary, generatedColumn, nonGeneratedColumn, primaryColumns, columnNames, nonGeneratedColumn, columnIndex, uniqueIndex;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            clonedTable = table.clone();
            upQueries = [];
            downQueries = [];
            skipColumnLevelPrimary = clonedTable.primaryColumns.length > 0;
            upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD " + this.buildCreateColumnSql(column, skipColumnLevelPrimary, false)));
            downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP COLUMN `" + column.name + "`")); // create or update primary key constraint

            if (column.isPrimary && skipColumnLevelPrimary) {
              generatedColumn = clonedTable.columns.find(function (column) {
                return column.isGenerated && column.generationStrategy === "increment";
              });

              if (generatedColumn) {
                nonGeneratedColumn = generatedColumn.clone();
                nonGeneratedColumn.isGenerated = false;
                nonGeneratedColumn.generationStrategy = undefined;
                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " CHANGE `" + column.name + "` " + this.buildCreateColumnSql(nonGeneratedColumn, true)));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " CHANGE `" + nonGeneratedColumn.name + "` " + this.buildCreateColumnSql(column, true)));
              }

              primaryColumns = clonedTable.primaryColumns;
              columnNames = primaryColumns.map(function (column) {
                return "`" + column.name + "`";
              }).join(", ");
              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP PRIMARY KEY"));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD PRIMARY KEY (" + columnNames + ")"));
              primaryColumns.push(column);
              columnNames = primaryColumns.map(function (column) {
                return "`" + column.name + "`";
              }).join(", ");
              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD PRIMARY KEY (" + columnNames + ")"));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP PRIMARY KEY")); // if we previously dropped AUTO_INCREMENT property, we must bring it back

              if (generatedColumn) {
                nonGeneratedColumn = generatedColumn.clone();
                nonGeneratedColumn.isGenerated = false;
                nonGeneratedColumn.generationStrategy = undefined;
                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " CHANGE `" + nonGeneratedColumn.name + "` " + this.buildCreateColumnSql(column, true)));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " CHANGE `" + column.name + "` " + this.buildCreateColumnSql(nonGeneratedColumn, true)));
              }
            }

            columnIndex = clonedTable.indices.find(function (index) {
              return index.columnNames.length === 1 && index.columnNames[0] === column.name;
            });

            if (columnIndex) {
              upQueries.push(this.createIndexSql(table, columnIndex));
              downQueries.push(this.dropIndexSql(table, columnIndex));
            } else if (column.isUnique) {
              uniqueIndex = new _schema_builder_table_TableIndex__WEBPACK_IMPORTED_MODULE_6__["TableIndex"]({
                name: this.connection.namingStrategy.indexName(table.name, [column.name]),
                columnNames: [column.name],
                isUnique: true
              });
              clonedTable.indices.push(uniqueIndex);
              clonedTable.uniques.push(new _schema_builder_table_TableUnique__WEBPACK_IMPORTED_MODULE_11__["TableUnique"]({
                name: uniqueIndex.name,
                columnNames: uniqueIndex.columnNames
              }));
              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD UNIQUE INDEX `" + uniqueIndex.name + "` (`" + column.name + "`)"));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP INDEX `" + uniqueIndex.name + "`"));
            }

            return [4
            /*yield*/
            , this.executeQueries(upQueries, downQueries)];

          case 4:
            _b.sent();

            clonedTable.addColumn(column);
            this.replaceCachedTable(table, clonedTable);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new columns from the column in the table.
   */


  AuroraDataApiQueryRunner.prototype.addColumns = function (tableOrName, columns) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , _index__WEBPACK_IMPORTED_MODULE_14__["PromiseUtils"].runInSequence(columns, function (column) {
              return _this.addColumn(tableOrName, column);
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Renames column in the given table.
   */


  AuroraDataApiQueryRunner.prototype.renameColumn = function (tableOrName, oldTableColumnOrName, newTableColumnOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, oldColumn, newColumn;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            oldColumn = oldTableColumnOrName instanceof _schema_builder_table_TableColumn__WEBPACK_IMPORTED_MODULE_3__["TableColumn"] ? oldTableColumnOrName : table.columns.find(function (c) {
              return c.name === oldTableColumnOrName;
            });
            if (!oldColumn) throw new Error("Column \"" + oldTableColumnOrName + "\" was not found in the \"" + table.name + "\" table.");
            newColumn = undefined;

            if (newTableColumnOrName instanceof _schema_builder_table_TableColumn__WEBPACK_IMPORTED_MODULE_3__["TableColumn"]) {
              newColumn = newTableColumnOrName;
            } else {
              newColumn = oldColumn.clone();
              newColumn.name = newTableColumnOrName;
            }

            return [4
            /*yield*/
            , this.changeColumn(table, oldColumn, newColumn)];

          case 4:
            _b.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Changes a column in the table.
   */


  AuroraDataApiQueryRunner.prototype.changeColumn = function (tableOrName, oldColumnOrName, newColumn) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, clonedTable, upQueries, downQueries, oldColumn, oldTableColumn, generatedColumn, nonGeneratedColumn, primaryColumns, columnNames, column, columnNames, primaryColumn, column, columnNames, nonGeneratedColumn, uniqueIndex, uniqueIndex_1, tableUnique;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            clonedTable = table.clone();
            upQueries = [];
            downQueries = [];
            oldColumn = oldColumnOrName instanceof _schema_builder_table_TableColumn__WEBPACK_IMPORTED_MODULE_3__["TableColumn"] ? oldColumnOrName : table.columns.find(function (column) {
              return column.name === oldColumnOrName;
            });
            if (!oldColumn) throw new Error("Column \"" + oldColumnOrName + "\" was not found in the \"" + table.name + "\" table.");
            if (!(newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== "uuid" || oldColumn.type !== newColumn.type || oldColumn.length !== newColumn.length || oldColumn.generatedType !== newColumn.generatedType)) return [3
            /*break*/
            , 6];
            return [4
            /*yield*/
            , this.dropColumn(table, oldColumn)];

          case 4:
            _b.sent();

            return [4
            /*yield*/
            , this.addColumn(table, newColumn)];

          case 5:
            _b.sent(); // update cloned table


            clonedTable = table.clone();
            return [3
            /*break*/
            , 7];

          case 6:
            if (newColumn.name !== oldColumn.name) {
              // We don't change any column properties, just rename it.
              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " CHANGE `" + oldColumn.name + "` `" + newColumn.name + "` " + this.buildCreateColumnSql(oldColumn, true, true)));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " CHANGE `" + newColumn.name + "` `" + oldColumn.name + "` " + this.buildCreateColumnSql(oldColumn, true, true))); // rename index constraints

              clonedTable.findColumnIndices(oldColumn).forEach(function (index) {
                // build new constraint name
                index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);
                index.columnNames.push(newColumn.name);
                var columnNames = index.columnNames.map(function (column) {
                  return "`" + column + "`";
                }).join(", ");

                var newIndexName = _this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where); // build queries


                var indexType = "";
                if (index.isUnique) indexType += "UNIQUE ";
                if (index.isSpatial) indexType += "SPATIAL ";
                if (index.isFulltext) indexType += "FULLTEXT ";
                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + _this.escapePath(table) + " DROP INDEX `" + index.name + "`, ADD " + indexType + "INDEX `" + newIndexName + "` (" + columnNames + ")"));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + _this.escapePath(table) + " DROP INDEX `" + newIndexName + "`, ADD " + indexType + "INDEX `" + index.name + "` (" + columnNames + ")")); // replace constraint name

                index.name = newIndexName;
              }); // rename foreign key constraints

              clonedTable.findColumnForeignKeys(oldColumn).forEach(function (foreignKey) {
                // build new constraint name
                foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);
                foreignKey.columnNames.push(newColumn.name);
                var columnNames = foreignKey.columnNames.map(function (column) {
                  return "`" + column + "`";
                }).join(", ");
                var referencedColumnNames = foreignKey.referencedColumnNames.map(function (column) {
                  return "`" + column + "`";
                }).join(",");

                var newForeignKeyName = _this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames); // build queries


                var up = "ALTER TABLE " + _this.escapePath(table) + " DROP FOREIGN KEY `" + foreignKey.name + "`, ADD CONSTRAINT `" + newForeignKeyName + "` FOREIGN KEY (" + columnNames + ") " + ("REFERENCES " + _this.escapePath(foreignKey.referencedTableName) + "(" + referencedColumnNames + ")");
                if (foreignKey.onDelete) up += " ON DELETE " + foreignKey.onDelete;
                if (foreignKey.onUpdate) up += " ON UPDATE " + foreignKey.onUpdate;
                var down = "ALTER TABLE " + _this.escapePath(table) + " DROP FOREIGN KEY `" + newForeignKeyName + "`, ADD CONSTRAINT `" + foreignKey.name + "` FOREIGN KEY (" + columnNames + ") " + ("REFERENCES " + _this.escapePath(foreignKey.referencedTableName) + "(" + referencedColumnNames + ")");
                if (foreignKey.onDelete) down += " ON DELETE " + foreignKey.onDelete;
                if (foreignKey.onUpdate) down += " ON UPDATE " + foreignKey.onUpdate;
                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](up));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](down)); // replace constraint name

                foreignKey.name = newForeignKeyName;
              });
              oldTableColumn = clonedTable.columns.find(function (column) {
                return column.name === oldColumn.name;
              });
              clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn)].name = newColumn.name;
              oldColumn.name = newColumn.name;
            }

            if (this.isColumnChanged(oldColumn, newColumn, true)) {
              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " CHANGE `" + oldColumn.name + "` " + this.buildCreateColumnSql(newColumn, true)));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " CHANGE `" + newColumn.name + "` " + this.buildCreateColumnSql(oldColumn, true)));
            }

            if (newColumn.isPrimary !== oldColumn.isPrimary) {
              generatedColumn = clonedTable.columns.find(function (column) {
                return column.isGenerated && column.generationStrategy === "increment";
              });

              if (generatedColumn) {
                nonGeneratedColumn = generatedColumn.clone();
                nonGeneratedColumn.isGenerated = false;
                nonGeneratedColumn.generationStrategy = undefined;
                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " CHANGE `" + generatedColumn.name + "` " + this.buildCreateColumnSql(nonGeneratedColumn, true)));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " CHANGE `" + nonGeneratedColumn.name + "` " + this.buildCreateColumnSql(generatedColumn, true)));
              }

              primaryColumns = clonedTable.primaryColumns; // if primary column state changed, we must always drop existed constraint.

              if (primaryColumns.length > 0) {
                columnNames = primaryColumns.map(function (column) {
                  return "`" + column.name + "`";
                }).join(", ");
                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP PRIMARY KEY"));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD PRIMARY KEY (" + columnNames + ")"));
              }

              if (newColumn.isPrimary === true) {
                primaryColumns.push(newColumn);
                column = clonedTable.columns.find(function (column) {
                  return column.name === newColumn.name;
                });
                column.isPrimary = true;
                columnNames = primaryColumns.map(function (column) {
                  return "`" + column.name + "`";
                }).join(", ");
                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD PRIMARY KEY (" + columnNames + ")"));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP PRIMARY KEY"));
              } else {
                primaryColumn = primaryColumns.find(function (c) {
                  return c.name === newColumn.name;
                });
                primaryColumns.splice(primaryColumns.indexOf(primaryColumn), 1);
                column = clonedTable.columns.find(function (column) {
                  return column.name === newColumn.name;
                });
                column.isPrimary = false; // if we have another primary keys, we must recreate constraint.

                if (primaryColumns.length > 0) {
                  columnNames = primaryColumns.map(function (column) {
                    return "`" + column.name + "`";
                  }).join(", ");
                  upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD PRIMARY KEY (" + columnNames + ")"));
                  downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP PRIMARY KEY"));
                }
              } // if we have generated column, and we dropped AUTO_INCREMENT property before, we must bring it back


              if (generatedColumn) {
                nonGeneratedColumn = generatedColumn.clone();
                nonGeneratedColumn.isGenerated = false;
                nonGeneratedColumn.generationStrategy = undefined;
                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " CHANGE `" + nonGeneratedColumn.name + "` " + this.buildCreateColumnSql(generatedColumn, true)));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " CHANGE `" + generatedColumn.name + "` " + this.buildCreateColumnSql(nonGeneratedColumn, true)));
              }
            }

            if (newColumn.isUnique !== oldColumn.isUnique) {
              if (newColumn.isUnique === true) {
                uniqueIndex = new _schema_builder_table_TableIndex__WEBPACK_IMPORTED_MODULE_6__["TableIndex"]({
                  name: this.connection.namingStrategy.indexName(table.name, [newColumn.name]),
                  columnNames: [newColumn.name],
                  isUnique: true
                });
                clonedTable.indices.push(uniqueIndex);
                clonedTable.uniques.push(new _schema_builder_table_TableUnique__WEBPACK_IMPORTED_MODULE_11__["TableUnique"]({
                  name: uniqueIndex.name,
                  columnNames: uniqueIndex.columnNames
                }));
                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD UNIQUE INDEX `" + uniqueIndex.name + "` (`" + newColumn.name + "`)"));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP INDEX `" + uniqueIndex.name + "`"));
              } else {
                uniqueIndex_1 = clonedTable.indices.find(function (index) {
                  return index.columnNames.length === 1 && index.isUnique === true && !!index.columnNames.find(function (columnName) {
                    return columnName === newColumn.name;
                  });
                });
                clonedTable.indices.splice(clonedTable.indices.indexOf(uniqueIndex_1), 1);
                tableUnique = clonedTable.uniques.find(function (unique) {
                  return unique.name === uniqueIndex_1.name;
                });
                clonedTable.uniques.splice(clonedTable.uniques.indexOf(tableUnique), 1);
                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP INDEX `" + uniqueIndex_1.name + "`"));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD UNIQUE INDEX `" + uniqueIndex_1.name + "` (`" + newColumn.name + "`)"));
              }
            }

            _b.label = 7;

          case 7:
            return [4
            /*yield*/
            , this.executeQueries(upQueries, downQueries)];

          case 8:
            _b.sent();

            this.replaceCachedTable(table, clonedTable);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Changes a column in the table.
   */


  AuroraDataApiQueryRunner.prototype.changeColumns = function (tableOrName, changedColumns) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , _index__WEBPACK_IMPORTED_MODULE_14__["PromiseUtils"].runInSequence(changedColumns, function (changedColumn) {
              return _this.changeColumn(tableOrName, changedColumn.oldColumn, changedColumn.newColumn);
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops column in the table.
   */


  AuroraDataApiQueryRunner.prototype.dropColumn = function (tableOrName, columnOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, column, clonedTable, upQueries, downQueries, generatedColumn, nonGeneratedColumn, columnNames, tableColumn, columnNames_1, nonGeneratedColumn, columnIndex, uniqueName_1, foundUnique, indexName_1, foundIndex;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            column = columnOrName instanceof _schema_builder_table_TableColumn__WEBPACK_IMPORTED_MODULE_3__["TableColumn"] ? columnOrName : table.findColumnByName(columnOrName);
            if (!column) throw new Error("Column \"" + columnOrName + "\" was not found in table \"" + table.name + "\"");
            clonedTable = table.clone();
            upQueries = [];
            downQueries = []; // drop primary key constraint

            if (column.isPrimary) {
              generatedColumn = clonedTable.columns.find(function (column) {
                return column.isGenerated && column.generationStrategy === "increment";
              });

              if (generatedColumn) {
                nonGeneratedColumn = generatedColumn.clone();
                nonGeneratedColumn.isGenerated = false;
                nonGeneratedColumn.generationStrategy = undefined;
                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " CHANGE `" + generatedColumn.name + "` " + this.buildCreateColumnSql(nonGeneratedColumn, true)));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " CHANGE `" + nonGeneratedColumn.name + "` " + this.buildCreateColumnSql(generatedColumn, true)));
              }

              columnNames = clonedTable.primaryColumns.map(function (primaryColumn) {
                return "`" + primaryColumn.name + "`";
              }).join(", ");
              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(clonedTable) + " DROP PRIMARY KEY"));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(clonedTable) + " ADD PRIMARY KEY (" + columnNames + ")"));
              tableColumn = clonedTable.findColumnByName(column.name);
              tableColumn.isPrimary = false; // if primary key have multiple columns, we must recreate it without dropped column

              if (clonedTable.primaryColumns.length > 0) {
                columnNames_1 = clonedTable.primaryColumns.map(function (primaryColumn) {
                  return "`" + primaryColumn.name + "`";
                }).join(", ");
                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(clonedTable) + " ADD PRIMARY KEY (" + columnNames_1 + ")"));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(clonedTable) + " DROP PRIMARY KEY"));
              } // if we have generated column, and we dropped AUTO_INCREMENT property before, and this column is not current dropping column, we must bring it back


              if (generatedColumn && generatedColumn.name !== column.name) {
                nonGeneratedColumn = generatedColumn.clone();
                nonGeneratedColumn.isGenerated = false;
                nonGeneratedColumn.generationStrategy = undefined;
                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " CHANGE `" + nonGeneratedColumn.name + "` " + this.buildCreateColumnSql(generatedColumn, true)));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " CHANGE `" + generatedColumn.name + "` " + this.buildCreateColumnSql(nonGeneratedColumn, true)));
              }
            }

            columnIndex = clonedTable.indices.find(function (index) {
              return index.columnNames.length === 1 && index.columnNames[0] === column.name;
            });

            if (columnIndex) {
              clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);
              upQueries.push(this.dropIndexSql(table, columnIndex));
              downQueries.push(this.createIndexSql(table, columnIndex));
            } else if (column.isUnique) {
              uniqueName_1 = this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]);
              foundUnique = clonedTable.uniques.find(function (unique) {
                return unique.name === uniqueName_1;
              });
              if (foundUnique) clonedTable.uniques.splice(clonedTable.uniques.indexOf(foundUnique), 1);
              indexName_1 = this.connection.namingStrategy.indexName(table.name, [column.name]);
              foundIndex = clonedTable.indices.find(function (index) {
                return index.name === indexName_1;
              });
              if (foundIndex) clonedTable.indices.splice(clonedTable.indices.indexOf(foundIndex), 1);
              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP INDEX `" + indexName_1 + "`"));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD UNIQUE INDEX `" + indexName_1 + "` (`" + column.name + "`)"));
            }

            upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP COLUMN `" + column.name + "`"));
            downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD " + this.buildCreateColumnSql(column, true)));
            return [4
            /*yield*/
            , this.executeQueries(upQueries, downQueries)];

          case 4:
            _b.sent();

            clonedTable.removeColumn(column);
            this.replaceCachedTable(table, clonedTable);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops the columns in the table.
   */


  AuroraDataApiQueryRunner.prototype.dropColumns = function (tableOrName, columns) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , _index__WEBPACK_IMPORTED_MODULE_14__["PromiseUtils"].runInSequence(columns, function (column) {
              return _this.dropColumn(tableOrName, column);
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new primary key.
   */


  AuroraDataApiQueryRunner.prototype.createPrimaryKey = function (tableOrName, columnNames) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, clonedTable, up, down;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            clonedTable = table.clone();
            up = this.createPrimaryKeySql(table, columnNames);
            down = this.dropPrimaryKeySql(table);
            return [4
            /*yield*/
            , this.executeQueries(up, down)];

          case 4:
            _b.sent();

            clonedTable.columns.forEach(function (column) {
              if (columnNames.find(function (columnName) {
                return columnName === column.name;
              })) column.isPrimary = true;
            });
            this.replaceCachedTable(table, clonedTable);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Updates composite primary keys.
   */


  AuroraDataApiQueryRunner.prototype.updatePrimaryKeys = function (tableOrName, columns) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, clonedTable, columnNames, upQueries, downQueries, generatedColumn, nonGeneratedColumn, primaryColumns, columnNames_2, columnNamesString, newOrExistGeneratedColumn, nonGeneratedColumn, changedGeneratedColumn;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            clonedTable = table.clone();
            columnNames = columns.map(function (column) {
              return column.name;
            });
            upQueries = [];
            downQueries = [];
            generatedColumn = clonedTable.columns.find(function (column) {
              return column.isGenerated && column.generationStrategy === "increment";
            });

            if (generatedColumn) {
              nonGeneratedColumn = generatedColumn.clone();
              nonGeneratedColumn.isGenerated = false;
              nonGeneratedColumn.generationStrategy = undefined;
              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " CHANGE `" + generatedColumn.name + "` " + this.buildCreateColumnSql(nonGeneratedColumn, true)));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " CHANGE `" + nonGeneratedColumn.name + "` " + this.buildCreateColumnSql(generatedColumn, true)));
            }

            primaryColumns = clonedTable.primaryColumns;

            if (primaryColumns.length > 0) {
              columnNames_2 = primaryColumns.map(function (column) {
                return "`" + column.name + "`";
              }).join(", ");
              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP PRIMARY KEY"));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD PRIMARY KEY (" + columnNames_2 + ")"));
            } // update columns in table.


            clonedTable.columns.filter(function (column) {
              return columnNames.indexOf(column.name) !== -1;
            }).forEach(function (column) {
              return column.isPrimary = true;
            });
            columnNamesString = columnNames.map(function (columnName) {
              return "`" + columnName + "`";
            }).join(", ");
            upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD PRIMARY KEY (" + columnNamesString + ")"));
            downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP PRIMARY KEY"));
            newOrExistGeneratedColumn = generatedColumn ? generatedColumn : columns.find(function (column) {
              return column.isGenerated && column.generationStrategy === "increment";
            });

            if (newOrExistGeneratedColumn) {
              nonGeneratedColumn = newOrExistGeneratedColumn.clone();
              nonGeneratedColumn.isGenerated = false;
              nonGeneratedColumn.generationStrategy = undefined;
              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " CHANGE `" + nonGeneratedColumn.name + "` " + this.buildCreateColumnSql(newOrExistGeneratedColumn, true)));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " CHANGE `" + newOrExistGeneratedColumn.name + "` " + this.buildCreateColumnSql(nonGeneratedColumn, true)));
              changedGeneratedColumn = clonedTable.columns.find(function (column) {
                return column.name === newOrExistGeneratedColumn.name;
              });
              changedGeneratedColumn.isGenerated = true;
              changedGeneratedColumn.generationStrategy = "increment";
            }

            return [4
            /*yield*/
            , this.executeQueries(upQueries, downQueries)];

          case 4:
            _b.sent();

            this.replaceCachedTable(table, clonedTable);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops a primary key.
   */


  AuroraDataApiQueryRunner.prototype.dropPrimaryKey = function (tableOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, up, down;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            up = this.dropPrimaryKeySql(table);
            down = this.createPrimaryKeySql(table, table.primaryColumns.map(function (column) {
              return column.name;
            }));
            return [4
            /*yield*/
            , this.executeQueries(up, down)];

          case 4:
            _b.sent();

            table.primaryColumns.forEach(function (column) {
              column.isPrimary = false;
            });
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new unique constraint.
   */


  AuroraDataApiQueryRunner.prototype.createUniqueConstraint = function (tableOrName, uniqueConstraint) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("MySql does not support unique constraints. Use unique index instead.");
      });
    });
  };
  /**
   * Creates a new unique constraints.
   */


  AuroraDataApiQueryRunner.prototype.createUniqueConstraints = function (tableOrName, uniqueConstraints) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("MySql does not support unique constraints. Use unique index instead.");
      });
    });
  };
  /**
   * Drops an unique constraint.
   */


  AuroraDataApiQueryRunner.prototype.dropUniqueConstraint = function (tableOrName, uniqueOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("MySql does not support unique constraints. Use unique index instead.");
      });
    });
  };
  /**
   * Drops an unique constraints.
   */


  AuroraDataApiQueryRunner.prototype.dropUniqueConstraints = function (tableOrName, uniqueConstraints) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("MySql does not support unique constraints. Use unique index instead.");
      });
    });
  };
  /**
   * Creates a new check constraint.
   */


  AuroraDataApiQueryRunner.prototype.createCheckConstraint = function (tableOrName, checkConstraint) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("MySql does not support check constraints.");
      });
    });
  };
  /**
   * Creates a new check constraints.
   */


  AuroraDataApiQueryRunner.prototype.createCheckConstraints = function (tableOrName, checkConstraints) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("MySql does not support check constraints.");
      });
    });
  };
  /**
   * Drops check constraint.
   */


  AuroraDataApiQueryRunner.prototype.dropCheckConstraint = function (tableOrName, checkOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("MySql does not support check constraints.");
      });
    });
  };
  /**
   * Drops check constraints.
   */


  AuroraDataApiQueryRunner.prototype.dropCheckConstraints = function (tableOrName, checkConstraints) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("MySql does not support check constraints.");
      });
    });
  };
  /**
   * Creates a new exclusion constraint.
   */


  AuroraDataApiQueryRunner.prototype.createExclusionConstraint = function (tableOrName, exclusionConstraint) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("MySql does not support exclusion constraints.");
      });
    });
  };
  /**
   * Creates a new exclusion constraints.
   */


  AuroraDataApiQueryRunner.prototype.createExclusionConstraints = function (tableOrName, exclusionConstraints) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("MySql does not support exclusion constraints.");
      });
    });
  };
  /**
   * Drops exclusion constraint.
   */


  AuroraDataApiQueryRunner.prototype.dropExclusionConstraint = function (tableOrName, exclusionOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("MySql does not support exclusion constraints.");
      });
    });
  };
  /**
   * Drops exclusion constraints.
   */


  AuroraDataApiQueryRunner.prototype.dropExclusionConstraints = function (tableOrName, exclusionConstraints) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("MySql does not support exclusion constraints.");
      });
    });
  };
  /**
   * Creates a new foreign key.
   */


  AuroraDataApiQueryRunner.prototype.createForeignKey = function (tableOrName, foreignKey) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, up, down;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a; // new FK may be passed without name. In this case we generate FK name manually.

            if (!foreignKey.name) foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames);
            up = this.createForeignKeySql(table, foreignKey);
            down = this.dropForeignKeySql(table, foreignKey);
            return [4
            /*yield*/
            , this.executeQueries(up, down)];

          case 4:
            _b.sent();

            table.addForeignKey(foreignKey);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new foreign keys.
   */


  AuroraDataApiQueryRunner.prototype.createForeignKeys = function (tableOrName, foreignKeys) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var promises;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            promises = foreignKeys.map(function (foreignKey) {
              return _this.createForeignKey(tableOrName, foreignKey);
            });
            return [4
            /*yield*/
            , Promise.all(promises)];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops a foreign key.
   */


  AuroraDataApiQueryRunner.prototype.dropForeignKey = function (tableOrName, foreignKeyOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, foreignKey, up, down;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            foreignKey = foreignKeyOrName instanceof _schema_builder_table_TableForeignKey__WEBPACK_IMPORTED_MODULE_5__["TableForeignKey"] ? foreignKeyOrName : table.foreignKeys.find(function (fk) {
              return fk.name === foreignKeyOrName;
            });
            if (!foreignKey) throw new Error("Supplied foreign key was not found in table " + table.name);
            up = this.dropForeignKeySql(table, foreignKey);
            down = this.createForeignKeySql(table, foreignKey);
            return [4
            /*yield*/
            , this.executeQueries(up, down)];

          case 4:
            _b.sent();

            table.removeForeignKey(foreignKey);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops a foreign keys from the table.
   */


  AuroraDataApiQueryRunner.prototype.dropForeignKeys = function (tableOrName, foreignKeys) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var promises;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            promises = foreignKeys.map(function (foreignKey) {
              return _this.dropForeignKey(tableOrName, foreignKey);
            });
            return [4
            /*yield*/
            , Promise.all(promises)];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new index.
   */


  AuroraDataApiQueryRunner.prototype.createIndex = function (tableOrName, index) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, up, down;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a; // new index may be passed without name. In this case we generate index name manually.

            if (!index.name) index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);
            up = this.createIndexSql(table, index);
            down = this.dropIndexSql(table, index);
            return [4
            /*yield*/
            , this.executeQueries(up, down)];

          case 4:
            _b.sent();

            table.addIndex(index, true);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new indices
   */


  AuroraDataApiQueryRunner.prototype.createIndices = function (tableOrName, indices) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var promises;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            promises = indices.map(function (index) {
              return _this.createIndex(tableOrName, index);
            });
            return [4
            /*yield*/
            , Promise.all(promises)];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops an index.
   */


  AuroraDataApiQueryRunner.prototype.dropIndex = function (tableOrName, indexOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, index, up, down;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            index = indexOrName instanceof _schema_builder_table_TableIndex__WEBPACK_IMPORTED_MODULE_6__["TableIndex"] ? indexOrName : table.indices.find(function (i) {
              return i.name === indexOrName;
            });
            if (!index) throw new Error("Supplied index was not found in table " + table.name);
            up = this.dropIndexSql(table, index);
            down = this.createIndexSql(table, index);
            return [4
            /*yield*/
            , this.executeQueries(up, down)];

          case 4:
            _b.sent();

            table.removeIndex(index, true);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops an indices from the table.
   */


  AuroraDataApiQueryRunner.prototype.dropIndices = function (tableOrName, indices) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var promises;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            promises = indices.map(function (index) {
              return _this.dropIndex(tableOrName, index);
            });
            return [4
            /*yield*/
            , Promise.all(promises)];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Clears all table contents.
   * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.
   */


  AuroraDataApiQueryRunner.prototype.clearTable = function (tableOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.query("TRUNCATE TABLE " + this.escapePath(tableOrName))];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Removes all tables from the currently connected database.
   * Be careful using this method and avoid using it in production or migrations
   * (because it can clear all your database).
   */


  AuroraDataApiQueryRunner.prototype.clearDatabase = function (database) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var dbName, isDatabaseExist, selectViewDropsQuery, dropViewQueries, disableForeignKeysCheckQuery, dropTablesQuery, enableForeignKeysCheckQuery, dropQueries, error_1, rollbackError_1;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            dbName = database ? database : this.driver.database;
            if (!dbName) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , this.hasDatabase(dbName)];

          case 1:
            isDatabaseExist = _a.sent();
            if (!isDatabaseExist) return [2
            /*return*/
            , Promise.resolve()];
            return [3
            /*break*/
            , 3];

          case 2:
            throw new Error("Can not clear database. No database is specified");

          case 3:
            return [4
            /*yield*/
            , this.startTransaction()];

          case 4:
            _a.sent();

            _a.label = 5;

          case 5:
            _a.trys.push([5, 13,, 18]);

            selectViewDropsQuery = "SELECT concat('DROP VIEW IF EXISTS `', table_schema, '`.`', table_name, '`') AS `query` FROM `INFORMATION_SCHEMA`.`VIEWS` WHERE `TABLE_SCHEMA` = '" + dbName + "'";
            return [4
            /*yield*/
            , this.query(selectViewDropsQuery)];

          case 6:
            dropViewQueries = _a.sent();
            return [4
            /*yield*/
            , Promise.all(dropViewQueries.map(function (q) {
              return _this.query(q["query"]);
            }))];

          case 7:
            _a.sent();

            disableForeignKeysCheckQuery = "SET FOREIGN_KEY_CHECKS = 0;";
            dropTablesQuery = "SELECT concat('DROP TABLE IF EXISTS `', table_schema, '`.`', table_name, '`') AS `query` FROM `INFORMATION_SCHEMA`.`TABLES` WHERE `TABLE_SCHEMA` = '" + dbName + "'";
            enableForeignKeysCheckQuery = "SET FOREIGN_KEY_CHECKS = 1;";
            return [4
            /*yield*/
            , this.query(disableForeignKeysCheckQuery)];

          case 8:
            _a.sent();

            return [4
            /*yield*/
            , this.query(dropTablesQuery)];

          case 9:
            dropQueries = _a.sent();
            return [4
            /*yield*/
            , Promise.all(dropQueries.map(function (query) {
              return _this.query(query["query"]);
            }))];

          case 10:
            _a.sent();

            return [4
            /*yield*/
            , this.query(enableForeignKeysCheckQuery)];

          case 11:
            _a.sent();

            return [4
            /*yield*/
            , this.commitTransaction()];

          case 12:
            _a.sent();

            return [3
            /*break*/
            , 18];

          case 13:
            error_1 = _a.sent();
            _a.label = 14;

          case 14:
            _a.trys.push([14, 16,, 17]);

            return [4
            /*yield*/
            , this.rollbackTransaction()];

          case 15:
            _a.sent();

            return [3
            /*break*/
            , 17];

          case 16:
            rollbackError_1 = _a.sent();
            return [3
            /*break*/
            , 17];

          case 17:
            throw error_1;

          case 18:
            return [2
            /*return*/
            ];
        }
      });
    });
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Returns current database.
   */


  AuroraDataApiQueryRunner.prototype.getCurrentDatabase = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var currentDBQuery;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.query("SELECT DATABASE() AS `db_name`")];

          case 1:
            currentDBQuery = _a.sent();
            return [2
            /*return*/
            , currentDBQuery[0]["db_name"]];
        }
      });
    });
  };

  AuroraDataApiQueryRunner.prototype.loadViews = function (viewNames) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var hasTable, currentDatabase, viewsCondition, query, dbViews;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.hasTable(this.getTypeormMetadataTableName())];

          case 1:
            hasTable = _a.sent();
            if (!hasTable) return [2
            /*return*/
            , Promise.resolve([])];
            return [4
            /*yield*/
            , this.getCurrentDatabase()];

          case 2:
            currentDatabase = _a.sent();
            viewsCondition = viewNames.map(function (tableName) {
              var _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](tableName.split("."), 2),
                  database = _a[0],
                  name = _a[1];

              if (!name) {
                name = database;
                database = _this.driver.database || currentDatabase;
              }

              return "(`t`.`schema` = '" + database + "' AND `t`.`name` = '" + name + "')";
            }).join(" OR ");
            query = "SELECT `t`.*, `v`.`check_option` FROM " + this.escapePath(this.getTypeormMetadataTableName()) + " `t` " + ("INNER JOIN `information_schema`.`views` `v` ON `v`.`table_schema` = `t`.`schema` AND `v`.`table_name` = `t`.`name` WHERE `t`.`type` = 'VIEW' " + (viewsCondition ? "AND (" + viewsCondition + ")" : ""));
            return [4
            /*yield*/
            , this.query(query)];

          case 3:
            dbViews = _a.sent();
            return [2
            /*return*/
            , dbViews.map(function (dbView) {
              var view = new _schema_builder_view_View__WEBPACK_IMPORTED_MODULE_8__["View"]();
              var db = dbView["schema"] === currentDatabase ? undefined : dbView["schema"];
              view.name = _this.driver.buildTableName(dbView["name"], undefined, db);
              view.expression = dbView["value"];
              return view;
            })];
        }
      });
    });
  };
  /**
   * Loads all tables (with given names) from the database and creates a Table from them.
   */


  AuroraDataApiQueryRunner.prototype.loadTables = function (tableNames) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var currentDatabase, tablesCondition, tablesSql, columnsSql, primaryKeySql, collationsSql, indicesCondition, indicesSql, foreignKeysCondition, foreignKeysSql, _a, dbTables, dbColumns, dbPrimaryKeys, dbCollations, dbIndices, dbForeignKeys;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            // if no tables given then no need to proceed
            if (!tableNames || !tableNames.length) return [2
            /*return*/
            , []];
            return [4
            /*yield*/
            , this.getCurrentDatabase()];

          case 1:
            currentDatabase = _b.sent();
            tablesCondition = tableNames.map(function (tableName) {
              var _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](tableName.split("."), 2),
                  database = _a[0],
                  name = _a[1];

              if (!name) {
                name = database;
                database = _this.driver.database || currentDatabase;
              }

              return "(`TABLE_SCHEMA` = '" + database + "' AND `TABLE_NAME` = '" + name + "')";
            }).join(" OR ");
            tablesSql = "SELECT * FROM `INFORMATION_SCHEMA`.`TABLES` WHERE " + tablesCondition;
            columnsSql = "SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE " + tablesCondition;
            primaryKeySql = "SELECT * FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` WHERE `CONSTRAINT_NAME` = 'PRIMARY' AND (" + tablesCondition + ")";
            collationsSql = "SELECT `SCHEMA_NAME`, `DEFAULT_CHARACTER_SET_NAME` as `CHARSET`, `DEFAULT_COLLATION_NAME` AS `COLLATION` FROM `INFORMATION_SCHEMA`.`SCHEMATA`";
            indicesCondition = tableNames.map(function (tableName) {
              var _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](tableName.split("."), 2),
                  database = _a[0],
                  name = _a[1];

              if (!name) {
                name = database;
                database = _this.driver.database || currentDatabase;
              }

              return "(`s`.`TABLE_SCHEMA` = '" + database + "' AND `s`.`TABLE_NAME` = '" + name + "')";
            }).join(" OR ");
            indicesSql = "SELECT `s`.* FROM `INFORMATION_SCHEMA`.`STATISTICS` `s` " + "LEFT JOIN `INFORMATION_SCHEMA`.`REFERENTIAL_CONSTRAINTS` `rc` ON `s`.`INDEX_NAME` = `rc`.`CONSTRAINT_NAME` " + ("WHERE (" + indicesCondition + ") AND `s`.`INDEX_NAME` != 'PRIMARY' AND `rc`.`CONSTRAINT_NAME` IS NULL");
            foreignKeysCondition = tableNames.map(function (tableName) {
              var _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](tableName.split("."), 2),
                  database = _a[0],
                  name = _a[1];

              if (!name) {
                name = database;
                database = _this.driver.database || currentDatabase;
              }

              return "(`kcu`.`TABLE_SCHEMA` = '" + database + "' AND `kcu`.`TABLE_NAME` = '" + name + "')";
            }).join(" OR ");
            foreignKeysSql = "SELECT `kcu`.`TABLE_SCHEMA`, `kcu`.`TABLE_NAME`, `kcu`.`CONSTRAINT_NAME`, `kcu`.`COLUMN_NAME`, `kcu`.`REFERENCED_TABLE_SCHEMA`, " + "`kcu`.`REFERENCED_TABLE_NAME`, `kcu`.`REFERENCED_COLUMN_NAME`, `rc`.`DELETE_RULE` `ON_DELETE`, `rc`.`UPDATE_RULE` `ON_UPDATE` " + "FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` `kcu` " + "INNER JOIN `INFORMATION_SCHEMA`.`REFERENTIAL_CONSTRAINTS` `rc` ON `rc`.`constraint_name` = `kcu`.`constraint_name` " + "WHERE " + foreignKeysCondition;
            return [4
            /*yield*/
            , Promise.all([this.query(tablesSql), this.query(columnsSql), this.query(primaryKeySql), this.query(collationsSql), this.query(indicesSql), this.query(foreignKeysSql)])];

          case 2:
            _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"].apply(void 0, [_b.sent(), 6]), dbTables = _a[0], dbColumns = _a[1], dbPrimaryKeys = _a[2], dbCollations = _a[3], dbIndices = _a[4], dbForeignKeys = _a[5]; // if tables were not found in the db, no need to proceed

            if (!dbTables.length) return [2
            /*return*/
            , []]; // create tables for loaded tables

            return [2
            /*return*/
            , Promise.all(dbTables.map(function (dbTable) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var table, dbCollation, defaultCollation, defaultCharset, db, tableFullName, tableForeignKeyConstraints, tableIndexConstraints;

                var _this = this;

                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  table = new _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"]();
                  dbCollation = dbCollations.find(function (coll) {
                    return coll["SCHEMA_NAME"] === dbTable["TABLE_SCHEMA"];
                  });
                  defaultCollation = dbCollation["COLLATION"];
                  defaultCharset = dbCollation["CHARSET"];
                  db = dbTable["TABLE_SCHEMA"] === currentDatabase ? undefined : dbTable["TABLE_SCHEMA"];
                  table.name = this.driver.buildTableName(dbTable["TABLE_NAME"], undefined, db);
                  tableFullName = this.driver.buildTableName(dbTable["TABLE_NAME"], undefined, dbTable["TABLE_SCHEMA"]); // create columns from the loaded columns

                  table.columns = dbColumns.filter(function (dbColumn) {
                    return _this.driver.buildTableName(dbColumn["TABLE_NAME"], undefined, dbColumn["TABLE_SCHEMA"]) === tableFullName;
                  }).map(function (dbColumn) {
                    var columnUniqueIndex = dbIndices.find(function (dbIndex) {
                      var indexTableFullName = _this.driver.buildTableName(dbIndex["TABLE_NAME"], undefined, dbIndex["TABLE_SCHEMA"]);

                      if (indexTableFullName !== tableFullName) {
                        return false;
                      } // Index is not for this column


                      if (dbIndex["COLUMN_NAME"] !== dbColumn["COLUMN_NAME"]) {
                        return false;
                      }

                      var nonUnique = parseInt(dbIndex["NON_UNIQUE"], 10);
                      return nonUnique === 0;
                    });

                    var tableMetadata = _this.connection.entityMetadatas.find(function (metadata) {
                      return metadata.tablePath === table.name;
                    });

                    var hasIgnoredIndex = columnUniqueIndex && tableMetadata && tableMetadata.indices.some(function (index) {
                      return index.name === columnUniqueIndex["INDEX_NAME"] && index.synchronize === false;
                    });
                    var isConstraintComposite = columnUniqueIndex ? !!dbIndices.find(function (dbIndex) {
                      return dbIndex["INDEX_NAME"] === columnUniqueIndex["INDEX_NAME"] && dbIndex["COLUMN_NAME"] !== dbColumn["COLUMN_NAME"];
                    }) : false;
                    var tableColumn = new _schema_builder_table_TableColumn__WEBPACK_IMPORTED_MODULE_3__["TableColumn"]();
                    tableColumn.name = dbColumn["COLUMN_NAME"];
                    tableColumn.type = dbColumn["DATA_TYPE"].toLowerCase();

                    if (_this.driver.withWidthColumnTypes.indexOf(tableColumn.type) !== -1) {
                      var width = dbColumn["COLUMN_TYPE"].substring(dbColumn["COLUMN_TYPE"].indexOf("(") + 1, dbColumn["COLUMN_TYPE"].indexOf(")"));
                      tableColumn.width = width && !_this.isDefaultColumnWidth(table, tableColumn, parseInt(width)) ? parseInt(width) : undefined;
                    }

                    if (dbColumn["COLUMN_DEFAULT"] === null || dbColumn["COLUMN_DEFAULT"] === undefined) {
                      tableColumn["default"] = undefined;
                    } else {
                      tableColumn["default"] = dbColumn["COLUMN_DEFAULT"] === "CURRENT_TIMESTAMP" ? dbColumn["COLUMN_DEFAULT"] : "'" + dbColumn["COLUMN_DEFAULT"] + "'";
                    }

                    if (dbColumn["EXTRA"].indexOf("on update") !== -1) {
                      tableColumn.onUpdate = dbColumn["EXTRA"].substring(dbColumn["EXTRA"].indexOf("on update") + 10);
                    }

                    if (dbColumn["GENERATION_EXPRESSION"]) {
                      tableColumn.asExpression = dbColumn["GENERATION_EXPRESSION"];
                      tableColumn.generatedType = dbColumn["EXTRA"].indexOf("VIRTUAL") !== -1 ? "VIRTUAL" : "STORED";
                    }

                    tableColumn.isUnique = !!columnUniqueIndex && !hasIgnoredIndex && !isConstraintComposite;
                    tableColumn.isNullable = dbColumn["IS_NULLABLE"] === "YES";
                    tableColumn.isPrimary = dbPrimaryKeys.some(function (dbPrimaryKey) {
                      return _this.driver.buildTableName(dbPrimaryKey["TABLE_NAME"], undefined, dbPrimaryKey["TABLE_SCHEMA"]) === tableFullName && dbPrimaryKey["COLUMN_NAME"] === tableColumn.name;
                    });
                    tableColumn.zerofill = dbColumn["COLUMN_TYPE"].indexOf("zerofill") !== -1;
                    tableColumn.unsigned = tableColumn.zerofill ? true : dbColumn["COLUMN_TYPE"].indexOf("unsigned") !== -1;
                    tableColumn.isGenerated = dbColumn["EXTRA"].indexOf("auto_increment") !== -1;
                    if (tableColumn.isGenerated) tableColumn.generationStrategy = "increment";
                    tableColumn.comment = dbColumn["COLUMN_COMMENT"];
                    if (dbColumn["CHARACTER_SET_NAME"]) tableColumn.charset = dbColumn["CHARACTER_SET_NAME"] === defaultCharset ? undefined : dbColumn["CHARACTER_SET_NAME"];
                    if (dbColumn["COLLATION_NAME"]) tableColumn.collation = dbColumn["COLLATION_NAME"] === defaultCollation ? undefined : dbColumn["COLLATION_NAME"]; // check only columns that have length property

                    if (_this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1 && dbColumn["CHARACTER_MAXIMUM_LENGTH"]) {
                      var length_1 = dbColumn["CHARACTER_MAXIMUM_LENGTH"].toString();
                      tableColumn.length = !_this.isDefaultColumnLength(table, tableColumn, length_1) ? length_1 : "";
                    }

                    if (tableColumn.type === "decimal" || tableColumn.type === "double" || tableColumn.type === "float") {
                      if (dbColumn["NUMERIC_PRECISION"] !== null && !_this.isDefaultColumnPrecision(table, tableColumn, dbColumn["NUMERIC_PRECISION"])) tableColumn.precision = parseInt(dbColumn["NUMERIC_PRECISION"]);
                      if (dbColumn["NUMERIC_SCALE"] !== null && !_this.isDefaultColumnScale(table, tableColumn, dbColumn["NUMERIC_SCALE"])) tableColumn.scale = parseInt(dbColumn["NUMERIC_SCALE"]);
                    }

                    if (tableColumn.type === "enum" || tableColumn.type === "simple-enum") {
                      var colType = dbColumn["COLUMN_TYPE"];
                      var items = colType.substring(colType.indexOf("(") + 1, colType.indexOf(")")).split(",");
                      tableColumn["enum"] = items.map(function (item) {
                        return item.substring(1, item.length - 1);
                      });
                      tableColumn.length = "";
                    }

                    if ((tableColumn.type === "datetime" || tableColumn.type === "time" || tableColumn.type === "timestamp") && dbColumn["DATETIME_PRECISION"] !== null && dbColumn["DATETIME_PRECISION"] !== undefined && !_this.isDefaultColumnPrecision(table, tableColumn, parseInt(dbColumn["DATETIME_PRECISION"]))) {
                      tableColumn.precision = parseInt(dbColumn["DATETIME_PRECISION"]);
                    }

                    return tableColumn;
                  });
                  tableForeignKeyConstraints = _util_OrmUtils__WEBPACK_IMPORTED_MODULE_10__["OrmUtils"].uniq(dbForeignKeys.filter(function (dbForeignKey) {
                    return _this.driver.buildTableName(dbForeignKey["TABLE_NAME"], undefined, dbForeignKey["TABLE_SCHEMA"]) === tableFullName;
                  }), function (dbForeignKey) {
                    return dbForeignKey["CONSTRAINT_NAME"];
                  });
                  table.foreignKeys = tableForeignKeyConstraints.map(function (dbForeignKey) {
                    var foreignKeys = dbForeignKeys.filter(function (dbFk) {
                      return dbFk["CONSTRAINT_NAME"] === dbForeignKey["CONSTRAINT_NAME"];
                    }); // if referenced table located in currently used db, we don't need to concat db name to table name.

                    var database = dbForeignKey["REFERENCED_TABLE_SCHEMA"] === currentDatabase ? undefined : dbForeignKey["REFERENCED_TABLE_SCHEMA"];

                    var referencedTableName = _this.driver.buildTableName(dbForeignKey["REFERENCED_TABLE_NAME"], undefined, database);

                    return new _schema_builder_table_TableForeignKey__WEBPACK_IMPORTED_MODULE_5__["TableForeignKey"]({
                      name: dbForeignKey["CONSTRAINT_NAME"],
                      columnNames: foreignKeys.map(function (dbFk) {
                        return dbFk["COLUMN_NAME"];
                      }),
                      referencedTableName: referencedTableName,
                      referencedColumnNames: foreignKeys.map(function (dbFk) {
                        return dbFk["REFERENCED_COLUMN_NAME"];
                      }),
                      onDelete: dbForeignKey["ON_DELETE"],
                      onUpdate: dbForeignKey["ON_UPDATE"]
                    });
                  });
                  tableIndexConstraints = _util_OrmUtils__WEBPACK_IMPORTED_MODULE_10__["OrmUtils"].uniq(dbIndices.filter(function (dbIndex) {
                    return _this.driver.buildTableName(dbIndex["TABLE_NAME"], undefined, dbIndex["TABLE_SCHEMA"]) === tableFullName;
                  }), function (dbIndex) {
                    return dbIndex["INDEX_NAME"];
                  });
                  table.indices = tableIndexConstraints.map(function (constraint) {
                    var indices = dbIndices.filter(function (index) {
                      return index["TABLE_SCHEMA"] === constraint["TABLE_SCHEMA"] && index["TABLE_NAME"] === constraint["TABLE_NAME"] && index["INDEX_NAME"] === constraint["INDEX_NAME"];
                    });
                    var nonUnique = parseInt(constraint["NON_UNIQUE"], 10);
                    return new _schema_builder_table_TableIndex__WEBPACK_IMPORTED_MODULE_6__["TableIndex"]({
                      table: table,
                      name: constraint["INDEX_NAME"],
                      columnNames: indices.map(function (i) {
                        return i["COLUMN_NAME"];
                      }),
                      isUnique: nonUnique === 0,
                      isSpatial: constraint["INDEX_TYPE"] === "SPATIAL",
                      isFulltext: constraint["INDEX_TYPE"] === "FULLTEXT"
                    });
                  });
                  return [2
                  /*return*/
                  , table];
                });
              });
            }))];
        }
      });
    });
  };
  /**
   * Builds create table sql
   */


  AuroraDataApiQueryRunner.prototype.createTableSql = function (table, createForeignKeys) {
    var _this = this;

    var columnDefinitions = table.columns.map(function (column) {
      return _this.buildCreateColumnSql(column, true);
    }).join(", ");
    var sql = "CREATE TABLE " + this.escapePath(table) + " (" + columnDefinitions; // we create unique indexes instead of unique constraints, because MySql does not have unique constraints.
    // if we mark column as Unique, it means that we create UNIQUE INDEX.

    table.columns.filter(function (column) {
      return column.isUnique;
    }).forEach(function (column) {
      var isUniqueIndexExist = table.indices.some(function (index) {
        return index.columnNames.length === 1 && !!index.isUnique && index.columnNames.indexOf(column.name) !== -1;
      });
      var isUniqueConstraintExist = table.uniques.some(function (unique) {
        return unique.columnNames.length === 1 && unique.columnNames.indexOf(column.name) !== -1;
      });
      if (!isUniqueIndexExist && !isUniqueConstraintExist) table.indices.push(new _schema_builder_table_TableIndex__WEBPACK_IMPORTED_MODULE_6__["TableIndex"]({
        name: _this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),
        columnNames: [column.name],
        isUnique: true
      }));
    }); // as MySql does not have unique constraints, we must create table indices from table uniques and mark them as unique.

    if (table.uniques.length > 0) {
      table.uniques.forEach(function (unique) {
        var uniqueExist = table.indices.some(function (index) {
          return index.name === unique.name;
        });

        if (!uniqueExist) {
          table.indices.push(new _schema_builder_table_TableIndex__WEBPACK_IMPORTED_MODULE_6__["TableIndex"]({
            name: unique.name,
            columnNames: unique.columnNames,
            isUnique: true
          }));
        }
      });
    }

    if (table.indices.length > 0) {
      var indicesSql = table.indices.map(function (index) {
        var columnNames = index.columnNames.map(function (columnName) {
          return "`" + columnName + "`";
        }).join(", ");
        if (!index.name) index.name = _this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);
        var indexType = "";
        if (index.isUnique) indexType += "UNIQUE ";
        if (index.isSpatial) indexType += "SPATIAL ";
        if (index.isFulltext) indexType += "FULLTEXT ";
        return indexType + "INDEX `" + index.name + "` (" + columnNames + ")";
      }).join(", ");
      sql += ", " + indicesSql;
    }

    if (table.foreignKeys.length > 0 && createForeignKeys) {
      var foreignKeysSql = table.foreignKeys.map(function (fk) {
        var columnNames = fk.columnNames.map(function (columnName) {
          return "`" + columnName + "`";
        }).join(", ");
        if (!fk.name) fk.name = _this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames);
        var referencedColumnNames = fk.referencedColumnNames.map(function (columnName) {
          return "`" + columnName + "`";
        }).join(", ");
        var constraint = "CONSTRAINT `" + fk.name + "` FOREIGN KEY (" + columnNames + ") REFERENCES " + _this.escapePath(fk.referencedTableName) + " (" + referencedColumnNames + ")";
        if (fk.onDelete) constraint += " ON DELETE " + fk.onDelete;
        if (fk.onUpdate) constraint += " ON UPDATE " + fk.onUpdate;
        return constraint;
      }).join(", ");
      sql += ", " + foreignKeysSql;
    }

    if (table.primaryColumns.length > 0) {
      var columnNames = table.primaryColumns.map(function (column) {
        return "`" + column.name + "`";
      }).join(", ");
      sql += ", PRIMARY KEY (" + columnNames + ")";
    }

    sql += ") ENGINE=" + (table.engine || "InnoDB");
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](sql);
  };
  /**
   * Builds drop table sql
   */


  AuroraDataApiQueryRunner.prototype.dropTableSql = function (tableOrName) {
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("DROP TABLE " + this.escapePath(tableOrName));
  };

  AuroraDataApiQueryRunner.prototype.createViewSql = function (view) {
    if (typeof view.expression === "string") {
      return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("CREATE VIEW " + this.escapePath(view) + " AS " + view.expression);
    } else {
      return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("CREATE VIEW " + this.escapePath(view) + " AS " + view.expression(this.connection).getQuery());
    }
  };

  AuroraDataApiQueryRunner.prototype.insertViewDefinitionSql = function (view) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var currentDatabase, expression, _a, query, parameters;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            return [4
            /*yield*/
            , this.getCurrentDatabase()];

          case 1:
            currentDatabase = _b.sent();
            expression = typeof view.expression === "string" ? view.expression.trim() : view.expression(this.connection).getQuery();
            _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](this.connection.createQueryBuilder().insert().into(this.getTypeormMetadataTableName()).values({
              type: "VIEW",
              schema: currentDatabase,
              name: view.name,
              value: expression
            }).getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];
            return [2
            /*return*/
            , new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](query, parameters)];
        }
      });
    });
  };
  /**
   * Builds drop view sql.
   */


  AuroraDataApiQueryRunner.prototype.dropViewSql = function (viewOrPath) {
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("DROP VIEW " + this.escapePath(viewOrPath));
  };
  /**
   * Builds remove view sql.
   */


  AuroraDataApiQueryRunner.prototype.deleteViewDefinitionSql = function (viewOrPath) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var currentDatabase, viewName, qb, _a, query, parameters;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            return [4
            /*yield*/
            , this.getCurrentDatabase()];

          case 1:
            currentDatabase = _b.sent();
            viewName = viewOrPath instanceof _schema_builder_view_View__WEBPACK_IMPORTED_MODULE_8__["View"] ? viewOrPath.name : viewOrPath;
            qb = this.connection.createQueryBuilder();
            _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](qb["delete"]().from(this.getTypeormMetadataTableName()).where(qb.escape("type") + " = 'VIEW'").andWhere(qb.escape("schema") + " = :schema", {
              schema: currentDatabase
            }).andWhere(qb.escape("name") + " = :name", {
              name: viewName
            }).getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];
            return [2
            /*return*/
            , new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](query, parameters)];
        }
      });
    });
  };
  /**
   * Builds create index sql.
   */


  AuroraDataApiQueryRunner.prototype.createIndexSql = function (table, index) {
    var columns = index.columnNames.map(function (columnName) {
      return "`" + columnName + "`";
    }).join(", ");
    var indexType = "";
    if (index.isUnique) indexType += "UNIQUE ";
    if (index.isSpatial) indexType += "SPATIAL ";
    if (index.isFulltext) indexType += "FULLTEXT ";
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("CREATE " + indexType + "INDEX `" + index.name + "` ON " + this.escapePath(table) + " (" + columns + ")");
  };
  /**
   * Builds drop index sql.
   */


  AuroraDataApiQueryRunner.prototype.dropIndexSql = function (table, indexOrName) {
    var indexName = indexOrName instanceof _schema_builder_table_TableIndex__WEBPACK_IMPORTED_MODULE_6__["TableIndex"] ? indexOrName.name : indexOrName;
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("DROP INDEX `" + indexName + "` ON " + this.escapePath(table));
  };
  /**
   * Builds create primary key sql.
   */


  AuroraDataApiQueryRunner.prototype.createPrimaryKeySql = function (table, columnNames) {
    var columnNamesString = columnNames.map(function (columnName) {
      return "`" + columnName + "`";
    }).join(", ");
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD PRIMARY KEY (" + columnNamesString + ")");
  };
  /**
   * Builds drop primary key sql.
   */


  AuroraDataApiQueryRunner.prototype.dropPrimaryKeySql = function (table) {
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP PRIMARY KEY");
  };
  /**
   * Builds create foreign key sql.
   */


  AuroraDataApiQueryRunner.prototype.createForeignKeySql = function (table, foreignKey) {
    var columnNames = foreignKey.columnNames.map(function (column) {
      return "`" + column + "`";
    }).join(", ");
    var referencedColumnNames = foreignKey.referencedColumnNames.map(function (column) {
      return "`" + column + "`";
    }).join(",");
    var sql = "ALTER TABLE " + this.escapePath(table) + " ADD CONSTRAINT `" + foreignKey.name + "` FOREIGN KEY (" + columnNames + ") " + ("REFERENCES " + this.escapePath(foreignKey.referencedTableName) + "(" + referencedColumnNames + ")");
    if (foreignKey.onDelete) sql += " ON DELETE " + foreignKey.onDelete;
    if (foreignKey.onUpdate) sql += " ON UPDATE " + foreignKey.onUpdate;
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](sql);
  };
  /**
   * Builds drop foreign key sql.
   */


  AuroraDataApiQueryRunner.prototype.dropForeignKeySql = function (table, foreignKeyOrName) {
    var foreignKeyName = foreignKeyOrName instanceof _schema_builder_table_TableForeignKey__WEBPACK_IMPORTED_MODULE_5__["TableForeignKey"] ? foreignKeyOrName.name : foreignKeyOrName;
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP FOREIGN KEY `" + foreignKeyName + "`");
  };

  AuroraDataApiQueryRunner.prototype.parseTableName = function (target) {
    var tableName = target instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"] ? target.name : target;
    return {
      database: tableName.indexOf(".") !== -1 ? tableName.split(".")[0] : this.driver.database,
      tableName: tableName.indexOf(".") !== -1 ? tableName.split(".")[1] : tableName
    };
  };
  /**
   * Escapes given table or view path.
   */


  AuroraDataApiQueryRunner.prototype.escapePath = function (target, disableEscape) {
    var tableName = target instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"] || target instanceof _schema_builder_view_View__WEBPACK_IMPORTED_MODULE_8__["View"] ? target.name : target;
    return tableName.split(".").map(function (i) {
      return disableEscape ? i : "`" + i + "`";
    }).join(".");
  };
  /**
   * Builds a part of query to create/change a column.
   */


  AuroraDataApiQueryRunner.prototype.buildCreateColumnSql = function (column, skipPrimary, skipName) {
    if (skipName === void 0) {
      skipName = false;
    }

    var c = "";

    if (skipName) {
      c = this.connection.driver.createFullType(column);
    } else {
      c = "`" + column.name + "` " + this.connection.driver.createFullType(column);
    }

    if (column.asExpression) c += " AS (" + column.asExpression + ") " + (column.generatedType ? column.generatedType : "VIRTUAL"); // if you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to that column.

    if (column.zerofill) {
      c += " ZEROFILL";
    } else if (column.unsigned) {
      c += " UNSIGNED";
    }

    if (column["enum"]) c += " (" + column["enum"].map(function (value) {
      return "'" + value + "'";
    }).join(", ") + ")";
    if (column.charset) c += " CHARACTER SET \"" + column.charset + "\"";
    if (column.collation) c += " COLLATE \"" + column.collation + "\"";
    if (!column.isNullable) c += " NOT NULL";
    if (column.isNullable) c += " NULL";
    if (column.isPrimary && !skipPrimary) c += " PRIMARY KEY";
    if (column.isGenerated && column.generationStrategy === "increment") // don't use skipPrimary here since updates can update already exist primary without auto inc.
      c += " AUTO_INCREMENT";
    if (column.comment) c += " COMMENT '" + column.comment + "'";
    if (column["default"] !== undefined && column["default"] !== null) c += " DEFAULT " + column["default"];
    if (column.onUpdate) c += " ON UPDATE " + column.onUpdate;
    return c;
  };

  return AuroraDataApiQueryRunner;
}(_query_runner_BaseQueryRunner__WEBPACK_IMPORTED_MODULE_12__["BaseQueryRunner"]);



/***/ }),

/***/ "./node_modules/typeorm/browser/driver/cockroachdb/CockroachDriver.js":
/*!****************************************************************************!*\
  !*** ./node_modules/typeorm/browser/driver/cockroachdb/CockroachDriver.js ***!
  \****************************************************************************/
/*! exports provided: CockroachDriver */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CockroachDriver", function() { return CockroachDriver; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _error_ConnectionIsNotSetError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error/ConnectionIsNotSetError */ "./node_modules/typeorm/browser/error/ConnectionIsNotSetError.js");
/* harmony import */ var _error_DriverPackageNotInstalledError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../error/DriverPackageNotInstalledError */ "./node_modules/typeorm/browser/error/DriverPackageNotInstalledError.js");
/* harmony import */ var _DriverUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../DriverUtils */ "./node_modules/typeorm/browser/driver/DriverUtils.js");
/* harmony import */ var _util_DateUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/DateUtils */ "./node_modules/typeorm/browser/util/DateUtils.js");
/* harmony import */ var _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../platform/PlatformTools */ "./node_modules/typeorm/browser/platform/PlatformTools.js");
/* harmony import */ var _schema_builder_RdbmsSchemaBuilder__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../schema-builder/RdbmsSchemaBuilder */ "./node_modules/typeorm/browser/schema-builder/RdbmsSchemaBuilder.js");
/* harmony import */ var _util_OrmUtils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util/OrmUtils */ "./node_modules/typeorm/browser/util/OrmUtils.js");
/* harmony import */ var _CockroachQueryRunner__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./CockroachQueryRunner */ "./node_modules/typeorm/browser/driver/cockroachdb/CockroachQueryRunner.js");
/* harmony import */ var _util_ApplyValueTransformers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../util/ApplyValueTransformers */ "./node_modules/typeorm/browser/util/ApplyValueTransformers.js");










/**
 * Organizes communication with Cockroach DBMS.
 */

var CockroachDriver =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function CockroachDriver(connection) {
    /**
     * Pool for slave databases.
     * Used in replication.
     */
    this.slaves = [];
    /**
     * We store all created query runners because we need to release them.
     */

    this.connectedQueryRunners = [];
    /**
     * Indicates if replication is enabled.
     */

    this.isReplicated = false;
    /**
     * Indicates if tree tables are supported by this driver.
     */

    this.treeSupport = true;
    /**
     * Gets list of supported column data types by a driver.
     *
     * @see https://www.cockroachlabs.com/docs/stable/data-types.html
     */

    this.supportedDataTypes = ["array", "bool", "boolean", "bytes", "bytea", "blob", "date", "numeric", "decimal", "dec", "float", "float4", "float8", "double precision", "real", "inet", "int", "int4", "integer", "int2", "int8", "int64", "smallint", "bigint", "interval", "string", "character varying", "character", "char", "char varying", "varchar", "text", "time", "time without time zone", "timestamp", "timestamptz", "timestamp without time zone", "timestamp with time zone", "json", "jsonb", "uuid"];
    /**
     * Gets list of spatial column data types.
     */

    this.spatialTypes = [];
    /**
     * Gets list of column data types that support length by a driver.
     */

    this.withLengthColumnTypes = ["character varying", "char varying", "varchar", "character", "char", "string"];
    /**
     * Gets list of column data types that support precision by a driver.
     */

    this.withPrecisionColumnTypes = ["numeric", "decimal", "dec"];
    /**
     * Gets list of column data types that support scale by a driver.
     */

    this.withScaleColumnTypes = ["numeric", "decimal", "dec"];
    /**
     * Orm has special columns and we need to know what database column types should be for those types.
     * Column types are driver dependant.
     */

    this.mappedDataTypes = {
      createDate: "timestamptz",
      createDateDefault: "now()",
      updateDate: "timestamptz",
      updateDateDefault: "now()",
      deleteDate: "timestamptz",
      deleteDateNullable: true,
      version: Number,
      treeLevel: Number,
      migrationId: Number,
      migrationName: "varchar",
      migrationTimestamp: "int8",
      cacheId: Number,
      cacheIdentifier: "varchar",
      cacheTime: "int8",
      cacheDuration: Number,
      cacheQuery: "string",
      cacheResult: "string",
      metadataType: "varchar",
      metadataDatabase: "varchar",
      metadataSchema: "varchar",
      metadataTable: "varchar",
      metadataName: "varchar",
      metadataValue: "string"
    };
    /**
     * Default values of length, precision and scale depends on column data type.
     * Used in the cases when length/precision/scale is not specified by user.
     */

    this.dataTypeDefaults = {
      "char": {
        length: 1
      }
    };
    this.connection = connection;
    this.options = connection.options;
    this.isReplicated = this.options.replication ? true : false; // load postgres package

    this.loadDependencies(); // ObjectUtils.assign(this.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way
    // validate options to make sure everything is set
    // todo: revisit validation with replication in mind
    // if (!this.options.host)
    //     throw new DriverOptionNotSetError("host");
    // if (!this.options.username)
    //     throw new DriverOptionNotSetError("username");
    // if (!this.options.database)
    //     throw new DriverOptionNotSetError("database");
  } // -------------------------------------------------------------------------
  // Public Implemented Methods
  // -------------------------------------------------------------------------

  /**
   * Performs connection to the database.
   * Based on pooling options, it can either create connection immediately,
   * either create a pool and create connection when needed.
   */


  CockroachDriver.prototype.connect = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _a, _b, _c;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_d) {
        switch (_d.label) {
          case 0:
            if (!this.options.replication) return [3
            /*break*/
            , 3];
            _a = this;
            return [4
            /*yield*/
            , Promise.all(this.options.replication.slaves.map(function (slave) {
              return _this.createPool(_this.options, slave);
            }))];

          case 1:
            _a.slaves = _d.sent();
            _b = this;
            return [4
            /*yield*/
            , this.createPool(this.options, this.options.replication.master)];

          case 2:
            _b.master = _d.sent();
            this.database = this.options.replication.master.database;
            return [3
            /*break*/
            , 5];

          case 3:
            _c = this;
            return [4
            /*yield*/
            , this.createPool(this.options, this.options)];

          case 4:
            _c.master = _d.sent();
            this.database = this.options.database;
            _d.label = 5;

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Makes any action after connection (e.g. create extensions in Postgres driver).
   */


  CockroachDriver.prototype.afterConnect = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , Promise.resolve()];
      });
    });
  };
  /**
   * Closes connection with database.
   */


  CockroachDriver.prototype.disconnect = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!this.master) return [2
            /*return*/
            , Promise.reject(new _error_ConnectionIsNotSetError__WEBPACK_IMPORTED_MODULE_1__["ConnectionIsNotSetError"]("cockroachdb"))];
            return [4
            /*yield*/
            , this.closePool(this.master)];

          case 1:
            _a.sent();

            return [4
            /*yield*/
            , Promise.all(this.slaves.map(function (slave) {
              return _this.closePool(slave);
            }))];

          case 2:
            _a.sent();

            this.master = undefined;
            this.slaves = [];
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a schema builder used to build and sync a schema.
   */


  CockroachDriver.prototype.createSchemaBuilder = function () {
    return new _schema_builder_RdbmsSchemaBuilder__WEBPACK_IMPORTED_MODULE_6__["RdbmsSchemaBuilder"](this.connection);
  };
  /**
   * Creates a query runner used to execute database queries.
   */


  CockroachDriver.prototype.createQueryRunner = function (mode) {
    if (mode === void 0) {
      mode = "master";
    }

    return new _CockroachQueryRunner__WEBPACK_IMPORTED_MODULE_8__["CockroachQueryRunner"](this, mode);
  };
  /**
   * Prepares given value to a value to be persisted, based on its column type and metadata.
   */


  CockroachDriver.prototype.preparePersistentValue = function (value, columnMetadata) {
    if (columnMetadata.transformer) value = _util_ApplyValueTransformers__WEBPACK_IMPORTED_MODULE_9__["ApplyValueTransformers"].transformTo(columnMetadata.transformer, value);
    if (value === null || value === undefined) return value;

    if (columnMetadata.type === Boolean) {
      return value === true ? 1 : 0;
    } else if (columnMetadata.type === "date") {
      return _util_DateUtils__WEBPACK_IMPORTED_MODULE_4__["DateUtils"].mixedDateToDateString(value);
    } else if (columnMetadata.type === "time") {
      return _util_DateUtils__WEBPACK_IMPORTED_MODULE_4__["DateUtils"].mixedDateToTimeString(value);
    } else if (columnMetadata.type === "datetime" || columnMetadata.type === Date || columnMetadata.type === "timestamp" || columnMetadata.type === "timestamptz" || columnMetadata.type === "timestamp with time zone" || columnMetadata.type === "timestamp without time zone") {
      return _util_DateUtils__WEBPACK_IMPORTED_MODULE_4__["DateUtils"].mixedDateToDate(value);
    } else if (tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](["json", "jsonb"], this.spatialTypes).indexOf(columnMetadata.type) >= 0) {
      return JSON.stringify(value);
    } else if (columnMetadata.type === "simple-array") {
      return _util_DateUtils__WEBPACK_IMPORTED_MODULE_4__["DateUtils"].simpleArrayToString(value);
    } else if (columnMetadata.type === "simple-json") {
      return _util_DateUtils__WEBPACK_IMPORTED_MODULE_4__["DateUtils"].simpleJsonToString(value);
    }

    return value;
  };
  /**
   * Prepares given value to a value to be persisted, based on its column type or metadata.
   */


  CockroachDriver.prototype.prepareHydratedValue = function (value, columnMetadata) {
    if (value === null || value === undefined) return columnMetadata.transformer ? _util_ApplyValueTransformers__WEBPACK_IMPORTED_MODULE_9__["ApplyValueTransformers"].transformFrom(columnMetadata.transformer, value) : value; // unique_rowid() generates bigint value and should not be converted to number

    if ([Number, "int4", "smallint", "int2"].some(function (v) {
      return v === columnMetadata.type;
    }) && !columnMetadata.isArray || columnMetadata.generationStrategy === "increment") {
      value = parseInt(value);
    } else if (columnMetadata.type === Boolean) {
      value = value ? true : false;
    } else if (columnMetadata.type === "datetime" || columnMetadata.type === Date || columnMetadata.type === "timestamp" || columnMetadata.type === "timestamptz" || columnMetadata.type === "timestamp with time zone" || columnMetadata.type === "timestamp without time zone") {
      value = _util_DateUtils__WEBPACK_IMPORTED_MODULE_4__["DateUtils"].normalizeHydratedDate(value);
    } else if (columnMetadata.type === "date") {
      value = _util_DateUtils__WEBPACK_IMPORTED_MODULE_4__["DateUtils"].mixedDateToDateString(value);
    } else if (columnMetadata.type === "time") {
      value = _util_DateUtils__WEBPACK_IMPORTED_MODULE_4__["DateUtils"].mixedTimeToString(value);
    } else if (columnMetadata.type === "simple-array") {
      value = _util_DateUtils__WEBPACK_IMPORTED_MODULE_4__["DateUtils"].stringToSimpleArray(value);
    } else if (columnMetadata.type === "simple-json") {
      value = _util_DateUtils__WEBPACK_IMPORTED_MODULE_4__["DateUtils"].stringToSimpleJson(value);
    }

    if (columnMetadata.transformer) value = _util_ApplyValueTransformers__WEBPACK_IMPORTED_MODULE_9__["ApplyValueTransformers"].transformFrom(columnMetadata.transformer, value);
    return value;
  };
  /**
   * Replaces parameters in the given sql with special escaping character
   * and an array of parameter names to be passed to a query.
   */


  CockroachDriver.prototype.escapeQueryWithParameters = function (sql, parameters, nativeParameters) {
    var builtParameters = Object.keys(nativeParameters).map(function (key) {
      return nativeParameters[key];
    });
    if (!parameters || !Object.keys(parameters).length) return [sql, builtParameters];
    var keys = Object.keys(parameters).map(function (parameter) {
      return "(:(\\.\\.\\.)?" + parameter + "\\b)";
    }).join("|");
    sql = sql.replace(new RegExp(keys, "g"), function (key) {
      var value;
      var isArray = false;

      if (key.substr(0, 4) === ":...") {
        isArray = true;
        value = parameters[key.substr(4)];
      } else {
        value = parameters[key.substr(1)];
      }

      if (isArray) {
        return value.map(function (v) {
          builtParameters.push(v);
          return "$" + builtParameters.length;
        }).join(", ");
      } else if (value instanceof Function) {
        return value();
      } else {
        builtParameters.push(value);
        return "$" + builtParameters.length;
      }
    }); // todo: make replace only in value statements, otherwise problems

    return [sql, builtParameters];
  };
  /**
   * Escapes a column name.
   */


  CockroachDriver.prototype.escape = function (columnName) {
    return "\"" + columnName + "\"";
  };
  /**
   * Build full table name with schema name and table name.
   * E.g. "mySchema"."myTable"
   */


  CockroachDriver.prototype.buildTableName = function (tableName, schema) {
    return schema ? schema + "." + tableName : tableName;
  };
  /**
   * Creates a database type from a given column metadata.
   */


  CockroachDriver.prototype.normalizeType = function (column) {
    if (column.type === Number || column.type === "integer" || column.type === "int" || column.type === "bigint" || column.type === "int64") {
      return "int8";
    } else if (column.type === String || column.type === "character varying" || column.type === "char varying") {
      return "varchar";
    } else if (column.type === Date || column.type === "timestamp without time zone") {
      return "timestamp";
    } else if (column.type === "timestamp with time zone") {
      return "timestamptz";
    } else if (column.type === "time without time zone") {
      return "time";
    } else if (column.type === Boolean || column.type === "boolean") {
      return "bool";
    } else if (column.type === "simple-array" || column.type === "simple-json" || column.type === "text") {
      return "string";
    } else if (column.type === "bytea" || column.type === "blob") {
      return "bytes";
    } else if (column.type === "smallint") {
      return "int2";
    } else if (column.type === "numeric" || column.type === "dec") {
      return "decimal";
    } else if (column.type === "double precision" || column.type === "float") {
      return "float8";
    } else if (column.type === "real") {
      return "float4";
    } else if (column.type === "character") {
      return "char";
    } else if (column.type === "json") {
      return "jsonb";
    } else {
      return column.type || "";
    }
  };
  /**
   * Normalizes "default" value of the column.
   */


  CockroachDriver.prototype.normalizeDefault = function (columnMetadata) {
    var defaultValue = columnMetadata["default"];
    var arrayCast = columnMetadata.isArray ? "::" + columnMetadata.type + "[]" : "";

    if (typeof defaultValue === "number") {
      return "" + defaultValue;
    } else if (typeof defaultValue === "boolean") {
      return defaultValue === true ? "true" : "false";
    } else if (typeof defaultValue === "function") {
      return defaultValue();
    } else if (typeof defaultValue === "string") {
      return "'" + defaultValue + "'" + arrayCast;
    } else if (defaultValue === null) {
      return "null";
    } else if (typeof defaultValue === "object") {
      return "'" + JSON.stringify(defaultValue) + "'";
    } else {
      return defaultValue;
    }
  };
  /**
   * Normalizes "isUnique" value of the column.
   */


  CockroachDriver.prototype.normalizeIsUnique = function (column) {
    return column.entityMetadata.uniques.some(function (uq) {
      return uq.columns.length === 1 && uq.columns[0] === column;
    });
  };
  /**
   * Returns default column lengths, which is required on column creation.
   */


  CockroachDriver.prototype.getColumnLength = function (column) {
    return column.length ? column.length.toString() : "";
  };
  /**
   * Creates column type definition including length, precision and scale
   */


  CockroachDriver.prototype.createFullType = function (column) {
    var type = column.type;

    if (column.length) {
      type += "(" + column.length + ")";
    } else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {
      type += "(" + column.precision + "," + column.scale + ")";
    } else if (column.precision !== null && column.precision !== undefined) {
      type += "(" + column.precision + ")";
    }

    if (column.isArray) type += " array";
    return type;
  };
  /**
   * Obtains a new database connection to a master server.
   * Used for replication.
   * If replication is not setup then returns default connection's database connection.
   */


  CockroachDriver.prototype.obtainMasterConnection = function () {
    var _this = this;

    return new Promise(function (ok, fail) {
      _this.master.connect(function (err, connection, release) {
        err ? fail(err) : ok([connection, release]);
      });
    });
  };
  /**
   * Obtains a new database connection to a slave server.
   * Used for replication.
   * If replication is not setup then returns master (default) connection's database connection.
   */


  CockroachDriver.prototype.obtainSlaveConnection = function () {
    var _this = this;

    if (!this.slaves.length) return this.obtainMasterConnection();
    return new Promise(function (ok, fail) {
      var random = Math.floor(Math.random() * _this.slaves.length);

      _this.slaves[random].connect(function (err, connection, release) {
        err ? fail(err) : ok([connection, release]);
      });
    });
  };
  /**
   * Creates generated map of values generated or returned by database after INSERT query.
   *
   * todo: slow. optimize Object.keys(), OrmUtils.mergeDeep and column.createValueMap parts
   */


  CockroachDriver.prototype.createGeneratedMap = function (metadata, insertResult) {
    var _this = this;

    if (!insertResult) return undefined;
    return Object.keys(insertResult).reduce(function (map, key) {
      var column = metadata.findColumnWithDatabaseName(key);

      if (column) {
        _util_OrmUtils__WEBPACK_IMPORTED_MODULE_7__["OrmUtils"].mergeDeep(map, column.createValueMap(_this.prepareHydratedValue(insertResult[key], column)));
      }

      return map;
    }, {});
  };
  /**
   * Differentiate columns of this table and columns from the given column metadatas columns
   * and returns only changed.
   */


  CockroachDriver.prototype.findChangedColumns = function (tableColumns, columnMetadatas) {
    var _this = this;

    return columnMetadatas.filter(function (columnMetadata) {
      var tableColumn = tableColumns.find(function (c) {
        return c.name === columnMetadata.databaseName;
      });
      if (!tableColumn) return false; // we don't need new columns, we only need exist and changed
      // console.log("table:", columnMetadata.entityMetadata.tableName);
      // console.log("name:", tableColumn.name, columnMetadata.databaseName);
      // console.log("type:", tableColumn.type, this.normalizeType(columnMetadata));
      // console.log("length:", tableColumn.length, columnMetadata.length);
      // console.log("width:", tableColumn.width, columnMetadata.width);
      // console.log("precision:", tableColumn.precision, columnMetadata.precision);
      // console.log("scale:", tableColumn.scale, columnMetadata.scale);
      // console.log("comment:", tableColumn.comment, columnMetadata.comment);
      // console.log("default:", tableColumn.default, columnMetadata.default);
      // console.log("default changed:", !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default));
      // console.log("isPrimary:", tableColumn.isPrimary, columnMetadata.isPrimary);
      // console.log("isNullable:", tableColumn.isNullable, columnMetadata.isNullable);
      // console.log("isUnique:", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));
      // console.log("isGenerated:", tableColumn.isGenerated, columnMetadata.isGenerated);
      // console.log("==========================================");

      return tableColumn.name !== columnMetadata.databaseName || tableColumn.type !== _this.normalizeType(columnMetadata) || tableColumn.length !== columnMetadata.length || tableColumn.precision !== columnMetadata.precision || tableColumn.scale !== columnMetadata.scale // || tableColumn.comment !== columnMetadata.comment // todo
      || !tableColumn.isGenerated && _this.lowerDefaultValueIfNecessary(_this.normalizeDefault(columnMetadata)) !== tableColumn["default"] // we included check for generated here, because generated columns already can have default values
      || tableColumn.isPrimary !== columnMetadata.isPrimary || tableColumn.isNullable !== columnMetadata.isNullable || tableColumn.isUnique !== _this.normalizeIsUnique(columnMetadata) || tableColumn.isGenerated !== columnMetadata.isGenerated;
    });
  };

  CockroachDriver.prototype.lowerDefaultValueIfNecessary = function (value) {
    if (!value) {
      return value;
    }

    return value.split("'").map(function (v, i) {
      return i % 2 === 1 ? v : v.toLowerCase();
    }).join("'");
  };
  /**
   * Returns true if driver supports RETURNING / OUTPUT statement.
   */


  CockroachDriver.prototype.isReturningSqlSupported = function () {
    return true;
  };
  /**
   * Returns true if driver supports uuid values generation on its own.
   */


  CockroachDriver.prototype.isUUIDGenerationSupported = function () {
    return true;
  };
  /**
   * Creates an escaped parameter.
   */


  CockroachDriver.prototype.createParameter = function (parameterName, index) {
    return "$" + (index + 1);
  }; // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Loads postgres query stream package.
   */


  CockroachDriver.prototype.loadStreamDependency = function () {
    try {
      return _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_5__["PlatformTools"].load("pg-query-stream");
    } catch (e) {
      // todo: better error for browser env
      throw new Error("To use streams you should install pg-query-stream package. Please run npm i pg-query-stream --save command.");
    }
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * If driver dependency is not given explicitly, then try to load it via "require".
   */


  CockroachDriver.prototype.loadDependencies = function () {
    try {
      this.postgres = _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_5__["PlatformTools"].load("pg");

      try {
        var pgNative = _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_5__["PlatformTools"].load("pg-native");
        if (pgNative && this.postgres["native"]) this.postgres = this.postgres["native"];
      } catch (e) {}
    } catch (e) {
      // todo: better error for browser env
      throw new _error_DriverPackageNotInstalledError__WEBPACK_IMPORTED_MODULE_2__["DriverPackageNotInstalledError"]("Postgres", "pg");
    }
  };
  /**
   * Creates a new connection pool for a given database credentials.
   */


  CockroachDriver.prototype.createPool = function (options, credentials) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var connectionOptions, pool, logger, poolErrorHandler;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        credentials = Object.assign({}, credentials, _DriverUtils__WEBPACK_IMPORTED_MODULE_3__["DriverUtils"].buildDriverOptions(credentials)); // todo: do it better way

        connectionOptions = Object.assign({}, {
          host: credentials.host,
          user: credentials.username,
          password: credentials.password,
          database: credentials.database,
          port: credentials.port,
          ssl: credentials.ssl
        }, options.extra || {});
        pool = new this.postgres.Pool(connectionOptions);
        logger = this.connection.logger;

        poolErrorHandler = options.poolErrorHandler || function (error) {
          return logger.log("warn", "Postgres pool raised an error. " + error);
        };
        /*
          Attaching an error handler to pool errors is essential, as, otherwise, errors raised will go unhandled and
          cause the hosting app to crash.
         */


        pool.on("error", poolErrorHandler);
        return [2
        /*return*/
        , new Promise(function (ok, fail) {
          pool.connect(function (err, connection, release) {
            if (err) return fail(err);
            release();
            ok(pool);
          });
        })];
      });
    });
  };
  /**
   * Closes connection pool.
   */


  CockroachDriver.prototype.closePool = function (pool) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , Promise.all(this.connectedQueryRunners.map(function (queryRunner) {
              return queryRunner.release();
            }))];

          case 1:
            _a.sent();

            return [2
            /*return*/
            , new Promise(function (ok, fail) {
              pool.end(function (err) {
                return err ? fail(err) : ok();
              });
            })];
        }
      });
    });
  };

  return CockroachDriver;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/driver/cockroachdb/CockroachQueryRunner.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/typeorm/browser/driver/cockroachdb/CockroachQueryRunner.js ***!
  \*********************************************************************************/
/*! exports provided: CockroachQueryRunner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CockroachQueryRunner", function() { return CockroachQueryRunner; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _error_TransactionAlreadyStartedError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error/TransactionAlreadyStartedError */ "./node_modules/typeorm/browser/error/TransactionAlreadyStartedError.js");
/* harmony import */ var _error_TransactionNotStartedError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../error/TransactionNotStartedError */ "./node_modules/typeorm/browser/error/TransactionNotStartedError.js");
/* harmony import */ var _schema_builder_table_TableColumn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../schema-builder/table/TableColumn */ "./node_modules/typeorm/browser/schema-builder/table/TableColumn.js");
/* harmony import */ var _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../schema-builder/table/Table */ "./node_modules/typeorm/browser/schema-builder/table/Table.js");
/* harmony import */ var _schema_builder_table_TableIndex__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../schema-builder/table/TableIndex */ "./node_modules/typeorm/browser/schema-builder/table/TableIndex.js");
/* harmony import */ var _schema_builder_table_TableForeignKey__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../schema-builder/table/TableForeignKey */ "./node_modules/typeorm/browser/schema-builder/table/TableForeignKey.js");
/* harmony import */ var _error_QueryRunnerAlreadyReleasedError__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../error/QueryRunnerAlreadyReleasedError */ "./node_modules/typeorm/browser/error/QueryRunnerAlreadyReleasedError.js");
/* harmony import */ var _schema_builder_view_View__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../schema-builder/view/View */ "./node_modules/typeorm/browser/schema-builder/view/View.js");
/* harmony import */ var _Query__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../Query */ "./node_modules/typeorm/browser/driver/Query.js");
/* harmony import */ var _error_QueryFailedError__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../error/QueryFailedError */ "./node_modules/typeorm/browser/error/QueryFailedError.js");
/* harmony import */ var _subscriber_Broadcaster__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../subscriber/Broadcaster */ "./node_modules/typeorm/browser/subscriber/Broadcaster.js");
/* harmony import */ var _schema_builder_table_TableUnique__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../schema-builder/table/TableUnique */ "./node_modules/typeorm/browser/schema-builder/table/TableUnique.js");
/* harmony import */ var _query_runner_BaseQueryRunner__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../query-runner/BaseQueryRunner */ "./node_modules/typeorm/browser/query-runner/BaseQueryRunner.js");
/* harmony import */ var _util_OrmUtils__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../util/OrmUtils */ "./node_modules/typeorm/browser/util/OrmUtils.js");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../ */ "./node_modules/typeorm/browser/index.js");
/* harmony import */ var _schema_builder_table_TableCheck__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../schema-builder/table/TableCheck */ "./node_modules/typeorm/browser/schema-builder/table/TableCheck.js");
/* harmony import */ var _schema_builder_table_TableExclusion__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../schema-builder/table/TableExclusion */ "./node_modules/typeorm/browser/schema-builder/table/TableExclusion.js");


















/**
 * Runs queries on a single postgres database connection.
 */

var CockroachQueryRunner =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](CockroachQueryRunner, _super); // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------


  function CockroachQueryRunner(driver, mode) {
    if (mode === void 0) {
      mode = "master";
    }

    var _this = _super.call(this) || this;
    /**
     * Stores all executed queries to be able to run them again if transaction fails.
     */


    _this.queries = [];
    /**
     * Indicates if running queries must be stored
     */

    _this.storeQueries = false;
    _this.driver = driver;
    _this.connection = driver.connection;
    _this.mode = mode;
    _this.broadcaster = new _subscriber_Broadcaster__WEBPACK_IMPORTED_MODULE_11__["Broadcaster"](_this);
    return _this;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Creates/uses database connection from the connection pool to perform further operations.
   * Returns obtained database connection.
   */


  CockroachQueryRunner.prototype.connect = function () {
    var _this = this;

    if (this.databaseConnection) return Promise.resolve(this.databaseConnection);
    if (this.databaseConnectionPromise) return this.databaseConnectionPromise;

    if (this.mode === "slave" && this.driver.isReplicated) {
      this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(function (_a) {
        var _b = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](_a, 2),
            connection = _b[0],
            release = _b[1];

        _this.driver.connectedQueryRunners.push(_this);

        _this.databaseConnection = connection;
        _this.releaseCallback = release;
        return _this.databaseConnection;
      });
    } else {
      // master
      this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(function (_a) {
        var _b = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](_a, 2),
            connection = _b[0],
            release = _b[1];

        _this.driver.connectedQueryRunners.push(_this);

        _this.databaseConnection = connection;
        _this.releaseCallback = release;
        return _this.databaseConnection;
      });
    }

    return this.databaseConnectionPromise;
  };
  /**
   * Releases used database connection.
   * You cannot use query runner methods once its released.
   */


  CockroachQueryRunner.prototype.release = function () {
    this.isReleased = true;
    if (this.releaseCallback) this.releaseCallback();
    var index = this.driver.connectedQueryRunners.indexOf(this);
    if (index !== -1) this.driver.connectedQueryRunners.splice(index);
    return Promise.resolve();
  };
  /**
   * Starts transaction.
   */


  CockroachQueryRunner.prototype.startTransaction = function (isolationLevel) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (this.isTransactionActive) throw new _error_TransactionAlreadyStartedError__WEBPACK_IMPORTED_MODULE_1__["TransactionAlreadyStartedError"]();
            this.isTransactionActive = true;
            return [4
            /*yield*/
            , this.query("START TRANSACTION")];

          case 1:
            _a.sent();

            return [4
            /*yield*/
            , this.query("SAVEPOINT cockroach_restart")];

          case 2:
            _a.sent();

            if (!isolationLevel) return [3
            /*break*/
            , 4];
            return [4
            /*yield*/
            , this.query("SET TRANSACTION ISOLATION LEVEL " + isolationLevel)];

          case 3:
            _a.sent();

            _a.label = 4;

          case 4:
            this.storeQueries = true;
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Commits transaction.
   * Error will be thrown if transaction was not started.
   */


  CockroachQueryRunner.prototype.commitTransaction = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var e_1;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!this.isTransactionActive) throw new _error_TransactionNotStartedError__WEBPACK_IMPORTED_MODULE_2__["TransactionNotStartedError"]();
            this.storeQueries = false;
            _a.label = 1;

          case 1:
            _a.trys.push([1, 4,, 9]);

            return [4
            /*yield*/
            , this.query("RELEASE SAVEPOINT cockroach_restart")];

          case 2:
            _a.sent();

            return [4
            /*yield*/
            , this.query("COMMIT")];

          case 3:
            _a.sent();

            this.queries = [];
            this.isTransactionActive = false;
            return [3
            /*break*/
            , 9];

          case 4:
            e_1 = _a.sent();
            if (!(e_1.code === "40001")) return [3
            /*break*/
            , 8];
            return [4
            /*yield*/
            , this.query("ROLLBACK TO SAVEPOINT cockroach_restart")];

          case 5:
            _a.sent();

            return [4
            /*yield*/
            , ___WEBPACK_IMPORTED_MODULE_15__["PromiseUtils"].runInSequence(this.queries, function (q) {
              return _this.query(q.query, q.parameters);
            })];

          case 6:
            _a.sent();

            return [4
            /*yield*/
            , this.commitTransaction()];

          case 7:
            _a.sent();

            _a.label = 8;

          case 8:
            return [3
            /*break*/
            , 9];

          case 9:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Rollbacks transaction.
   * Error will be thrown if transaction was not started.
   */


  CockroachQueryRunner.prototype.rollbackTransaction = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!this.isTransactionActive) throw new _error_TransactionNotStartedError__WEBPACK_IMPORTED_MODULE_2__["TransactionNotStartedError"]();
            this.storeQueries = false;
            return [4
            /*yield*/
            , this.query("ROLLBACK")];

          case 1:
            _a.sent();

            this.queries = [];
            this.isTransactionActive = false;
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Executes a given SQL query.
   */


  CockroachQueryRunner.prototype.query = function (query, parameters, options) {
    var _this = this;

    if (this.isReleased) throw new _error_QueryRunnerAlreadyReleasedError__WEBPACK_IMPORTED_MODULE_7__["QueryRunnerAlreadyReleasedError"]();
    return new Promise(function (ok, fail) {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
        var databaseConnection, queryStartTime_1, err_1;

        var _this = this;

        return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2,, 3]);

              return [4
              /*yield*/
              , this.connect()];

            case 1:
              databaseConnection = _a.sent();
              this.driver.connection.logger.logQuery(query, parameters, this);
              queryStartTime_1 = +new Date();
              databaseConnection.query(query, parameters, function (err, result) {
                if (_this.isTransactionActive && _this.storeQueries) _this.queries.push({
                  query: query,
                  parameters: parameters
                }); // log slow queries if maxQueryExecution time is set

                var maxQueryExecutionTime = _this.driver.connection.options.maxQueryExecutionTime;
                var queryEndTime = +new Date();
                var queryExecutionTime = queryEndTime - queryStartTime_1;
                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

                if (err) {
                  if (err.code !== "40001") _this.driver.connection.logger.logQueryError(err, query, parameters, _this);
                  fail(new _error_QueryFailedError__WEBPACK_IMPORTED_MODULE_10__["QueryFailedError"](query, parameters, err));
                } else {
                  switch (result.command) {
                    case "DELETE":
                      // for DELETE query additionally return number of affected rows
                      ok([result.rows, result.rowCount]);
                      break;

                    default:
                      ok(result.rows);
                  }
                }
              });
              return [3
              /*break*/
              , 3];

            case 2:
              err_1 = _a.sent();
              fail(err_1);
              return [3
              /*break*/
              , 3];

            case 3:
              return [2
              /*return*/
              ];
          }
        });
      });
    });
  };
  /**
   * Returns raw data stream.
   */


  CockroachQueryRunner.prototype.stream = function (query, parameters, onEnd, onError) {
    var _this = this;

    var QueryStream = this.driver.loadStreamDependency();
    if (this.isReleased) throw new _error_QueryRunnerAlreadyReleasedError__WEBPACK_IMPORTED_MODULE_7__["QueryRunnerAlreadyReleasedError"]();
    return new Promise(function (ok, fail) {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
        var databaseConnection, stream, err_2;
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2,, 3]);

              return [4
              /*yield*/
              , this.connect()];

            case 1:
              databaseConnection = _a.sent();
              this.driver.connection.logger.logQuery(query, parameters, this);
              stream = databaseConnection.query(new QueryStream(query, parameters));
              if (onEnd) stream.on("end", onEnd);
              if (onError) stream.on("error", onError);
              ok(stream);
              return [3
              /*break*/
              , 3];

            case 2:
              err_2 = _a.sent();
              fail(err_2);
              return [3
              /*break*/
              , 3];

            case 3:
              return [2
              /*return*/
              ];
          }
        });
      });
    });
  };
  /**
   * Returns all available database names including system databases.
   */


  CockroachQueryRunner.prototype.getDatabases = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , Promise.resolve([])];
      });
    });
  };
  /**
   * Returns all available schema names including system schemas.
   * If database parameter specified, returns schemas of that database.
   */


  CockroachQueryRunner.prototype.getSchemas = function (database) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , Promise.resolve([])];
      });
    });
  };
  /**
   * Checks if database with the given name exist.
   */


  CockroachQueryRunner.prototype.hasDatabase = function (database) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var result;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.query("SELECT * FROM \"pg_database\" WHERE \"datname\" = '" + database + "'")];

          case 1:
            result = _a.sent();
            return [2
            /*return*/
            , result.length ? true : false];
        }
      });
    });
  };
  /**
   * Checks if schema with the given name exist.
   */


  CockroachQueryRunner.prototype.hasSchema = function (schema) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var result;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.query("SELECT * FROM \"information_schema\".\"schemata\" WHERE \"schema_name\" = '" + schema + "'")];

          case 1:
            result = _a.sent();
            return [2
            /*return*/
            , result.length ? true : false];
        }
      });
    });
  };
  /**
   * Checks if table with the given name exist in the database.
   */


  CockroachQueryRunner.prototype.hasTable = function (tableOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var parsedTableName, sql, result;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            parsedTableName = this.parseTableName(tableOrName);
            sql = "SELECT * FROM \"information_schema\".\"tables\" WHERE \"table_schema\" = " + parsedTableName.schema + " AND \"table_name\" = " + parsedTableName.tableName;
            return [4
            /*yield*/
            , this.query(sql)];

          case 1:
            result = _a.sent();
            return [2
            /*return*/
            , result.length ? true : false];
        }
      });
    });
  };
  /**
   * Checks if column with the given name exist in the given table.
   */


  CockroachQueryRunner.prototype.hasColumn = function (tableOrName, columnName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var parsedTableName, sql, result;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            parsedTableName = this.parseTableName(tableOrName);
            sql = "SELECT * FROM \"information_schema\".\"columns\" WHERE \"table_schema\" = " + parsedTableName.schema + " AND \"table_name\" = " + parsedTableName.tableName + " AND \"column_name\" = '" + columnName + "'";
            return [4
            /*yield*/
            , this.query(sql)];

          case 1:
            result = _a.sent();
            return [2
            /*return*/
            , result.length ? true : false];
        }
      });
    });
  };
  /**
   * Creates a new database.
   */


  CockroachQueryRunner.prototype.createDatabase = function (database, ifNotExist) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var up, down;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            up = "CREATE DATABASE " + (ifNotExist ? "IF NOT EXISTS " : "") + " \"" + database + "\"";
            down = "DROP DATABASE \"" + database + "\"";
            return [4
            /*yield*/
            , this.executeQueries(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](up), new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](down))];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops database.
   */


  CockroachQueryRunner.prototype.dropDatabase = function (database, ifExist) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var up, down;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            up = "DROP DATABASE " + (ifExist ? "IF EXISTS " : "") + " \"" + database + "\"";
            down = "CREATE DATABASE \"" + database + "\"";
            return [4
            /*yield*/
            , this.executeQueries(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](up), new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](down))];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new table schema.
   */


  CockroachQueryRunner.prototype.createSchema = function (schema, ifNotExist) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var up, down;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            up = ifNotExist ? "CREATE SCHEMA IF NOT EXISTS \"" + schema + "\"" : "CREATE SCHEMA \"" + schema + "\"";
            down = "DROP SCHEMA \"" + schema + "\" CASCADE";
            return [4
            /*yield*/
            , this.executeQueries(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](up), new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](down))];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops table schema.
   */


  CockroachQueryRunner.prototype.dropSchema = function (schemaPath, ifExist, isCascade) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var schema, up, down;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            schema = schemaPath.indexOf(".") === -1 ? schemaPath : schemaPath.split(".")[0];
            up = ifExist ? "DROP SCHEMA IF EXISTS \"" + schema + "\" " + (isCascade ? "CASCADE" : "") : "DROP SCHEMA \"" + schema + "\" " + (isCascade ? "CASCADE" : "");
            down = "CREATE SCHEMA \"" + schema + "\"";
            return [4
            /*yield*/
            , this.executeQueries(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](up), new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](down))];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new table.
   */


  CockroachQueryRunner.prototype.createTable = function (table, ifNotExist, createForeignKeys, createIndices) {
    if (ifNotExist === void 0) {
      ifNotExist = false;
    }

    if (createForeignKeys === void 0) {
      createForeignKeys = true;
    }

    if (createIndices === void 0) {
      createIndices = true;
    }

    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var isTableExist, upQueries, downQueries;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!ifNotExist) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , this.hasTable(table)];

          case 1:
            isTableExist = _a.sent();
            if (isTableExist) return [2
            /*return*/
            , Promise.resolve()];
            _a.label = 2;

          case 2:
            upQueries = [];
            downQueries = [];
            table.columns.filter(function (column) {
              return column.isGenerated && column.generationStrategy === "increment";
            }).forEach(function (column) {
              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("CREATE SEQUENCE " + _this.buildSequenceName(table, column)));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("DROP SEQUENCE " + _this.buildSequenceName(table, column)));
            });
            upQueries.push(this.createTableSql(table, createForeignKeys));
            downQueries.push(this.dropTableSql(table)); // if createForeignKeys is true, we must drop created foreign keys in down query.
            // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.

            if (createForeignKeys) table.foreignKeys.forEach(function (foreignKey) {
              return downQueries.push(_this.dropForeignKeySql(table, foreignKey));
            });

            if (createIndices) {
              table.indices.filter(function (index) {
                return !index.isUnique;
              }).forEach(function (index) {
                // new index may be passed without name. In this case we generate index name manually.
                if (!index.name) index.name = _this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);
                upQueries.push(_this.createIndexSql(table, index));
                downQueries.push(_this.dropIndexSql(table, index));
              });
            }

            return [4
            /*yield*/
            , this.executeQueries(upQueries, downQueries)];

          case 3:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops the table.
   */


  CockroachQueryRunner.prototype.dropTable = function (target, ifExist, dropForeignKeys, dropIndices) {
    if (dropForeignKeys === void 0) {
      dropForeignKeys = true;
    }

    if (dropIndices === void 0) {
      dropIndices = true;
    }

    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var isTableExist, createForeignKeys, tableName, table, upQueries, downQueries;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!ifExist) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , this.hasTable(target)];

          case 1:
            isTableExist = _a.sent();
            if (!isTableExist) return [2
            /*return*/
            , Promise.resolve()];
            _a.label = 2;

          case 2:
            createForeignKeys = dropForeignKeys;
            tableName = target instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"] ? target.name : target;
            return [4
            /*yield*/
            , this.getCachedTable(tableName)];

          case 3:
            table = _a.sent();
            upQueries = [];
            downQueries = []; // foreign keys must be dropped before indices, because fk's rely on indices

            if (dropForeignKeys) table.foreignKeys.forEach(function (foreignKey) {
              return upQueries.push(_this.dropForeignKeySql(table, foreignKey));
            });

            if (dropIndices) {
              table.indices.forEach(function (index) {
                upQueries.push(_this.dropIndexSql(table, index));
                downQueries.push(_this.createIndexSql(table, index));
              });
            }

            upQueries.push(this.dropTableSql(table));
            downQueries.push(this.createTableSql(table, createForeignKeys));
            table.columns.filter(function (column) {
              return column.isGenerated && column.generationStrategy === "increment";
            }).forEach(function (column) {
              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("DROP SEQUENCE " + _this.buildSequenceName(table, column)));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("CREATE SEQUENCE " + _this.buildSequenceName(table, column)));
            });
            return [4
            /*yield*/
            , this.executeQueries(upQueries, downQueries)];

          case 4:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new view.
   */


  CockroachQueryRunner.prototype.createView = function (view) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var upQueries, downQueries, _a, _b, _c, _d;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_e) {
        switch (_e.label) {
          case 0:
            upQueries = [];
            downQueries = [];
            upQueries.push(this.createViewSql(view));
            _b = (_a = upQueries).push;
            return [4
            /*yield*/
            , this.insertViewDefinitionSql(view)];

          case 1:
            _b.apply(_a, [_e.sent()]);

            downQueries.push(this.dropViewSql(view));
            _d = (_c = downQueries).push;
            return [4
            /*yield*/
            , this.deleteViewDefinitionSql(view)];

          case 2:
            _d.apply(_c, [_e.sent()]);

            return [4
            /*yield*/
            , this.executeQueries(upQueries, downQueries)];

          case 3:
            _e.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops the view.
   */


  CockroachQueryRunner.prototype.dropView = function (target) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var viewName, view, upQueries, downQueries, _a, _b, _c, _d;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_e) {
        switch (_e.label) {
          case 0:
            viewName = target instanceof _schema_builder_view_View__WEBPACK_IMPORTED_MODULE_8__["View"] ? target.name : target;
            return [4
            /*yield*/
            , this.getCachedView(viewName)];

          case 1:
            view = _e.sent();
            upQueries = [];
            downQueries = [];
            _b = (_a = upQueries).push;
            return [4
            /*yield*/
            , this.deleteViewDefinitionSql(view)];

          case 2:
            _b.apply(_a, [_e.sent()]);

            upQueries.push(this.dropViewSql(view));
            _d = (_c = downQueries).push;
            return [4
            /*yield*/
            , this.insertViewDefinitionSql(view)];

          case 3:
            _d.apply(_c, [_e.sent()]);

            downQueries.push(this.createViewSql(view));
            return [4
            /*yield*/
            , this.executeQueries(upQueries, downQueries)];

          case 4:
            _e.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Renames the given table.
   */


  CockroachQueryRunner.prototype.renameTable = function (oldTableOrName, newTableName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var upQueries, downQueries, oldTable, _a, newTable, oldTableName, schemaName, columnNames, oldPkName, newPkName;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            upQueries = [];
            downQueries = [];
            if (!(oldTableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = oldTableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(oldTableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            oldTable = _a;
            newTable = oldTable.clone();
            oldTableName = oldTable.name.indexOf(".") === -1 ? oldTable.name : oldTable.name.split(".")[1];
            schemaName = oldTable.name.indexOf(".") === -1 ? undefined : oldTable.name.split(".")[0];
            newTable.name = schemaName ? schemaName + "." + newTableName : newTableName;
            upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(oldTable) + " RENAME TO \"" + newTableName + "\""));
            downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(newTable) + " RENAME TO \"" + oldTableName + "\"")); // rename column primary key constraint

            if (newTable.primaryColumns.length > 0) {
              columnNames = newTable.primaryColumns.map(function (column) {
                return column.name;
              });
              oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);
              newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);
              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(newTable) + " RENAME CONSTRAINT \"" + oldPkName + "\" TO \"" + newPkName + "\""));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(newTable) + " RENAME CONSTRAINT \"" + newPkName + "\" TO \"" + oldPkName + "\""));
            } // rename unique constraints


            newTable.uniques.forEach(function (unique) {
              // build new constraint name
              var newUniqueName = _this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames); // build queries


              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + _this.escapePath(newTable) + " RENAME CONSTRAINT \"" + unique.name + "\" TO \"" + newUniqueName + "\""));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + _this.escapePath(newTable) + " RENAME CONSTRAINT \"" + newUniqueName + "\" TO \"" + unique.name + "\"")); // replace constraint name

              unique.name = newUniqueName;
            }); // rename index constraints

            newTable.indices.forEach(function (index) {
              // build new constraint name
              var schema = _this.extractSchema(newTable);

              var newIndexName = _this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where); // build queries


              var up = schema ? "ALTER INDEX \"" + schema + "\".\"" + index.name + "\" RENAME TO \"" + newIndexName + "\"" : "ALTER INDEX \"" + index.name + "\" RENAME TO \"" + newIndexName + "\"";
              var down = schema ? "ALTER INDEX \"" + schema + "\".\"" + newIndexName + "\" RENAME TO \"" + index.name + "\"" : "ALTER INDEX \"" + newIndexName + "\" RENAME TO \"" + index.name + "\"";
              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](up));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](down)); // replace constraint name

              index.name = newIndexName;
            }); // rename foreign key constraints

            newTable.foreignKeys.forEach(function (foreignKey) {
              // build new constraint name
              var newForeignKeyName = _this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames); // build queries


              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + _this.escapePath(newTable) + " RENAME CONSTRAINT \"" + foreignKey.name + "\" TO \"" + newForeignKeyName + "\""));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + _this.escapePath(newTable) + " RENAME CONSTRAINT \"" + newForeignKeyName + "\" TO \"" + foreignKey.name + "\"")); // replace constraint name

              foreignKey.name = newForeignKeyName;
            });
            return [4
            /*yield*/
            , this.executeQueries(upQueries, downQueries)];

          case 4:
            _b.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new column from the column in the table.
   */


  CockroachQueryRunner.prototype.addColumn = function (tableOrName, column) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, clonedTable, upQueries, downQueries, primaryColumns, pkName_1, columnNames_1, pkName, columnNames, columnIndex, unique, uniqueConstraint;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            clonedTable = table.clone();
            upQueries = [];
            downQueries = [];

            if (column.generationStrategy === "increment") {
              throw new Error("Adding sequential generated columns into existing table is not supported");
            }

            upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD " + this.buildCreateColumnSql(table, column)));
            downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP COLUMN \"" + column.name + "\"")); // create or update primary key constraint

            if (column.isPrimary) {
              primaryColumns = clonedTable.primaryColumns; // if table already have primary key, me must drop it and recreate again
              // todo: altering pk is not supported yet https://github.com/cockroachdb/cockroach/issues/19141

              if (primaryColumns.length > 0) {
                pkName_1 = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {
                  return column.name;
                }));
                columnNames_1 = primaryColumns.map(function (column) {
                  return "\"" + column.name + "\"";
                }).join(", ");
                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP CONSTRAINT \"" + pkName_1 + "\""));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD CONSTRAINT \"" + pkName_1 + "\" PRIMARY KEY (" + columnNames_1 + ")"));
              }

              primaryColumns.push(column);
              pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {
                return column.name;
              }));
              columnNames = primaryColumns.map(function (column) {
                return "\"" + column.name + "\"";
              }).join(", ");
              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD CONSTRAINT \"" + pkName + "\" PRIMARY KEY (" + columnNames + ")"));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP CONSTRAINT \"" + pkName + "\""));
            }

            columnIndex = clonedTable.indices.find(function (index) {
              return index.columnNames.length === 1 && index.columnNames[0] === column.name;
            });

            if (columnIndex) {
              // CockroachDB stores unique indices as UNIQUE constraints
              if (columnIndex.isUnique) {
                unique = new _schema_builder_table_TableUnique__WEBPACK_IMPORTED_MODULE_12__["TableUnique"]({
                  name: this.connection.namingStrategy.uniqueConstraintName(table.name, columnIndex.columnNames),
                  columnNames: columnIndex.columnNames
                });
                upQueries.push(this.createUniqueConstraintSql(table, unique));
                downQueries.push(this.dropIndexSql(table, unique));
                clonedTable.uniques.push(unique);
              } else {
                upQueries.push(this.createIndexSql(table, columnIndex));
                downQueries.push(this.dropIndexSql(table, columnIndex));
              }
            } // create unique constraint


            if (column.isUnique) {
              uniqueConstraint = new _schema_builder_table_TableUnique__WEBPACK_IMPORTED_MODULE_12__["TableUnique"]({
                name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),
                columnNames: [column.name]
              });
              clonedTable.uniques.push(uniqueConstraint);
              upQueries.push(this.createUniqueConstraintSql(table, uniqueConstraint));
              downQueries.push(this.dropIndexSql(table, uniqueConstraint.name)); // CockroachDB creates indices for unique constraints
            }

            return [4
            /*yield*/
            , this.executeQueries(upQueries, downQueries)];

          case 4:
            _b.sent();

            clonedTable.addColumn(column);
            this.replaceCachedTable(table, clonedTable);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new columns from the column in the table.
   */


  CockroachQueryRunner.prototype.addColumns = function (tableOrName, columns) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , ___WEBPACK_IMPORTED_MODULE_15__["PromiseUtils"].runInSequence(columns, function (column) {
              return _this.addColumn(tableOrName, column);
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Renames column in the given table.
   */


  CockroachQueryRunner.prototype.renameColumn = function (tableOrName, oldTableColumnOrName, newTableColumnOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, oldColumn, newColumn;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            oldColumn = oldTableColumnOrName instanceof _schema_builder_table_TableColumn__WEBPACK_IMPORTED_MODULE_3__["TableColumn"] ? oldTableColumnOrName : table.columns.find(function (c) {
              return c.name === oldTableColumnOrName;
            });
            if (!oldColumn) throw new Error("Column \"" + oldTableColumnOrName + "\" was not found in the \"" + table.name + "\" table.");

            if (newTableColumnOrName instanceof _schema_builder_table_TableColumn__WEBPACK_IMPORTED_MODULE_3__["TableColumn"]) {
              newColumn = newTableColumnOrName;
            } else {
              newColumn = oldColumn.clone();
              newColumn.name = newTableColumnOrName;
            }

            return [2
            /*return*/
            , this.changeColumn(table, oldColumn, newColumn)];
        }
      });
    });
  };
  /**
   * Changes a column in the table.
   */


  CockroachQueryRunner.prototype.changeColumn = function (tableOrName, oldTableColumnOrName, newColumn) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, clonedTable, upQueries, downQueries, oldColumn, primaryColumns, columnNames, oldPkName, newPkName, oldTableColumn, primaryColumns, pkName, columnNames, column, pkName, columnNames, primaryColumn, column, pkName, columnNames, uniqueConstraint, uniqueConstraint;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            clonedTable = table.clone();
            upQueries = [];
            downQueries = [];
            oldColumn = oldTableColumnOrName instanceof _schema_builder_table_TableColumn__WEBPACK_IMPORTED_MODULE_3__["TableColumn"] ? oldTableColumnOrName : table.columns.find(function (column) {
              return column.name === oldTableColumnOrName;
            });
            if (!oldColumn) throw new Error("Column \"" + oldTableColumnOrName + "\" was not found in the \"" + table.name + "\" table.");
            if (!(oldColumn.type !== newColumn.type || oldColumn.length !== newColumn.length)) return [3
            /*break*/
            , 6]; // To avoid data conversion, we just recreate column

            return [4
            /*yield*/
            , this.dropColumn(table, oldColumn)];

          case 4:
            // To avoid data conversion, we just recreate column
            _b.sent();

            return [4
            /*yield*/
            , this.addColumn(table, newColumn)];

          case 5:
            _b.sent(); // update cloned table


            clonedTable = table.clone();
            return [3
            /*break*/
            , 7];

          case 6:
            if (oldColumn.name !== newColumn.name) {
              // rename column
              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " RENAME COLUMN \"" + oldColumn.name + "\" TO \"" + newColumn.name + "\""));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " RENAME COLUMN \"" + newColumn.name + "\" TO \"" + oldColumn.name + "\"")); // rename column primary key constraint

              if (oldColumn.isPrimary === true) {
                primaryColumns = clonedTable.primaryColumns;
                columnNames = primaryColumns.map(function (column) {
                  return column.name;
                });
                oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames); // replace old column name with new column name

                columnNames.splice(columnNames.indexOf(oldColumn.name), 1);
                columnNames.push(newColumn.name);
                newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);
                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " RENAME CONSTRAINT \"" + oldPkName + "\" TO \"" + newPkName + "\""));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " RENAME CONSTRAINT \"" + newPkName + "\" TO \"" + oldPkName + "\""));
              } // rename unique constraints


              clonedTable.findColumnUniques(oldColumn).forEach(function (unique) {
                // build new constraint name
                unique.columnNames.splice(unique.columnNames.indexOf(oldColumn.name), 1);
                unique.columnNames.push(newColumn.name);

                var newUniqueName = _this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames); // build queries


                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + _this.escapePath(table) + " RENAME CONSTRAINT \"" + unique.name + "\" TO \"" + newUniqueName + "\""));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + _this.escapePath(table) + " RENAME CONSTRAINT \"" + newUniqueName + "\" TO \"" + unique.name + "\"")); // replace constraint name

                unique.name = newUniqueName;
              }); // rename index constraints

              clonedTable.findColumnIndices(oldColumn).forEach(function (index) {
                // build new constraint name
                index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);
                index.columnNames.push(newColumn.name);

                var schema = _this.extractSchema(table);

                var newIndexName = _this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where); // build queries


                var up = schema ? "ALTER INDEX \"" + schema + "\".\"" + index.name + "\" RENAME TO \"" + newIndexName + "\"" : "ALTER INDEX \"" + index.name + "\" RENAME TO \"" + newIndexName + "\"";
                var down = schema ? "ALTER INDEX \"" + schema + "\".\"" + newIndexName + "\" RENAME TO \"" + index.name + "\"" : "ALTER INDEX \"" + newIndexName + "\" RENAME TO \"" + index.name + "\"";
                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](up));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](down)); // replace constraint name

                index.name = newIndexName;
              }); // rename foreign key constraints

              clonedTable.findColumnForeignKeys(oldColumn).forEach(function (foreignKey) {
                // build new constraint name
                foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);
                foreignKey.columnNames.push(newColumn.name);

                var newForeignKeyName = _this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames); // build queries


                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + _this.escapePath(table) + " RENAME CONSTRAINT \"" + foreignKey.name + "\" TO \"" + newForeignKeyName + "\""));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + _this.escapePath(table) + " RENAME CONSTRAINT \"" + newForeignKeyName + "\" TO \"" + foreignKey.name + "\"")); // replace constraint name

                foreignKey.name = newForeignKeyName;
              });
              oldTableColumn = clonedTable.columns.find(function (column) {
                return column.name === oldColumn.name;
              });
              clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn)].name = newColumn.name;
              oldColumn.name = newColumn.name;
            }

            if (newColumn.precision !== oldColumn.precision || newColumn.scale !== oldColumn.scale) {
              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ALTER COLUMN \"" + newColumn.name + "\" TYPE " + this.driver.createFullType(newColumn)));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ALTER COLUMN \"" + newColumn.name + "\" TYPE " + this.driver.createFullType(oldColumn)));
            }

            if (oldColumn.isNullable !== newColumn.isNullable) {
              if (newColumn.isNullable) {
                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ALTER COLUMN \"" + oldColumn.name + "\" DROP NOT NULL"));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ALTER COLUMN \"" + oldColumn.name + "\" SET NOT NULL"));
              } else {
                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ALTER COLUMN \"" + oldColumn.name + "\" SET NOT NULL"));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ALTER COLUMN \"" + oldColumn.name + "\" DROP NOT NULL"));
              }
            }

            if (oldColumn.comment !== newColumn.comment) {
              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("COMMENT ON COLUMN " + this.escapePath(table) + ".\"" + oldColumn.name + "\" IS '" + newColumn.comment + "'"));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("COMMENT ON COLUMN " + this.escapePath(table) + ".\"" + newColumn.name + "\" IS '" + oldColumn.comment + "'"));
            }

            if (newColumn.isPrimary !== oldColumn.isPrimary) {
              primaryColumns = clonedTable.primaryColumns; // if primary column state changed, we must always drop existed constraint.

              if (primaryColumns.length > 0) {
                pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {
                  return column.name;
                }));
                columnNames = primaryColumns.map(function (column) {
                  return "\"" + column.name + "\"";
                }).join(", ");
                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP CONSTRAINT \"" + pkName + "\""));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD CONSTRAINT \"" + pkName + "\" PRIMARY KEY (" + columnNames + ")"));
              }

              if (newColumn.isPrimary === true) {
                primaryColumns.push(newColumn);
                column = clonedTable.columns.find(function (column) {
                  return column.name === newColumn.name;
                });
                column.isPrimary = true;
                pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {
                  return column.name;
                }));
                columnNames = primaryColumns.map(function (column) {
                  return "\"" + column.name + "\"";
                }).join(", ");
                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD CONSTRAINT \"" + pkName + "\" PRIMARY KEY (" + columnNames + ")"));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP CONSTRAINT \"" + pkName + "\""));
              } else {
                primaryColumn = primaryColumns.find(function (c) {
                  return c.name === newColumn.name;
                });
                primaryColumns.splice(primaryColumns.indexOf(primaryColumn), 1);
                column = clonedTable.columns.find(function (column) {
                  return column.name === newColumn.name;
                });
                column.isPrimary = false; // if we have another primary keys, we must recreate constraint.

                if (primaryColumns.length > 0) {
                  pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {
                    return column.name;
                  }));
                  columnNames = primaryColumns.map(function (column) {
                    return "\"" + column.name + "\"";
                  }).join(", ");
                  upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD CONSTRAINT \"" + pkName + "\" PRIMARY KEY (" + columnNames + ")"));
                  downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP CONSTRAINT \"" + pkName + "\""));
                }
              }
            }

            if (newColumn.isUnique !== oldColumn.isUnique) {
              if (newColumn.isUnique) {
                uniqueConstraint = new _schema_builder_table_TableUnique__WEBPACK_IMPORTED_MODULE_12__["TableUnique"]({
                  name: this.connection.namingStrategy.uniqueConstraintName(table.name, [newColumn.name]),
                  columnNames: [newColumn.name]
                });
                clonedTable.uniques.push(uniqueConstraint);
                upQueries.push(this.createUniqueConstraintSql(table, uniqueConstraint)); // CockroachDB creates index for UNIQUE constraint.
                // We must use DROP INDEX ... CASCADE instead of DROP CONSTRAINT.

                downQueries.push(this.dropIndexSql(table, uniqueConstraint));
              } else {
                uniqueConstraint = clonedTable.uniques.find(function (unique) {
                  return unique.columnNames.length === 1 && !!unique.columnNames.find(function (columnName) {
                    return columnName === newColumn.name;
                  });
                });
                clonedTable.uniques.splice(clonedTable.uniques.indexOf(uniqueConstraint), 1); // CockroachDB creates index for UNIQUE constraint.
                // We must use DROP INDEX ... CASCADE instead of DROP CONSTRAINT.

                upQueries.push(this.dropIndexSql(table, uniqueConstraint));
                downQueries.push(this.createUniqueConstraintSql(table, uniqueConstraint));
              }
            }

            if (oldColumn.isGenerated !== newColumn.isGenerated && newColumn.generationStrategy !== "uuid") {
              if (newColumn.isGenerated) {
                if (newColumn.generationStrategy === "increment") {
                  throw new Error("Adding sequential generated columns into existing table is not supported");
                } else if (newColumn.generationStrategy === "rowid") {
                  upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ALTER COLUMN \"" + newColumn.name + "\" SET DEFAULT unique_rowid()"));
                  downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ALTER COLUMN \"" + newColumn.name + "\" DROP DEFAULT"));
                }
              } else {
                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ALTER COLUMN \"" + newColumn.name + "\" DROP DEFAULT"));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ALTER COLUMN \"" + newColumn.name + "\" SET DEFAULT unique_rowid()"));
              }
            }

            if (newColumn["default"] !== oldColumn["default"]) {
              if (newColumn["default"] !== null && newColumn["default"] !== undefined) {
                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ALTER COLUMN \"" + newColumn.name + "\" SET DEFAULT " + newColumn["default"]));

                if (oldColumn["default"] !== null && oldColumn["default"] !== undefined) {
                  downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ALTER COLUMN \"" + newColumn.name + "\" SET DEFAULT " + oldColumn["default"]));
                } else {
                  downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ALTER COLUMN \"" + newColumn.name + "\" DROP DEFAULT"));
                }
              } else if (oldColumn["default"] !== null && oldColumn["default"] !== undefined) {
                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ALTER COLUMN \"" + newColumn.name + "\" DROP DEFAULT"));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ALTER COLUMN \"" + newColumn.name + "\" SET DEFAULT " + oldColumn["default"]));
              }
            }

            _b.label = 7;

          case 7:
            return [4
            /*yield*/
            , this.executeQueries(upQueries, downQueries)];

          case 8:
            _b.sent();

            this.replaceCachedTable(table, clonedTable);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Changes a column in the table.
   */


  CockroachQueryRunner.prototype.changeColumns = function (tableOrName, changedColumns) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , ___WEBPACK_IMPORTED_MODULE_15__["PromiseUtils"].runInSequence(changedColumns, function (changedColumn) {
              return _this.changeColumn(tableOrName, changedColumn.oldColumn, changedColumn.newColumn);
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops column in the table.
   */


  CockroachQueryRunner.prototype.dropColumn = function (tableOrName, columnOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, column, clonedTable, upQueries, downQueries, pkName, columnNames, tableColumn, pkName_2, columnNames_2, columnIndex, columnCheck, columnUnique;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            column = columnOrName instanceof _schema_builder_table_TableColumn__WEBPACK_IMPORTED_MODULE_3__["TableColumn"] ? columnOrName : table.findColumnByName(columnOrName);
            if (!column) throw new Error("Column \"" + columnOrName + "\" was not found in table \"" + table.name + "\"");
            clonedTable = table.clone();
            upQueries = [];
            downQueries = []; // drop primary key constraint
            // todo: altering pk is not supported yet https://github.com/cockroachdb/cockroach/issues/19141

            if (column.isPrimary) {
              pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(function (column) {
                return column.name;
              }));
              columnNames = clonedTable.primaryColumns.map(function (primaryColumn) {
                return "\"" + primaryColumn.name + "\"";
              }).join(", ");
              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(clonedTable) + " DROP CONSTRAINT \"" + pkName + "\""));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(clonedTable) + " ADD CONSTRAINT \"" + pkName + "\" PRIMARY KEY (" + columnNames + ")"));
              tableColumn = clonedTable.findColumnByName(column.name);
              tableColumn.isPrimary = false; // if primary key have multiple columns, we must recreate it without dropped column

              if (clonedTable.primaryColumns.length > 0) {
                pkName_2 = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(function (column) {
                  return column.name;
                }));
                columnNames_2 = clonedTable.primaryColumns.map(function (primaryColumn) {
                  return "\"" + primaryColumn.name + "\"";
                }).join(", ");
                upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(clonedTable) + " ADD CONSTRAINT \"" + pkName_2 + "\" PRIMARY KEY (" + columnNames_2 + ")"));
                downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(clonedTable) + " DROP CONSTRAINT \"" + pkName_2 + "\""));
              }
            }

            columnIndex = clonedTable.indices.find(function (index) {
              return index.columnNames.length === 1 && index.columnNames[0] === column.name;
            });

            if (columnIndex) {
              clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);
              upQueries.push(this.dropIndexSql(table, columnIndex));
              downQueries.push(this.createIndexSql(table, columnIndex));
            }

            columnCheck = clonedTable.checks.find(function (check) {
              return !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name;
            });

            if (columnCheck) {
              clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);
              upQueries.push(this.dropCheckConstraintSql(table, columnCheck));
              downQueries.push(this.createCheckConstraintSql(table, columnCheck));
            }

            columnUnique = clonedTable.uniques.find(function (unique) {
              return unique.columnNames.length === 1 && unique.columnNames[0] === column.name;
            });

            if (columnUnique) {
              clonedTable.uniques.splice(clonedTable.uniques.indexOf(columnUnique), 1);
              upQueries.push(this.dropIndexSql(table, columnUnique.name)); // CockroachDB creates indices for unique constraints

              downQueries.push(this.createUniqueConstraintSql(table, columnUnique));
            }

            upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP COLUMN \"" + column.name + "\""));
            downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD " + this.buildCreateColumnSql(table, column)));

            if (column.generationStrategy === "increment") {
              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("DROP SEQUENCE " + this.buildSequenceName(table, column)));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("CREATE SEQUENCE " + this.buildSequenceName(table, column)));
            }

            return [4
            /*yield*/
            , this.executeQueries(upQueries, downQueries)];

          case 4:
            _b.sent();

            clonedTable.removeColumn(column);
            this.replaceCachedTable(table, clonedTable);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops the columns in the table.
   */


  CockroachQueryRunner.prototype.dropColumns = function (tableOrName, columns) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , ___WEBPACK_IMPORTED_MODULE_15__["PromiseUtils"].runInSequence(columns, function (column) {
              return _this.dropColumn(tableOrName, column);
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new primary key.
   */


  CockroachQueryRunner.prototype.createPrimaryKey = function (tableOrName, columnNames) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, clonedTable, up, down;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            clonedTable = table.clone();
            up = this.createPrimaryKeySql(table, columnNames); // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.

            clonedTable.columns.forEach(function (column) {
              if (columnNames.find(function (columnName) {
                return columnName === column.name;
              })) column.isPrimary = true;
            });
            down = this.dropPrimaryKeySql(clonedTable);
            return [4
            /*yield*/
            , this.executeQueries(up, down)];

          case 4:
            _b.sent();

            this.replaceCachedTable(table, clonedTable);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Updates composite primary keys.
   */


  CockroachQueryRunner.prototype.updatePrimaryKeys = function (tableOrName, columns) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, clonedTable, columnNames, upQueries, downQueries, primaryColumns, pkName_3, columnNamesString_1, pkName, columnNamesString;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            clonedTable = table.clone();
            columnNames = columns.map(function (column) {
              return column.name;
            });
            upQueries = [];
            downQueries = [];
            primaryColumns = clonedTable.primaryColumns;

            if (primaryColumns.length > 0) {
              pkName_3 = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {
                return column.name;
              }));
              columnNamesString_1 = primaryColumns.map(function (column) {
                return "\"" + column.name + "\"";
              }).join(", ");
              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP CONSTRAINT \"" + pkName_3 + "\""));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD CONSTRAINT \"" + pkName_3 + "\" PRIMARY KEY (" + columnNamesString_1 + ")"));
            } // update columns in table.


            clonedTable.columns.filter(function (column) {
              return columnNames.indexOf(column.name) !== -1;
            }).forEach(function (column) {
              return column.isPrimary = true;
            });
            pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);
            columnNamesString = columnNames.map(function (columnName) {
              return "\"" + columnName + "\"";
            }).join(", ");
            upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD CONSTRAINT \"" + pkName + "\" PRIMARY KEY (" + columnNamesString + ")"));
            downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP CONSTRAINT \"" + pkName + "\""));
            return [4
            /*yield*/
            , this.executeQueries(upQueries, downQueries)];

          case 4:
            _b.sent();

            this.replaceCachedTable(table, clonedTable);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops a primary key.
   */


  CockroachQueryRunner.prototype.dropPrimaryKey = function (tableOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, up, down;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            up = this.dropPrimaryKeySql(table);
            down = this.createPrimaryKeySql(table, table.primaryColumns.map(function (column) {
              return column.name;
            }));
            return [4
            /*yield*/
            , this.executeQueries(up, down)];

          case 4:
            _b.sent();

            table.primaryColumns.forEach(function (column) {
              column.isPrimary = false;
            });
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates new unique constraint.
   */


  CockroachQueryRunner.prototype.createUniqueConstraint = function (tableOrName, uniqueConstraint) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, up, down;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a; // new unique constraint may be passed without name. In this case we generate unique name manually.

            if (!uniqueConstraint.name) uniqueConstraint.name = this.connection.namingStrategy.uniqueConstraintName(table.name, uniqueConstraint.columnNames);
            up = this.createUniqueConstraintSql(table, uniqueConstraint);
            down = this.dropIndexSql(table, uniqueConstraint);
            return [4
            /*yield*/
            , this.executeQueries(up, down)];

          case 4:
            _b.sent();

            table.addUniqueConstraint(uniqueConstraint);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates new unique constraints.
   */


  CockroachQueryRunner.prototype.createUniqueConstraints = function (tableOrName, uniqueConstraints) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , ___WEBPACK_IMPORTED_MODULE_15__["PromiseUtils"].runInSequence(uniqueConstraints, function (uniqueConstraint) {
              return _this.createUniqueConstraint(tableOrName, uniqueConstraint);
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops unique constraint.
   */


  CockroachQueryRunner.prototype.dropUniqueConstraint = function (tableOrName, uniqueOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, uniqueConstraint, up, down;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            uniqueConstraint = uniqueOrName instanceof _schema_builder_table_TableUnique__WEBPACK_IMPORTED_MODULE_12__["TableUnique"] ? uniqueOrName : table.uniques.find(function (u) {
              return u.name === uniqueOrName;
            });
            if (!uniqueConstraint) throw new Error("Supplied unique constraint was not found in table " + table.name);
            up = this.dropIndexSql(table, uniqueConstraint);
            down = this.createUniqueConstraintSql(table, uniqueConstraint);
            return [4
            /*yield*/
            , this.executeQueries(up, down)];

          case 4:
            _b.sent();

            table.removeUniqueConstraint(uniqueConstraint);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops unique constraints.
   */


  CockroachQueryRunner.prototype.dropUniqueConstraints = function (tableOrName, uniqueConstraints) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , ___WEBPACK_IMPORTED_MODULE_15__["PromiseUtils"].runInSequence(uniqueConstraints, function (uniqueConstraint) {
              return _this.dropUniqueConstraint(tableOrName, uniqueConstraint);
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates new check constraint.
   */


  CockroachQueryRunner.prototype.createCheckConstraint = function (tableOrName, checkConstraint) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, up, down;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a; // new unique constraint may be passed without name. In this case we generate unique name manually.

            if (!checkConstraint.name) checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression);
            up = this.createCheckConstraintSql(table, checkConstraint);
            down = this.dropCheckConstraintSql(table, checkConstraint);
            return [4
            /*yield*/
            , this.executeQueries(up, down)];

          case 4:
            _b.sent();

            table.addCheckConstraint(checkConstraint);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates new check constraints.
   */


  CockroachQueryRunner.prototype.createCheckConstraints = function (tableOrName, checkConstraints) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var promises;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            promises = checkConstraints.map(function (checkConstraint) {
              return _this.createCheckConstraint(tableOrName, checkConstraint);
            });
            return [4
            /*yield*/
            , Promise.all(promises)];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops check constraint.
   */


  CockroachQueryRunner.prototype.dropCheckConstraint = function (tableOrName, checkOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, checkConstraint, up, down;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            checkConstraint = checkOrName instanceof _schema_builder_table_TableCheck__WEBPACK_IMPORTED_MODULE_16__["TableCheck"] ? checkOrName : table.checks.find(function (c) {
              return c.name === checkOrName;
            });
            if (!checkConstraint) throw new Error("Supplied check constraint was not found in table " + table.name);
            up = this.dropCheckConstraintSql(table, checkConstraint);
            down = this.createCheckConstraintSql(table, checkConstraint);
            return [4
            /*yield*/
            , this.executeQueries(up, down)];

          case 4:
            _b.sent();

            table.removeCheckConstraint(checkConstraint);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops check constraints.
   */


  CockroachQueryRunner.prototype.dropCheckConstraints = function (tableOrName, checkConstraints) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var promises;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            promises = checkConstraints.map(function (checkConstraint) {
              return _this.dropCheckConstraint(tableOrName, checkConstraint);
            });
            return [4
            /*yield*/
            , Promise.all(promises)];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates new exclusion constraint.
   */


  CockroachQueryRunner.prototype.createExclusionConstraint = function (tableOrName, exclusionConstraint) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("CockroachDB does not support exclusion constraints.");
      });
    });
  };
  /**
   * Creates new exclusion constraints.
   */


  CockroachQueryRunner.prototype.createExclusionConstraints = function (tableOrName, exclusionConstraints) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("CockroachDB does not support exclusion constraints.");
      });
    });
  };
  /**
   * Drops exclusion constraint.
   */


  CockroachQueryRunner.prototype.dropExclusionConstraint = function (tableOrName, exclusionOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("CockroachDB does not support exclusion constraints.");
      });
    });
  };
  /**
   * Drops exclusion constraints.
   */


  CockroachQueryRunner.prototype.dropExclusionConstraints = function (tableOrName, exclusionConstraints) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("CockroachDB does not support exclusion constraints.");
      });
    });
  };
  /**
   * Creates a new foreign key.
   */


  CockroachQueryRunner.prototype.createForeignKey = function (tableOrName, foreignKey) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, up, down;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a; // new FK may be passed without name. In this case we generate FK name manually.

            if (!foreignKey.name) foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);
            up = this.createForeignKeySql(table, foreignKey);
            down = this.dropForeignKeySql(table, foreignKey);
            return [4
            /*yield*/
            , this.executeQueries(up, down)];

          case 4:
            _b.sent();

            table.addForeignKey(foreignKey);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new foreign keys.
   */


  CockroachQueryRunner.prototype.createForeignKeys = function (tableOrName, foreignKeys) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , ___WEBPACK_IMPORTED_MODULE_15__["PromiseUtils"].runInSequence(foreignKeys, function (foreignKey) {
              return _this.createForeignKey(tableOrName, foreignKey);
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops a foreign key from the table.
   */


  CockroachQueryRunner.prototype.dropForeignKey = function (tableOrName, foreignKeyOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, foreignKey, up, down;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            foreignKey = foreignKeyOrName instanceof _schema_builder_table_TableForeignKey__WEBPACK_IMPORTED_MODULE_6__["TableForeignKey"] ? foreignKeyOrName : table.foreignKeys.find(function (fk) {
              return fk.name === foreignKeyOrName;
            });
            if (!foreignKey) throw new Error("Supplied foreign key was not found in table " + table.name);
            up = this.dropForeignKeySql(table, foreignKey);
            down = this.createForeignKeySql(table, foreignKey);
            return [4
            /*yield*/
            , this.executeQueries(up, down)];

          case 4:
            _b.sent();

            table.removeForeignKey(foreignKey);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops a foreign keys from the table.
   */


  CockroachQueryRunner.prototype.dropForeignKeys = function (tableOrName, foreignKeys) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , ___WEBPACK_IMPORTED_MODULE_15__["PromiseUtils"].runInSequence(foreignKeys, function (foreignKey) {
              return _this.dropForeignKey(tableOrName, foreignKey);
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new index.
   */


  CockroachQueryRunner.prototype.createIndex = function (tableOrName, index) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, unique, up, down, up, down;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a; // new index may be passed without name. In this case we generate index name manually.

            if (!index.name) index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);
            if (!index.isUnique) return [3
            /*break*/
            , 5];
            unique = new _schema_builder_table_TableUnique__WEBPACK_IMPORTED_MODULE_12__["TableUnique"]({
              name: index.name,
              columnNames: index.columnNames
            });
            up = this.createUniqueConstraintSql(table, unique);
            down = this.dropIndexSql(table, unique);
            return [4
            /*yield*/
            , this.executeQueries(up, down)];

          case 4:
            _b.sent();

            table.addUniqueConstraint(unique);
            return [3
            /*break*/
            , 7];

          case 5:
            up = this.createIndexSql(table, index);
            down = this.dropIndexSql(table, index);
            return [4
            /*yield*/
            , this.executeQueries(up, down)];

          case 6:
            _b.sent();

            table.addIndex(index);
            _b.label = 7;

          case 7:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new indices
   */


  CockroachQueryRunner.prototype.createIndices = function (tableOrName, indices) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , ___WEBPACK_IMPORTED_MODULE_15__["PromiseUtils"].runInSequence(indices, function (index) {
              return _this.createIndex(tableOrName, index);
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops an index from the table.
   */


  CockroachQueryRunner.prototype.dropIndex = function (tableOrName, indexOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, index, up, down;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            index = indexOrName instanceof _schema_builder_table_TableIndex__WEBPACK_IMPORTED_MODULE_5__["TableIndex"] ? indexOrName : table.indices.find(function (i) {
              return i.name === indexOrName;
            });
            if (!index) throw new Error("Supplied index was not found in table " + table.name);
            up = this.dropIndexSql(table, index);
            down = this.createIndexSql(table, index);
            return [4
            /*yield*/
            , this.executeQueries(up, down)];

          case 4:
            _b.sent();

            table.removeIndex(index);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops an indices from the table.
   */


  CockroachQueryRunner.prototype.dropIndices = function (tableOrName, indices) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , ___WEBPACK_IMPORTED_MODULE_15__["PromiseUtils"].runInSequence(indices, function (index) {
              return _this.dropIndex(tableOrName, index);
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Clears all table contents.
   * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.
   */


  CockroachQueryRunner.prototype.clearTable = function (tableName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.query("TRUNCATE TABLE " + this.escapePath(tableName))];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Removes all tables from the currently connected database.
   */


  CockroachQueryRunner.prototype.clearDatabase = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var schemas, schemaNamesString, selectViewDropsQuery, dropViewQueries, selectDropsQuery, dropQueries, selectSequenceDropsQuery, sequenceDropQueries, error_1, rollbackError_1;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            schemas = [];
            this.connection.entityMetadatas.filter(function (metadata) {
              return metadata.schema;
            }).forEach(function (metadata) {
              var isSchemaExist = !!schemas.find(function (schema) {
                return schema === metadata.schema;
              });
              if (!isSchemaExist) schemas.push(metadata.schema);
            });
            schemas.push(this.driver.options.schema || "current_schema()");
            schemaNamesString = schemas.map(function (name) {
              return name === "current_schema()" ? name : "'" + name + "'";
            }).join(", ");
            return [4
            /*yield*/
            , this.startTransaction()];

          case 1:
            _a.sent();

            _a.label = 2;

          case 2:
            _a.trys.push([2, 10,, 15]);

            selectViewDropsQuery = "SELECT 'DROP VIEW IF EXISTS \"' || schemaname || '\".\"' || viewname || '\" CASCADE;' as \"query\" " + ("FROM \"pg_views\" WHERE \"schemaname\" IN (" + schemaNamesString + ")");
            return [4
            /*yield*/
            , this.query(selectViewDropsQuery)];

          case 3:
            dropViewQueries = _a.sent();
            return [4
            /*yield*/
            , Promise.all(dropViewQueries.map(function (q) {
              return _this.query(q["query"]);
            }))];

          case 4:
            _a.sent();

            selectDropsQuery = "SELECT 'DROP TABLE IF EXISTS \"' || table_schema || '\".\"' || table_name || '\" CASCADE;' as \"query\" FROM \"information_schema\".\"tables\" WHERE \"table_schema\" IN (" + schemaNamesString + ")";
            return [4
            /*yield*/
            , this.query(selectDropsQuery)];

          case 5:
            dropQueries = _a.sent();
            return [4
            /*yield*/
            , Promise.all(dropQueries.map(function (q) {
              return _this.query(q["query"]);
            }))];

          case 6:
            _a.sent();

            selectSequenceDropsQuery = "SELECT 'DROP SEQUENCE \"' || sequence_schema || '\".\"' || sequence_name || '\";' as \"query\" FROM \"information_schema\".\"sequences\" WHERE \"sequence_schema\" IN (" + schemaNamesString + ")";
            return [4
            /*yield*/
            , this.query(selectSequenceDropsQuery)];

          case 7:
            sequenceDropQueries = _a.sent();
            return [4
            /*yield*/
            , Promise.all(sequenceDropQueries.map(function (q) {
              return _this.query(q["query"]);
            }))];

          case 8:
            _a.sent();

            return [4
            /*yield*/
            , this.commitTransaction()];

          case 9:
            _a.sent();

            return [3
            /*break*/
            , 15];

          case 10:
            error_1 = _a.sent();
            _a.label = 11;

          case 11:
            _a.trys.push([11, 13,, 14]);

            return [4
            /*yield*/
            , this.rollbackTransaction()];

          case 12:
            _a.sent();

            return [3
            /*break*/
            , 14];

          case 13:
            rollbackError_1 = _a.sent();
            return [3
            /*break*/
            , 14];

          case 14:
            throw error_1;

          case 15:
            return [2
            /*return*/
            ];
        }
      });
    });
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------


  CockroachQueryRunner.prototype.loadViews = function (viewNames) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var hasTable, currentSchemaQuery, currentSchema, viewsCondition, query, dbViews;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.hasTable(this.getTypeormMetadataTableName())];

          case 1:
            hasTable = _a.sent();
            if (!hasTable) return [2
            /*return*/
            , Promise.resolve([])];
            return [4
            /*yield*/
            , this.query("SELECT * FROM current_schema()")];

          case 2:
            currentSchemaQuery = _a.sent();
            currentSchema = currentSchemaQuery[0]["current_schema"];
            viewsCondition = viewNames.map(function (viewName) {
              var _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](viewName.split("."), 2),
                  schema = _a[0],
                  name = _a[1];

              if (!name) {
                name = schema;
                schema = _this.driver.options.schema || currentSchema;
              }

              return "(\"t\".\"schema\" = '" + schema + "' AND \"t\".\"name\" = '" + name + "')";
            }).join(" OR ");
            query = "SELECT \"t\".*, \"v\".\"check_option\" FROM " + this.escapePath(this.getTypeormMetadataTableName()) + " \"t\" " + ("INNER JOIN \"information_schema\".\"views\" \"v\" ON \"v\".\"table_schema\" = \"t\".\"schema\" AND \"v\".\"table_name\" = \"t\".\"name\" WHERE \"t\".\"type\" = 'VIEW' " + (viewsCondition ? "AND (" + viewsCondition + ")" : ""));
            return [4
            /*yield*/
            , this.query(query)];

          case 3:
            dbViews = _a.sent();
            return [2
            /*return*/
            , dbViews.map(function (dbView) {
              var view = new _schema_builder_view_View__WEBPACK_IMPORTED_MODULE_8__["View"]();
              var schema = dbView["schema"] === currentSchema && !_this.driver.options.schema ? undefined : dbView["schema"];
              view.name = _this.driver.buildTableName(dbView["name"], schema);
              view.expression = dbView["value"];
              return view;
            })];
        }
      });
    });
  };
  /**
   * Loads all tables (with given names) from the database and creates a Table from them.
   */


  CockroachQueryRunner.prototype.loadTables = function (tableNames) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var currentSchemaQuery, currentSchema, tablesCondition, tablesSql, columnsSql, constraintsCondition, constraintsSql, indicesSql, foreignKeysCondition, foreignKeysSql, _a, dbTables, dbColumns, dbConstraints, dbIndices, dbForeignKeys;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            // if no tables given then no need to proceed
            if (!tableNames || !tableNames.length) return [2
            /*return*/
            , []];
            return [4
            /*yield*/
            , this.query("SELECT * FROM current_schema()")];

          case 1:
            currentSchemaQuery = _b.sent();
            currentSchema = currentSchemaQuery[0]["current_schema"];
            tablesCondition = tableNames.map(function (tableName) {
              var _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](tableName.split("."), 2),
                  schema = _a[0],
                  name = _a[1];

              if (!name) {
                name = schema;
                schema = _this.driver.options.schema || currentSchema;
              }

              return "(\"table_schema\" = '" + schema + "' AND \"table_name\" = '" + name + "')";
            }).join(" OR ");
            tablesSql = "SELECT * FROM \"information_schema\".\"tables\" WHERE " + tablesCondition;
            columnsSql = "SELECT * FROM \"information_schema\".\"columns\" WHERE \"is_hidden\" = 'NO' AND " + tablesCondition;
            constraintsCondition = tableNames.map(function (tableName) {
              var _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](tableName.split("."), 2),
                  schema = _a[0],
                  name = _a[1];

              if (!name) {
                name = schema;
                schema = _this.driver.options.schema || currentSchema;
              }

              return "(\"ns\".\"nspname\" = '" + schema + "' AND \"t\".\"relname\" = '" + name + "')";
            }).join(" OR ");
            constraintsSql = "SELECT \"ns\".\"nspname\" AS \"table_schema\", \"t\".\"relname\" AS \"table_name\", \"cnst\".\"conname\" AS \"constraint_name\", " + "pg_get_constraintdef(\"cnst\".\"oid\") AS \"expression\", " + "CASE \"cnst\".\"contype\" WHEN 'p' THEN 'PRIMARY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' WHEN 'x' THEN 'EXCLUDE' END AS \"constraint_type\", \"a\".\"attname\" AS \"column_name\" " + "FROM \"pg_constraint\" \"cnst\" " + "INNER JOIN \"pg_class\" \"t\" ON \"t\".\"oid\" = \"cnst\".\"conrelid\" " + "INNER JOIN \"pg_namespace\" \"ns\" ON \"ns\".\"oid\" = \"cnst\".\"connamespace\" " + "LEFT JOIN \"pg_attribute\" \"a\" ON \"a\".\"attrelid\" = \"cnst\".\"conrelid\" AND \"a\".\"attnum\" = ANY (\"cnst\".\"conkey\") " + ("WHERE \"t\".\"relkind\" = 'r' AND (" + constraintsCondition + ")");
            indicesSql = "SELECT \"ns\".\"nspname\" AS \"table_schema\", \"t\".\"relname\" AS \"table_name\", \"i\".\"relname\" AS \"constraint_name\", \"a\".\"attname\" AS \"column_name\", " + "CASE \"ix\".\"indisunique\" WHEN 't' THEN 'TRUE' ELSE'FALSE' END AS \"is_unique\", pg_get_expr(\"ix\".\"indpred\", \"ix\".\"indrelid\") AS \"condition\", " + "\"types\".\"typname\" AS \"type_name\" " + "FROM \"pg_class\" \"t\" " + "INNER JOIN \"pg_index\" \"ix\" ON \"ix\".\"indrelid\" = \"t\".\"oid\" " + "INNER JOIN \"pg_attribute\" \"a\" ON \"a\".\"attrelid\" = \"t\".\"oid\"  AND \"a\".\"attnum\" = ANY (\"ix\".\"indkey\") " + "INNER JOIN \"pg_namespace\" \"ns\" ON \"ns\".\"oid\" = \"t\".\"relnamespace\" " + "INNER JOIN \"pg_class\" \"i\" ON \"i\".\"oid\" = \"ix\".\"indexrelid\" " + "INNER JOIN \"pg_type\" \"types\" ON \"types\".\"oid\" = \"a\".\"atttypid\" " + "LEFT JOIN \"pg_constraint\" \"cnst\" ON \"cnst\".\"conname\" = \"i\".\"relname\" " + ("WHERE \"t\".\"relkind\" = 'r' AND \"cnst\".\"contype\" IS NULL AND (" + constraintsCondition + ")");
            foreignKeysCondition = tableNames.map(function (tableName) {
              var _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](tableName.split("."), 2),
                  schema = _a[0],
                  name = _a[1];

              if (!name) {
                name = schema;
                schema = _this.driver.options.schema || currentSchema;
              }

              return "(\"ns\".\"nspname\" = '" + schema + "' AND \"cl\".\"relname\" = '" + name + "')";
            }).join(" OR ");
            foreignKeysSql = "SELECT \"con\".\"conname\" AS \"constraint_name\", \"con\".\"nspname\" AS \"table_schema\", \"con\".\"relname\" AS \"table_name\", \"att2\".\"attname\" AS \"column_name\", " + "\"ns\".\"nspname\" AS \"referenced_table_schema\", \"cl\".\"relname\" AS \"referenced_table_name\", \"att\".\"attname\" AS \"referenced_column_name\", \"con\".\"confdeltype\" AS \"on_delete\", \"con\".\"confupdtype\" AS \"on_update\" " + "FROM ( " + "SELECT UNNEST (\"con1\".\"conkey\") AS \"parent\", UNNEST (\"con1\".\"confkey\") AS \"child\", \"con1\".\"confrelid\", \"con1\".\"conrelid\", \"con1\".\"conname\", \"con1\".\"contype\", \"ns\".\"nspname\", \"cl\".\"relname\", " + "CASE \"con1\".\"confdeltype\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \"confdeltype\", " + "CASE \"con1\".\"confupdtype\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \"confupdtype\" " + "FROM \"pg_class\" \"cl\" " + "INNER JOIN \"pg_namespace\" \"ns\" ON \"cl\".\"relnamespace\" = \"ns\".\"oid\" " + "INNER JOIN \"pg_constraint\" \"con1\" ON \"con1\".\"conrelid\" = \"cl\".\"oid\" " + ("WHERE \"con1\".\"contype\" = 'f' AND (" + foreignKeysCondition + ") ") + ") \"con\" " + "INNER JOIN \"pg_attribute\" \"att\" ON \"att\".\"attrelid\" = \"con\".\"confrelid\" AND \"att\".\"attnum\" = \"con\".\"child\" " + "INNER JOIN \"pg_class\" \"cl\" ON \"cl\".\"oid\" = \"con\".\"confrelid\" " + "INNER JOIN \"pg_namespace\" \"ns\" ON \"cl\".\"relnamespace\" = \"ns\".\"oid\" " + "INNER JOIN \"pg_attribute\" \"att2\" ON \"att2\".\"attrelid\" = \"con\".\"conrelid\" AND \"att2\".\"attnum\" = \"con\".\"parent\"";
            return [4
            /*yield*/
            , Promise.all([this.query(tablesSql), this.query(columnsSql), this.query(constraintsSql), this.query(indicesSql), this.query(foreignKeysSql)])];

          case 2:
            _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"].apply(void 0, [_b.sent(), 5]), dbTables = _a[0], dbColumns = _a[1], dbConstraints = _a[2], dbIndices = _a[3], dbForeignKeys = _a[4]; // if tables were not found in the db, no need to proceed

            if (!dbTables.length) return [2
            /*return*/
            , []]; // create tables for loaded tables

            return [2
            /*return*/
            , Promise.all(dbTables.map(function (dbTable) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var table, schema, tableFullName, _a, tableUniqueConstraints, tableCheckConstraints, tableExclusionConstraints, tableForeignKeyConstraints, tableIndexConstraints;

                var _this = this;

                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
                  switch (_b.label) {
                    case 0:
                      table = new _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"]();
                      schema = dbTable["table_schema"] === currentSchema && !this.driver.options.schema ? undefined : dbTable["table_schema"];
                      table.name = this.driver.buildTableName(dbTable["table_name"], schema);
                      tableFullName = this.driver.buildTableName(dbTable["table_name"], dbTable["table_schema"]); // create columns from the loaded columns

                      _a = table;
                      return [4
                      /*yield*/
                      , Promise.all(dbColumns.filter(function (dbColumn) {
                        return _this.driver.buildTableName(dbColumn["table_name"], dbColumn["table_schema"]) === tableFullName;
                      }).map(function (dbColumn) {
                        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                          var columnConstraints, tableColumn, type, length_1, uniqueConstraint, isConstraintComposite;

                          var _this = this;

                          return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                            columnConstraints = dbConstraints.filter(function (dbConstraint) {
                              return _this.driver.buildTableName(dbConstraint["table_name"], dbConstraint["table_schema"]) === tableFullName && dbConstraint["column_name"] === dbColumn["column_name"];
                            });
                            tableColumn = new _schema_builder_table_TableColumn__WEBPACK_IMPORTED_MODULE_3__["TableColumn"]();
                            tableColumn.name = dbColumn["column_name"];
                            tableColumn.type = dbColumn["crdb_sql_type"].toLowerCase();

                            if (dbColumn["crdb_sql_type"].indexOf("COLLATE") !== -1) {
                              tableColumn.collation = dbColumn["crdb_sql_type"].substr(dbColumn["crdb_sql_type"].indexOf("COLLATE") + "COLLATE".length + 1, dbColumn["crdb_sql_type"].length);
                              tableColumn.type = tableColumn.type.substr(0, dbColumn["crdb_sql_type"].indexOf("COLLATE") - 1);
                            }

                            if (tableColumn.type.indexOf("(") !== -1) tableColumn.type = tableColumn.type.substr(0, tableColumn.type.indexOf("("));

                            if (tableColumn.type === "numeric" || tableColumn.type === "decimal") {
                              if (dbColumn["numeric_precision"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn["numeric_precision"])) {
                                tableColumn.precision = parseInt(dbColumn["numeric_precision"]);
                              } else if (dbColumn["numeric_scale"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn["numeric_scale"])) {
                                tableColumn.precision = undefined;
                              }

                              if (dbColumn["numeric_scale"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn["numeric_scale"])) {
                                tableColumn.scale = parseInt(dbColumn["numeric_scale"]);
                              } else if (dbColumn["numeric_precision"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn["numeric_precision"])) {
                                tableColumn.scale = undefined;
                              }
                            }

                            if (dbColumn["data_type"].toLowerCase() === "array") {
                              tableColumn.isArray = true;
                              type = dbColumn["crdb_sql_type"].replace("[]", "").toLowerCase();
                              tableColumn.type = this.connection.driver.normalizeType({
                                type: type
                              });
                            } // check only columns that have length property


                            if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1 && dbColumn["character_maximum_length"]) {
                              length_1 = dbColumn["character_maximum_length"].toString();
                              tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length_1) ? length_1 : "";
                            }

                            tableColumn.isNullable = dbColumn["is_nullable"] === "YES";
                            tableColumn.isPrimary = !!columnConstraints.find(function (constraint) {
                              return constraint["constraint_type"] === "PRIMARY";
                            });
                            uniqueConstraint = columnConstraints.find(function (constraint) {
                              return constraint["constraint_type"] === "UNIQUE";
                            });
                            isConstraintComposite = uniqueConstraint ? !!dbConstraints.find(function (dbConstraint) {
                              return dbConstraint["constraint_type"] === "UNIQUE" && dbConstraint["constraint_name"] === uniqueConstraint["constraint_name"] && dbConstraint["column_name"] !== dbColumn["column_name"];
                            }) : false;
                            tableColumn.isUnique = !!uniqueConstraint && !isConstraintComposite;

                            if (dbColumn["column_default"] !== null && dbColumn["column_default"] !== undefined) {
                              if (dbColumn["column_default"] === "unique_rowid()") {
                                tableColumn.isGenerated = true;
                                tableColumn.generationStrategy = "rowid";
                              } else if (dbColumn["column_default"].indexOf("nextval") !== -1) {
                                tableColumn.isGenerated = true;
                                tableColumn.generationStrategy = "increment";
                              } else if (dbColumn["column_default"] === "gen_random_uuid()") {
                                tableColumn.isGenerated = true;
                                tableColumn.generationStrategy = "uuid";
                              } else {
                                tableColumn["default"] = dbColumn["column_default"].replace(/:::.*/, "");
                              }
                            }

                            tableColumn.comment = ""; // dbColumn["COLUMN_COMMENT"];

                            if (dbColumn["character_set_name"]) tableColumn.charset = dbColumn["character_set_name"];
                            return [2
                            /*return*/
                            , tableColumn];
                          });
                        });
                      }))];

                    case 1:
                      // create columns from the loaded columns
                      _a.columns = _b.sent();
                      tableUniqueConstraints = _util_OrmUtils__WEBPACK_IMPORTED_MODULE_14__["OrmUtils"].uniq(dbConstraints.filter(function (dbConstraint) {
                        return _this.driver.buildTableName(dbConstraint["table_name"], dbConstraint["table_schema"]) === tableFullName && dbConstraint["constraint_type"] === "UNIQUE";
                      }), function (dbConstraint) {
                        return dbConstraint["constraint_name"];
                      });
                      table.uniques = tableUniqueConstraints.map(function (constraint) {
                        var uniques = dbConstraints.filter(function (dbC) {
                          return dbC["constraint_name"] === constraint["constraint_name"];
                        });
                        return new _schema_builder_table_TableUnique__WEBPACK_IMPORTED_MODULE_12__["TableUnique"]({
                          name: constraint["constraint_name"],
                          columnNames: uniques.map(function (u) {
                            return u["column_name"];
                          })
                        });
                      });
                      tableCheckConstraints = _util_OrmUtils__WEBPACK_IMPORTED_MODULE_14__["OrmUtils"].uniq(dbConstraints.filter(function (dbConstraint) {
                        return _this.driver.buildTableName(dbConstraint["table_name"], dbConstraint["table_schema"]) === tableFullName && dbConstraint["constraint_type"] === "CHECK";
                      }), function (dbConstraint) {
                        return dbConstraint["constraint_name"];
                      });
                      table.checks = tableCheckConstraints.map(function (constraint) {
                        var checks = dbConstraints.filter(function (dbC) {
                          return dbC["constraint_name"] === constraint["constraint_name"];
                        });
                        return new _schema_builder_table_TableCheck__WEBPACK_IMPORTED_MODULE_16__["TableCheck"]({
                          name: constraint["constraint_name"],
                          columnNames: checks.map(function (c) {
                            return c["column_name"];
                          }),
                          expression: constraint["expression"].replace(/^\s*CHECK\s*\((.*)\)\s*$/i, "$1")
                        });
                      });
                      tableExclusionConstraints = _util_OrmUtils__WEBPACK_IMPORTED_MODULE_14__["OrmUtils"].uniq(dbConstraints.filter(function (dbConstraint) {
                        return _this.driver.buildTableName(dbConstraint["table_name"], dbConstraint["table_schema"]) === tableFullName && dbConstraint["constraint_type"] === "EXCLUDE";
                      }), function (dbConstraint) {
                        return dbConstraint["constraint_name"];
                      });
                      table.exclusions = tableExclusionConstraints.map(function (constraint) {
                        return new _schema_builder_table_TableExclusion__WEBPACK_IMPORTED_MODULE_17__["TableExclusion"]({
                          name: constraint["constraint_name"],
                          expression: constraint["expression"].substring(8) // trim EXCLUDE from start of expression

                        });
                      });
                      tableForeignKeyConstraints = _util_OrmUtils__WEBPACK_IMPORTED_MODULE_14__["OrmUtils"].uniq(dbForeignKeys.filter(function (dbForeignKey) {
                        return _this.driver.buildTableName(dbForeignKey["table_name"], dbForeignKey["table_schema"]) === tableFullName;
                      }), function (dbForeignKey) {
                        return dbForeignKey["constraint_name"];
                      });
                      table.foreignKeys = tableForeignKeyConstraints.map(function (dbForeignKey) {
                        var foreignKeys = dbForeignKeys.filter(function (dbFk) {
                          return dbFk["constraint_name"] === dbForeignKey["constraint_name"];
                        }); // if referenced table located in currently used schema, we don't need to concat schema name to table name.

                        var schema = dbForeignKey["referenced_table_schema"] === currentSchema ? undefined : dbForeignKey["referenced_table_schema"];

                        var referencedTableName = _this.driver.buildTableName(dbForeignKey["referenced_table_name"], schema);

                        return new _schema_builder_table_TableForeignKey__WEBPACK_IMPORTED_MODULE_6__["TableForeignKey"]({
                          name: dbForeignKey["constraint_name"],
                          columnNames: foreignKeys.map(function (dbFk) {
                            return dbFk["column_name"];
                          }),
                          referencedTableName: referencedTableName,
                          referencedColumnNames: foreignKeys.map(function (dbFk) {
                            return dbFk["referenced_column_name"];
                          }),
                          onDelete: dbForeignKey["on_delete"],
                          onUpdate: dbForeignKey["on_update"]
                        });
                      });
                      tableIndexConstraints = _util_OrmUtils__WEBPACK_IMPORTED_MODULE_14__["OrmUtils"].uniq(dbIndices.filter(function (dbIndex) {
                        return _this.driver.buildTableName(dbIndex["table_name"], dbIndex["table_schema"]) === tableFullName;
                      }), function (dbIndex) {
                        return dbIndex["constraint_name"];
                      });
                      table.indices = tableIndexConstraints.map(function (constraint) {
                        var indices = dbIndices.filter(function (index) {
                          return index["constraint_name"] === constraint["constraint_name"];
                        });
                        return new _schema_builder_table_TableIndex__WEBPACK_IMPORTED_MODULE_5__["TableIndex"]({
                          table: table,
                          name: constraint["constraint_name"],
                          columnNames: indices.map(function (i) {
                            return i["column_name"];
                          }),
                          isUnique: constraint["is_unique"] === "TRUE",
                          where: constraint["condition"],
                          isSpatial: indices.every(function (i) {
                            return _this.driver.spatialTypes.indexOf(i["type_name"]) >= 0;
                          }),
                          isFulltext: false
                        });
                      });
                      return [2
                      /*return*/
                      , table];
                  }
                });
              });
            }))];
        }
      });
    });
  };
  /**
   * Builds create table sql.
   */


  CockroachQueryRunner.prototype.createTableSql = function (table, createForeignKeys) {
    var _this = this;

    var columnDefinitions = table.columns.map(function (column) {
      return _this.buildCreateColumnSql(table, column);
    }).join(", ");
    var sql = "CREATE TABLE " + this.escapePath(table) + " (" + columnDefinitions;
    table.columns.filter(function (column) {
      return column.isUnique;
    }).forEach(function (column) {
      var isUniqueExist = table.uniques.some(function (unique) {
        return unique.columnNames.length === 1 && unique.columnNames[0] === column.name;
      });
      if (!isUniqueExist) table.uniques.push(new _schema_builder_table_TableUnique__WEBPACK_IMPORTED_MODULE_12__["TableUnique"]({
        name: _this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),
        columnNames: [column.name]
      }));
    });
    table.indices.filter(function (index) {
      return index.isUnique;
    }).forEach(function (index) {
      table.uniques.push(new _schema_builder_table_TableUnique__WEBPACK_IMPORTED_MODULE_12__["TableUnique"]({
        name: _this.connection.namingStrategy.uniqueConstraintName(table.name, index.columnNames),
        columnNames: index.columnNames
      }));
    });

    if (table.uniques.length > 0) {
      var uniquesSql = table.uniques.map(function (unique) {
        var uniqueName = unique.name ? unique.name : _this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);
        var columnNames = unique.columnNames.map(function (columnName) {
          return "\"" + columnName + "\"";
        }).join(", ");
        return "CONSTRAINT \"" + uniqueName + "\" UNIQUE (" + columnNames + ")";
      }).join(", ");
      sql += ", " + uniquesSql;
    }

    if (table.checks.length > 0) {
      var checksSql = table.checks.map(function (check) {
        var checkName = check.name ? check.name : _this.connection.namingStrategy.checkConstraintName(table.name, check.expression);
        return "CONSTRAINT \"" + checkName + "\" CHECK (" + check.expression + ")";
      }).join(", ");
      sql += ", " + checksSql;
    }

    if (table.foreignKeys.length > 0 && createForeignKeys) {
      var foreignKeysSql = table.foreignKeys.map(function (fk) {
        var columnNames = fk.columnNames.map(function (columnName) {
          return "\"" + columnName + "\"";
        }).join(", ");
        if (!fk.name) fk.name = _this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);
        var referencedColumnNames = fk.referencedColumnNames.map(function (columnName) {
          return "\"" + columnName + "\"";
        }).join(", ");
        var constraint = "CONSTRAINT \"" + fk.name + "\" FOREIGN KEY (" + columnNames + ") REFERENCES " + _this.escapePath(fk.referencedTableName) + " (" + referencedColumnNames + ")";
        if (fk.onDelete) constraint += " ON DELETE " + fk.onDelete;
        if (fk.onUpdate) constraint += " ON UPDATE " + fk.onUpdate;
        return constraint;
      }).join(", ");
      sql += ", " + foreignKeysSql;
    }

    var primaryColumns = table.columns.filter(function (column) {
      return column.isPrimary;
    });

    if (primaryColumns.length > 0) {
      var primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(function (column) {
        return column.name;
      }));
      var columnNames = primaryColumns.map(function (column) {
        return "\"" + column.name + "\"";
      }).join(", ");
      sql += ", CONSTRAINT \"" + primaryKeyName + "\" PRIMARY KEY (" + columnNames + ")";
    }

    sql += ")";
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](sql);
  };
  /**
   * Extracts schema name from given Table object or table name string.
   */


  CockroachQueryRunner.prototype.extractSchema = function (target) {
    var tableName = target instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"] ? target.name : target;
    return tableName.indexOf(".") === -1 ? this.driver.options.schema : tableName.split(".")[0];
  };
  /**
   * Builds drop table sql.
   */


  CockroachQueryRunner.prototype.dropTableSql = function (tableOrPath) {
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("DROP TABLE " + this.escapePath(tableOrPath));
  };

  CockroachQueryRunner.prototype.createViewSql = function (view) {
    if (typeof view.expression === "string") {
      return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("CREATE VIEW " + this.escapePath(view) + " AS " + view.expression);
    } else {
      return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("CREATE VIEW " + this.escapePath(view) + " AS " + view.expression(this.connection).getQuery());
    }
  };

  CockroachQueryRunner.prototype.insertViewDefinitionSql = function (view) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var currentSchemaQuery, currentSchema, splittedName, schema, name, expression, _a, query, parameters;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            return [4
            /*yield*/
            , this.query("SELECT * FROM current_schema()")];

          case 1:
            currentSchemaQuery = _b.sent();
            currentSchema = currentSchemaQuery[0]["current_schema"];
            splittedName = view.name.split(".");
            schema = this.driver.options.schema || currentSchema;
            name = view.name;

            if (splittedName.length === 2) {
              schema = splittedName[0];
              name = splittedName[1];
            }

            expression = typeof view.expression === "string" ? view.expression.trim() : view.expression(this.connection).getQuery();
            _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](this.connection.createQueryBuilder().insert().into(this.getTypeormMetadataTableName()).values({
              type: "VIEW",
              schema: schema,
              name: name,
              value: expression
            }).getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];
            return [2
            /*return*/
            , new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](query, parameters)];
        }
      });
    });
  };
  /**
   * Builds drop view sql.
   */


  CockroachQueryRunner.prototype.dropViewSql = function (viewOrPath) {
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("DROP VIEW " + this.escapePath(viewOrPath));
  };
  /**
   * Builds remove view sql.
   */


  CockroachQueryRunner.prototype.deleteViewDefinitionSql = function (viewOrPath) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var currentSchemaQuery, currentSchema, viewName, splittedName, schema, name, qb, _a, query, parameters;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            return [4
            /*yield*/
            , this.query("SELECT * FROM current_schema()")];

          case 1:
            currentSchemaQuery = _b.sent();
            currentSchema = currentSchemaQuery[0]["current_schema"];
            viewName = viewOrPath instanceof _schema_builder_view_View__WEBPACK_IMPORTED_MODULE_8__["View"] ? viewOrPath.name : viewOrPath;
            splittedName = viewName.split(".");
            schema = this.driver.options.schema || currentSchema;
            name = viewName;

            if (splittedName.length === 2) {
              schema = splittedName[0];
              name = splittedName[1];
            }

            qb = this.connection.createQueryBuilder();
            _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](qb["delete"]().from(this.getTypeormMetadataTableName()).where(qb.escape("type") + " = 'VIEW'").andWhere(qb.escape("schema") + " = :schema", {
              schema: schema
            }).andWhere(qb.escape("name") + " = :name", {
              name: name
            }).getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];
            return [2
            /*return*/
            , new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](query, parameters)];
        }
      });
    });
  };
  /**
   * Builds create index sql.
   * UNIQUE indices creates as UNIQUE constraints.
   */


  CockroachQueryRunner.prototype.createIndexSql = function (table, index) {
    var columns = index.columnNames.map(function (columnName) {
      return "\"" + columnName + "\"";
    }).join(", ");
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("CREATE INDEX \"" + index.name + "\" ON " + this.escapePath(table) + " (" + columns + ") " + (index.where ? "WHERE " + index.where : ""));
  };
  /**
   * Builds drop index sql.
   */


  CockroachQueryRunner.prototype.dropIndexSql = function (table, indexOrName) {
    var indexName = indexOrName instanceof _schema_builder_table_TableIndex__WEBPACK_IMPORTED_MODULE_5__["TableIndex"] || indexOrName instanceof _schema_builder_table_TableUnique__WEBPACK_IMPORTED_MODULE_12__["TableUnique"] ? indexOrName.name : indexOrName;
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("DROP INDEX " + this.escapePath(table) + "@\"" + indexName + "\" CASCADE");
  };
  /**
   * Builds create primary key sql.
   */


  CockroachQueryRunner.prototype.createPrimaryKeySql = function (table, columnNames) {
    var primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);
    var columnNamesString = columnNames.map(function (columnName) {
      return "\"" + columnName + "\"";
    }).join(", ");
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD CONSTRAINT \"" + primaryKeyName + "\" PRIMARY KEY (" + columnNamesString + ")");
  };
  /**
   * Builds drop primary key sql.
   */


  CockroachQueryRunner.prototype.dropPrimaryKeySql = function (table) {
    var columnNames = table.primaryColumns.map(function (column) {
      return column.name;
    });
    var primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP CONSTRAINT \"" + primaryKeyName + "\"");
  };
  /**
   * Builds create unique constraint sql.
   */


  CockroachQueryRunner.prototype.createUniqueConstraintSql = function (table, uniqueConstraint) {
    var columnNames = uniqueConstraint.columnNames.map(function (column) {
      return "\"" + column + "\"";
    }).join(", ");
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD CONSTRAINT \"" + uniqueConstraint.name + "\" UNIQUE (" + columnNames + ")");
  };
  /**
   * Builds drop unique constraint sql.
   */


  CockroachQueryRunner.prototype.dropUniqueConstraintSql = function (table, uniqueOrName) {
    var uniqueName = uniqueOrName instanceof _schema_builder_table_TableUnique__WEBPACK_IMPORTED_MODULE_12__["TableUnique"] ? uniqueOrName.name : uniqueOrName;
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP CONSTRAINT \"" + uniqueName + "\"");
  };
  /**
   * Builds create check constraint sql.
   */


  CockroachQueryRunner.prototype.createCheckConstraintSql = function (table, checkConstraint) {
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " ADD CONSTRAINT \"" + checkConstraint.name + "\" CHECK (" + checkConstraint.expression + ")");
  };
  /**
   * Builds drop check constraint sql.
   */


  CockroachQueryRunner.prototype.dropCheckConstraintSql = function (table, checkOrName) {
    var checkName = checkOrName instanceof _schema_builder_table_TableCheck__WEBPACK_IMPORTED_MODULE_16__["TableCheck"] ? checkOrName.name : checkOrName;
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP CONSTRAINT \"" + checkName + "\"");
  };
  /**
   * Builds create foreign key sql.
   */


  CockroachQueryRunner.prototype.createForeignKeySql = function (table, foreignKey) {
    var columnNames = foreignKey.columnNames.map(function (column) {
      return "\"" + column + "\"";
    }).join(", ");
    var referencedColumnNames = foreignKey.referencedColumnNames.map(function (column) {
      return "\"" + column + "\"";
    }).join(",");
    var sql = "ALTER TABLE " + this.escapePath(table) + " ADD CONSTRAINT \"" + foreignKey.name + "\" FOREIGN KEY (" + columnNames + ") " + ("REFERENCES " + this.escapePath(foreignKey.referencedTableName) + "(" + referencedColumnNames + ")");
    if (foreignKey.onDelete) sql += " ON DELETE " + foreignKey.onDelete;
    if (foreignKey.onUpdate) sql += " ON UPDATE " + foreignKey.onUpdate;
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](sql);
  };
  /**
   * Builds drop foreign key sql.
   */


  CockroachQueryRunner.prototype.dropForeignKeySql = function (table, foreignKeyOrName) {
    var foreignKeyName = foreignKeyOrName instanceof _schema_builder_table_TableForeignKey__WEBPACK_IMPORTED_MODULE_6__["TableForeignKey"] ? foreignKeyOrName.name : foreignKeyOrName;
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE " + this.escapePath(table) + " DROP CONSTRAINT \"" + foreignKeyName + "\"");
  };
  /**
   * Builds sequence name from given table and column.
   */


  CockroachQueryRunner.prototype.buildSequenceName = function (table, columnOrName, disableEscape) {
    var columnName = columnOrName instanceof _schema_builder_table_TableColumn__WEBPACK_IMPORTED_MODULE_3__["TableColumn"] ? columnOrName.name : columnOrName;
    return disableEscape ? table.name + "_" + columnName + "_seq" : "\"" + table.name + "_" + columnName + "_seq\"";
  };
  /**
   * Escapes given table or view path.
   */


  CockroachQueryRunner.prototype.escapePath = function (target, disableEscape) {
    var tableName = target instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"] || target instanceof _schema_builder_view_View__WEBPACK_IMPORTED_MODULE_8__["View"] ? target.name : target;
    tableName = tableName.indexOf(".") === -1 && this.driver.options.schema ? this.driver.options.schema + "." + tableName : tableName;
    return tableName.split(".").map(function (i) {
      return disableEscape ? i : "\"" + i + "\"";
    }).join(".");
  };
  /**
   * Returns object with table schema and table name.
   */


  CockroachQueryRunner.prototype.parseTableName = function (target) {
    var tableName = target instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_4__["Table"] ? target.name : target;

    if (tableName.indexOf(".") === -1) {
      return {
        schema: this.driver.options.schema ? "'" + this.driver.options.schema + "'" : "current_schema()",
        tableName: "'" + tableName + "'"
      };
    } else {
      return {
        schema: "'" + tableName.split(".")[0] + "'",
        tableName: "'" + tableName.split(".")[1] + "'"
      };
    }
  };
  /**
   * Builds a query for create column.
   */


  CockroachQueryRunner.prototype.buildCreateColumnSql = function (table, column) {
    var c = "\"" + column.name + "\"";

    if (column.isGenerated) {
      if (column.generationStrategy === "increment") {
        c += " INT DEFAULT nextval('" + this.buildSequenceName(table, column) + "')";
      } else if (column.generationStrategy === "rowid") {
        c += " INT DEFAULT unique_rowid()";
      } else if (column.generationStrategy === "uuid") {
        c += " UUID DEFAULT gen_random_uuid()";
      }
    }

    if (!column.isGenerated) c += " " + this.connection.driver.createFullType(column);
    if (column.charset) c += " CHARACTER SET \"" + column.charset + "\"";
    if (column.collation) c += " COLLATE \"" + column.collation + "\"";
    if (!column.isNullable) c += " NOT NULL";
    if (!column.isGenerated && column["default"] !== undefined && column["default"] !== null) c += " DEFAULT " + column["default"];
    return c;
  };

  return CockroachQueryRunner;
}(_query_runner_BaseQueryRunner__WEBPACK_IMPORTED_MODULE_13__["BaseQueryRunner"]);



/***/ }),

/***/ "./node_modules/typeorm/browser/driver/cordova/CordovaDriver.js":
/*!**********************************************************************!*\
  !*** ./node_modules/typeorm/browser/driver/cordova/CordovaDriver.js ***!
  \**********************************************************************/
/*! exports provided: CordovaDriver */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CordovaDriver", function() { return CordovaDriver; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sqlite-abstract/AbstractSqliteDriver */ "./node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteDriver.js");
/* harmony import */ var _CordovaQueryRunner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CordovaQueryRunner */ "./node_modules/typeorm/browser/driver/cordova/CordovaQueryRunner.js");
/* harmony import */ var _error_DriverOptionNotSetError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../error/DriverOptionNotSetError */ "./node_modules/typeorm/browser/error/DriverOptionNotSetError.js");
/* harmony import */ var _error_DriverPackageNotInstalledError__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../error/DriverPackageNotInstalledError */ "./node_modules/typeorm/browser/error/DriverPackageNotInstalledError.js");






var CordovaDriver =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](CordovaDriver, _super); // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------


  function CordovaDriver(connection) {
    var _this = _super.call(this, connection) || this; // this.connection = connection;
    // this.options = connection.options as CordovaConnectionOptions;


    _this.database = _this.options.database; // validate options to make sure everything is set

    if (!_this.options.database) throw new _error_DriverOptionNotSetError__WEBPACK_IMPORTED_MODULE_3__["DriverOptionNotSetError"]("database");
    if (!_this.options.location) throw new _error_DriverOptionNotSetError__WEBPACK_IMPORTED_MODULE_3__["DriverOptionNotSetError"]("location"); // load sqlite package

    _this.loadDependencies();

    return _this;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Closes connection with database.
   */


  CordovaDriver.prototype.disconnect = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , new Promise(function (ok, fail) {
          _this.queryRunner = undefined;

          _this.databaseConnection.close(ok, fail);
        })];
      });
    });
  };
  /**
   * Creates a query runner used to execute database queries.
   */


  CordovaDriver.prototype.createQueryRunner = function (mode) {
    if (mode === void 0) {
      mode = "master";
    }

    if (!this.queryRunner) this.queryRunner = new _CordovaQueryRunner__WEBPACK_IMPORTED_MODULE_2__["CordovaQueryRunner"](this);
    return this.queryRunner;
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Creates connection with the database.
   */


  CordovaDriver.prototype.createDatabaseConnection = function () {
    var _this = this;

    return new Promise(function (ok, fail) {
      var options = Object.assign({}, {
        name: _this.options.database,
        location: _this.options.location
      }, _this.options.extra || {});

      _this.sqlite.openDatabase(options, function (db) {
        var databaseConnection = db; // we need to enable foreign keys in sqlite to make sure all foreign key related features
        // working properly. this also makes onDelete to work with sqlite.

        databaseConnection.executeSql("PRAGMA foreign_keys = ON;", [], function (result) {
          ok(databaseConnection);
        }, function (error) {
          fail(error);
        });
      }, function (error) {
        fail(error);
      });
    });
  };
  /**
   * If driver dependency is not given explicitly, then try to load it via "require".
   */


  CordovaDriver.prototype.loadDependencies = function () {
    try {
      this.sqlite = window.sqlitePlugin;
    } catch (e) {
      throw new _error_DriverPackageNotInstalledError__WEBPACK_IMPORTED_MODULE_4__["DriverPackageNotInstalledError"]("Cordova-SQLite", "cordova-sqlite-storage");
    }
  };

  return CordovaDriver;
}(_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_1__["AbstractSqliteDriver"]);



/***/ }),

/***/ "./node_modules/typeorm/browser/driver/cordova/CordovaQueryRunner.js":
/*!***************************************************************************!*\
  !*** ./node_modules/typeorm/browser/driver/cordova/CordovaQueryRunner.js ***!
  \***************************************************************************/
/*! exports provided: CordovaQueryRunner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CordovaQueryRunner", function() { return CordovaQueryRunner; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _error_QueryRunnerAlreadyReleasedError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error/QueryRunnerAlreadyReleasedError */ "./node_modules/typeorm/browser/error/QueryRunnerAlreadyReleasedError.js");
/* harmony import */ var _error_QueryFailedError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../error/QueryFailedError */ "./node_modules/typeorm/browser/error/QueryFailedError.js");
/* harmony import */ var _sqlite_abstract_AbstractSqliteQueryRunner__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sqlite-abstract/AbstractSqliteQueryRunner */ "./node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteQueryRunner.js");
/* harmony import */ var _subscriber_Broadcaster__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../subscriber/Broadcaster */ "./node_modules/typeorm/browser/subscriber/Broadcaster.js");





/**
 * Runs queries on a single sqlite database connection.
 */

var CordovaQueryRunner =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](CordovaQueryRunner, _super); // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------


  function CordovaQueryRunner(driver) {
    var _this = _super.call(this) || this;

    _this.driver = driver;
    _this.connection = driver.connection;
    _this.broadcaster = new _subscriber_Broadcaster__WEBPACK_IMPORTED_MODULE_4__["Broadcaster"](_this);
    return _this;
  }
  /**
   * Executes a given SQL query.
   */


  CordovaQueryRunner.prototype.query = function (query, parameters) {
    var _this = this;

    if (this.isReleased) throw new _error_QueryRunnerAlreadyReleasedError__WEBPACK_IMPORTED_MODULE_1__["QueryRunnerAlreadyReleasedError"]();
    return new Promise(function (ok, fail) {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
        var databaseConnection, queryStartTime;

        var _this = this;

        return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4
              /*yield*/
              , this.connect()];

            case 1:
              databaseConnection = _a.sent();
              this.driver.connection.logger.logQuery(query, parameters, this);
              queryStartTime = +new Date();
              databaseConnection.executeSql(query, parameters, function (result) {
                // log slow queries if maxQueryExecution time is set
                var maxQueryExecutionTime = _this.driver.connection.options.maxQueryExecutionTime;
                var queryEndTime = +new Date();
                var queryExecutionTime = queryEndTime - queryStartTime;
                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

                if (query.substr(0, 11) === "INSERT INTO") {
                  ok(result.insertId);
                } else {
                  var resultSet = [];

                  for (var i = 0; i < result.rows.length; i++) {
                    resultSet.push(result.rows.item(i));
                  }

                  ok(resultSet);
                }
              }, function (err) {
                _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

                fail(new _error_QueryFailedError__WEBPACK_IMPORTED_MODULE_2__["QueryFailedError"](query, parameters, err));
              });
              return [2
              /*return*/
              ];
          }
        });
      });
    });
  };
  /**
   * Insert a new row with given values into the given table.
   * Returns value of the generated column if given and generate column exist in the table.
   // todo: implement new syntax
  async insert(tableName: string, keyValues: ObjectLiteral): Promise<InsertResult> {
      const keys = Object.keys(keyValues);
      const columns = keys.map(key => `"${key}"`).join(", ");
      const values = keys.map(key => "?").join(",");
      const generatedColumns = this.connection.hasMetadata(tableName) ? this.connection.getMetadata(tableName).generatedColumns : [];
      const sql = columns.length > 0 ? (`INSERT INTO "${tableName}"(${columns}) VALUES (${values})`) : `INSERT INTO "${tableName}" DEFAULT VALUES`;
      const parameters = keys.map(key => keyValues[key]);
       return new Promise<InsertResult>(async (ok, fail) => {
          this.driver.connection.logger.logQuery(sql, parameters, this);
          const __this = this;
          const databaseConnection = await this.connect();
          databaseConnection.executeSql(sql, parameters, (resultSet: any) => {
              const generatedMap = generatedColumns.reduce((map, generatedColumn) => {
                  const value = generatedColumn.isPrimary && generatedColumn.generationStrategy === "increment" && resultSet.insertId ? resultSet.insertId : keyValues[generatedColumn.databaseName];
                  if (!value) return map;
                  return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));
              }, {} as ObjectLiteral);
               ok({
                  result: undefined,
                  generatedMap: Object.keys(generatedMap).length > 0 ? generatedMap : undefined
              });
          }, (err: any) => {
              __this.driver.connection.logger.logQueryError(err, sql, parameters, this);
              fail(err);
          });
      });
  }*/
  // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Parametrizes given object of values. Used to create column=value queries.
   */


  CordovaQueryRunner.prototype.parametrize = function (objectLiteral, startIndex) {
    if (startIndex === void 0) {
      startIndex = 0;
    }

    return Object.keys(objectLiteral).map(function (key, index) {
      return "\"" + key + "\"" + "=?";
    });
  };

  return CordovaQueryRunner;
}(_sqlite_abstract_AbstractSqliteQueryRunner__WEBPACK_IMPORTED_MODULE_3__["AbstractSqliteQueryRunner"]);



/***/ }),

/***/ "./node_modules/typeorm/browser/driver/expo/ExpoDriver.js":
/*!****************************************************************!*\
  !*** ./node_modules/typeorm/browser/driver/expo/ExpoDriver.js ***!
  \****************************************************************/
/*! exports provided: ExpoDriver */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpoDriver", function() { return ExpoDriver; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sqlite-abstract/AbstractSqliteDriver */ "./node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteDriver.js");
/* harmony import */ var _ExpoQueryRunner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ExpoQueryRunner */ "./node_modules/typeorm/browser/driver/expo/ExpoQueryRunner.js");
/* harmony import */ var _error_DriverOptionNotSetError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../error/DriverOptionNotSetError */ "./node_modules/typeorm/browser/error/DriverOptionNotSetError.js");





var ExpoDriver =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](ExpoDriver, _super); // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------


  function ExpoDriver(connection) {
    var _this = _super.call(this, connection) || this;

    _this.database = _this.options.database; // validate options to make sure everything is set

    if (!_this.options.database) throw new _error_DriverOptionNotSetError__WEBPACK_IMPORTED_MODULE_3__["DriverOptionNotSetError"]("database");
    if (!_this.options.driver) throw new _error_DriverOptionNotSetError__WEBPACK_IMPORTED_MODULE_3__["DriverOptionNotSetError"]("driver"); // load sqlite package

    _this.sqlite = _this.options.driver;
    return _this;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Closes connection with database.
   */


  ExpoDriver.prototype.disconnect = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , new Promise(function (ok, fail) {
          try {
            _this.queryRunner = undefined;
            _this.databaseConnection = undefined;
            ok();
          } catch (error) {
            fail(error);
          }
        })];
      });
    });
  };
  /**
   * Creates a query runner used to execute database queries.
   */


  ExpoDriver.prototype.createQueryRunner = function (mode) {
    if (mode === void 0) {
      mode = "master";
    }

    if (!this.queryRunner) this.queryRunner = new _ExpoQueryRunner__WEBPACK_IMPORTED_MODULE_2__["ExpoQueryRunner"](this);
    return this.queryRunner;
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Creates connection with the database.
   */


  ExpoDriver.prototype.createDatabaseConnection = function () {
    var _this = this;

    return new Promise(function (ok, fail) {
      try {
        var databaseConnection_1 = _this.sqlite.openDatabase(_this.options.database);
        /*
        // we need to enable foreign keys in sqlite to make sure all foreign key related features
        // working properly. this also makes onDelete work with sqlite.
        */


        databaseConnection_1.transaction(function (tsx) {
          tsx.executeSql("PRAGMA foreign_keys = ON;", [], function (t, result) {
            ok(databaseConnection_1);
          }, function (t, err) {
            fail({
              transaction: t,
              error: err
            });
          });
        }, function (err) {
          fail(err);
        });
      } catch (error) {
        fail(error);
      }
    });
  };

  return ExpoDriver;
}(_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_1__["AbstractSqliteDriver"]);



/***/ }),

/***/ "./node_modules/typeorm/browser/driver/expo/ExpoQueryRunner.js":
/*!*********************************************************************!*\
  !*** ./node_modules/typeorm/browser/driver/expo/ExpoQueryRunner.js ***!
  \*********************************************************************/
/*! exports provided: ExpoQueryRunner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpoQueryRunner", function() { return ExpoQueryRunner; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _error_QueryRunnerAlreadyReleasedError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error/QueryRunnerAlreadyReleasedError */ "./node_modules/typeorm/browser/error/QueryRunnerAlreadyReleasedError.js");
/* harmony import */ var _error_QueryFailedError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../error/QueryFailedError */ "./node_modules/typeorm/browser/error/QueryFailedError.js");
/* harmony import */ var _sqlite_abstract_AbstractSqliteQueryRunner__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sqlite-abstract/AbstractSqliteQueryRunner */ "./node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteQueryRunner.js");
/* harmony import */ var _error_TransactionAlreadyStartedError__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../error/TransactionAlreadyStartedError */ "./node_modules/typeorm/browser/error/TransactionAlreadyStartedError.js");
/* harmony import */ var _error_TransactionNotStartedError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../error/TransactionNotStartedError */ "./node_modules/typeorm/browser/error/TransactionNotStartedError.js");
/* harmony import */ var _subscriber_Broadcaster__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../subscriber/Broadcaster */ "./node_modules/typeorm/browser/subscriber/Broadcaster.js");







/**
 * Runs queries on a single sqlite database connection.
 */

var ExpoQueryRunner =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](ExpoQueryRunner, _super); // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------


  function ExpoQueryRunner(driver) {
    var _this = _super.call(this) || this;

    _this.driver = driver;
    _this.connection = driver.connection;
    _this.broadcaster = new _subscriber_Broadcaster__WEBPACK_IMPORTED_MODULE_6__["Broadcaster"](_this);
    return _this;
  }
  /**
   * Starts transaction. Within Expo, all database operations happen in a
   * transaction context, so issuing a `BEGIN TRANSACTION` command is
   * redundant and will result in the following error:
   *
   * `Error: Error code 1: cannot start a transaction within a transaction`
   *
   * Instead, we keep track of a `Transaction` object in `this.transaction`
   * and continue using the same object until we wish to commit the
   * transaction.
   */


  ExpoQueryRunner.prototype.startTransaction = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        if (this.isTransactionActive && typeof this.transaction !== "undefined") throw new _error_TransactionAlreadyStartedError__WEBPACK_IMPORTED_MODULE_4__["TransactionAlreadyStartedError"]();
        this.isTransactionActive = true;
        return [2
        /*return*/
        ];
      });
    });
  };
  /**
   * Commits transaction.
   * Error will be thrown if transaction was not started.
   * Since Expo will automatically commit the transaction once all the
   * callbacks of the transaction object have been completed, "committing" a
   * transaction in this driver's context means that we delete the transaction
   * object and set the stage for the next transaction.
   */


  ExpoQueryRunner.prototype.commitTransaction = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        if (!this.isTransactionActive && typeof this.transaction === "undefined") throw new _error_TransactionNotStartedError__WEBPACK_IMPORTED_MODULE_5__["TransactionNotStartedError"]();
        this.isTransactionActive = false;
        this.transaction = undefined;
        return [2
        /*return*/
        ];
      });
    });
  };
  /**
   * Rollbacks transaction.
   * Error will be thrown if transaction was not started.
   * This method's functionality is identical to `commitTransaction()` because
   * the transaction lifecycle is handled within the Expo transaction object.
   * Issuing separate statements for `COMMIT` or `ROLLBACK` aren't necessary.
   */


  ExpoQueryRunner.prototype.rollbackTransaction = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        if (!this.isTransactionActive && typeof this.transaction === "undefined") throw new _error_TransactionNotStartedError__WEBPACK_IMPORTED_MODULE_5__["TransactionNotStartedError"]();
        this.isTransactionActive = false;
        this.transaction = undefined;
        return [2
        /*return*/
        ];
      });
    });
  };
  /**
   * Executes a given SQL query.
   */


  ExpoQueryRunner.prototype.query = function (query, parameters) {
    var _this = this;

    if (this.isReleased) throw new _error_QueryRunnerAlreadyReleasedError__WEBPACK_IMPORTED_MODULE_1__["QueryRunnerAlreadyReleasedError"]();
    return new Promise(function (ok, fail) {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
        var databaseConnection, queryStartTime;

        var _this = this;

        return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4
              /*yield*/
              , this.connect()];

            case 1:
              databaseConnection = _a.sent();
              this.driver.connection.logger.logQuery(query, parameters, this);
              queryStartTime = +new Date(); // All Expo SQL queries are executed in a transaction context

              databaseConnection.transaction(function (transaction) {
                if (typeof _this.transaction === "undefined") {
                  _this.startTransaction();

                  _this.transaction = transaction;
                }

                _this.transaction.executeSql(query, parameters, function (t, result) {
                  // log slow queries if maxQueryExecution time is set
                  var maxQueryExecutionTime = _this.driver.connection.options.maxQueryExecutionTime;
                  var queryEndTime = +new Date();
                  var queryExecutionTime = queryEndTime - queryStartTime;

                  if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) {
                    _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);
                  } // return id of inserted row, if query was insert statement.


                  if (query.substr(0, 11) === "INSERT INTO") {
                    ok(result.insertId);
                  } else {
                    var resultSet = [];

                    for (var i = 0; i < result.rows.length; i++) {
                      resultSet.push(result.rows.item(i));
                    }

                    ok(resultSet);
                  }
                }, function (t, err) {
                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

                  fail(new _error_QueryFailedError__WEBPACK_IMPORTED_MODULE_2__["QueryFailedError"](query, parameters, err));
                });
              }, function (err) {
                _this.rollbackTransaction();
              }, function () {
                _this.isTransactionActive = false;
                _this.transaction = undefined;
              });
              return [2
              /*return*/
              ];
          }
        });
      });
    });
  };

  return ExpoQueryRunner;
}(_sqlite_abstract_AbstractSqliteQueryRunner__WEBPACK_IMPORTED_MODULE_3__["AbstractSqliteQueryRunner"]);



/***/ }),

/***/ "./node_modules/typeorm/browser/driver/mongodb/typings.js":
/*!****************************************************************!*\
  !*** ./node_modules/typeorm/browser/driver/mongodb/typings.js ***!
  \****************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../platform/PlatformTools */ "./node_modules/typeorm/browser/platform/PlatformTools.js");


/***/ }),

/***/ "./node_modules/typeorm/browser/driver/nativescript/NativescriptDriver.js":
/*!********************************************************************************!*\
  !*** ./node_modules/typeorm/browser/driver/nativescript/NativescriptDriver.js ***!
  \********************************************************************************/
/*! exports provided: NativescriptDriver */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NativescriptDriver", function() { return NativescriptDriver; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sqlite-abstract/AbstractSqliteDriver */ "./node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteDriver.js");
/* harmony import */ var _NativescriptQueryRunner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NativescriptQueryRunner */ "./node_modules/typeorm/browser/driver/nativescript/NativescriptQueryRunner.js");
/* harmony import */ var _error_DriverOptionNotSetError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../error/DriverOptionNotSetError */ "./node_modules/typeorm/browser/error/DriverOptionNotSetError.js");
/* harmony import */ var _error_DriverPackageNotInstalledError__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../error/DriverPackageNotInstalledError */ "./node_modules/typeorm/browser/error/DriverPackageNotInstalledError.js");





/**
 * Organizes communication with sqlite DBMS within Nativescript.
 */

var NativescriptDriver =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](NativescriptDriver, _super); // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------


  function NativescriptDriver(connection) {
    var _this = _super.call(this, connection) || this;

    _this.connection = connection;
    _this.options = connection.options;
    _this.database = _this.options.database;
    _this.driver = _this.options.driver; // validate options to make sure everything is set

    if (!_this.options.database) {
      throw new _error_DriverOptionNotSetError__WEBPACK_IMPORTED_MODULE_3__["DriverOptionNotSetError"]("database");
    } // load sqlite package


    _this.loadDependencies();

    return _this;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Closes connection with database.
   */


  NativescriptDriver.prototype.disconnect = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , new Promise(function (ok, fail) {
          _this.queryRunner = undefined;

          _this.databaseConnection.close().then(ok)["catch"](fail);
        })];
      });
    });
  };
  /**
   * Creates a query runner used to execute database queries.
   */


  NativescriptDriver.prototype.createQueryRunner = function (mode) {
    if (mode === void 0) {
      mode = "master";
    }

    if (!this.queryRunner) {
      this.queryRunner = new _NativescriptQueryRunner__WEBPACK_IMPORTED_MODULE_2__["NativescriptQueryRunner"](this);
    }

    return this.queryRunner;
  };

  NativescriptDriver.prototype.normalizeType = function (column) {
    if (column.type === Buffer) {
      return "blob";
    }

    return _super.prototype.normalizeType.call(this, column);
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Creates connection with the database.
   */


  NativescriptDriver.prototype.createDatabaseConnection = function () {
    var _this = this;

    return new Promise(function (ok, fail) {
      var options = Object.assign({}, {
        readOnly: _this.options.readOnly,
        key: _this.options.key,
        multithreading: _this.options.multithreading,
        migrate: _this.options.migrate,
        iosFlags: _this.options.iosFlags,
        androidFlags: _this.options.androidFlags
      }, _this.options.extra || {});
      new _this.sqlite(_this.options.database, options, function (err, db) {
        if (err) return fail(err); // use object mode to work with TypeORM

        db.resultType(_this.sqlite.RESULTSASOBJECT); // we need to enable foreign keys in sqlite to make sure all foreign key related features
        // working properly. this also makes onDelete work with sqlite.

        db.execSQL("PRAGMA foreign_keys = ON;", [], function (err, result) {
          if (err) return fail(err); // We are all set

          ok(db);
        });
      });
    });
  };
  /**
   * If driver dependency is not given explicitly, then try to load it via "require".
   */


  NativescriptDriver.prototype.loadDependencies = function () {
    this.sqlite = this.driver;

    if (!this.driver) {
      throw new _error_DriverPackageNotInstalledError__WEBPACK_IMPORTED_MODULE_4__["DriverPackageNotInstalledError"]("Nativescript", "nativescript-sqlite");
    }
  };

  return NativescriptDriver;
}(_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_1__["AbstractSqliteDriver"]);


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/typeorm/browser/driver/nativescript/NativescriptQueryRunner.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/driver/nativescript/NativescriptQueryRunner.js ***!
  \*************************************************************************************/
/*! exports provided: NativescriptQueryRunner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NativescriptQueryRunner", function() { return NativescriptQueryRunner; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _error_QueryRunnerAlreadyReleasedError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error/QueryRunnerAlreadyReleasedError */ "./node_modules/typeorm/browser/error/QueryRunnerAlreadyReleasedError.js");
/* harmony import */ var _error_QueryFailedError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../error/QueryFailedError */ "./node_modules/typeorm/browser/error/QueryFailedError.js");
/* harmony import */ var _sqlite_abstract_AbstractSqliteQueryRunner__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sqlite-abstract/AbstractSqliteQueryRunner */ "./node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteQueryRunner.js");
/* harmony import */ var _subscriber_Broadcaster__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../subscriber/Broadcaster */ "./node_modules/typeorm/browser/subscriber/Broadcaster.js");





/**
 * Runs queries on a single sqlite database connection.
 */

var NativescriptQueryRunner =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](NativescriptQueryRunner, _super); // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------


  function NativescriptQueryRunner(driver) {
    var _this = _super.call(this) || this;

    _this.driver = driver;
    _this.connection = driver.connection;
    _this.broadcaster = new _subscriber_Broadcaster__WEBPACK_IMPORTED_MODULE_4__["Broadcaster"](_this);
    return _this;
  }
  /**
   * Executes a given SQL query.
   */


  NativescriptQueryRunner.prototype.query = function (query, parameters) {
    var _this = this;

    if (this.isReleased) throw new _error_QueryRunnerAlreadyReleasedError__WEBPACK_IMPORTED_MODULE_1__["QueryRunnerAlreadyReleasedError"]();
    var connection = this.driver.connection;
    return new Promise(function (ok, fail) {
      var isInsertQuery = query.substr(0, 11) === "INSERT INTO";

      var handler = function handler(err, result) {
        // log slow queries if maxQueryExecution time is set
        var maxQueryExecutionTime = connection.options.maxQueryExecutionTime;
        var queryEndTime = +new Date();
        var queryExecutionTime = queryEndTime - queryStartTime;
        if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);

        if (err) {
          connection.logger.logQueryError(err, query, parameters, this);
          fail(new _error_QueryFailedError__WEBPACK_IMPORTED_MODULE_2__["QueryFailedError"](query, parameters, err));
        } else {
          // when isInsertQuery == true, result is the id
          ok(result);
        }
      };

      _this.driver.connection.logger.logQuery(query, parameters, _this);

      var queryStartTime = +new Date();

      _this.connect().then(function (databaseConnection) {
        if (isInsertQuery) {
          databaseConnection.execSQL(query, parameters, handler);
        } else {
          databaseConnection.all(query, parameters, handler);
        }
      });
    });
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Parametrizes given object of values. Used to create column=value queries.
   */


  NativescriptQueryRunner.prototype.parametrize = function (objectLiteral, startIndex) {
    if (startIndex === void 0) {
      startIndex = 0;
    }

    return Object.keys(objectLiteral).map(function (key, index) {
      return "\"" + key + "\"" + "=?";
    });
  };

  return NativescriptQueryRunner;
}(_sqlite_abstract_AbstractSqliteQueryRunner__WEBPACK_IMPORTED_MODULE_3__["AbstractSqliteQueryRunner"]);



/***/ }),

/***/ "./node_modules/typeorm/browser/driver/react-native/ReactNativeDriver.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/typeorm/browser/driver/react-native/ReactNativeDriver.js ***!
  \*******************************************************************************/
/*! exports provided: ReactNativeDriver */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReactNativeDriver", function() { return ReactNativeDriver; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sqlite-abstract/AbstractSqliteDriver */ "./node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteDriver.js");
/* harmony import */ var _ReactNativeQueryRunner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ReactNativeQueryRunner */ "./node_modules/typeorm/browser/driver/react-native/ReactNativeQueryRunner.js");
/* harmony import */ var _error_DriverOptionNotSetError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../error/DriverOptionNotSetError */ "./node_modules/typeorm/browser/error/DriverOptionNotSetError.js");
/* harmony import */ var _error_DriverPackageNotInstalledError__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../error/DriverPackageNotInstalledError */ "./node_modules/typeorm/browser/error/DriverPackageNotInstalledError.js");






var ReactNativeDriver =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](ReactNativeDriver, _super); // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------


  function ReactNativeDriver(connection) {
    var _this = _super.call(this, connection) || this;

    _this.database = _this.options.database; // validate options to make sure everything is set

    if (!_this.options.database) throw new _error_DriverOptionNotSetError__WEBPACK_IMPORTED_MODULE_3__["DriverOptionNotSetError"]("database");
    if (!_this.options.location) throw new _error_DriverOptionNotSetError__WEBPACK_IMPORTED_MODULE_3__["DriverOptionNotSetError"]("location"); // load sqlite package

    _this.loadDependencies();

    return _this;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Closes connection with database.
   */


  ReactNativeDriver.prototype.disconnect = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , new Promise(function (ok, fail) {
          _this.queryRunner = undefined;

          _this.databaseConnection.close(ok, fail);
        })];
      });
    });
  };
  /**
   * Creates a query runner used to execute database queries.
   */


  ReactNativeDriver.prototype.createQueryRunner = function (mode) {
    if (mode === void 0) {
      mode = "master";
    }

    if (!this.queryRunner) this.queryRunner = new _ReactNativeQueryRunner__WEBPACK_IMPORTED_MODULE_2__["ReactNativeQueryRunner"](this);
    return this.queryRunner;
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Creates connection with the database.
   */


  ReactNativeDriver.prototype.createDatabaseConnection = function () {
    var _this = this;

    return new Promise(function (ok, fail) {
      var options = Object.assign({}, {
        name: _this.options.database,
        location: _this.options.location
      }, _this.options.extra || {});

      _this.sqlite.openDatabase(options, function (db) {
        var databaseConnection = db; // we need to enable foreign keys in sqlite to make sure all foreign key related features
        // working properly. this also makes onDelete work with sqlite.

        databaseConnection.executeSql("PRAGMA foreign_keys = ON;", [], function (result) {
          ok(databaseConnection);
        }, function (error) {
          fail(error);
        });
      }, function (error) {
        fail(error);
      });
    });
  };
  /**
   * If driver dependency is not given explicitly, then try to load it via "require".
   */


  ReactNativeDriver.prototype.loadDependencies = function () {
    try {
      this.sqlite = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module 'react-native-sqlite-storage'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
    } catch (e) {
      throw new _error_DriverPackageNotInstalledError__WEBPACK_IMPORTED_MODULE_4__["DriverPackageNotInstalledError"]("React-Native", "react-native-sqlite-storage");
    }
  };

  return ReactNativeDriver;
}(_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_1__["AbstractSqliteDriver"]);



/***/ }),

/***/ "./node_modules/typeorm/browser/driver/react-native/ReactNativeQueryRunner.js":
/*!************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/driver/react-native/ReactNativeQueryRunner.js ***!
  \************************************************************************************/
/*! exports provided: ReactNativeQueryRunner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReactNativeQueryRunner", function() { return ReactNativeQueryRunner; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _error_QueryRunnerAlreadyReleasedError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error/QueryRunnerAlreadyReleasedError */ "./node_modules/typeorm/browser/error/QueryRunnerAlreadyReleasedError.js");
/* harmony import */ var _error_QueryFailedError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../error/QueryFailedError */ "./node_modules/typeorm/browser/error/QueryFailedError.js");
/* harmony import */ var _sqlite_abstract_AbstractSqliteQueryRunner__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sqlite-abstract/AbstractSqliteQueryRunner */ "./node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteQueryRunner.js");
/* harmony import */ var _subscriber_Broadcaster__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../subscriber/Broadcaster */ "./node_modules/typeorm/browser/subscriber/Broadcaster.js");





/**
 * Runs queries on a single sqlite database connection.
 */

var ReactNativeQueryRunner =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](ReactNativeQueryRunner, _super); // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------


  function ReactNativeQueryRunner(driver) {
    var _this = _super.call(this) || this;

    _this.driver = driver;
    _this.connection = driver.connection;
    _this.broadcaster = new _subscriber_Broadcaster__WEBPACK_IMPORTED_MODULE_4__["Broadcaster"](_this);
    return _this;
  }
  /**
   * Executes a given SQL query.
   */


  ReactNativeQueryRunner.prototype.query = function (query, parameters) {
    var _this = this;

    if (this.isReleased) throw new _error_QueryRunnerAlreadyReleasedError__WEBPACK_IMPORTED_MODULE_1__["QueryRunnerAlreadyReleasedError"]();
    return new Promise(function (ok, fail) {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
        var databaseConnection, queryStartTime;

        var _this = this;

        return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4
              /*yield*/
              , this.connect()];

            case 1:
              databaseConnection = _a.sent();
              this.driver.connection.logger.logQuery(query, parameters, this);
              queryStartTime = +new Date();
              databaseConnection.executeSql(query, parameters, function (result) {
                // log slow queries if maxQueryExecution time is set
                var maxQueryExecutionTime = _this.driver.connection.options.maxQueryExecutionTime;
                var queryEndTime = +new Date();
                var queryExecutionTime = queryEndTime - queryStartTime;
                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this); // return id of inserted row, if query was insert statement.

                if (query.substr(0, 11) === "INSERT INTO") {
                  ok(result.insertId);
                } else {
                  var resultSet = [];

                  for (var i = 0; i < result.rows.length; i++) {
                    resultSet.push(result.rows.item(i));
                  }

                  ok(resultSet);
                }
              }, function (err) {
                _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

                fail(new _error_QueryFailedError__WEBPACK_IMPORTED_MODULE_2__["QueryFailedError"](query, parameters, err));
              });
              return [2
              /*return*/
              ];
          }
        });
      });
    });
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Parametrizes given object of values. Used to create column=value queries.
   */


  ReactNativeQueryRunner.prototype.parametrize = function (objectLiteral, startIndex) {
    if (startIndex === void 0) {
      startIndex = 0;
    }

    return Object.keys(objectLiteral).map(function (key, index) {
      return "\"" + key + "\"" + "=?";
    });
  };

  return ReactNativeQueryRunner;
}(_sqlite_abstract_AbstractSqliteQueryRunner__WEBPACK_IMPORTED_MODULE_3__["AbstractSqliteQueryRunner"]);



/***/ }),

/***/ "./node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteDriver.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteDriver.js ***!
  \*************************************************************************************/
/*! exports provided: AbstractSqliteDriver */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractSqliteDriver", function() { return AbstractSqliteDriver; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_DateUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/DateUtils */ "./node_modules/typeorm/browser/util/DateUtils.js");
/* harmony import */ var _schema_builder_RdbmsSchemaBuilder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../schema-builder/RdbmsSchemaBuilder */ "./node_modules/typeorm/browser/schema-builder/RdbmsSchemaBuilder.js");
/* harmony import */ var _util_OrmUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/OrmUtils */ "./node_modules/typeorm/browser/util/OrmUtils.js");
/* harmony import */ var _util_ApplyValueTransformers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/ApplyValueTransformers */ "./node_modules/typeorm/browser/util/ApplyValueTransformers.js");





/**
 * Organizes communication with sqlite DBMS.
 */

var AbstractSqliteDriver =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function AbstractSqliteDriver(connection) {
    /**
     * Indicates if replication is enabled.
     */
    this.isReplicated = false;
    /**
     * Indicates if tree tables are supported by this driver.
     */

    this.treeSupport = true;
    /**
     * Gets list of supported column data types by a driver.
     *
     * @see https://www.tutorialspoint.com/sqlite/sqlite_data_types.htm
     * @see https://sqlite.org/datatype3.html
     */

    this.supportedDataTypes = ["int", "integer", "tinyint", "smallint", "mediumint", "bigint", "unsigned big int", "int2", "int8", "integer", "character", "varchar", "varying character", "nchar", "native character", "nvarchar", "text", "clob", "text", "blob", "real", "double", "double precision", "float", "real", "numeric", "decimal", "boolean", "date", "time", "datetime"];
    /**
     * Gets list of column data types that support length by a driver.
     */

    this.withLengthColumnTypes = ["character", "varchar", "varying character", "nchar", "native character", "nvarchar", "text", "blob", "clob"];
    /**
     * Gets list of spatial column data types.
     */

    this.spatialTypes = [];
    /**
     * Gets list of column data types that support precision by a driver.
     */

    this.withPrecisionColumnTypes = [];
    /**
     * Gets list of column data types that support scale by a driver.
     */

    this.withScaleColumnTypes = [];
    /**
     * Orm has special columns and we need to know what database column types should be for those types.
     * Column types are driver dependant.
     */

    this.mappedDataTypes = {
      createDate: "datetime",
      createDateDefault: "datetime('now')",
      updateDate: "datetime",
      updateDateDefault: "datetime('now')",
      deleteDate: "datetime",
      deleteDateNullable: true,
      version: "integer",
      treeLevel: "integer",
      migrationId: "integer",
      migrationName: "varchar",
      migrationTimestamp: "bigint",
      cacheId: "int",
      cacheIdentifier: "varchar",
      cacheTime: "bigint",
      cacheDuration: "int",
      cacheQuery: "text",
      cacheResult: "text",
      metadataType: "varchar",
      metadataDatabase: "varchar",
      metadataSchema: "varchar",
      metadataTable: "varchar",
      metadataName: "varchar",
      metadataValue: "text"
    };
    this.connection = connection;
    this.options = connection.options;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Performs connection to the database.
   */


  AbstractSqliteDriver.prototype.connect = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _a;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = this;
            return [4
            /*yield*/
            , this.createDatabaseConnection()];

          case 1:
            _a.databaseConnection = _b.sent();
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Makes any action after connection (e.g. create extensions in Postgres driver).
   */


  AbstractSqliteDriver.prototype.afterConnect = function () {
    return Promise.resolve();
  };
  /**
   * Closes connection with database.
   */


  AbstractSqliteDriver.prototype.disconnect = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , new Promise(function (ok, fail) {
          _this.queryRunner = undefined;

          _this.databaseConnection.close(function (err) {
            return err ? fail(err) : ok();
          });
        })];
      });
    });
  };
  /**
   * Creates a schema builder used to build and sync a schema.
   */


  AbstractSqliteDriver.prototype.createSchemaBuilder = function () {
    return new _schema_builder_RdbmsSchemaBuilder__WEBPACK_IMPORTED_MODULE_2__["RdbmsSchemaBuilder"](this.connection);
  };
  /**
   * Prepares given value to a value to be persisted, based on its column type and metadata.
   */


  AbstractSqliteDriver.prototype.preparePersistentValue = function (value, columnMetadata) {
    if (columnMetadata.transformer) value = _util_ApplyValueTransformers__WEBPACK_IMPORTED_MODULE_4__["ApplyValueTransformers"].transformTo(columnMetadata.transformer, value);
    if (value === null || value === undefined) return value;

    if (columnMetadata.type === Boolean || columnMetadata.type === "boolean") {
      return value === true ? 1 : 0;
    } else if (columnMetadata.type === "date") {
      return _util_DateUtils__WEBPACK_IMPORTED_MODULE_1__["DateUtils"].mixedDateToDateString(value);
    } else if (columnMetadata.type === "time") {
      return _util_DateUtils__WEBPACK_IMPORTED_MODULE_1__["DateUtils"].mixedDateToTimeString(value);
    } else if (columnMetadata.type === "datetime" || columnMetadata.type === Date) {
      // to string conversation needs because SQLite stores date as integer number, when date came as Object
      // TODO: think about `toUTC` conversion
      return _util_DateUtils__WEBPACK_IMPORTED_MODULE_1__["DateUtils"].mixedDateToUtcDatetimeString(value);
    } else if (columnMetadata.type === "simple-array") {
      return _util_DateUtils__WEBPACK_IMPORTED_MODULE_1__["DateUtils"].simpleArrayToString(value);
    } else if (columnMetadata.type === "simple-json") {
      return _util_DateUtils__WEBPACK_IMPORTED_MODULE_1__["DateUtils"].simpleJsonToString(value);
    } else if (columnMetadata.type === "simple-enum") {
      return _util_DateUtils__WEBPACK_IMPORTED_MODULE_1__["DateUtils"].simpleEnumToString(value);
    }

    return value;
  };
  /**
   * Prepares given value to a value to be hydrated, based on its column type or metadata.
   */


  AbstractSqliteDriver.prototype.prepareHydratedValue = function (value, columnMetadata) {
    if (value === null || value === undefined) return columnMetadata.transformer ? _util_ApplyValueTransformers__WEBPACK_IMPORTED_MODULE_4__["ApplyValueTransformers"].transformFrom(columnMetadata.transformer, value) : value;

    if (columnMetadata.type === Boolean || columnMetadata.type === "boolean") {
      value = value ? true : false;
    } else if (columnMetadata.type === "datetime" || columnMetadata.type === Date) {
      /**
       * Fix date conversion issue
       *
       * If the format of the date string is "2018-03-14 02:33:33.906", Safari (and iOS WKWebView) will convert it to an invalid date object.
       * We need to modify the date string to "2018-03-14T02:33:33.906Z" and Safari will convert it correctly.
       *
       * ISO 8601
       * https://www.w3.org/TR/NOTE-datetime
       */
      if (value && typeof value === "string") {
        // There are various valid time string formats a sqlite time string might have:
        // https://www.sqlite.org/lang_datefunc.html
        // There are two separate fixes we may need to do:
        //   1) Add 'T' separator if space is used instead
        //   2) Add 'Z' UTC suffix if no timezone or offset specified
        if (/^\d\d\d\d-\d\d-\d\d \d\d:\d\d/.test(value)) {
          value = value.replace(" ", "T");
        }

        if (/^\d\d\d\d-\d\d-\d\dT\d\d:\d\d(:\d\d(\.\d\d\d)?)?$/.test(value)) {
          value += "Z";
        }
      }

      value = _util_DateUtils__WEBPACK_IMPORTED_MODULE_1__["DateUtils"].normalizeHydratedDate(value);
    } else if (columnMetadata.type === "date") {
      value = _util_DateUtils__WEBPACK_IMPORTED_MODULE_1__["DateUtils"].mixedDateToDateString(value);
    } else if (columnMetadata.type === "time") {
      value = _util_DateUtils__WEBPACK_IMPORTED_MODULE_1__["DateUtils"].mixedTimeToString(value);
    } else if (columnMetadata.type === "simple-array") {
      value = _util_DateUtils__WEBPACK_IMPORTED_MODULE_1__["DateUtils"].stringToSimpleArray(value);
    } else if (columnMetadata.type === "simple-json") {
      value = _util_DateUtils__WEBPACK_IMPORTED_MODULE_1__["DateUtils"].stringToSimpleJson(value);
    } else if (columnMetadata.type === "simple-enum") {
      value = _util_DateUtils__WEBPACK_IMPORTED_MODULE_1__["DateUtils"].stringToSimpleEnum(value, columnMetadata);
    }

    if (columnMetadata.transformer) value = _util_ApplyValueTransformers__WEBPACK_IMPORTED_MODULE_4__["ApplyValueTransformers"].transformFrom(columnMetadata.transformer, value);
    return value;
  };
  /**
   * Replaces parameters in the given sql with special escaping character
   * and an array of parameter names to be passed to a query.
   */


  AbstractSqliteDriver.prototype.escapeQueryWithParameters = function (sql, parameters, nativeParameters) {
    var builtParameters = Object.keys(nativeParameters).map(function (key) {
      // Mapping boolean values to their numeric representation
      if (typeof nativeParameters[key] === "boolean") {
        return nativeParameters[key] === true ? 1 : 0;
      }

      return nativeParameters[key];
    });
    if (!parameters || !Object.keys(parameters).length) return [sql, builtParameters];
    var keys = Object.keys(parameters).map(function (parameter) {
      return "(:(\\.\\.\\.)?" + parameter + "\\b)";
    }).join("|");
    sql = sql.replace(new RegExp(keys, "g"), function (key) {
      var value;
      var isArray = false;

      if (key.substr(0, 4) === ":...") {
        isArray = true;
        value = parameters[key.substr(4)];
      } else {
        value = parameters[key.substr(1)];
      }

      if (isArray) {
        return value.map(function (v) {
          builtParameters.push(v);
          return "?"; // return "$" + builtParameters.length;
        }).join(", ");
      } else if (value instanceof Function) {
        return value();
      } else {
        builtParameters.push(value);
        return "?"; // return "$" + builtParameters.length;
      }
    }); // todo: make replace only in value statements, otherwise problems

    return [sql, builtParameters];
  };
  /**
   * Escapes a column name.
   */


  AbstractSqliteDriver.prototype.escape = function (columnName) {
    return "\"" + columnName + "\"";
  };
  /**
   * Build full table name with database name, schema name and table name.
   * E.g. "myDB"."mySchema"."myTable"
   *
   * Returns only simple table name because all inherited drivers does not supports schema and database.
   */


  AbstractSqliteDriver.prototype.buildTableName = function (tableName, schema, database) {
    return tableName;
  };
  /**
   * Creates a database type from a given column metadata.
   */


  AbstractSqliteDriver.prototype.normalizeType = function (column) {
    if (column.type === Number || column.type === "int") {
      return "integer";
    } else if (column.type === String) {
      return "varchar";
    } else if (column.type === Date) {
      return "datetime";
    } else if (column.type === Boolean) {
      return "boolean";
    } else if (column.type === "uuid") {
      return "varchar";
    } else if (column.type === "simple-array") {
      return "text";
    } else if (column.type === "simple-json") {
      return "text";
    } else if (column.type === "simple-enum") {
      return "varchar";
    } else {
      return column.type || "";
    }
  };
  /**
   * Normalizes "default" value of the column.
   */


  AbstractSqliteDriver.prototype.normalizeDefault = function (columnMetadata) {
    var defaultValue = columnMetadata["default"];

    if (typeof defaultValue === "number") {
      return "" + defaultValue;
    } else if (typeof defaultValue === "boolean") {
      return defaultValue === true ? "1" : "0";
    } else if (typeof defaultValue === "function") {
      return defaultValue();
    } else if (typeof defaultValue === "string") {
      return "'" + defaultValue + "'";
    } else {
      return defaultValue;
    }
  };
  /**
   * Normalizes "isUnique" value of the column.
   */


  AbstractSqliteDriver.prototype.normalizeIsUnique = function (column) {
    return column.entityMetadata.uniques.some(function (uq) {
      return uq.columns.length === 1 && uq.columns[0] === column;
    });
  };
  /**
   * Calculates column length taking into account the default length values.
   */


  AbstractSqliteDriver.prototype.getColumnLength = function (column) {
    return column.length ? column.length.toString() : "";
  };
  /**
   * Normalizes "default" value of the column.
   */


  AbstractSqliteDriver.prototype.createFullType = function (column) {
    var type = column.type;

    if (column["enum"]) {
      return "varchar";
    }

    if (column.length) {
      type += "(" + column.length + ")";
    } else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {
      type += "(" + column.precision + "," + column.scale + ")";
    } else if (column.precision !== null && column.precision !== undefined) {
      type += "(" + column.precision + ")";
    }

    if (column.isArray) type += " array";
    return type;
  };
  /**
   * Obtains a new database connection to a master server.
   * Used for replication.
   * If replication is not setup then returns default connection's database connection.
   */


  AbstractSqliteDriver.prototype.obtainMasterConnection = function () {
    return Promise.resolve();
  };
  /**
   * Obtains a new database connection to a slave server.
   * Used for replication.
   * If replication is not setup then returns master (default) connection's database connection.
   */


  AbstractSqliteDriver.prototype.obtainSlaveConnection = function () {
    return Promise.resolve();
  };
  /**
   * Creates generated map of values generated or returned by database after INSERT query.
   */


  AbstractSqliteDriver.prototype.createGeneratedMap = function (metadata, insertResult) {
    var generatedMap = metadata.generatedColumns.reduce(function (map, generatedColumn) {
      var value;

      if (generatedColumn.generationStrategy === "increment" && insertResult) {
        value = insertResult; // } else if (generatedColumn.generationStrategy === "uuid") {
        //     value = insertValue[generatedColumn.databaseName];
      }

      if (!value) return map;
      return _util_OrmUtils__WEBPACK_IMPORTED_MODULE_3__["OrmUtils"].mergeDeep(map, generatedColumn.createValueMap(value));
    }, {});
    return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;
  };
  /**
   * Differentiate columns of this table and columns from the given column metadatas columns
   * and returns only changed.
   */


  AbstractSqliteDriver.prototype.findChangedColumns = function (tableColumns, columnMetadatas) {
    var _this = this;

    return columnMetadatas.filter(function (columnMetadata) {
      var tableColumn = tableColumns.find(function (c) {
        return c.name === columnMetadata.databaseName;
      });
      if (!tableColumn) return false; // we don't need new columns, we only need exist and changed
      // console.log("table:", columnMetadata.entityMetadata.tableName);
      // console.log("name:", tableColumn.name, columnMetadata.databaseName);
      // console.log("type:", tableColumn.type, this.normalizeType(columnMetadata));
      // console.log("length:", tableColumn.length, columnMetadata.length);
      // console.log("precision:", tableColumn.precision, columnMetadata.precision);
      // console.log("scale:", tableColumn.scale, columnMetadata.scale);
      // console.log("comment:", tableColumn.comment, columnMetadata.comment);
      // console.log("default:", tableColumn.default, columnMetadata.default);
      // console.log("isPrimary:", tableColumn.isPrimary, columnMetadata.isPrimary);
      // console.log("isNullable:", tableColumn.isNullable, columnMetadata.isNullable);
      // console.log("isUnique:", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));
      // console.log("isGenerated:", tableColumn.isGenerated, columnMetadata.isGenerated);
      // console.log("==========================================");

      return tableColumn.name !== columnMetadata.databaseName || tableColumn.type !== _this.normalizeType(columnMetadata) || tableColumn.length !== columnMetadata.length || tableColumn.precision !== columnMetadata.precision || tableColumn.scale !== columnMetadata.scale //  || tableColumn.comment !== columnMetadata.comment || // todo
      || _this.normalizeDefault(columnMetadata) !== tableColumn["default"] || tableColumn.isPrimary !== columnMetadata.isPrimary || tableColumn.isNullable !== columnMetadata.isNullable || tableColumn.isUnique !== _this.normalizeIsUnique(columnMetadata) || columnMetadata.generationStrategy !== "uuid" && tableColumn.isGenerated !== columnMetadata.isGenerated;
    });
  };
  /**
   * Returns true if driver supports RETURNING / OUTPUT statement.
   */


  AbstractSqliteDriver.prototype.isReturningSqlSupported = function () {
    return false;
  };
  /**
   * Returns true if driver supports uuid values generation on its own.
   */


  AbstractSqliteDriver.prototype.isUUIDGenerationSupported = function () {
    return false;
  };
  /**
   * Creates an escaped parameter.
   */


  AbstractSqliteDriver.prototype.createParameter = function (parameterName, index) {
    // return "$" + (index + 1);
    return "?"; // return "$" + parameterName;
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Creates connection with the database.
   */


  AbstractSqliteDriver.prototype.createDatabaseConnection = function () {
    throw new Error("Do not use AbstractSqlite directly, it has to be used with one of the sqlite drivers");
  };
  /**
   * If driver dependency is not given explicitly, then try to load it via "require".
   */


  AbstractSqliteDriver.prototype.loadDependencies = function () {// dependencies have to be loaded in the specific driver
  };

  return AbstractSqliteDriver;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteQueryRunner.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteQueryRunner.js ***!
  \******************************************************************************************/
/*! exports provided: AbstractSqliteQueryRunner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractSqliteQueryRunner", function() { return AbstractSqliteQueryRunner; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _error_TransactionAlreadyStartedError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error/TransactionAlreadyStartedError */ "./node_modules/typeorm/browser/error/TransactionAlreadyStartedError.js");
/* harmony import */ var _error_TransactionNotStartedError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../error/TransactionNotStartedError */ "./node_modules/typeorm/browser/error/TransactionNotStartedError.js");
/* harmony import */ var _schema_builder_table_TableColumn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../schema-builder/table/TableColumn */ "./node_modules/typeorm/browser/schema-builder/table/TableColumn.js");
/* harmony import */ var _metadata_ColumnMetadata__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../metadata/ColumnMetadata */ "./node_modules/typeorm/browser/metadata/ColumnMetadata.js");
/* harmony import */ var _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../schema-builder/table/Table */ "./node_modules/typeorm/browser/schema-builder/table/Table.js");
/* harmony import */ var _schema_builder_table_TableIndex__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../schema-builder/table/TableIndex */ "./node_modules/typeorm/browser/schema-builder/table/TableIndex.js");
/* harmony import */ var _schema_builder_table_TableForeignKey__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../schema-builder/table/TableForeignKey */ "./node_modules/typeorm/browser/schema-builder/table/TableForeignKey.js");
/* harmony import */ var _schema_builder_view_View__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../schema-builder/view/View */ "./node_modules/typeorm/browser/schema-builder/view/View.js");
/* harmony import */ var _Query__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../Query */ "./node_modules/typeorm/browser/driver/Query.js");
/* harmony import */ var _schema_builder_table_TableUnique__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../schema-builder/table/TableUnique */ "./node_modules/typeorm/browser/schema-builder/table/TableUnique.js");
/* harmony import */ var _query_runner_BaseQueryRunner__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../query-runner/BaseQueryRunner */ "./node_modules/typeorm/browser/query-runner/BaseQueryRunner.js");
/* harmony import */ var _util_OrmUtils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../util/OrmUtils */ "./node_modules/typeorm/browser/util/OrmUtils.js");
/* harmony import */ var _schema_builder_table_TableCheck__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../schema-builder/table/TableCheck */ "./node_modules/typeorm/browser/schema-builder/table/TableCheck.js");














/**
 * Runs queries on a single sqlite database connection.
 */

var AbstractSqliteQueryRunner =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](AbstractSqliteQueryRunner, _super); // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------


  function AbstractSqliteQueryRunner() {
    return _super.call(this) || this;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Creates/uses database connection from the connection pool to perform further operations.
   * Returns obtained database connection.
   */


  AbstractSqliteQueryRunner.prototype.connect = function () {
    return Promise.resolve(this.driver.databaseConnection);
  };
  /**
   * Releases used database connection.
   * We just clear loaded tables and sql in memory, because sqlite do not support multiple connections thus query runners.
   */


  AbstractSqliteQueryRunner.prototype.release = function () {
    this.loadedTables = [];
    this.clearSqlMemory();
    return Promise.resolve();
  };
  /**
   * Starts transaction.
   */


  AbstractSqliteQueryRunner.prototype.startTransaction = function (isolationLevel) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (this.isTransactionActive) throw new _error_TransactionAlreadyStartedError__WEBPACK_IMPORTED_MODULE_1__["TransactionAlreadyStartedError"]();
            this.isTransactionActive = true;
            if (!isolationLevel) return [3
            /*break*/
            , 4];

            if (isolationLevel !== "READ UNCOMMITTED" && isolationLevel !== "SERIALIZABLE") {
              throw new Error("SQLite only supports SERIALIZABLE and READ UNCOMMITTED isolation");
            }

            if (!(isolationLevel === "READ UNCOMMITTED")) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , this.query("PRAGMA read_uncommitted = true")];

          case 1:
            _a.sent();

            return [3
            /*break*/
            , 4];

          case 2:
            return [4
            /*yield*/
            , this.query("PRAGMA read_uncommitted = false")];

          case 3:
            _a.sent();

            _a.label = 4;

          case 4:
            return [4
            /*yield*/
            , this.query("BEGIN TRANSACTION")];

          case 5:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Commits transaction.
   * Error will be thrown if transaction was not started.
   */


  AbstractSqliteQueryRunner.prototype.commitTransaction = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!this.isTransactionActive) throw new _error_TransactionNotStartedError__WEBPACK_IMPORTED_MODULE_2__["TransactionNotStartedError"]();
            return [4
            /*yield*/
            , this.query("COMMIT")];

          case 1:
            _a.sent();

            this.isTransactionActive = false;
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Rollbacks transaction.
   * Error will be thrown if transaction was not started.
   */


  AbstractSqliteQueryRunner.prototype.rollbackTransaction = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!this.isTransactionActive) throw new _error_TransactionNotStartedError__WEBPACK_IMPORTED_MODULE_2__["TransactionNotStartedError"]();
            return [4
            /*yield*/
            , this.query("ROLLBACK")];

          case 1:
            _a.sent();

            this.isTransactionActive = false;
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns raw data stream.
   */


  AbstractSqliteQueryRunner.prototype.stream = function (query, parameters, onEnd, onError) {
    throw new Error("Stream is not supported by sqlite driver.");
  };
  /**
   * Returns all available database names including system databases.
   */


  AbstractSqliteQueryRunner.prototype.getDatabases = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , Promise.resolve([])];
      });
    });
  };
  /**
   * Returns all available schema names including system schemas.
   * If database parameter specified, returns schemas of that database.
   */


  AbstractSqliteQueryRunner.prototype.getSchemas = function (database) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , Promise.resolve([])];
      });
    });
  };
  /**
   * Checks if database with the given name exist.
   */


  AbstractSqliteQueryRunner.prototype.hasDatabase = function (database) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , Promise.resolve(false)];
      });
    });
  };
  /**
   * Checks if schema with the given name exist.
   */


  AbstractSqliteQueryRunner.prototype.hasSchema = function (schema) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("This driver does not support table schemas");
      });
    });
  };
  /**
   * Checks if table with the given name exist in the database.
   */


  AbstractSqliteQueryRunner.prototype.hasTable = function (tableOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var tableName, sql, result;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            tableName = tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"] ? tableOrName.name : tableOrName;
            sql = "SELECT * FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" = '" + tableName + "'";
            return [4
            /*yield*/
            , this.query(sql)];

          case 1:
            result = _a.sent();
            return [2
            /*return*/
            , result.length ? true : false];
        }
      });
    });
  };
  /**
   * Checks if column with the given name exist in the given table.
   */


  AbstractSqliteQueryRunner.prototype.hasColumn = function (tableOrName, columnName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var tableName, sql, columns;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            tableName = tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"] ? tableOrName.name : tableOrName;
            sql = "PRAGMA table_info(\"" + tableName + "\")";
            return [4
            /*yield*/
            , this.query(sql)];

          case 1:
            columns = _a.sent();
            return [2
            /*return*/
            , !!columns.find(function (column) {
              return column["name"] === columnName;
            })];
        }
      });
    });
  };
  /**
   * Creates a new database.
   */


  AbstractSqliteQueryRunner.prototype.createDatabase = function (database, ifNotExist) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , Promise.resolve()];
      });
    });
  };
  /**
   * Drops database.
   */


  AbstractSqliteQueryRunner.prototype.dropDatabase = function (database, ifExist) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , Promise.resolve()];
      });
    });
  };
  /**
   * Creates a new table schema.
   */


  AbstractSqliteQueryRunner.prototype.createSchema = function (schema, ifNotExist) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , Promise.resolve()];
      });
    });
  };
  /**
   * Drops table schema.
   */


  AbstractSqliteQueryRunner.prototype.dropSchema = function (schemaPath, ifExist) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , Promise.resolve()];
      });
    });
  };
  /**
   * Creates a new table.
   */


  AbstractSqliteQueryRunner.prototype.createTable = function (table, ifNotExist, createForeignKeys, createIndices) {
    if (ifNotExist === void 0) {
      ifNotExist = false;
    }

    if (createForeignKeys === void 0) {
      createForeignKeys = true;
    }

    if (createIndices === void 0) {
      createIndices = true;
    }

    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var upQueries, downQueries, isTableExist;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            upQueries = [];
            downQueries = [];
            if (!ifNotExist) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , this.hasTable(table)];

          case 1:
            isTableExist = _a.sent();
            if (isTableExist) return [2
            /*return*/
            , Promise.resolve()];
            _a.label = 2;

          case 2:
            upQueries.push(this.createTableSql(table, createForeignKeys));
            downQueries.push(this.dropTableSql(table));

            if (createIndices) {
              table.indices.forEach(function (index) {
                // new index may be passed without name. In this case we generate index name manually.
                if (!index.name) index.name = _this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);
                upQueries.push(_this.createIndexSql(table, index));
                downQueries.push(_this.dropIndexSql(index));
              });
            }

            return [4
            /*yield*/
            , this.executeQueries(upQueries, downQueries)];

          case 3:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops the table.
   */


  AbstractSqliteQueryRunner.prototype.dropTable = function (tableOrName, ifExist, dropForeignKeys, dropIndices) {
    if (dropForeignKeys === void 0) {
      dropForeignKeys = true;
    }

    if (dropIndices === void 0) {
      dropIndices = true;
    }

    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var isTableExist, createForeignKeys, table, _a, upQueries, downQueries;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!ifExist) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , this.hasTable(tableOrName)];

          case 1:
            isTableExist = _b.sent();
            if (!isTableExist) return [2
            /*return*/
            , Promise.resolve()];
            _b.label = 2;

          case 2:
            createForeignKeys = dropForeignKeys;
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"])) return [3
            /*break*/
            , 3];
            _a = tableOrName;
            return [3
            /*break*/
            , 5];

          case 3:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 4:
            _a = _b.sent();
            _b.label = 5;

          case 5:
            table = _a;
            upQueries = [];
            downQueries = [];

            if (dropIndices) {
              table.indices.forEach(function (index) {
                upQueries.push(_this.dropIndexSql(index));
                downQueries.push(_this.createIndexSql(table, index));
              });
            }

            upQueries.push(this.dropTableSql(table, ifExist));
            downQueries.push(this.createTableSql(table, createForeignKeys));
            return [4
            /*yield*/
            , this.executeQueries(upQueries, downQueries)];

          case 6:
            _b.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new view.
   */


  AbstractSqliteQueryRunner.prototype.createView = function (view) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var upQueries, downQueries;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            upQueries = [];
            downQueries = [];
            upQueries.push(this.createViewSql(view));
            upQueries.push(this.insertViewDefinitionSql(view));
            downQueries.push(this.dropViewSql(view));
            downQueries.push(this.deleteViewDefinitionSql(view));
            return [4
            /*yield*/
            , this.executeQueries(upQueries, downQueries)];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops the view.
   */


  AbstractSqliteQueryRunner.prototype.dropView = function (target) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var viewName, view, upQueries, downQueries;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            viewName = target instanceof _schema_builder_view_View__WEBPACK_IMPORTED_MODULE_8__["View"] ? target.name : target;
            return [4
            /*yield*/
            , this.getCachedView(viewName)];

          case 1:
            view = _a.sent();
            upQueries = [];
            downQueries = [];
            upQueries.push(this.deleteViewDefinitionSql(view));
            upQueries.push(this.dropViewSql(view));
            downQueries.push(this.insertViewDefinitionSql(view));
            downQueries.push(this.createViewSql(view));
            return [4
            /*yield*/
            , this.executeQueries(upQueries, downQueries)];

          case 2:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Renames the given table.
   */


  AbstractSqliteQueryRunner.prototype.renameTable = function (oldTableOrName, newTableName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var oldTable, _a, newTable, up, down;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(oldTableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"])) return [3
            /*break*/
            , 1];
            _a = oldTableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(oldTableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            oldTable = _a;
            newTable = oldTable.clone();
            newTable.name = newTableName;
            up = new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE \"" + oldTable.name + "\" RENAME TO \"" + newTableName + "\"");
            down = new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE \"" + newTableName + "\" RENAME TO \"" + oldTable.name + "\"");
            return [4
            /*yield*/
            , this.executeQueries(up, down)];

          case 4:
            _b.sent(); // rename old table;


            oldTable.name = newTable.name; // rename unique constraints

            newTable.uniques.forEach(function (unique) {
              unique.name = _this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);
            }); // rename foreign key constraints

            newTable.foreignKeys.forEach(function (foreignKey) {
              foreignKey.name = _this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);
            }); // rename indices

            newTable.indices.forEach(function (index) {
              index.name = _this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);
            }); // recreate table with new constraint names

            return [4
            /*yield*/
            , this.recreateTable(newTable, oldTable)];

          case 5:
            // recreate table with new constraint names
            _b.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new column from the column in the table.
   */


  AbstractSqliteQueryRunner.prototype.addColumn = function (tableOrName, column) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            return [2
            /*return*/
            , this.addColumns(table, [column])];
        }
      });
    });
  };
  /**
   * Creates a new columns from the column in the table.
   */


  AbstractSqliteQueryRunner.prototype.addColumns = function (tableOrName, columns) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, changedTable;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            changedTable = table.clone();
            columns.forEach(function (column) {
              return changedTable.addColumn(column);
            });
            return [4
            /*yield*/
            , this.recreateTable(changedTable, table)];

          case 4:
            _b.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Renames column in the given table.
   */


  AbstractSqliteQueryRunner.prototype.renameColumn = function (tableOrName, oldTableColumnOrName, newTableColumnOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, oldColumn, newColumn;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            oldColumn = oldTableColumnOrName instanceof _schema_builder_table_TableColumn__WEBPACK_IMPORTED_MODULE_3__["TableColumn"] ? oldTableColumnOrName : table.columns.find(function (c) {
              return c.name === oldTableColumnOrName;
            });
            if (!oldColumn) throw new Error("Column \"" + oldTableColumnOrName + "\" was not found in the \"" + table.name + "\" table.");
            newColumn = undefined;

            if (newTableColumnOrName instanceof _schema_builder_table_TableColumn__WEBPACK_IMPORTED_MODULE_3__["TableColumn"]) {
              newColumn = newTableColumnOrName;
            } else {
              newColumn = oldColumn.clone();
              newColumn.name = newTableColumnOrName;
            }

            return [2
            /*return*/
            , this.changeColumn(table, oldColumn, newColumn)];
        }
      });
    });
  };
  /**
   * Changes a column in the table.
   */


  AbstractSqliteQueryRunner.prototype.changeColumn = function (tableOrName, oldTableColumnOrName, newColumn) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, oldColumn;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            oldColumn = oldTableColumnOrName instanceof _schema_builder_table_TableColumn__WEBPACK_IMPORTED_MODULE_3__["TableColumn"] ? oldTableColumnOrName : table.columns.find(function (c) {
              return c.name === oldTableColumnOrName;
            });
            if (!oldColumn) throw new Error("Column \"" + oldTableColumnOrName + "\" was not found in the \"" + table.name + "\" table.");
            return [4
            /*yield*/
            , this.changeColumns(table, [{
              oldColumn: oldColumn,
              newColumn: newColumn
            }])];

          case 4:
            _b.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Changes a column in the table.
   * Changed column looses all its keys in the db.
   */


  AbstractSqliteQueryRunner.prototype.changeColumns = function (tableOrName, changedColumns) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, changedTable;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            changedTable = table.clone();
            changedColumns.forEach(function (changedColumnSet) {
              if (changedColumnSet.newColumn.name !== changedColumnSet.oldColumn.name) {
                changedTable.findColumnUniques(changedColumnSet.oldColumn).forEach(function (unique) {
                  unique.columnNames.splice(unique.columnNames.indexOf(changedColumnSet.oldColumn.name), 1);
                  unique.columnNames.push(changedColumnSet.newColumn.name);
                  unique.name = _this.connection.namingStrategy.uniqueConstraintName(changedTable, unique.columnNames);
                });
                changedTable.findColumnForeignKeys(changedColumnSet.oldColumn).forEach(function (fk) {
                  fk.columnNames.splice(fk.columnNames.indexOf(changedColumnSet.oldColumn.name), 1);
                  fk.columnNames.push(changedColumnSet.newColumn.name);
                  fk.name = _this.connection.namingStrategy.foreignKeyName(changedTable, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);
                });
                changedTable.findColumnIndices(changedColumnSet.oldColumn).forEach(function (index) {
                  index.columnNames.splice(index.columnNames.indexOf(changedColumnSet.oldColumn.name), 1);
                  index.columnNames.push(changedColumnSet.newColumn.name);
                  index.name = _this.connection.namingStrategy.indexName(changedTable, index.columnNames, index.where);
                });
              }

              var originalColumn = changedTable.columns.find(function (column) {
                return column.name === changedColumnSet.oldColumn.name;
              });
              if (originalColumn) changedTable.columns[changedTable.columns.indexOf(originalColumn)] = changedColumnSet.newColumn;
            });
            return [4
            /*yield*/
            , this.recreateTable(changedTable, table)];

          case 4:
            _b.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops column in the table.
   */


  AbstractSqliteQueryRunner.prototype.dropColumn = function (tableOrName, columnOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, column;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            column = columnOrName instanceof _schema_builder_table_TableColumn__WEBPACK_IMPORTED_MODULE_3__["TableColumn"] ? columnOrName : table.findColumnByName(columnOrName);
            if (!column) throw new Error("Column \"" + columnOrName + "\" was not found in table \"" + table.name + "\"");
            return [4
            /*yield*/
            , this.dropColumns(table, [column])];

          case 4:
            _b.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops the columns in the table.
   */


  AbstractSqliteQueryRunner.prototype.dropColumns = function (tableOrName, columns) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, changedTable;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            changedTable = table.clone();
            columns.forEach(function (column) {
              changedTable.removeColumn(column);
              changedTable.findColumnUniques(column).forEach(function (unique) {
                return changedTable.removeUniqueConstraint(unique);
              });
              changedTable.findColumnIndices(column).forEach(function (index) {
                return changedTable.removeIndex(index);
              });
              changedTable.findColumnForeignKeys(column).forEach(function (fk) {
                return changedTable.removeForeignKey(fk);
              });
            });
            return [4
            /*yield*/
            , this.recreateTable(changedTable, table)];

          case 4:
            _b.sent(); // remove column and its constraints from original table.


            columns.forEach(function (column) {
              table.removeColumn(column);
              table.findColumnUniques(column).forEach(function (unique) {
                return table.removeUniqueConstraint(unique);
              });
              table.findColumnIndices(column).forEach(function (index) {
                return table.removeIndex(index);
              });
              table.findColumnForeignKeys(column).forEach(function (fk) {
                return table.removeForeignKey(fk);
              });
            });
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new primary key.
   */


  AbstractSqliteQueryRunner.prototype.createPrimaryKey = function (tableOrName, columnNames) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, changedTable;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            changedTable = table.clone();
            changedTable.columns.forEach(function (column) {
              if (columnNames.find(function (columnName) {
                return columnName === column.name;
              })) column.isPrimary = true;
            });
            return [4
            /*yield*/
            , this.recreateTable(changedTable, table)];

          case 4:
            _b.sent(); // mark columns as primary in original table


            table.columns.forEach(function (column) {
              if (columnNames.find(function (columnName) {
                return columnName === column.name;
              })) column.isPrimary = true;
            });
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Updates composite primary keys.
   */


  AbstractSqliteQueryRunner.prototype.updatePrimaryKeys = function (tableOrName, columns) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , Promise.resolve()];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops a primary key.
   */


  AbstractSqliteQueryRunner.prototype.dropPrimaryKey = function (tableOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, changedTable;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            changedTable = table.clone();
            changedTable.primaryColumns.forEach(function (column) {
              column.isPrimary = false;
            });
            return [4
            /*yield*/
            , this.recreateTable(changedTable, table)];

          case 4:
            _b.sent(); // mark primary columns as non-primary in original table


            table.primaryColumns.forEach(function (column) {
              column.isPrimary = false;
            });
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new unique constraint.
   */


  AbstractSqliteQueryRunner.prototype.createUniqueConstraint = function (tableOrName, uniqueConstraint) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.createUniqueConstraints(tableOrName, [uniqueConstraint])];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new unique constraints.
   */


  AbstractSqliteQueryRunner.prototype.createUniqueConstraints = function (tableOrName, uniqueConstraints) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, changedTable;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            changedTable = table.clone();
            uniqueConstraints.forEach(function (uniqueConstraint) {
              return changedTable.addUniqueConstraint(uniqueConstraint);
            });
            return [4
            /*yield*/
            , this.recreateTable(changedTable, table)];

          case 4:
            _b.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops an unique constraint.
   */


  AbstractSqliteQueryRunner.prototype.dropUniqueConstraint = function (tableOrName, uniqueOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, uniqueConstraint;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            uniqueConstraint = uniqueOrName instanceof _schema_builder_table_TableUnique__WEBPACK_IMPORTED_MODULE_10__["TableUnique"] ? uniqueOrName : table.uniques.find(function (u) {
              return u.name === uniqueOrName;
            });
            if (!uniqueConstraint) throw new Error("Supplied unique constraint was not found in table " + table.name);
            return [4
            /*yield*/
            , this.dropUniqueConstraints(table, [uniqueConstraint])];

          case 4:
            _b.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates an unique constraints.
   */


  AbstractSqliteQueryRunner.prototype.dropUniqueConstraints = function (tableOrName, uniqueConstraints) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, changedTable;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            changedTable = table.clone();
            uniqueConstraints.forEach(function (uniqueConstraint) {
              return changedTable.removeUniqueConstraint(uniqueConstraint);
            });
            return [4
            /*yield*/
            , this.recreateTable(changedTable, table)];

          case 4:
            _b.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates new check constraint.
   */


  AbstractSqliteQueryRunner.prototype.createCheckConstraint = function (tableOrName, checkConstraint) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.createCheckConstraints(tableOrName, [checkConstraint])];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates new check constraints.
   */


  AbstractSqliteQueryRunner.prototype.createCheckConstraints = function (tableOrName, checkConstraints) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, changedTable;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            changedTable = table.clone();
            checkConstraints.forEach(function (checkConstraint) {
              return changedTable.addCheckConstraint(checkConstraint);
            });
            return [4
            /*yield*/
            , this.recreateTable(changedTable, table)];

          case 4:
            _b.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops check constraint.
   */


  AbstractSqliteQueryRunner.prototype.dropCheckConstraint = function (tableOrName, checkOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, checkConstraint;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            checkConstraint = checkOrName instanceof _schema_builder_table_TableCheck__WEBPACK_IMPORTED_MODULE_13__["TableCheck"] ? checkOrName : table.checks.find(function (c) {
              return c.name === checkOrName;
            });
            if (!checkConstraint) throw new Error("Supplied check constraint was not found in table " + table.name);
            return [4
            /*yield*/
            , this.dropCheckConstraints(table, [checkConstraint])];

          case 4:
            _b.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops check constraints.
   */


  AbstractSqliteQueryRunner.prototype.dropCheckConstraints = function (tableOrName, checkConstraints) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, changedTable;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            changedTable = table.clone();
            checkConstraints.forEach(function (checkConstraint) {
              return changedTable.removeCheckConstraint(checkConstraint);
            });
            return [4
            /*yield*/
            , this.recreateTable(changedTable, table)];

          case 4:
            _b.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new exclusion constraint.
   */


  AbstractSqliteQueryRunner.prototype.createExclusionConstraint = function (tableOrName, exclusionConstraint) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("Sqlite does not support exclusion constraints.");
      });
    });
  };
  /**
   * Creates a new exclusion constraints.
   */


  AbstractSqliteQueryRunner.prototype.createExclusionConstraints = function (tableOrName, exclusionConstraints) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("Sqlite does not support exclusion constraints.");
      });
    });
  };
  /**
   * Drops exclusion constraint.
   */


  AbstractSqliteQueryRunner.prototype.dropExclusionConstraint = function (tableOrName, exclusionOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("Sqlite does not support exclusion constraints.");
      });
    });
  };
  /**
   * Drops exclusion constraints.
   */


  AbstractSqliteQueryRunner.prototype.dropExclusionConstraints = function (tableOrName, exclusionConstraints) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        throw new Error("Sqlite does not support exclusion constraints.");
      });
    });
  };
  /**
   * Creates a new foreign key.
   */


  AbstractSqliteQueryRunner.prototype.createForeignKey = function (tableOrName, foreignKey) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.createForeignKeys(tableOrName, [foreignKey])];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new foreign keys.
   */


  AbstractSqliteQueryRunner.prototype.createForeignKeys = function (tableOrName, foreignKeys) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, changedTable;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            changedTable = table.clone();
            foreignKeys.forEach(function (foreignKey) {
              return changedTable.addForeignKey(foreignKey);
            });
            return [4
            /*yield*/
            , this.recreateTable(changedTable, table)];

          case 4:
            _b.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops a foreign key from the table.
   */


  AbstractSqliteQueryRunner.prototype.dropForeignKey = function (tableOrName, foreignKeyOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, foreignKey;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            foreignKey = foreignKeyOrName instanceof _schema_builder_table_TableForeignKey__WEBPACK_IMPORTED_MODULE_7__["TableForeignKey"] ? foreignKeyOrName : table.foreignKeys.find(function (fk) {
              return fk.name === foreignKeyOrName;
            });
            if (!foreignKey) throw new Error("Supplied foreign key was not found in table " + table.name);
            return [4
            /*yield*/
            , this.dropForeignKeys(tableOrName, [foreignKey])];

          case 4:
            _b.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops a foreign keys from the table.
   */


  AbstractSqliteQueryRunner.prototype.dropForeignKeys = function (tableOrName, foreignKeys) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, changedTable;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            changedTable = table.clone();
            foreignKeys.forEach(function (foreignKey) {
              return changedTable.removeForeignKey(foreignKey);
            });
            return [4
            /*yield*/
            , this.recreateTable(changedTable, table)];

          case 4:
            _b.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new index.
   */


  AbstractSqliteQueryRunner.prototype.createIndex = function (tableOrName, index) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, up, down;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a; // new index may be passed without name. In this case we generate index name manually.

            if (!index.name) index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);
            up = this.createIndexSql(table, index);
            down = this.dropIndexSql(index);
            return [4
            /*yield*/
            , this.executeQueries(up, down)];

          case 4:
            _b.sent();

            table.addIndex(index);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new indices
   */


  AbstractSqliteQueryRunner.prototype.createIndices = function (tableOrName, indices) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var promises;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            promises = indices.map(function (index) {
              return _this.createIndex(tableOrName, index);
            });
            return [4
            /*yield*/
            , Promise.all(promises)];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops an index from the table.
   */


  AbstractSqliteQueryRunner.prototype.dropIndex = function (tableOrName, indexOrName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, _a, index, up, down;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"])) return [3
            /*break*/
            , 1];
            _a = tableOrName;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.getCachedTable(tableOrName)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            table = _a;
            index = indexOrName instanceof _schema_builder_table_TableIndex__WEBPACK_IMPORTED_MODULE_6__["TableIndex"] ? indexOrName : table.indices.find(function (i) {
              return i.name === indexOrName;
            });
            if (!index) throw new Error("Supplied index was not found in table " + table.name);
            up = this.dropIndexSql(index);
            down = this.createIndexSql(table, index);
            return [4
            /*yield*/
            , this.executeQueries(up, down)];

          case 4:
            _b.sent();

            table.removeIndex(index);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops an indices from the table.
   */


  AbstractSqliteQueryRunner.prototype.dropIndices = function (tableOrName, indices) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var promises;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            promises = indices.map(function (index) {
              return _this.dropIndex(tableOrName, index);
            });
            return [4
            /*yield*/
            , Promise.all(promises)];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Clears all table contents.
   * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.
   */


  AbstractSqliteQueryRunner.prototype.clearTable = function (tableName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.query("DELETE FROM \"" + tableName + "\"")];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Removes all tables from the currently connected database.
   */


  AbstractSqliteQueryRunner.prototype.clearDatabase = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var selectViewDropsQuery, dropViewQueries, selectTableDropsQuery, dropTableQueries, error_1, rollbackError_1;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.query("PRAGMA foreign_keys = OFF;")];

          case 1:
            _a.sent();

            return [4
            /*yield*/
            , this.startTransaction()];

          case 2:
            _a.sent();

            _a.label = 3;

          case 3:
            _a.trys.push([3, 9, 14, 16]);

            selectViewDropsQuery = "SELECT 'DROP VIEW \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'view'";
            return [4
            /*yield*/
            , this.query(selectViewDropsQuery)];

          case 4:
            dropViewQueries = _a.sent();
            return [4
            /*yield*/
            , Promise.all(dropViewQueries.map(function (q) {
              return _this.query(q["query"]);
            }))];

          case 5:
            _a.sent();

            selectTableDropsQuery = "SELECT 'DROP TABLE \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" != 'sqlite_sequence'";
            return [4
            /*yield*/
            , this.query(selectTableDropsQuery)];

          case 6:
            dropTableQueries = _a.sent();
            return [4
            /*yield*/
            , Promise.all(dropTableQueries.map(function (q) {
              return _this.query(q["query"]);
            }))];

          case 7:
            _a.sent();

            return [4
            /*yield*/
            , this.commitTransaction()];

          case 8:
            _a.sent();

            return [3
            /*break*/
            , 16];

          case 9:
            error_1 = _a.sent();
            _a.label = 10;

          case 10:
            _a.trys.push([10, 12,, 13]);

            return [4
            /*yield*/
            , this.rollbackTransaction()];

          case 11:
            _a.sent();

            return [3
            /*break*/
            , 13];

          case 12:
            rollbackError_1 = _a.sent();
            return [3
            /*break*/
            , 13];

          case 13:
            throw error_1;

          case 14:
            return [4
            /*yield*/
            , this.query("PRAGMA foreign_keys = ON;")];

          case 15:
            _a.sent();

            return [7
            /*endfinally*/
            ];

          case 16:
            return [2
            /*return*/
            ];
        }
      });
    });
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------


  AbstractSqliteQueryRunner.prototype.loadViews = function (viewNames) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var hasTable, viewNamesString, query, dbViews;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.hasTable(this.getTypeormMetadataTableName())];

          case 1:
            hasTable = _a.sent();
            if (!hasTable) return [2
            /*return*/
            , Promise.resolve([])];
            viewNamesString = viewNames.map(function (name) {
              return "'" + name + "'";
            }).join(", ");
            query = "SELECT \"t\".* FROM \"" + this.getTypeormMetadataTableName() + "\" \"t\" INNER JOIN \"sqlite_master\" s ON \"s\".\"name\" = \"t\".\"name\" AND \"s\".\"type\" = 'view' WHERE \"t\".\"type\" = 'VIEW'";
            if (viewNamesString.length > 0) query += " AND \"t\".\"name\" IN (" + viewNamesString + ")";
            return [4
            /*yield*/
            , this.query(query)];

          case 2:
            dbViews = _a.sent();
            return [2
            /*return*/
            , dbViews.map(function (dbView) {
              var view = new _schema_builder_view_View__WEBPACK_IMPORTED_MODULE_8__["View"]();
              view.name = dbView["name"];
              view.expression = dbView["value"];
              return view;
            })];
        }
      });
    });
  };
  /**
   * Loads all tables (with given names) from the database and creates a Table from them.
   */


  AbstractSqliteQueryRunner.prototype.loadTables = function (tableNames) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var tableNamesString, dbTables, dbIndicesDef;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            // if no tables given then no need to proceed
            if (!tableNames || !tableNames.length) return [2
            /*return*/
            , []];
            tableNamesString = tableNames.map(function (tableName) {
              return "'" + tableName + "'";
            }).join(", ");
            return [4
            /*yield*/
            , this.query("SELECT * FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" IN (" + tableNamesString + ")")];

          case 1:
            dbTables = _a.sent();
            return [4
            /*yield*/
            , this.query("SELECT * FROM \"sqlite_master\" WHERE \"type\" = 'index' AND \"tbl_name\" IN (" + tableNamesString + ")")];

          case 2:
            dbIndicesDef = _a.sent(); // if tables were not found in the db, no need to proceed

            if (!dbTables || !dbTables.length) return [2
            /*return*/
            , []]; // create table schemas for loaded tables

            return [2
            /*return*/
            , Promise.all(dbTables.map(function (dbTable) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var table, sql, _a, dbColumns, dbIndices, dbForeignKeys, autoIncrementColumnName, tableSql, autoIncrementIndex, comma, bracket, tableForeignKeyConstraints, tableUniquePromises, _b, result, regexp, indicesPromises, indices;

                var _this = this;

                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_c) {
                  switch (_c.label) {
                    case 0:
                      table = new _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"]({
                        name: dbTable["name"]
                      });
                      sql = dbTable["sql"];
                      return [4
                      /*yield*/
                      , Promise.all([this.query("PRAGMA table_info(\"" + dbTable["name"] + "\")"), this.query("PRAGMA index_list(\"" + dbTable["name"] + "\")"), this.query("PRAGMA foreign_key_list(\"" + dbTable["name"] + "\")")])];

                    case 1:
                      _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"].apply(void 0, [_c.sent(), 3]), dbColumns = _a[0], dbIndices = _a[1], dbForeignKeys = _a[2];
                      autoIncrementColumnName = undefined;
                      tableSql = dbTable["sql"];
                      autoIncrementIndex = tableSql.toUpperCase().indexOf("AUTOINCREMENT");

                      if (autoIncrementIndex !== -1) {
                        autoIncrementColumnName = tableSql.substr(0, autoIncrementIndex);
                        comma = autoIncrementColumnName.lastIndexOf(",");
                        bracket = autoIncrementColumnName.lastIndexOf("(");

                        if (comma !== -1) {
                          autoIncrementColumnName = autoIncrementColumnName.substr(comma);
                          autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf("\""));
                          autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf("\"") + 1);
                        } else if (bracket !== -1) {
                          autoIncrementColumnName = autoIncrementColumnName.substr(bracket);
                          autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf("\""));
                          autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf("\"") + 1);
                        }
                      } // create columns from the loaded columns


                      table.columns = dbColumns.map(function (dbColumn) {
                        var tableColumn = new _schema_builder_table_TableColumn__WEBPACK_IMPORTED_MODULE_3__["TableColumn"]();
                        tableColumn.name = dbColumn["name"];
                        tableColumn.type = dbColumn["type"].toLowerCase();
                        tableColumn["default"] = dbColumn["dflt_value"] !== null && dbColumn["dflt_value"] !== undefined ? dbColumn["dflt_value"] : undefined;
                        tableColumn.isNullable = dbColumn["notnull"] === 0; // primary keys are numbered starting with 1, columns that aren't primary keys are marked with 0

                        tableColumn.isPrimary = dbColumn["pk"] > 0;
                        tableColumn.comment = ""; // SQLite does not support column comments

                        tableColumn.isGenerated = autoIncrementColumnName === dbColumn["name"];

                        if (tableColumn.isGenerated) {
                          tableColumn.generationStrategy = "increment";
                        }

                        if (tableColumn.type === "varchar") {
                          // Check if this is an enum
                          var enumMatch = sql.match(new RegExp("\"(" + tableColumn.name + ")\" varchar CHECK\\s*\\(\\s*\\1\\s+IN\\s*\\(('[^']+'(?:\\s*,\\s*'[^']+')+)\\s*\\)\\s*\\)"));

                          if (enumMatch) {
                            // This is an enum
                            tableColumn.type = "simple-enum";
                            tableColumn["enum"] = enumMatch[2].substr(1, enumMatch[2].length - 2).split("','");
                          }
                        } // parse datatype and attempt to retrieve length


                        var pos = tableColumn.type.indexOf("(");

                        if (pos !== -1) {
                          var dataType_1 = tableColumn.type.substr(0, pos);

                          if (!!_this.driver.withLengthColumnTypes.find(function (col) {
                            return col === dataType_1;
                          })) {
                            var len = parseInt(tableColumn.type.substring(pos + 1, tableColumn.type.length - 1));

                            if (len) {
                              tableColumn.length = len.toString();
                              tableColumn.type = dataType_1; // remove the length part from the datatype
                            }
                          }
                        }

                        return tableColumn;
                      });
                      tableForeignKeyConstraints = _util_OrmUtils__WEBPACK_IMPORTED_MODULE_12__["OrmUtils"].uniq(dbForeignKeys, function (dbForeignKey) {
                        return dbForeignKey["id"];
                      });
                      table.foreignKeys = tableForeignKeyConstraints.map(function (foreignKey) {
                        var ownForeignKeys = dbForeignKeys.filter(function (dbForeignKey) {
                          return dbForeignKey["id"] === foreignKey["id"] && dbForeignKey["table"] === foreignKey["table"];
                        });
                        var columnNames = ownForeignKeys.map(function (dbForeignKey) {
                          return dbForeignKey["from"];
                        });
                        var referencedColumnNames = ownForeignKeys.map(function (dbForeignKey) {
                          return dbForeignKey["to"];
                        }); // build foreign key name, because we can not get it directly.

                        var fkName = _this.connection.namingStrategy.foreignKeyName(table, columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);

                        return new _schema_builder_table_TableForeignKey__WEBPACK_IMPORTED_MODULE_7__["TableForeignKey"]({
                          name: fkName,
                          columnNames: columnNames,
                          referencedTableName: foreignKey["table"],
                          referencedColumnNames: referencedColumnNames,
                          onDelete: foreignKey["on_delete"],
                          onUpdate: foreignKey["on_update"]
                        });
                      });
                      tableUniquePromises = dbIndices.filter(function (dbIndex) {
                        return dbIndex["origin"] === "u";
                      }).map(function (dbIndex) {
                        return dbIndex["name"];
                      }).filter(function (value, index, self) {
                        return self.indexOf(value) === index;
                      }).map(function (dbIndexName) {
                        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                          var dbIndex, indexInfos, indexColumns, column;
                          return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                            switch (_a.label) {
                              case 0:
                                dbIndex = dbIndices.find(function (dbIndex) {
                                  return dbIndex["name"] === dbIndexName;
                                });
                                return [4
                                /*yield*/
                                , this.query("PRAGMA index_info(\"" + dbIndex["name"] + "\")")];

                              case 1:
                                indexInfos = _a.sent();
                                indexColumns = indexInfos.sort(function (indexInfo1, indexInfo2) {
                                  return parseInt(indexInfo1["seqno"]) - parseInt(indexInfo2["seqno"]);
                                }).map(function (indexInfo) {
                                  return indexInfo["name"];
                                });

                                if (indexColumns.length === 1) {
                                  column = table.columns.find(function (column) {
                                    return !!indexColumns.find(function (indexColumn) {
                                      return indexColumn === column.name;
                                    });
                                  });
                                  if (column) column.isUnique = true;
                                } // Sqlite does not store unique constraint name, so we generate its name manually.


                                return [2
                                /*return*/
                                , new _schema_builder_table_TableUnique__WEBPACK_IMPORTED_MODULE_10__["TableUnique"]({
                                  name: this.connection.namingStrategy.uniqueConstraintName(table, indexColumns),
                                  columnNames: indexColumns
                                })];
                            }
                          });
                        });
                      });
                      _b = table;
                      return [4
                      /*yield*/
                      , Promise.all(tableUniquePromises)];

                    case 2:
                      _b.uniques = _c.sent();
                      regexp = /CONSTRAINT "([^"]*)" CHECK (\(.*?\))([,]|[)]$)/g;

                      while ((result = regexp.exec(sql)) !== null) {
                        table.checks.push(new _schema_builder_table_TableCheck__WEBPACK_IMPORTED_MODULE_13__["TableCheck"]({
                          name: result[1],
                          expression: result[2]
                        }));
                      }

                      indicesPromises = dbIndices.filter(function (dbIndex) {
                        return dbIndex["origin"] === "c";
                      }).map(function (dbIndex) {
                        return dbIndex["name"];
                      }).filter(function (value, index, self) {
                        return self.indexOf(value) === index;
                      }) // unqiue
                      .map(function (dbIndexName) {
                        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                          var indexDef, condition, dbIndex, indexInfos, indexColumns, isUnique;
                          return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                            switch (_a.label) {
                              case 0:
                                indexDef = dbIndicesDef.find(function (dbIndexDef) {
                                  return dbIndexDef["name"] === dbIndexName;
                                });
                                condition = /WHERE (.*)/.exec(indexDef["sql"]);
                                dbIndex = dbIndices.find(function (dbIndex) {
                                  return dbIndex["name"] === dbIndexName;
                                });
                                return [4
                                /*yield*/
                                , this.query("PRAGMA index_info(\"" + dbIndex["name"] + "\")")];

                              case 1:
                                indexInfos = _a.sent();
                                indexColumns = indexInfos.sort(function (indexInfo1, indexInfo2) {
                                  return parseInt(indexInfo1["seqno"]) - parseInt(indexInfo2["seqno"]);
                                }).map(function (indexInfo) {
                                  return indexInfo["name"];
                                });
                                isUnique = dbIndex["unique"] === "1" || dbIndex["unique"] === 1;
                                return [2
                                /*return*/
                                , new _schema_builder_table_TableIndex__WEBPACK_IMPORTED_MODULE_6__["TableIndex"]({
                                  table: table,
                                  name: dbIndex["name"],
                                  columnNames: indexColumns,
                                  isUnique: isUnique,
                                  where: condition ? condition[1] : undefined
                                })];
                            }
                          });
                        });
                      });
                      return [4
                      /*yield*/
                      , Promise.all(indicesPromises)];

                    case 3:
                      indices = _c.sent();
                      table.indices = indices.filter(function (index) {
                        return !!index;
                      });
                      return [2
                      /*return*/
                      , table];
                  }
                });
              });
            }))];
        }
      });
    });
  };
  /**
   * Builds create table sql.
   */


  AbstractSqliteQueryRunner.prototype.createTableSql = function (table, createForeignKeys) {
    var _this = this;

    var primaryColumns = table.columns.filter(function (column) {
      return column.isPrimary;
    });
    var hasAutoIncrement = primaryColumns.find(function (column) {
      return column.isGenerated && column.generationStrategy === "increment";
    });
    var skipPrimary = primaryColumns.length > 1;
    if (skipPrimary && hasAutoIncrement) throw new Error("Sqlite does not support AUTOINCREMENT on composite primary key");
    var columnDefinitions = table.columns.map(function (column) {
      return _this.buildCreateColumnSql(column, skipPrimary);
    }).join(", ");
    var sql = "CREATE TABLE \"" + table.name + "\" (" + columnDefinitions; // need for `addColumn()` method, because it recreates table.

    table.columns.filter(function (column) {
      return column.isUnique;
    }).forEach(function (column) {
      var isUniqueExist = table.uniques.some(function (unique) {
        return unique.columnNames.length === 1 && unique.columnNames[0] === column.name;
      });
      if (!isUniqueExist) table.uniques.push(new _schema_builder_table_TableUnique__WEBPACK_IMPORTED_MODULE_10__["TableUnique"]({
        name: _this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),
        columnNames: [column.name]
      }));
    });

    if (table.uniques.length > 0) {
      var uniquesSql = table.uniques.map(function (unique) {
        var uniqueName = unique.name ? unique.name : _this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);
        var columnNames = unique.columnNames.map(function (columnName) {
          return "\"" + columnName + "\"";
        }).join(", ");
        return "CONSTRAINT \"" + uniqueName + "\" UNIQUE (" + columnNames + ")";
      }).join(", ");
      sql += ", " + uniquesSql;
    }

    if (table.checks.length > 0) {
      var checksSql = table.checks.map(function (check) {
        var checkName = check.name ? check.name : _this.connection.namingStrategy.checkConstraintName(table.name, check.expression);
        return "CONSTRAINT \"" + checkName + "\" CHECK (" + check.expression + ")";
      }).join(", ");
      sql += ", " + checksSql;
    }

    if (table.foreignKeys.length > 0 && createForeignKeys) {
      var foreignKeysSql = table.foreignKeys.map(function (fk) {
        var columnNames = fk.columnNames.map(function (columnName) {
          return "\"" + columnName + "\"";
        }).join(", ");
        if (!fk.name) fk.name = _this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);
        var referencedColumnNames = fk.referencedColumnNames.map(function (columnName) {
          return "\"" + columnName + "\"";
        }).join(", ");
        var constraint = "CONSTRAINT \"" + fk.name + "\" FOREIGN KEY (" + columnNames + ") REFERENCES \"" + fk.referencedTableName + "\" (" + referencedColumnNames + ")";
        if (fk.onDelete) constraint += " ON DELETE " + fk.onDelete;
        if (fk.onUpdate) constraint += " ON UPDATE " + fk.onUpdate;
        return constraint;
      }).join(", ");
      sql += ", " + foreignKeysSql;
    }

    if (primaryColumns.length > 1) {
      var columnNames = primaryColumns.map(function (column) {
        return "\"" + column.name + "\"";
      }).join(", ");
      sql += ", PRIMARY KEY (" + columnNames + ")";
    }

    sql += ")";
    var tableMetadata = this.connection.entityMetadatas.find(function (metadata) {
      return metadata.tableName === table.name;
    });

    if (tableMetadata && tableMetadata.withoutRowid) {
      sql += " WITHOUT ROWID";
    }

    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](sql);
  };
  /**
   * Builds drop table sql.
   */


  AbstractSqliteQueryRunner.prototype.dropTableSql = function (tableOrName, ifExist) {
    var tableName = tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_5__["Table"] ? tableOrName.name : tableOrName;
    var query = ifExist ? "DROP TABLE IF EXISTS \"" + tableName + "\"" : "DROP TABLE \"" + tableName + "\"";
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](query);
  };

  AbstractSqliteQueryRunner.prototype.createViewSql = function (view) {
    if (typeof view.expression === "string") {
      return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("CREATE VIEW \"" + view.name + "\" AS " + view.expression);
    } else {
      return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("CREATE VIEW \"" + view.name + "\" AS " + view.expression(this.connection).getQuery());
    }
  };

  AbstractSqliteQueryRunner.prototype.insertViewDefinitionSql = function (view) {
    var expression = typeof view.expression === "string" ? view.expression.trim() : view.expression(this.connection).getQuery();

    var _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](this.connection.createQueryBuilder().insert().into(this.getTypeormMetadataTableName()).values({
      type: "VIEW",
      name: view.name,
      value: expression
    }).getQueryAndParameters(), 2),
        query = _a[0],
        parameters = _a[1];

    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](query, parameters);
  };
  /**
   * Builds drop view sql.
   */


  AbstractSqliteQueryRunner.prototype.dropViewSql = function (viewOrPath) {
    var viewName = viewOrPath instanceof _schema_builder_view_View__WEBPACK_IMPORTED_MODULE_8__["View"] ? viewOrPath.name : viewOrPath;
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("DROP VIEW \"" + viewName + "\"");
  };
  /**
   * Builds remove view sql.
   */


  AbstractSqliteQueryRunner.prototype.deleteViewDefinitionSql = function (viewOrPath) {
    var viewName = viewOrPath instanceof _schema_builder_view_View__WEBPACK_IMPORTED_MODULE_8__["View"] ? viewOrPath.name : viewOrPath;
    var qb = this.connection.createQueryBuilder();

    var _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](qb["delete"]().from(this.getTypeormMetadataTableName()).where(qb.escape("type") + " = 'VIEW'").andWhere(qb.escape("name") + " = :name", {
      name: viewName
    }).getQueryAndParameters(), 2),
        query = _a[0],
        parameters = _a[1];

    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"](query, parameters);
  };
  /**
   * Builds create index sql.
   */


  AbstractSqliteQueryRunner.prototype.createIndexSql = function (table, index) {
    var columns = index.columnNames.map(function (columnName) {
      return "\"" + columnName + "\"";
    }).join(", ");
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("CREATE " + (index.isUnique ? "UNIQUE " : "") + "INDEX \"" + index.name + "\" ON \"" + table.name + "\" (" + columns + ") " + (index.where ? "WHERE " + index.where : ""));
  };
  /**
   * Builds drop index sql.
   */


  AbstractSqliteQueryRunner.prototype.dropIndexSql = function (indexOrName) {
    var indexName = indexOrName instanceof _schema_builder_table_TableIndex__WEBPACK_IMPORTED_MODULE_6__["TableIndex"] ? indexOrName.name : indexOrName;
    return new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("DROP INDEX \"" + indexName + "\"");
  };
  /**
   * Builds a query for create column.
   */


  AbstractSqliteQueryRunner.prototype.buildCreateColumnSql = function (column, skipPrimary) {
    var c = "\"" + column.name + "\"";

    if (column instanceof _metadata_ColumnMetadata__WEBPACK_IMPORTED_MODULE_4__["ColumnMetadata"]) {
      c += " " + this.driver.normalizeType(column);
    } else {
      c += " " + this.connection.driver.createFullType(column);
    }

    if (column["enum"]) c += " CHECK( " + column.name + " IN (" + column["enum"].map(function (val) {
      return "'" + val + "'";
    }).join(",") + ") )";
    if (column.isPrimary && !skipPrimary) c += " PRIMARY KEY";
    if (column.isGenerated === true && column.generationStrategy === "increment") // don't use skipPrimary here since updates can update already exist primary without auto inc.
      c += " AUTOINCREMENT";
    if (column.collation) c += " COLLATE " + column.collation;
    if (column.isNullable !== true) c += " NOT NULL";
    if (column["default"] !== undefined && column["default"] !== null) c += " DEFAULT (" + column["default"] + ")";
    return c;
  };

  AbstractSqliteQueryRunner.prototype.recreateTable = function (newTable, oldTable, migrateData) {
    if (migrateData === void 0) {
      migrateData = true;
    }

    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var upQueries, downQueries, newColumnNames, oldColumnNames;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            upQueries = [];
            downQueries = []; // drop old table indices

            oldTable.indices.forEach(function (index) {
              upQueries.push(_this.dropIndexSql(index));
              downQueries.push(_this.createIndexSql(oldTable, index));
            }); // change table name into 'temporary_table'

            newTable.name = "temporary_" + newTable.name; // create new table

            upQueries.push(this.createTableSql(newTable, true));
            downQueries.push(this.dropTableSql(newTable)); // migrate all data from the old table into new table

            if (migrateData) {
              newColumnNames = newTable.columns.map(function (column) {
                return "\"" + column.name + "\"";
              }).join(", ");
              oldColumnNames = oldTable.columns.map(function (column) {
                return "\"" + column.name + "\"";
              }).join(", ");

              if (oldTable.columns.length < newTable.columns.length) {
                newColumnNames = newTable.columns.filter(function (column) {
                  return oldTable.columns.find(function (c) {
                    return c.name === column.name;
                  });
                }).map(function (column) {
                  return "\"" + column.name + "\"";
                }).join(", ");
              } else if (oldTable.columns.length > newTable.columns.length) {
                oldColumnNames = oldTable.columns.filter(function (column) {
                  return newTable.columns.find(function (c) {
                    return c.name === column.name;
                  });
                }).map(function (column) {
                  return "\"" + column.name + "\"";
                }).join(", ");
              }

              upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("INSERT INTO \"" + newTable.name + "\"(" + newColumnNames + ") SELECT " + oldColumnNames + " FROM \"" + oldTable.name + "\""));
              downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("INSERT INTO \"" + oldTable.name + "\"(" + oldColumnNames + ") SELECT " + newColumnNames + " FROM \"" + newTable.name + "\""));
            } // drop old table


            upQueries.push(this.dropTableSql(oldTable));
            downQueries.push(this.createTableSql(oldTable, true)); // rename old table

            upQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE \"" + newTable.name + "\" RENAME TO \"" + oldTable.name + "\""));
            downQueries.push(new _Query__WEBPACK_IMPORTED_MODULE_9__["Query"]("ALTER TABLE \"" + oldTable.name + "\" RENAME TO \"" + newTable.name + "\""));
            newTable.name = oldTable.name; // recreate table indices

            newTable.indices.forEach(function (index) {
              // new index may be passed without name. In this case we generate index name manually.
              if (!index.name) index.name = _this.connection.namingStrategy.indexName(newTable.name, index.columnNames, index.where);
              upQueries.push(_this.createIndexSql(newTable, index));
              downQueries.push(_this.dropIndexSql(index));
            });
            return [4
            /*yield*/
            , this.executeQueries(upQueries, downQueries)];

          case 1:
            _a.sent();

            this.replaceCachedTable(oldTable, newTable);
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  return AbstractSqliteQueryRunner;
}(_query_runner_BaseQueryRunner__WEBPACK_IMPORTED_MODULE_11__["BaseQueryRunner"]);



/***/ }),

/***/ "./node_modules/typeorm/browser/driver/sqlite/SqliteDriver.js":
/*!********************************************************************!*\
  !*** ./node_modules/typeorm/browser/driver/sqlite/SqliteDriver.js ***!
  \********************************************************************/
/*! exports provided: SqliteDriver */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SqliteDriver", function() { return SqliteDriver; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _error_DriverPackageNotInstalledError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error/DriverPackageNotInstalledError */ "./node_modules/typeorm/browser/error/DriverPackageNotInstalledError.js");
/* harmony import */ var _SqliteQueryRunner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SqliteQueryRunner */ "./node_modules/typeorm/browser/driver/sqlite/SqliteQueryRunner.js");
/* harmony import */ var _error_DriverOptionNotSetError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../error/DriverOptionNotSetError */ "./node_modules/typeorm/browser/error/DriverOptionNotSetError.js");
/* harmony import */ var _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../platform/PlatformTools */ "./node_modules/typeorm/browser/platform/PlatformTools.js");
/* harmony import */ var _sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../sqlite-abstract/AbstractSqliteDriver */ "./node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteDriver.js");






/**
 * Organizes communication with sqlite DBMS.
 */

var SqliteDriver =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](SqliteDriver, _super); // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------


  function SqliteDriver(connection) {
    var _this = _super.call(this, connection) || this;

    _this.connection = connection;
    _this.options = connection.options;
    _this.database = _this.options.database; // validate options to make sure everything is set

    if (!_this.options.database) throw new _error_DriverOptionNotSetError__WEBPACK_IMPORTED_MODULE_3__["DriverOptionNotSetError"]("database"); // load sqlite package

    _this.loadDependencies();

    return _this;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Closes connection with database.
   */


  SqliteDriver.prototype.disconnect = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , new Promise(function (ok, fail) {
          _this.queryRunner = undefined;

          _this.databaseConnection.close(function (err) {
            return err ? fail(err) : ok();
          });
        })];
      });
    });
  };
  /**
   * Creates a query runner used to execute database queries.
   */


  SqliteDriver.prototype.createQueryRunner = function (mode) {
    if (mode === void 0) {
      mode = "master";
    }

    if (!this.queryRunner) this.queryRunner = new _SqliteQueryRunner__WEBPACK_IMPORTED_MODULE_2__["SqliteQueryRunner"](this);
    return this.queryRunner;
  };

  SqliteDriver.prototype.normalizeType = function (column) {
    if (column.type === Buffer) {
      return "blob";
    }

    return _super.prototype.normalizeType.call(this, column);
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Creates connection with the database.
   */


  SqliteDriver.prototype.createDatabaseConnection = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      // Internal function to run a command on the connection and fail if an error occured.
      function run(line) {
        return new Promise(function (ok, fail) {
          databaseConnection.run(line, function (err) {
            if (err) return fail(err);
            ok();
          });
        });
      }

      var databaseConnection;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.createDatabaseDirectory(this.options.database)];

          case 1:
            _a.sent();

            return [4
            /*yield*/
            , new Promise(function (ok, fail) {
              var connection = new _this.sqlite.Database(_this.options.database, function (err) {
                if (err) return fail(err);
                ok(connection);
              });
            })];

          case 2:
            databaseConnection = _a.sent(); // we need to enable foreign keys in sqlite to make sure all foreign key related features
            // working properly. this also makes onDelete to work with sqlite.

            return [4
            /*yield*/
            , run("PRAGMA foreign_keys = ON;")];

          case 3:
            // we need to enable foreign keys in sqlite to make sure all foreign key related features
            // working properly. this also makes onDelete to work with sqlite.
            _a.sent();

            if (!this.options.key) return [3
            /*break*/
            , 5];
            return [4
            /*yield*/
            , run("PRAGMA key = " + JSON.stringify(this.options.key) + ";")];

          case 4:
            _a.sent();

            _a.label = 5;

          case 5:
            return [2
            /*return*/
            , databaseConnection];
        }
      });
    });
  };
  /**
   * If driver dependency is not given explicitly, then try to load it via "require".
   */


  SqliteDriver.prototype.loadDependencies = function () {
    try {
      this.sqlite = _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_4__["PlatformTools"].load("sqlite3").verbose();
    } catch (e) {
      throw new _error_DriverPackageNotInstalledError__WEBPACK_IMPORTED_MODULE_1__["DriverPackageNotInstalledError"]("SQLite", "sqlite3");
    }
  };
  /**
   * Auto creates database directory if it does not exist.
   */


  SqliteDriver.prototype.createDatabaseDirectory = function (fullPath) {
    return new Promise(function (resolve, reject) {
      var mkdirp = _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_4__["PlatformTools"].load("mkdirp");
      var path = _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_4__["PlatformTools"].load("path");
      mkdirp(path.dirname(fullPath), function (err) {
        return err ? reject(err) : resolve();
      });
    });
  };

  return SqliteDriver;
}(_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_5__["AbstractSqliteDriver"]);


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/typeorm/browser/driver/sqlite/SqliteQueryRunner.js":
/*!*************************************************************************!*\
  !*** ./node_modules/typeorm/browser/driver/sqlite/SqliteQueryRunner.js ***!
  \*************************************************************************/
/*! exports provided: SqliteQueryRunner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SqliteQueryRunner", function() { return SqliteQueryRunner; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _error_QueryRunnerAlreadyReleasedError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error/QueryRunnerAlreadyReleasedError */ "./node_modules/typeorm/browser/error/QueryRunnerAlreadyReleasedError.js");
/* harmony import */ var _error_QueryFailedError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../error/QueryFailedError */ "./node_modules/typeorm/browser/error/QueryFailedError.js");
/* harmony import */ var _sqlite_abstract_AbstractSqliteQueryRunner__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sqlite-abstract/AbstractSqliteQueryRunner */ "./node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteQueryRunner.js");
/* harmony import */ var _subscriber_Broadcaster__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../subscriber/Broadcaster */ "./node_modules/typeorm/browser/subscriber/Broadcaster.js");





/**
 * Runs queries on a single sqlite database connection.
 *
 * Does not support compose primary keys with autoincrement field.
 * todo: need to throw exception for this case.
 */

var SqliteQueryRunner =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](SqliteQueryRunner, _super); // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------


  function SqliteQueryRunner(driver) {
    var _this = _super.call(this) || this;

    _this.driver = driver;
    _this.connection = driver.connection;
    _this.broadcaster = new _subscriber_Broadcaster__WEBPACK_IMPORTED_MODULE_4__["Broadcaster"](_this);
    return _this;
  }
  /**
   * Executes a given SQL query.
   */


  SqliteQueryRunner.prototype.query = function (query, parameters) {
    var _this = this;

    if (this.isReleased) throw new _error_QueryRunnerAlreadyReleasedError__WEBPACK_IMPORTED_MODULE_1__["QueryRunnerAlreadyReleasedError"]();
    var connection = this.driver.connection;
    return new Promise(function (ok, fail) {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
        var handler, databaseConnection, queryStartTime, isInsertQuery;
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
          switch (_a.label) {
            case 0:
              handler = function handler(err, result) {
                // log slow queries if maxQueryExecution time is set
                var maxQueryExecutionTime = connection.options.maxQueryExecutionTime;
                var queryEndTime = +new Date();
                var queryExecutionTime = queryEndTime - queryStartTime;
                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);

                if (err) {
                  connection.logger.logQueryError(err, query, parameters, this);
                  fail(new _error_QueryFailedError__WEBPACK_IMPORTED_MODULE_2__["QueryFailedError"](query, parameters, err));
                } else {
                  ok(isInsertQuery ? this["lastID"] : result);
                }
              };

              return [4
              /*yield*/
              , this.connect()];

            case 1:
              databaseConnection = _a.sent();
              this.driver.connection.logger.logQuery(query, parameters, this);
              queryStartTime = +new Date();
              isInsertQuery = query.substr(0, 11) === "INSERT INTO";

              if (isInsertQuery) {
                databaseConnection.run(query, parameters, handler);
              } else {
                databaseConnection.all(query, parameters, handler);
              }

              return [2
              /*return*/
              ];
          }
        });
      });
    });
  };

  return SqliteQueryRunner;
}(_sqlite_abstract_AbstractSqliteQueryRunner__WEBPACK_IMPORTED_MODULE_3__["AbstractSqliteQueryRunner"]);



/***/ }),

/***/ "./node_modules/typeorm/browser/driver/sqljs/SqljsDriver.js":
/*!******************************************************************!*\
  !*** ./node_modules/typeorm/browser/driver/sqljs/SqljsDriver.js ***!
  \******************************************************************/
/*! exports provided: SqljsDriver */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer, __webpack_provided_window_dot_SQL) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SqljsDriver", function() { return SqljsDriver; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sqlite-abstract/AbstractSqliteDriver */ "./node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteDriver.js");
/* harmony import */ var _SqljsQueryRunner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SqljsQueryRunner */ "./node_modules/typeorm/browser/driver/sqljs/SqljsQueryRunner.js");
/* harmony import */ var _error_DriverPackageNotInstalledError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../error/DriverPackageNotInstalledError */ "./node_modules/typeorm/browser/error/DriverPackageNotInstalledError.js");
/* harmony import */ var _error_DriverOptionNotSetError__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../error/DriverOptionNotSetError */ "./node_modules/typeorm/browser/error/DriverOptionNotSetError.js");
/* harmony import */ var _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../platform/PlatformTools */ "./node_modules/typeorm/browser/platform/PlatformTools.js");
/* harmony import */ var _util_OrmUtils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/OrmUtils */ "./node_modules/typeorm/browser/util/OrmUtils.js");








var SqljsDriver =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](SqljsDriver, _super); // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------


  function SqljsDriver(connection) {
    var _this = _super.call(this, connection) || this; // If autoSave is enabled by user, location or autoSaveCallback have to be set
    // because either autoSave saves to location or calls autoSaveCallback.


    if (_this.options.autoSave && !_this.options.location && !_this.options.autoSaveCallback) {
      throw new _error_DriverOptionNotSetError__WEBPACK_IMPORTED_MODULE_4__["DriverOptionNotSetError"]("location or autoSaveCallback");
    } // load sql.js package


    _this.loadDependencies();

    return _this;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Performs connection to the database.
   */


  SqljsDriver.prototype.connect = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _a;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = this;
            return [4
            /*yield*/
            , this.createDatabaseConnection()];

          case 1:
            _a.databaseConnection = _b.sent();
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Closes connection with database.
   */


  SqljsDriver.prototype.disconnect = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , new Promise(function (ok, fail) {
          try {
            _this.queryRunner = undefined;

            _this.databaseConnection.close();

            ok();
          } catch (e) {
            fail(e);
          }
        })];
      });
    });
  };
  /**
   * Creates a query runner used to execute database queries.
   */


  SqljsDriver.prototype.createQueryRunner = function (mode) {
    if (mode === void 0) {
      mode = "master";
    }

    if (!this.queryRunner) this.queryRunner = new _SqljsQueryRunner__WEBPACK_IMPORTED_MODULE_2__["SqljsQueryRunner"](this);
    return this.queryRunner;
  };
  /**
   * Loads a database from a given file (Node.js), local storage key (browser) or array.
   * This will delete the current database!
   */


  SqljsDriver.prototype.load = function (fileNameOrLocalStorageOrData, checkIfFileOrLocalStorageExists) {
    if (checkIfFileOrLocalStorageExists === void 0) {
      checkIfFileOrLocalStorageExists = true;
    }

    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var database, localStorageContent;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!(typeof fileNameOrLocalStorageOrData === "string")) return [3
            /*break*/
            , 8];
            if (!(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_5__["PlatformTools"].type === "node")) return [3
            /*break*/
            , 1]; // Node.js
            // fileNameOrLocalStorageOrData should be a path to the file

            if (_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_5__["PlatformTools"].fileExist(fileNameOrLocalStorageOrData)) {
              database = _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_5__["PlatformTools"].readFileSync(fileNameOrLocalStorageOrData);
              return [2
              /*return*/
              , this.createDatabaseConnectionWithImport(database)];
            } else if (checkIfFileOrLocalStorageExists) {
              throw new Error("File " + fileNameOrLocalStorageOrData + " does not exist");
            } else {
              // File doesn't exist and checkIfFileOrLocalStorageExists is set to false.
              // Therefore open a database without importing an existing file.
              // File will be written on first write operation.
              return [2
              /*return*/
              , this.createDatabaseConnectionWithImport()];
            }

            return [3
            /*break*/
            , 7];

          case 1:
            localStorageContent = null;
            if (!this.options.useLocalForage) return [3
            /*break*/
            , 5];
            if (!window.localforage) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , window.localforage.getItem(fileNameOrLocalStorageOrData)];

          case 2:
            localStorageContent = _a.sent();
            return [3
            /*break*/
            , 4];

          case 3:
            throw new Error("localforage is not defined - please import localforage.js into your site");

          case 4:
            return [3
            /*break*/
            , 6];

          case 5:
            localStorageContent = _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_5__["PlatformTools"].getGlobalVariable().localStorage.getItem(fileNameOrLocalStorageOrData);
            _a.label = 6;

          case 6:
            if (localStorageContent != null) {
              // localStorage value exists.
              return [2
              /*return*/
              , this.createDatabaseConnectionWithImport(JSON.parse(localStorageContent))];
            } else if (checkIfFileOrLocalStorageExists) {
              throw new Error("File " + fileNameOrLocalStorageOrData + " does not exist");
            } else {
              // localStorage value doesn't exist and checkIfFileOrLocalStorageExists is set to false.
              // Therefore open a database without importing anything.
              // localStorage value will be written on first write operation.
              return [2
              /*return*/
              , this.createDatabaseConnectionWithImport()];
            }

            _a.label = 7;

          case 7:
            return [3
            /*break*/
            , 9];

          case 8:
            return [2
            /*return*/
            , this.createDatabaseConnectionWithImport(fileNameOrLocalStorageOrData)];

          case 9:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Saved the current database to the given file (Node.js), local storage key (browser) or
   * indexedDB key (browser with enabled useLocalForage option).
   * If no location path is given, the location path in the options (if specified) will be used.
   */


  SqljsDriver.prototype.save = function (location) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var path, content, e_1, database, databaseArray;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!location && !this.options.location) {
              throw new Error("No location is set, specify a location parameter or add the location option to your configuration");
            }

            path = "";

            if (location) {
              path = location;
            } else if (this.options.location) {
              path = this.options.location;
            }

            if (!(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_5__["PlatformTools"].type === "node")) return [3
            /*break*/
            , 5];
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            content = new Buffer(this.databaseConnection["export"]());
            return [4
            /*yield*/
            , _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_5__["PlatformTools"].writeFile(path, content)];

          case 2:
            _a.sent();

            return [3
            /*break*/
            , 4];

          case 3:
            e_1 = _a.sent();
            throw new Error("Could not save database, error: " + e_1);

          case 4:
            return [3
            /*break*/
            , 10];

          case 5:
            database = this.databaseConnection["export"]();
            databaseArray = [].slice.call(database);
            if (!this.options.useLocalForage) return [3
            /*break*/
            , 9];
            if (!window.localforage) return [3
            /*break*/
            , 7];
            return [4
            /*yield*/
            , window.localforage.setItem(path, JSON.stringify(databaseArray))];

          case 6:
            _a.sent();

            return [3
            /*break*/
            , 8];

          case 7:
            throw new Error("localforage is not defined - please import localforage.js into your site");

          case 8:
            return [3
            /*break*/
            , 10];

          case 9:
            _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_5__["PlatformTools"].getGlobalVariable().localStorage.setItem(path, JSON.stringify(databaseArray));
            _a.label = 10;

          case 10:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * This gets called by the QueryRunner when a change to the database is made.
   * If a custom autoSaveCallback is specified, it get's called with the database as Uint8Array,
   * otherwise the save method is called which saves it to file (Node.js), local storage (browser)
   * or indexedDB (browser with enabled useLocalForage option).
   */


  SqljsDriver.prototype.autoSave = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!this.options.autoSave) return [3
            /*break*/
            , 4];
            if (!this.options.autoSaveCallback) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , this.options.autoSaveCallback(this["export"]())];

          case 1:
            _a.sent();

            return [3
            /*break*/
            , 4];

          case 2:
            return [4
            /*yield*/
            , this.save()];

          case 3:
            _a.sent();

            _a.label = 4;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns the current database as Uint8Array.
   */


  SqljsDriver.prototype["export"] = function () {
    return this.databaseConnection["export"]();
  };
  /**
   * Creates generated map of values generated or returned by database after INSERT query.
   */


  SqljsDriver.prototype.createGeneratedMap = function (metadata, insertResult) {
    var _this = this;

    var generatedMap = metadata.generatedColumns.reduce(function (map, generatedColumn) {
      // seems to be the only way to get the inserted id, see https://github.com/kripken/sql.js/issues/77
      if (generatedColumn.isPrimary && generatedColumn.generationStrategy === "increment") {
        var query = "SELECT last_insert_rowid()";

        try {
          var result = _this.databaseConnection.exec(query);

          _this.connection.logger.logQuery(query);

          return _util_OrmUtils__WEBPACK_IMPORTED_MODULE_6__["OrmUtils"].mergeDeep(map, generatedColumn.createValueMap(result[0].values[0][0]));
        } catch (e) {
          _this.connection.logger.logQueryError(e, query, []);
        }
      }

      return map;
    }, {});
    return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Creates connection with the database.
   * If the location option is set, the database is loaded first.
   */


  SqljsDriver.prototype.createDatabaseConnection = function () {
    if (this.options.location) {
      return this.load(this.options.location, false);
    }

    return this.createDatabaseConnectionWithImport(this.options.database);
  };
  /**
   * Creates connection with an optional database.
   * If database is specified it is loaded, otherwise a new empty database is created.
   */


  SqljsDriver.prototype.createDatabaseConnectionWithImport = function (database) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var isLegacyVersion, sqlite, _a;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            isLegacyVersion = typeof this.sqlite.Database === "function";
            if (!isLegacyVersion) return [3
            /*break*/
            , 1];
            _a = this.sqlite;
            return [3
            /*break*/
            , 3];

          case 1:
            return [4
            /*yield*/
            , this.sqlite(this.options.sqlJsConfig)];

          case 2:
            _a = _b.sent();
            _b.label = 3;

          case 3:
            sqlite = _a;

            if (database && database.length > 0) {
              this.databaseConnection = new sqlite.Database(database);
            } else {
              this.databaseConnection = new sqlite.Database();
            } // Enable foreign keys for database


            return [2
            /*return*/
            , new Promise(function (ok, fail) {
              try {
                _this.databaseConnection.exec("PRAGMA foreign_keys = ON;");

                ok(_this.databaseConnection);
              } catch (e) {
                fail(e);
              }
            })];
        }
      });
    });
  };
  /**
   * If driver dependency is not given explicitly, then try to load it via "require".
   */


  SqljsDriver.prototype.loadDependencies = function () {
    if (_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_5__["PlatformTools"].type === "browser") {
      this.sqlite = __webpack_provided_window_dot_SQL;
    } else {
      try {
        this.sqlite = _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_5__["PlatformTools"].load("sql.js");
      } catch (e) {
        throw new _error_DriverPackageNotInstalledError__WEBPACK_IMPORTED_MODULE_3__["DriverPackageNotInstalledError"]("sql.js", "sql.js");
      }
    }
  };

  return SqljsDriver;
}(_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_1__["AbstractSqliteDriver"]);


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer, __webpack_require__(/*! sql.js/dist/sql-wasm.js */ "./node_modules/sql.js/dist/sql-wasm.js")))

/***/ }),

/***/ "./node_modules/typeorm/browser/driver/sqljs/SqljsQueryRunner.js":
/*!***********************************************************************!*\
  !*** ./node_modules/typeorm/browser/driver/sqljs/SqljsQueryRunner.js ***!
  \***********************************************************************/
/*! exports provided: SqljsQueryRunner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SqljsQueryRunner", function() { return SqljsQueryRunner; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _error_QueryRunnerAlreadyReleasedError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error/QueryRunnerAlreadyReleasedError */ "./node_modules/typeorm/browser/error/QueryRunnerAlreadyReleasedError.js");
/* harmony import */ var _sqlite_abstract_AbstractSqliteQueryRunner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../sqlite-abstract/AbstractSqliteQueryRunner */ "./node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteQueryRunner.js");
/* harmony import */ var _subscriber_Broadcaster__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../subscriber/Broadcaster */ "./node_modules/typeorm/browser/subscriber/Broadcaster.js");
/* harmony import */ var _error_QueryFailedError__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../error/QueryFailedError */ "./node_modules/typeorm/browser/error/QueryFailedError.js");





/**
 * Runs queries on a single sqlite database connection.
 */

var SqljsQueryRunner =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](SqljsQueryRunner, _super); // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------


  function SqljsQueryRunner(driver) {
    var _this = _super.call(this) || this;

    _this.driver = driver;
    _this.connection = driver.connection;
    _this.broadcaster = new _subscriber_Broadcaster__WEBPACK_IMPORTED_MODULE_3__["Broadcaster"](_this);
    return _this;
  } // -------------------------------------------------------------------------
  // Public methods
  // -------------------------------------------------------------------------

  /**
   * Commits transaction.
   * Error will be thrown if transaction was not started.
   */


  SqljsQueryRunner.prototype.commitTransaction = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , _super.prototype.commitTransaction.call(this)];

          case 1:
            _a.sent();

            return [4
            /*yield*/
            , this.driver.autoSave()];

          case 2:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Executes a given SQL query.
   */


  SqljsQueryRunner.prototype.query = function (query, parameters) {
    var _this = this;

    if (this.isReleased) throw new _error_QueryRunnerAlreadyReleasedError__WEBPACK_IMPORTED_MODULE_1__["QueryRunnerAlreadyReleasedError"]();
    return new Promise(function (ok, fail) {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
        var databaseConnection, queryStartTime, statement, maxQueryExecutionTime, queryEndTime, queryExecutionTime, result;
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
          databaseConnection = this.driver.databaseConnection;
          this.driver.connection.logger.logQuery(query, parameters, this);
          queryStartTime = +new Date();

          try {
            statement = databaseConnection.prepare(query);
            statement.bind(parameters);
            maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;
            queryEndTime = +new Date();
            queryExecutionTime = queryEndTime - queryStartTime;
            if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);
            result = [];

            while (statement.step()) {
              result.push(statement.getAsObject());
            }

            statement.free();
            ok(result);
          } catch (e) {
            if (statement) {
              statement.free();
            }

            this.driver.connection.logger.logQueryError(e, query, parameters, this);
            fail(new _error_QueryFailedError__WEBPACK_IMPORTED_MODULE_4__["QueryFailedError"](query, parameters, e));
          }

          return [2
          /*return*/
          ];
        });
      });
    });
  };

  return SqljsQueryRunner;
}(_sqlite_abstract_AbstractSqliteQueryRunner__WEBPACK_IMPORTED_MODULE_2__["AbstractSqliteQueryRunner"]);



/***/ }),

/***/ "./node_modules/typeorm/browser/driver/sqlserver/MssqlParameter.js":
/*!*************************************************************************!*\
  !*** ./node_modules/typeorm/browser/driver/sqlserver/MssqlParameter.js ***!
  \*************************************************************************/
/*! exports provided: MssqlParameter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MssqlParameter", function() { return MssqlParameter; });
/**
 * Sql server driver requires parameter types to be specified fo input parameters used in the query.
 *
 * @see https://github.com/patriksimek/node-mssql#data-types
 */
var MssqlParameter =
/** @class */
function () {
  function MssqlParameter(value, type) {
    var params = [];

    for (var _i = 2; _i < arguments.length; _i++) {
      params[_i - 2] = arguments[_i];
    }

    this.value = value;
    this.type = type; // -------------------------------------------------------------------------
    // Public Properties
    // -------------------------------------------------------------------------

    this.params = [];
    this.params = params || [];
  }

  return MssqlParameter;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/entity-manager/EntityManager.js":
/*!**********************************************************************!*\
  !*** ./node_modules/typeorm/browser/entity-manager/EntityManager.js ***!
  \**********************************************************************/
/*! exports provided: EntityManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntityManager", function() { return EntityManager; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _error_EntityNotFoundError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/EntityNotFoundError */ "./node_modules/typeorm/browser/error/EntityNotFoundError.js");
/* harmony import */ var _error_QueryRunnerProviderAlreadyReleasedError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/QueryRunnerProviderAlreadyReleasedError */ "./node_modules/typeorm/browser/error/QueryRunnerProviderAlreadyReleasedError.js");
/* harmony import */ var _error_NoNeedToReleaseEntityManagerError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/NoNeedToReleaseEntityManagerError */ "./node_modules/typeorm/browser/error/NoNeedToReleaseEntityManagerError.js");
/* harmony import */ var _repository_TreeRepository__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../repository/TreeRepository */ "./node_modules/typeorm/browser/repository/TreeRepository.js");
/* harmony import */ var _repository_Repository__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../repository/Repository */ "./node_modules/typeorm/browser/repository/Repository.js");
/* harmony import */ var _find_options_FindOptionsUtils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../find-options/FindOptionsUtils */ "./node_modules/typeorm/browser/find-options/FindOptionsUtils.js");
/* harmony import */ var _query_builder_transformer_PlainObjectToNewEntityTransformer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../query-builder/transformer/PlainObjectToNewEntityTransformer */ "./node_modules/typeorm/browser/query-builder/transformer/PlainObjectToNewEntityTransformer.js");
/* harmony import */ var _query_builder_transformer_PlainObjectToDatabaseEntityTransformer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../query-builder/transformer/PlainObjectToDatabaseEntityTransformer */ "./node_modules/typeorm/browser/query-builder/transformer/PlainObjectToDatabaseEntityTransformer.js");
/* harmony import */ var _error_CustomRepositoryNotFoundError__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../error/CustomRepositoryNotFoundError */ "./node_modules/typeorm/browser/error/CustomRepositoryNotFoundError.js");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../index */ "./node_modules/typeorm/browser/index.js");
/* harmony import */ var _repository_AbstractRepository__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../repository/AbstractRepository */ "./node_modules/typeorm/browser/repository/AbstractRepository.js");
/* harmony import */ var _error_CustomRepositoryCannotInheritRepositoryError__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../error/CustomRepositoryCannotInheritRepositoryError */ "./node_modules/typeorm/browser/error/CustomRepositoryCannotInheritRepositoryError.js");
/* harmony import */ var _driver_mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../driver/mongodb/MongoDriver */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");
/* harmony import */ var _error_RepositoryNotFoundError__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../error/RepositoryNotFoundError */ "./node_modules/typeorm/browser/error/RepositoryNotFoundError.js");
/* harmony import */ var _error_RepositoryNotTreeError__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../error/RepositoryNotTreeError */ "./node_modules/typeorm/browser/error/RepositoryNotTreeError.js");
/* harmony import */ var _repository_RepositoryFactory__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../repository/RepositoryFactory */ "./node_modules/typeorm/browser/repository/RepositoryFactory.js");
/* harmony import */ var _error_TreeRepositoryNotSupportedError__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../error/TreeRepositoryNotSupportedError */ "./node_modules/typeorm/browser/error/TreeRepositoryNotSupportedError.js");
/* harmony import */ var _persistence_EntityPersistExecutor__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../persistence/EntityPersistExecutor */ "./node_modules/typeorm/browser/persistence/EntityPersistExecutor.js");
/* harmony import */ var _util_ObjectUtils__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../util/ObjectUtils */ "./node_modules/typeorm/browser/util/ObjectUtils.js");





















/**
 * Entity manager supposed to work with any entity, automatically find its repository and call its methods,
 * whatever entity type are you passing.
 */

var EntityManager =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function EntityManager(connection, queryRunner) {
    // -------------------------------------------------------------------------
    // Protected Properties
    // -------------------------------------------------------------------------

    /**
     * Once created and then reused by en repositories.
     */
    this.repositories = [];
    /**
     * Plain to object transformer used in create and merge operations.
     */

    this.plainObjectToEntityTransformer = new _query_builder_transformer_PlainObjectToNewEntityTransformer__WEBPACK_IMPORTED_MODULE_7__["PlainObjectToNewEntityTransformer"]();
    this.connection = connection;

    if (queryRunner) {
      this.queryRunner = queryRunner; // dynamic: this.queryRunner = manager;

      _util_ObjectUtils__WEBPACK_IMPORTED_MODULE_19__["ObjectUtils"].assign(this.queryRunner, {
        manager: this
      });
    }
  }
  /**
   * Wraps given function execution (and all operations made there) in a transaction.
   * All database operations must be executed using provided entity manager.
   */


  EntityManager.prototype.transaction = function (isolationOrRunInTransaction, runInTransactionParam) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var isolation, runInTransaction, queryRunner, result, err_1, rollbackError_1;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            isolation = typeof isolationOrRunInTransaction === "string" ? isolationOrRunInTransaction : undefined;
            runInTransaction = typeof isolationOrRunInTransaction === "function" ? isolationOrRunInTransaction : runInTransactionParam;

            if (!runInTransaction) {
              throw new Error("Transaction method requires callback in second paramter if isolation level is supplied.");
            }

            if (this.connection.driver instanceof _driver_mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_13__["MongoDriver"]) throw new Error("Transactions aren't supported by MongoDB.");
            if (this.queryRunner && this.queryRunner.isReleased) throw new _error_QueryRunnerProviderAlreadyReleasedError__WEBPACK_IMPORTED_MODULE_2__["QueryRunnerProviderAlreadyReleasedError"]();
            if (this.queryRunner && this.queryRunner.isTransactionActive) throw new Error("Cannot start transaction because its already started");
            queryRunner = this.queryRunner || this.connection.createQueryRunner("master");
            _a.label = 1;

          case 1:
            _a.trys.push([1, 8, 13, 16]);

            if (!isolation) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , queryRunner.startTransaction(isolation)];

          case 2:
            _a.sent();

            return [3
            /*break*/
            , 5];

          case 3:
            return [4
            /*yield*/
            , queryRunner.startTransaction()];

          case 4:
            _a.sent();

            _a.label = 5;

          case 5:
            return [4
            /*yield*/
            , runInTransaction(queryRunner.manager)];

          case 6:
            result = _a.sent();
            return [4
            /*yield*/
            , queryRunner.commitTransaction()];

          case 7:
            _a.sent();

            return [2
            /*return*/
            , result];

          case 8:
            err_1 = _a.sent();
            _a.label = 9;

          case 9:
            _a.trys.push([9, 11,, 12]);

            return [4
            /*yield*/
            , queryRunner.rollbackTransaction()];

          case 10:
            _a.sent();

            return [3
            /*break*/
            , 12];

          case 11:
            rollbackError_1 = _a.sent();
            return [3
            /*break*/
            , 12];

          case 12:
            throw err_1;

          case 13:
            if (!!this.queryRunner) return [3
            /*break*/
            , 15];
            return [4
            /*yield*/
            , queryRunner.release()];

          case 14:
            _a.sent();

            _a.label = 15;

          case 15:
            return [7
            /*endfinally*/
            ];

          case 16:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Executes raw SQL query and returns raw database results.
   */


  EntityManager.prototype.query = function (query, parameters) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , this.connection.query(query, parameters, this.queryRunner)];
      });
    });
  };
  /**
   * Creates a new query builder that can be used to build a sql query.
   */


  EntityManager.prototype.createQueryBuilder = function (entityClass, alias, queryRunner) {
    if (alias) {
      return this.connection.createQueryBuilder(entityClass, alias, queryRunner || this.queryRunner);
    } else {
      return this.connection.createQueryBuilder(entityClass || queryRunner || this.queryRunner);
    }
  };
  /**
   * Checks if entity has an id by its Function type or schema name.
   */


  EntityManager.prototype.hasId = function (targetOrEntity, maybeEntity) {
    var target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;
    var entity = arguments.length === 2 ? maybeEntity : targetOrEntity;
    var metadata = this.connection.getMetadata(target);
    return metadata.hasId(entity);
  };
  /**
   * Gets entity mixed id.
   */


  EntityManager.prototype.getId = function (targetOrEntity, maybeEntity) {
    var target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;
    var entity = arguments.length === 2 ? maybeEntity : targetOrEntity;
    var metadata = this.connection.getMetadata(target);
    return metadata.getEntityIdMixedMap(entity);
  };
  /**
   * Creates a new entity instance or instances.
   * Can copy properties from the given object into new entities.
   */


  EntityManager.prototype.create = function (entityClass, plainObjectOrObjects) {
    var _this = this;

    var metadata = this.connection.getMetadata(entityClass);
    if (!plainObjectOrObjects) return metadata.create(this.queryRunner);
    if (Array.isArray(plainObjectOrObjects)) return plainObjectOrObjects.map(function (plainEntityLike) {
      return _this.create(entityClass, plainEntityLike);
    });
    var mergeIntoEntity = metadata.create(this.queryRunner);
    this.plainObjectToEntityTransformer.transform(mergeIntoEntity, plainObjectOrObjects, metadata, true);
    return mergeIntoEntity;
  };
  /**
   * Merges two entities into one new entity.
   */


  EntityManager.prototype.merge = function (entityClass, mergeIntoEntity) {
    var _this = this;

    var entityLikes = [];

    for (var _i = 2; _i < arguments.length; _i++) {
      entityLikes[_i - 2] = arguments[_i];
    }

    var metadata = this.connection.getMetadata(entityClass);
    entityLikes.forEach(function (object) {
      return _this.plainObjectToEntityTransformer.transform(mergeIntoEntity, object, metadata);
    });
    return mergeIntoEntity;
  };
  /**
   * Creates a new entity from the given plan javascript object. If entity already exist in the database, then
   * it loads it (and everything related to it), replaces all values with the new ones from the given object
   * and returns this new entity. This new entity is actually a loaded from the db entity with all properties
   * replaced from the new object.
   */


  EntityManager.prototype.preload = function (entityClass, entityLike) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var metadata, plainObjectToDatabaseEntityTransformer, transformedEntity;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            metadata = this.connection.getMetadata(entityClass);
            plainObjectToDatabaseEntityTransformer = new _query_builder_transformer_PlainObjectToDatabaseEntityTransformer__WEBPACK_IMPORTED_MODULE_8__["PlainObjectToDatabaseEntityTransformer"](this.connection.manager);
            return [4
            /*yield*/
            , plainObjectToDatabaseEntityTransformer.transform(entityLike, metadata)];

          case 1:
            transformedEntity = _a.sent();
            if (transformedEntity) return [2
            /*return*/
            , this.merge(entityClass, transformedEntity, entityLike)];
            return [2
            /*return*/
            , undefined];
        }
      });
    });
  };
  /**
   * Saves a given entity in the database.
   */


  EntityManager.prototype.save = function (targetOrEntity, maybeEntityOrOptions, maybeOptions) {
    // normalize mixed parameters
    var target = arguments.length > 1 && (targetOrEntity instanceof Function || targetOrEntity instanceof _index__WEBPACK_IMPORTED_MODULE_10__["EntitySchema"] || typeof targetOrEntity === "string") ? targetOrEntity : undefined;
    var entity = target ? maybeEntityOrOptions : targetOrEntity;
    var options = target ? maybeOptions : maybeEntityOrOptions;
    if (target instanceof _index__WEBPACK_IMPORTED_MODULE_10__["EntitySchema"]) target = target.options.name; // if user passed empty array of entities then we don't need to do anything

    if (Array.isArray(entity) && entity.length === 0) return Promise.resolve(entity); // execute save operation

    return new _persistence_EntityPersistExecutor__WEBPACK_IMPORTED_MODULE_18__["EntityPersistExecutor"](this.connection, this.queryRunner, "save", target, entity, options).execute().then(function () {
      return entity;
    });
  };
  /**
   * Removes a given entity from the database.
   */


  EntityManager.prototype.remove = function (targetOrEntity, maybeEntityOrOptions, maybeOptions) {
    // normalize mixed parameters
    var target = arguments.length > 1 && (targetOrEntity instanceof Function || typeof targetOrEntity === "string") ? targetOrEntity : undefined;
    var entity = target ? maybeEntityOrOptions : targetOrEntity;
    var options = target ? maybeOptions : maybeEntityOrOptions; // if user passed empty array of entities then we don't need to do anything

    if (Array.isArray(entity) && entity.length === 0) return Promise.resolve(entity); // execute save operation

    return new _persistence_EntityPersistExecutor__WEBPACK_IMPORTED_MODULE_18__["EntityPersistExecutor"](this.connection, this.queryRunner, "remove", target, entity, options).execute().then(function () {
      return entity;
    });
  };
  /**
   * Records the delete date of one or many given entities.
   */


  EntityManager.prototype.softRemove = function (targetOrEntity, maybeEntityOrOptions, maybeOptions) {
    // normalize mixed parameters
    var target = arguments.length > 1 && (targetOrEntity instanceof Function || targetOrEntity instanceof _index__WEBPACK_IMPORTED_MODULE_10__["EntitySchema"] || typeof targetOrEntity === "string") ? targetOrEntity : undefined;
    var entity = target ? maybeEntityOrOptions : targetOrEntity;
    var options = target ? maybeOptions : maybeEntityOrOptions;
    if (target instanceof _index__WEBPACK_IMPORTED_MODULE_10__["EntitySchema"]) target = target.options.name; // if user passed empty array of entities then we don't need to do anything

    if (entity instanceof Array && entity.length === 0) return Promise.resolve(entity); // execute soft-remove operation

    return new _persistence_EntityPersistExecutor__WEBPACK_IMPORTED_MODULE_18__["EntityPersistExecutor"](this.connection, this.queryRunner, "soft-remove", target, entity, options).execute().then(function () {
      return entity;
    });
  };
  /**
   * Recovers one or many given entities.
   */


  EntityManager.prototype.recover = function (targetOrEntity, maybeEntityOrOptions, maybeOptions) {
    // normalize mixed parameters
    var target = arguments.length > 1 && (targetOrEntity instanceof Function || targetOrEntity instanceof _index__WEBPACK_IMPORTED_MODULE_10__["EntitySchema"] || typeof targetOrEntity === "string") ? targetOrEntity : undefined;
    var entity = target ? maybeEntityOrOptions : targetOrEntity;
    var options = target ? maybeOptions : maybeEntityOrOptions;
    if (target instanceof _index__WEBPACK_IMPORTED_MODULE_10__["EntitySchema"]) target = target.options.name; // if user passed empty array of entities then we don't need to do anything

    if (entity instanceof Array && entity.length === 0) return Promise.resolve(entity); // execute recover operation

    return new _persistence_EntityPersistExecutor__WEBPACK_IMPORTED_MODULE_18__["EntityPersistExecutor"](this.connection, this.queryRunner, "recover", target, entity, options).execute().then(function () {
      return entity;
    });
  };
  /**
   * Inserts a given entity into the database.
   * Unlike save method executes a primitive operation without cascades, relations and other operations included.
   * Executes fast and efficient INSERT query.
   * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.
   * You can execute bulk inserts using this method.
   */


  EntityManager.prototype.insert = function (target, entity) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var results;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!(this.connection.driver instanceof _driver_mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_13__["OracleDriver"] && Array.isArray(entity))) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , Promise.all(entity.map(function (entity) {
              return _this.insert(target, entity);
            }))];

          case 1:
            results = _a.sent();
            return [2
            /*return*/
            , results.reduce(function (mergedResult, result) {
              return Object.assign(mergedResult, result);
            }, {})];

          case 2:
            return [2
            /*return*/
            , this.createQueryBuilder().insert().into(target).values(entity).execute()];
        }
      });
    });
  };
  /**
   * Updates entity partially. Entity can be found by a given condition(s).
   * Unlike save method executes a primitive operation without cascades, relations and other operations included.
   * Executes fast and efficient UPDATE query.
   * Does not check if entity exist in the database.
   * Condition(s) cannot be empty.
   */


  EntityManager.prototype.update = function (target, criteria, partialEntity) {
    // if user passed empty criteria or empty list of criterias, then throw an error
    if (criteria === undefined || criteria === null || criteria === "" || Array.isArray(criteria) && criteria.length === 0) {
      return Promise.reject(new Error("Empty criteria(s) are not allowed for the update method."));
    }

    if (typeof criteria === "string" || typeof criteria === "number" || criteria instanceof Date || Array.isArray(criteria)) {
      return this.createQueryBuilder().update(target).set(partialEntity).whereInIds(criteria).execute();
    } else {
      return this.createQueryBuilder().update(target).set(partialEntity).where(criteria).execute();
    }
  };
  /**
   * Deletes entities by a given condition(s).
   * Unlike save method executes a primitive operation without cascades, relations and other operations included.
   * Executes fast and efficient DELETE query.
   * Does not check if entity exist in the database.
   * Condition(s) cannot be empty.
   */


  EntityManager.prototype["delete"] = function (targetOrEntity, criteria) {
    // if user passed empty criteria or empty list of criterias, then throw an error
    if (criteria === undefined || criteria === null || criteria === "" || Array.isArray(criteria) && criteria.length === 0) {
      return Promise.reject(new Error("Empty criteria(s) are not allowed for the delete method."));
    }

    if (typeof criteria === "string" || typeof criteria === "number" || criteria instanceof Date || Array.isArray(criteria)) {
      return this.createQueryBuilder()["delete"]().from(targetOrEntity).whereInIds(criteria).execute();
    } else {
      return this.createQueryBuilder()["delete"]().from(targetOrEntity).where(criteria).execute();
    }
  };
  /**
   * Records the delete date of entities by a given condition(s).
   * Unlike save method executes a primitive operation without cascades, relations and other operations included.
   * Executes fast and efficient DELETE query.
   * Does not check if entity exist in the database.
   * Condition(s) cannot be empty.
   */


  EntityManager.prototype.softDelete = function (targetOrEntity, criteria) {
    // if user passed empty criteria or empty list of criterias, then throw an error
    if (criteria === undefined || criteria === null || criteria === "" || criteria instanceof Array && criteria.length === 0) {
      return Promise.reject(new Error("Empty criteria(s) are not allowed for the delete method."));
    }

    if (typeof criteria === "string" || typeof criteria === "number" || criteria instanceof Date || criteria instanceof Array) {
      return this.createQueryBuilder().softDelete().from(targetOrEntity).whereInIds(criteria).execute();
    } else {
      return this.createQueryBuilder().softDelete().from(targetOrEntity).where(criteria).execute();
    }
  };
  /**
   * Restores entities by a given condition(s).
   * Unlike save method executes a primitive operation without cascades, relations and other operations included.
   * Executes fast and efficient DELETE query.
   * Does not check if entity exist in the database.
   * Condition(s) cannot be empty.
   */


  EntityManager.prototype.restore = function (targetOrEntity, criteria) {
    // if user passed empty criteria or empty list of criterias, then throw an error
    if (criteria === undefined || criteria === null || criteria === "" || criteria instanceof Array && criteria.length === 0) {
      return Promise.reject(new Error("Empty criteria(s) are not allowed for the delete method."));
    }

    if (typeof criteria === "string" || typeof criteria === "number" || criteria instanceof Date || criteria instanceof Array) {
      return this.createQueryBuilder().restore().from(targetOrEntity).whereInIds(criteria).execute();
    } else {
      return this.createQueryBuilder().restore().from(targetOrEntity).where(criteria).execute();
    }
  };
  /**
   * Counts entities that match given find options or conditions.
   * Useful for pagination.
   */


  EntityManager.prototype.count = function (entityClass, optionsOrConditions) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var metadata, qb;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        metadata = this.connection.getMetadata(entityClass);
        qb = this.createQueryBuilder(entityClass, _find_options_FindOptionsUtils__WEBPACK_IMPORTED_MODULE_6__["FindOptionsUtils"].extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);
        return [2
        /*return*/
        , _find_options_FindOptionsUtils__WEBPACK_IMPORTED_MODULE_6__["FindOptionsUtils"].applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getCount()];
      });
    });
  };
  /**
   * Finds entities that match given find options or conditions.
   */


  EntityManager.prototype.find = function (entityClass, optionsOrConditions) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var metadata, qb;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        metadata = this.connection.getMetadata(entityClass);
        qb = this.createQueryBuilder(entityClass, _find_options_FindOptionsUtils__WEBPACK_IMPORTED_MODULE_6__["FindOptionsUtils"].extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);
        if (!_find_options_FindOptionsUtils__WEBPACK_IMPORTED_MODULE_6__["FindOptionsUtils"].isFindManyOptions(optionsOrConditions) || optionsOrConditions.loadEagerRelations !== false) _find_options_FindOptionsUtils__WEBPACK_IMPORTED_MODULE_6__["FindOptionsUtils"].joinEagerRelations(qb, qb.alias, metadata);
        return [2
        /*return*/
        , _find_options_FindOptionsUtils__WEBPACK_IMPORTED_MODULE_6__["FindOptionsUtils"].applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getMany()];
      });
    });
  };
  /**
   * Finds entities that match given find options and conditions.
   * Also counts all entities that match given conditions,
   * but ignores pagination settings (from and take options).
   */


  EntityManager.prototype.findAndCount = function (entityClass, optionsOrConditions) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var metadata, qb;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        metadata = this.connection.getMetadata(entityClass);
        qb = this.createQueryBuilder(entityClass, _find_options_FindOptionsUtils__WEBPACK_IMPORTED_MODULE_6__["FindOptionsUtils"].extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);
        if (!_find_options_FindOptionsUtils__WEBPACK_IMPORTED_MODULE_6__["FindOptionsUtils"].isFindManyOptions(optionsOrConditions) || optionsOrConditions.loadEagerRelations !== false) _find_options_FindOptionsUtils__WEBPACK_IMPORTED_MODULE_6__["FindOptionsUtils"].joinEagerRelations(qb, qb.alias, metadata);
        return [2
        /*return*/
        , _find_options_FindOptionsUtils__WEBPACK_IMPORTED_MODULE_6__["FindOptionsUtils"].applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getManyAndCount()];
      });
    });
  };
  /**
   * Finds entities with ids.
   * Optionally find options or conditions can be applied.
   */


  EntityManager.prototype.findByIds = function (entityClass, ids, optionsOrConditions) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var metadata, qb;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        // if no ids passed, no need to execute a query - just return an empty array of values
        if (!ids.length) return [2
        /*return*/
        , Promise.resolve([])];
        metadata = this.connection.getMetadata(entityClass);
        qb = this.createQueryBuilder(entityClass, _find_options_FindOptionsUtils__WEBPACK_IMPORTED_MODULE_6__["FindOptionsUtils"].extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);
        _find_options_FindOptionsUtils__WEBPACK_IMPORTED_MODULE_6__["FindOptionsUtils"].applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions);
        if (!_find_options_FindOptionsUtils__WEBPACK_IMPORTED_MODULE_6__["FindOptionsUtils"].isFindManyOptions(optionsOrConditions) || optionsOrConditions.loadEagerRelations !== false) _find_options_FindOptionsUtils__WEBPACK_IMPORTED_MODULE_6__["FindOptionsUtils"].joinEagerRelations(qb, qb.alias, metadata);
        return [2
        /*return*/
        , qb.andWhereInIds(ids).getMany()];
      });
    });
  };
  /**
   * Finds first entity that matches given conditions.
   */


  EntityManager.prototype.findOne = function (entityClass, idOrOptionsOrConditions, maybeOptions) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var findOptions, options, metadata, alias, qb, passedId;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        findOptions = undefined;

        if (_find_options_FindOptionsUtils__WEBPACK_IMPORTED_MODULE_6__["FindOptionsUtils"].isFindOneOptions(idOrOptionsOrConditions)) {
          findOptions = idOrOptionsOrConditions;
        } else if (maybeOptions && _find_options_FindOptionsUtils__WEBPACK_IMPORTED_MODULE_6__["FindOptionsUtils"].isFindOneOptions(maybeOptions)) {
          findOptions = maybeOptions;
        }

        options = undefined;
        if (idOrOptionsOrConditions instanceof Object && !_find_options_FindOptionsUtils__WEBPACK_IMPORTED_MODULE_6__["FindOptionsUtils"].isFindOneOptions(idOrOptionsOrConditions)) options = idOrOptionsOrConditions;
        metadata = this.connection.getMetadata(entityClass);
        alias = metadata.name;

        if (findOptions && findOptions.join) {
          alias = findOptions.join.alias;
        } else if (maybeOptions && _find_options_FindOptionsUtils__WEBPACK_IMPORTED_MODULE_6__["FindOptionsUtils"].isFindOneOptions(maybeOptions) && maybeOptions.join) {
          alias = maybeOptions.join.alias;
        }

        qb = this.createQueryBuilder(entityClass, alias);
        if (!findOptions || findOptions.loadEagerRelations !== false) _find_options_FindOptionsUtils__WEBPACK_IMPORTED_MODULE_6__["FindOptionsUtils"].joinEagerRelations(qb, qb.alias, qb.expressionMap.mainAlias.metadata);
        passedId = typeof idOrOptionsOrConditions === "string" || typeof idOrOptionsOrConditions === "number" || idOrOptionsOrConditions instanceof Date;

        if (!passedId) {
          findOptions = tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, findOptions || {}, {
            take: 1
          });
        }

        _find_options_FindOptionsUtils__WEBPACK_IMPORTED_MODULE_6__["FindOptionsUtils"].applyOptionsToQueryBuilder(qb, findOptions);

        if (options) {
          qb.where(options);
        } else if (passedId) {
          qb.andWhereInIds(metadata.ensureEntityIdMap(idOrOptionsOrConditions));
        }

        return [2
        /*return*/
        , qb.getOne()];
      });
    });
  };
  /**
   * Finds first entity that matches given conditions or rejects the returned promise on error.
   */


  EntityManager.prototype.findOneOrFail = function (entityClass, idOrOptionsOrConditions, maybeOptions) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , this.findOne(entityClass, idOrOptionsOrConditions, maybeOptions).then(function (value) {
          if (value === undefined) {
            return Promise.reject(new _error_EntityNotFoundError__WEBPACK_IMPORTED_MODULE_1__["EntityNotFoundError"](entityClass, idOrOptionsOrConditions));
          }

          return Promise.resolve(value);
        })];
      });
    });
  };
  /**
   * Clears all the data from the given table (truncates/drops it).
   *
   * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.
   * @see https://stackoverflow.com/a/5972738/925151
   */


  EntityManager.prototype.clear = function (entityClass) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var metadata, queryRunner;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            metadata = this.connection.getMetadata(entityClass);
            queryRunner = this.queryRunner || this.connection.createQueryRunner("master");
            _a.label = 1;

          case 1:
            _a.trys.push([1,, 3, 6]);

            return [4
            /*yield*/
            , queryRunner.clearTable(metadata.tablePath)];

          case 2:
            return [2
            /*return*/
            , _a.sent()];
          // await is needed here because we are using finally

          case 3:
            if (!!this.queryRunner) return [3
            /*break*/
            , 5];
            return [4
            /*yield*/
            , queryRunner.release()];

          case 4:
            _a.sent();

            _a.label = 5;

          case 5:
            return [7
            /*endfinally*/
            ];

          case 6:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Increments some column by provided value of the entities matched given conditions.
   */


  EntityManager.prototype.increment = function (entityClass, conditions, propertyPath, value) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var metadata, column, values;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        metadata = this.connection.getMetadata(entityClass);
        column = metadata.findColumnWithPropertyPath(propertyPath);
        if (!column) throw new Error("Column " + propertyPath + " was not found in " + metadata.targetName + " entity.");
        if (isNaN(Number(value))) throw new Error("Value \"" + value + "\" is not a number.");
        values = propertyPath.split(".").reduceRight(function (value, key) {
          var _a;

          return _a = {}, _a[key] = value, _a;
        }, function () {
          return _this.connection.driver.escape(column.databaseName) + " + " + value;
        });
        return [2
        /*return*/
        , this.createQueryBuilder(entityClass, "entity").update(entityClass).set(values).where(conditions).execute()];
      });
    });
  };
  /**
   * Decrements some column by provided value of the entities matched given conditions.
   */


  EntityManager.prototype.decrement = function (entityClass, conditions, propertyPath, value) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var metadata, column, values;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        metadata = this.connection.getMetadata(entityClass);
        column = metadata.findColumnWithPropertyPath(propertyPath);
        if (!column) throw new Error("Column " + propertyPath + " was not found in " + metadata.targetName + " entity.");
        if (isNaN(Number(value))) throw new Error("Value \"" + value + "\" is not a number.");
        values = propertyPath.split(".").reduceRight(function (value, key) {
          var _a;

          return _a = {}, _a[key] = value, _a;
        }, function () {
          return _this.connection.driver.escape(column.databaseName) + " - " + value;
        });
        return [2
        /*return*/
        , this.createQueryBuilder(entityClass, "entity").update(entityClass).set(values).where(conditions).execute()];
      });
    });
  };
  /**
   * Gets repository for the given entity class or name.
   * If single database connection mode is used, then repository is obtained from the
   * repository aggregator, where each repository is individually created for this entity manager.
   * When single database connection is not used, repository is being obtained from the connection.
   */


  EntityManager.prototype.getRepository = function (target) {
    // throw exception if there is no repository with this target registered
    if (!this.connection.hasMetadata(target)) throw new _error_RepositoryNotFoundError__WEBPACK_IMPORTED_MODULE_14__["RepositoryNotFoundError"](this.connection.name, target); // find already created repository instance and return it if found

    var metadata = this.connection.getMetadata(target);
    var repository = this.repositories.find(function (repository) {
      return repository.metadata === metadata;
    });
    if (repository) return repository; // if repository was not found then create it, store its instance and return it

    var newRepository = new _repository_RepositoryFactory__WEBPACK_IMPORTED_MODULE_16__["RepositoryFactory"]().create(this, metadata, this.queryRunner);
    this.repositories.push(newRepository);
    return newRepository;
  };
  /**
   * Gets tree repository for the given entity class or name.
   * If single database connection mode is used, then repository is obtained from the
   * repository aggregator, where each repository is individually created for this entity manager.
   * When single database connection is not used, repository is being obtained from the connection.
   */


  EntityManager.prototype.getTreeRepository = function (target) {
    // tree tables aren't supported by some drivers (mongodb)
    if (this.connection.driver.treeSupport === false) throw new _error_TreeRepositoryNotSupportedError__WEBPACK_IMPORTED_MODULE_17__["TreeRepositoryNotSupportedError"](this.connection.driver); // check if repository is real tree repository

    var repository = this.getRepository(target);
    if (!(repository instanceof _repository_TreeRepository__WEBPACK_IMPORTED_MODULE_4__["TreeRepository"])) throw new _error_RepositoryNotTreeError__WEBPACK_IMPORTED_MODULE_15__["RepositoryNotTreeError"](target);
    return repository;
  };
  /**
   * Gets mongodb repository for the given entity class.
   */


  EntityManager.prototype.getMongoRepository = function (target) {
    return this.connection.getMongoRepository(target);
  };
  /**
   * Gets custom entity repository marked with @EntityRepository decorator.
   */


  EntityManager.prototype.getCustomRepository = function (customRepository) {
    var entityRepositoryMetadataArgs = Object(_index__WEBPACK_IMPORTED_MODULE_10__["getMetadataArgsStorage"])().entityRepositories.find(function (repository) {
      return repository.target === (customRepository instanceof Function ? customRepository : customRepository.constructor);
    });
    if (!entityRepositoryMetadataArgs) throw new _error_CustomRepositoryNotFoundError__WEBPACK_IMPORTED_MODULE_9__["CustomRepositoryNotFoundError"](customRepository);
    var entityMetadata = entityRepositoryMetadataArgs.entity ? this.connection.getMetadata(entityRepositoryMetadataArgs.entity) : undefined;
    var entityRepositoryInstance = new entityRepositoryMetadataArgs.target(this, entityMetadata); // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,
    // however we need these properties for internal work of the class

    if (entityRepositoryInstance instanceof _repository_AbstractRepository__WEBPACK_IMPORTED_MODULE_11__["AbstractRepository"]) {
      if (!entityRepositoryInstance["manager"]) entityRepositoryInstance["manager"] = this;
    }

    if (entityRepositoryInstance instanceof _repository_Repository__WEBPACK_IMPORTED_MODULE_5__["Repository"]) {
      if (!entityMetadata) throw new _error_CustomRepositoryCannotInheritRepositoryError__WEBPACK_IMPORTED_MODULE_12__["CustomRepositoryCannotInheritRepositoryError"](customRepository);
      entityRepositoryInstance["manager"] = this;
      entityRepositoryInstance["metadata"] = entityMetadata;
    }

    return entityRepositoryInstance;
  };
  /**
   * Releases all resources used by entity manager.
   * This is used when entity manager is created with a single query runner,
   * and this single query runner needs to be released after job with entity manager is done.
   */


  EntityManager.prototype.release = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        if (!this.queryRunner) throw new _error_NoNeedToReleaseEntityManagerError__WEBPACK_IMPORTED_MODULE_3__["NoNeedToReleaseEntityManagerError"]();
        return [2
        /*return*/
        , this.queryRunner.release()];
      });
    });
  };

  return EntityManager;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/entity-manager/EntityManagerFactory.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/typeorm/browser/entity-manager/EntityManagerFactory.js ***!
  \*****************************************************************************/
/*! exports provided: EntityManagerFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntityManagerFactory", function() { return EntityManagerFactory; });
/* harmony import */ var _EntityManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EntityManager */ "./node_modules/typeorm/browser/entity-manager/EntityManager.js");
/* harmony import */ var _MongoEntityManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MongoEntityManager */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");
/* harmony import */ var _SqljsEntityManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SqljsEntityManager */ "./node_modules/typeorm/browser/entity-manager/SqljsEntityManager.js");
/* harmony import */ var _driver_sqljs_SqljsDriver__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../driver/sqljs/SqljsDriver */ "./node_modules/typeorm/browser/driver/sqljs/SqljsDriver.js");





/**
 * Helps to create entity managers.
 */

var EntityManagerFactory =
/** @class */
function () {
  function EntityManagerFactory() {}
  /**
   * Creates a new entity manager depend on a given connection's driver.
   */


  EntityManagerFactory.prototype.create = function (connection, queryRunner) {
    if (connection.driver instanceof _MongoEntityManager__WEBPACK_IMPORTED_MODULE_1__["MongoDriver"]) return new _MongoEntityManager__WEBPACK_IMPORTED_MODULE_1__["MongoEntityManager"](connection);
    if (connection.driver instanceof _driver_sqljs_SqljsDriver__WEBPACK_IMPORTED_MODULE_3__["SqljsDriver"]) return new _SqljsEntityManager__WEBPACK_IMPORTED_MODULE_2__["SqljsEntityManager"](connection, queryRunner);
    return new _EntityManager__WEBPACK_IMPORTED_MODULE_0__["EntityManager"](connection, queryRunner);
  };

  return EntityManagerFactory;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/entity-manager/SqljsEntityManager.js":
/*!***************************************************************************!*\
  !*** ./node_modules/typeorm/browser/entity-manager/SqljsEntityManager.js ***!
  \***************************************************************************/
/*! exports provided: SqljsEntityManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SqljsEntityManager", function() { return SqljsEntityManager; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _EntityManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EntityManager */ "./node_modules/typeorm/browser/entity-manager/EntityManager.js");


/**
 * A special EntityManager that includes import/export and load/save function
 * that are unique to Sql.js.
 */

var SqljsEntityManager =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](SqljsEntityManager, _super); // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------


  function SqljsEntityManager(connection, queryRunner) {
    var _this = _super.call(this, connection, queryRunner) || this;

    _this.driver = connection.driver;
    return _this;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Loads either the definition from a file (Node.js) or localstorage (browser)
   * or uses the given definition to open a new database.
   */


  SqljsEntityManager.prototype.loadDatabase = function (fileNameOrLocalStorageOrData) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.driver.load(fileNameOrLocalStorageOrData)];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Saves the current database to a file (Node.js) or localstorage (browser)
   * if fileNameOrLocalStorage is not set options.location is used.
   */


  SqljsEntityManager.prototype.saveDatabase = function (fileNameOrLocalStorage) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.driver.save(fileNameOrLocalStorage)];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns the current database definition.
   */


  SqljsEntityManager.prototype.exportDatabase = function () {
    return this.driver["export"]();
  };

  return SqljsEntityManager;
}(_EntityManager__WEBPACK_IMPORTED_MODULE_1__["EntityManager"]);



/***/ }),

/***/ "./node_modules/typeorm/browser/entity-schema/EntitySchema.js":
/*!********************************************************************!*\
  !*** ./node_modules/typeorm/browser/entity-schema/EntitySchema.js ***!
  \********************************************************************/
/*! exports provided: EntitySchema */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntitySchema", function() { return EntitySchema; });
/**
 * Interface for entity metadata mappings stored inside "schemas" instead of models decorated by decorators.
 */
var EntitySchema =
/** @class */
function () {
  function EntitySchema(options) {
    this.options = options;
  }

  return EntitySchema;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/entity-schema/EntitySchemaTransformer.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/typeorm/browser/entity-schema/EntitySchemaTransformer.js ***!
  \*******************************************************************************/
/*! exports provided: EntitySchemaTransformer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntitySchemaTransformer", function() { return EntitySchemaTransformer; });
/* harmony import */ var _metadata_args_MetadataArgsStorage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../metadata-args/MetadataArgsStorage */ "./node_modules/typeorm/browser/metadata-args/MetadataArgsStorage.js");

/**
 * Transforms entity schema into metadata args storage.
 * The result will be just like entities read from decorators.
 */

var EntitySchemaTransformer =
/** @class */
function () {
  function EntitySchemaTransformer() {} // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Transforms entity schema into new metadata args storage object.
   */


  EntitySchemaTransformer.prototype.transform = function (schemas) {
    var metadataArgsStorage = new _metadata_args_MetadataArgsStorage__WEBPACK_IMPORTED_MODULE_0__["MetadataArgsStorage"]();
    schemas.forEach(function (entitySchema) {
      var options = entitySchema.options; // add table metadata args from the schema

      var tableMetadata = {
        target: options.target || options.name,
        name: options.tableName,
        database: options.database,
        schema: options.schema,
        type: options.type || "regular",
        orderBy: options.orderBy,
        synchronize: options.synchronize,
        expression: options.expression
      };
      metadataArgsStorage.tables.push(tableMetadata); // add columns metadata args from the schema

      Object.keys(options.columns).forEach(function (columnName) {
        var column = options.columns[columnName];
        var mode = "regular";
        if (column.createDate) mode = "createDate";
        if (column.updateDate) mode = "updateDate";
        if (column.deleteDate) mode = "deleteDate";
        if (column.version) mode = "version";
        if (column.treeChildrenCount) mode = "treeChildrenCount";
        if (column.treeLevel) mode = "treeLevel";
        if (column.objectId) mode = "objectId";
        var columnAgrs = {
          target: options.target || options.name,
          mode: mode,
          propertyName: columnName,
          options: {
            type: column.type,
            name: column.objectId ? "_id" : column.name,
            length: column.length,
            width: column.width,
            nullable: column.nullable,
            readonly: column.readonly,
            update: column.update,
            select: column.select,
            insert: column.insert,
            primary: column.primary,
            unique: column.unique,
            comment: column.comment,
            "default": column["default"],
            onUpdate: column.onUpdate,
            precision: column.precision,
            scale: column.scale,
            zerofill: column.zerofill,
            unsigned: column.unsigned,
            charset: column.charset,
            collation: column.collation,
            "enum": column["enum"],
            asExpression: column.asExpression,
            generatedType: column.generatedType,
            hstoreType: column.hstoreType,
            array: column.array,
            transformer: column.transformer,
            spatialFeatureType: column.spatialFeatureType,
            srid: column.srid
          }
        };
        metadataArgsStorage.columns.push(columnAgrs);

        if (column.generated) {
          var generationArgs = {
            target: options.target || options.name,
            propertyName: columnName,
            strategy: typeof column.generated === "string" ? column.generated : "increment"
          };
          metadataArgsStorage.generations.push(generationArgs);
        }

        if (column.unique) metadataArgsStorage.uniques.push({
          target: options.target || options.name,
          columns: [columnName]
        });
      }); // add relation metadata args from the schema

      if (options.relations) {
        Object.keys(options.relations).forEach(function (relationName) {
          var relationSchema = options.relations[relationName];
          var relation = {
            target: options.target || options.name,
            propertyName: relationName,
            relationType: relationSchema.type,
            isLazy: relationSchema.lazy || false,
            type: relationSchema.target,
            inverseSideProperty: relationSchema.inverseSide,
            isTreeParent: relationSchema.treeParent,
            isTreeChildren: relationSchema.treeChildren,
            options: {
              eager: relationSchema.eager || false,
              cascade: relationSchema.cascade,
              nullable: relationSchema.nullable,
              onDelete: relationSchema.onDelete,
              onUpdate: relationSchema.onUpdate,
              deferrable: relationSchema.deferrable,
              primary: relationSchema.primary,
              persistence: relationSchema.persistence
            }
          };
          metadataArgsStorage.relations.push(relation); // add join column

          if (relationSchema.joinColumn) {
            if (typeof relationSchema.joinColumn === "boolean") {
              var joinColumn = {
                target: options.target || options.name,
                propertyName: relationName
              };
              metadataArgsStorage.joinColumns.push(joinColumn);
            } else {
              var joinColumn = {
                target: options.target || options.name,
                propertyName: relationName,
                name: relationSchema.joinColumn.name,
                referencedColumnName: relationSchema.joinColumn.referencedColumnName
              };
              metadataArgsStorage.joinColumns.push(joinColumn);
            }
          } // add join table


          if (relationSchema.joinTable) {
            if (typeof relationSchema.joinTable === "boolean") {
              var joinTable = {
                target: options.target || options.name,
                propertyName: relationName
              };
              metadataArgsStorage.joinTables.push(joinTable);
            } else {
              var joinTable = {
                target: options.target || options.name,
                propertyName: relationName,
                name: relationSchema.joinTable.name,
                database: relationSchema.joinTable.database,
                schema: relationSchema.joinTable.schema,
                joinColumns: relationSchema.joinTable.joinColumn ? [relationSchema.joinTable.joinColumn] : relationSchema.joinTable.joinColumns,
                inverseJoinColumns: relationSchema.joinTable.inverseJoinColumn ? [relationSchema.joinTable.inverseJoinColumn] : relationSchema.joinTable.inverseJoinColumns
              };
              metadataArgsStorage.joinTables.push(joinTable);
            }
          }
        });
      } // add index metadata args from the schema


      if (options.indices) {
        options.indices.forEach(function (index) {
          var indexAgrs = {
            target: options.target || options.name,
            name: index.name,
            unique: index.unique === true ? true : false,
            spatial: index.spatial === true ? true : false,
            fulltext: index.fulltext === true ? true : false,
            parser: index.parser,
            synchronize: index.synchronize === false ? false : true,
            where: index.where,
            sparse: index.sparse,
            columns: index.columns
          };
          metadataArgsStorage.indices.push(indexAgrs);
        });
      } // add unique metadata args from the schema


      if (options.uniques) {
        options.uniques.forEach(function (unique) {
          var uniqueAgrs = {
            target: options.target || options.name,
            name: unique.name,
            columns: unique.columns
          };
          metadataArgsStorage.uniques.push(uniqueAgrs);
        });
      } // add check metadata args from the schema


      if (options.checks) {
        options.checks.forEach(function (check) {
          var checkAgrs = {
            target: options.target || options.name,
            name: check.name,
            expression: check.expression
          };
          metadataArgsStorage.checks.push(checkAgrs);
        });
      } // add exclusion metadata args from the schema


      if (options.exclusions) {
        options.exclusions.forEach(function (exclusion) {
          var exclusionArgs = {
            target: options.target || options.name,
            name: exclusion.name,
            expression: exclusion.expression
          };
          metadataArgsStorage.exclusions.push(exclusionArgs);
        });
      }
    });
    return metadataArgsStorage;
  };

  return EntitySchemaTransformer;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/error/AlreadyHasActiveConnectionError.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/AlreadyHasActiveConnectionError.js ***!
  \*******************************************************************************/
/*! exports provided: AlreadyHasActiveConnectionError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlreadyHasActiveConnectionError", function() { return AlreadyHasActiveConnectionError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when consumer tries to recreate connection with the same name, but previous connection was not closed yet.
 */

var AlreadyHasActiveConnectionError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](AlreadyHasActiveConnectionError, _super);

  function AlreadyHasActiveConnectionError(connectionName) {
    var _this = _super.call(this) || this;

    _this.name = "AlreadyHasActiveConnectionError";
    Object.setPrototypeOf(_this, AlreadyHasActiveConnectionError.prototype);
    _this.message = "Cannot create a new connection named \"" + connectionName + "\", because connection with such name " + "already exist and it now has an active connection session.";
    return _this;
  }

  return AlreadyHasActiveConnectionError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/CannotAttachTreeChildrenEntityError.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/CannotAttachTreeChildrenEntityError.js ***!
  \***********************************************************************************/
/*! exports provided: CannotAttachTreeChildrenEntityError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CannotAttachTreeChildrenEntityError", function() { return CannotAttachTreeChildrenEntityError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when user saves tree children entity but its parent is not saved yet.
*/

var CannotAttachTreeChildrenEntityError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](CannotAttachTreeChildrenEntityError, _super);

  function CannotAttachTreeChildrenEntityError(entityName) {
    var _this = _super.call(this) || this;

    _this.name = "CannotAttachTreeChildrenEntityError";
    Object.setPrototypeOf(_this, CannotAttachTreeChildrenEntityError.prototype);
    _this.message = "Cannot attach entity \"" + entityName + "\" to its parent. Please make sure parent is saved in the database before saving children nodes.";
    return _this;
  }

  return CannotAttachTreeChildrenEntityError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/CannotConnectAlreadyConnectedError.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/CannotConnectAlreadyConnectedError.js ***!
  \**********************************************************************************/
/*! exports provided: CannotConnectAlreadyConnectedError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CannotConnectAlreadyConnectedError", function() { return CannotConnectAlreadyConnectedError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when consumer tries to connect when he already connected.
 */

var CannotConnectAlreadyConnectedError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](CannotConnectAlreadyConnectedError, _super);

  function CannotConnectAlreadyConnectedError(connectionName) {
    var _this = _super.call(this) || this;

    _this.name = "CannotConnectAlreadyConnectedError";
    Object.setPrototypeOf(_this, CannotConnectAlreadyConnectedError.prototype);
    _this.message = "Cannot create a \"" + connectionName + "\" connection because connection to the database already established.";
    return _this;
  }

  return CannotConnectAlreadyConnectedError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/CannotCreateEntityIdMapError.js":
/*!****************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/CannotCreateEntityIdMapError.js ***!
  \****************************************************************************/
/*! exports provided: CannotCreateEntityIdMapError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CannotCreateEntityIdMapError", function() { return CannotCreateEntityIdMapError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when user tries to create entity id map from the mixed id value,
 * but id value is a single value when entity requires multiple values.
 */

var CannotCreateEntityIdMapError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](CannotCreateEntityIdMapError, _super);

  function CannotCreateEntityIdMapError(metadata, id) {
    var _this = _super.call(this) || this;

    _this.name = "CannotCreateEntityIdMapError";
    Object.setPrototypeOf(_this, CannotCreateEntityIdMapError.prototype);
    var objectExample = metadata.primaryColumns.reduce(function (object, column, index) {
      column.setEntityValue(object, index + 1);
      return object;
    }, {});
    _this.message = "Cannot use given entity id \"" + id + "\" because \"" + metadata.targetName + "\" contains multiple primary columns, you must provide object in following form: " + JSON.stringify(objectExample) + " as an id.";
    return _this;
  }

  return CannotCreateEntityIdMapError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/CannotDetermineEntityError.js":
/*!**************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/CannotDetermineEntityError.js ***!
  \**************************************************************************/
/*! exports provided: CannotDetermineEntityError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CannotDetermineEntityError", function() { return CannotDetermineEntityError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when user tries to save/remove/etc. constructor-less object (object literal) instead of entity.
 */

var CannotDetermineEntityError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](CannotDetermineEntityError, _super);

  function CannotDetermineEntityError(operation) {
    var _this = _super.call(this) || this;

    _this.name = "CannotDetermineEntityError";
    Object.setPrototypeOf(_this, CannotDetermineEntityError.prototype);
    _this.message = "Cannot " + operation + ", given value must be instance of entity class, instead object literal is given. Or you must specify an entity target to method call.";
    return _this;
  }

  return CannotDetermineEntityError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/CannotExecuteNotConnectedError.js":
/*!******************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/CannotExecuteNotConnectedError.js ***!
  \******************************************************************************/
/*! exports provided: CannotExecuteNotConnectedError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CannotExecuteNotConnectedError", function() { return CannotExecuteNotConnectedError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when consumer tries to execute operation allowed only if connection is opened.
 */

var CannotExecuteNotConnectedError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](CannotExecuteNotConnectedError, _super);

  function CannotExecuteNotConnectedError(connectionName) {
    var _this = _super.call(this) || this;

    _this.name = "CannotExecuteNotConnectedError";
    Object.setPrototypeOf(_this, CannotExecuteNotConnectedError.prototype);
    _this.message = "Cannot execute operation on \"" + connectionName + "\" connection because connection is not yet established.";
    return _this;
  }

  return CannotExecuteNotConnectedError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/CannotReflectMethodParameterTypeError.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/CannotReflectMethodParameterTypeError.js ***!
  \*************************************************************************************/
/*! exports provided: CannotReflectMethodParameterTypeError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CannotReflectMethodParameterTypeError", function() { return CannotReflectMethodParameterTypeError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when ORM cannot get method parameter's type.
 * Basically, when reflect-metadata is not available or tsconfig is not properly setup.
 */

var CannotReflectMethodParameterTypeError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](CannotReflectMethodParameterTypeError, _super);

  function CannotReflectMethodParameterTypeError(target, methodName) {
    var _this = _super.call(this) || this;

    _this.name = "CannotReflectMethodParameterTypeError";
    Object.setPrototypeOf(_this, CannotReflectMethodParameterTypeError.prototype);
    _this.message = "Cannot get reflected type for a \"" + methodName + "\" method's parameter of \"" + target.name + "\" class. " + "Make sure you have turned on an \"emitDecoratorMetadata\": true option in tsconfig.json. " + "Also make sure you have imported \"reflect-metadata\" on top of the main entry file in your application.";
    return _this;
  }

  return CannotReflectMethodParameterTypeError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/CircularRelationsError.js":
/*!**********************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/CircularRelationsError.js ***!
  \**********************************************************************/
/*! exports provided: CircularRelationsError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CircularRelationsError", function() { return CircularRelationsError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when circular relations detected with nullable set to false.
 */

var CircularRelationsError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](CircularRelationsError, _super);

  function CircularRelationsError(path) {
    var _this = _super.call(this) || this;

    _this.name = "CircularRelationsError";
    Object.setPrototypeOf(_this, CircularRelationsError.prototype);
    _this.message = "Circular relations detected: " + path + ". To resolve this issue you need to set nullable: true somewhere in this dependency structure.";
    return _this;
  }

  return CircularRelationsError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/ColumnTypeUndefinedError.js":
/*!************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/ColumnTypeUndefinedError.js ***!
  \************************************************************************/
/*! exports provided: ColumnTypeUndefinedError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColumnTypeUndefinedError", function() { return ColumnTypeUndefinedError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when ORM cannot get column's type automatically.
 * Basically, when reflect-metadata is not available or tsconfig is not properly setup.
 */

var ColumnTypeUndefinedError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](ColumnTypeUndefinedError, _super);

  function ColumnTypeUndefinedError(object, propertyName) {
    var _this = _super.call(this) || this;

    _this.name = "ColumnTypeUndefinedError";
    Object.setPrototypeOf(_this, ColumnTypeUndefinedError.prototype);
    _this.message = "Column type for " + object.constructor.name + "#" + propertyName + " is not defined and cannot be guessed. " + "Make sure you have turned on an \"emitDecoratorMetadata\": true option in tsconfig.json. " + "Also make sure you have imported \"reflect-metadata\" on top of the main entry file in your application (before any entity imported)." + "If you are using JavaScript instead of TypeScript you must explicitly provide a column type.";
    return _this;
  }

  return ColumnTypeUndefinedError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/ConnectionIsNotSetError.js":
/*!***********************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/ConnectionIsNotSetError.js ***!
  \***********************************************************************/
/*! exports provided: ConnectionIsNotSetError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionIsNotSetError", function() { return ConnectionIsNotSetError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when user tries to execute operation that requires connection to be established.
 */

var ConnectionIsNotSetError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](ConnectionIsNotSetError, _super);

  function ConnectionIsNotSetError(dbType) {
    var _this = _super.call(this) || this;

    _this.name = "ConnectionIsNotSetError";
    Object.setPrototypeOf(_this, ConnectionIsNotSetError.prototype);
    _this.message = "Connection with " + dbType + " database is not established. Check connection configuration.";
    return _this;
  }

  return ConnectionIsNotSetError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/ConnectionNotFoundError.js":
/*!***********************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/ConnectionNotFoundError.js ***!
  \***********************************************************************/
/*! exports provided: ConnectionNotFoundError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionNotFoundError", function() { return ConnectionNotFoundError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when consumer tries to get connection that does not exist.
 */

var ConnectionNotFoundError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](ConnectionNotFoundError, _super);

  function ConnectionNotFoundError(name) {
    var _this = _super.call(this) || this;

    _this.name = "ConnectionNotFoundError";
    Object.setPrototypeOf(_this, ConnectionNotFoundError.prototype);
    _this.message = "Connection \"" + name + "\" was not found.";
    return _this;
  }

  return ConnectionNotFoundError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/CustomRepositoryCannotInheritRepositoryError.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/CustomRepositoryCannotInheritRepositoryError.js ***!
  \********************************************************************************************/
/*! exports provided: CustomRepositoryCannotInheritRepositoryError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomRepositoryCannotInheritRepositoryError", function() { return CustomRepositoryCannotInheritRepositoryError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown if custom repository inherits Repository class however entity is not set in @EntityRepository decorator.
 */

var CustomRepositoryCannotInheritRepositoryError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](CustomRepositoryCannotInheritRepositoryError, _super);

  function CustomRepositoryCannotInheritRepositoryError(repository) {
    var _this = _super.call(this) || this;

    _this.name = "CustomRepositoryCannotInheritRepositoryError";
    Object.setPrototypeOf(_this, CustomRepositoryCannotInheritRepositoryError.prototype);
    _this.message = "Custom entity repository " + (repository instanceof Function ? repository.name : repository.constructor.name) + " " + " cannot inherit Repository class without entity being set in the @EntityRepository decorator.";
    return _this;
  }

  return CustomRepositoryCannotInheritRepositoryError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/CustomRepositoryDoesNotHaveEntityError.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/CustomRepositoryDoesNotHaveEntityError.js ***!
  \**************************************************************************************/
/*! exports provided: CustomRepositoryDoesNotHaveEntityError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomRepositoryDoesNotHaveEntityError", function() { return CustomRepositoryDoesNotHaveEntityError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown if custom repositories that extend AbstractRepository classes does not have managed entity.
 */

var CustomRepositoryDoesNotHaveEntityError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](CustomRepositoryDoesNotHaveEntityError, _super);

  function CustomRepositoryDoesNotHaveEntityError(repository) {
    var _this = _super.call(this) || this;

    _this.name = "CustomRepositoryDoesNotHaveEntityError";
    Object.setPrototypeOf(_this, CustomRepositoryDoesNotHaveEntityError.prototype);
    _this.message = "Custom repository " + (repository instanceof Function ? repository.name : repository.constructor.name) + " does not have managed entity. " + "Did you forget to specify entity for it @EntityRepository(MyEntity)? ";
    return _this;
  }

  return CustomRepositoryDoesNotHaveEntityError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/CustomRepositoryNotFoundError.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/CustomRepositoryNotFoundError.js ***!
  \*****************************************************************************/
/*! exports provided: CustomRepositoryNotFoundError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomRepositoryNotFoundError", function() { return CustomRepositoryNotFoundError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown if custom repository was not found.
 */

var CustomRepositoryNotFoundError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](CustomRepositoryNotFoundError, _super);

  function CustomRepositoryNotFoundError(repository) {
    var _this = _super.call(this) || this;

    _this.name = "CustomRepositoryNotFoundError";
    Object.setPrototypeOf(_this, CustomRepositoryNotFoundError.prototype);
    _this.message = "Custom repository " + (repository instanceof Function ? repository.name : repository.constructor.name) + " was not found. " + "Did you forgot to put @EntityRepository decorator on it?";
    return _this;
  }

  return CustomRepositoryNotFoundError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/DataTypeNotSupportedError.js":
/*!*************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/DataTypeNotSupportedError.js ***!
  \*************************************************************************/
/*! exports provided: DataTypeNotSupportedError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataTypeNotSupportedError", function() { return DataTypeNotSupportedError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");


var DataTypeNotSupportedError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](DataTypeNotSupportedError, _super);

  function DataTypeNotSupportedError(column, dataType, database) {
    var _this = _super.call(this) || this;

    _this.name = "DataTypeNotSupportedError";
    Object.setPrototypeOf(_this, DataTypeNotSupportedError.prototype);
    var type = typeof dataType === "string" ? dataType : dataType.name;
    _this.message = "Data type \"" + type + "\" in \"" + column.entityMetadata.targetName + "." + column.propertyName + "\" is not supported by \"" + database + "\" database.";
    return _this;
  }

  return DataTypeNotSupportedError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/DriverOptionNotSetError.js":
/*!***********************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/DriverOptionNotSetError.js ***!
  \***********************************************************************/
/*! exports provided: DriverOptionNotSetError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DriverOptionNotSetError", function() { return DriverOptionNotSetError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown if some required driver's option is not set.
 */

var DriverOptionNotSetError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](DriverOptionNotSetError, _super);

  function DriverOptionNotSetError(optionName) {
    var _this = _super.call(this) || this;

    _this.name = "DriverOptionNotSetError";
    Object.setPrototypeOf(_this, DriverOptionNotSetError.prototype);
    _this.message = "Driver option (" + optionName + ") is not set. Please set it to perform connection to the database.";
    return _this;
  }

  return DriverOptionNotSetError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/DriverPackageNotInstalledError.js":
/*!******************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/DriverPackageNotInstalledError.js ***!
  \******************************************************************************/
/*! exports provided: DriverPackageNotInstalledError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DriverPackageNotInstalledError", function() { return DriverPackageNotInstalledError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when required driver's package is not installed.
 */

var DriverPackageNotInstalledError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](DriverPackageNotInstalledError, _super);

  function DriverPackageNotInstalledError(driverName, packageName) {
    var _this = _super.call(this) || this;

    _this.name = "DriverPackageNotInstalledError";
    Object.setPrototypeOf(_this, DriverPackageNotInstalledError.prototype);
    _this.message = driverName + " package has not been found installed. Try to install it: npm install " + packageName + " --save";
    return _this;
  }

  return DriverPackageNotInstalledError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/EntityColumnNotFound.js":
/*!********************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/EntityColumnNotFound.js ***!
  \********************************************************************/
/*! exports provided: EntityColumnNotFound */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntityColumnNotFound", function() { return EntityColumnNotFound; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 *
 */

var EntityColumnNotFound =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](EntityColumnNotFound, _super);

  function EntityColumnNotFound(propertyPath) {
    var _this = _super.call(this) || this;

    _this.name = "EntityColumnNotFound";
    Object.setPrototypeOf(_this, EntityColumnNotFound.prototype);
    _this.message = "No entity column \"" + propertyPath + "\" was found.";
    return _this;
  }

  return EntityColumnNotFound;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/EntityMetadataNotFoundError.js":
/*!***************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/EntityMetadataNotFoundError.js ***!
  \***************************************************************************/
/*! exports provided: EntityMetadataNotFoundError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntityMetadataNotFoundError", function() { return EntityMetadataNotFoundError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index */ "./node_modules/typeorm/browser/index.js");


/**
 */

var EntityMetadataNotFoundError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](EntityMetadataNotFoundError, _super);

  function EntityMetadataNotFoundError(target) {
    var _this = _super.call(this) || this;

    _this.name = "EntityMetadataNotFound";
    Object.setPrototypeOf(_this, EntityMetadataNotFoundError.prototype);
    var targetName;

    if (target instanceof _index__WEBPACK_IMPORTED_MODULE_1__["EntitySchema"]) {
      targetName = target.options.name;
    } else if (typeof target === "function") {
      targetName = target.name;
    } else {
      targetName = target;
    }

    _this.message = "No metadata for \"" + targetName + "\" was found.";
    return _this;
  }

  return EntityMetadataNotFoundError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/EntityNotFoundError.js":
/*!*******************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/EntityNotFoundError.js ***!
  \*******************************************************************/
/*! exports provided: EntityNotFoundError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntityNotFoundError", function() { return EntityNotFoundError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index */ "./node_modules/typeorm/browser/index.js");


/**
 * Thrown when no result could be found in methods which are not allowed to return undefined or an empty set.
 */

var EntityNotFoundError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](EntityNotFoundError, _super);

  function EntityNotFoundError(entityClass, criteria) {
    var _this = _super.call(this) || this;

    _this.name = "EntityNotFound";
    Object.setPrototypeOf(_this, EntityNotFoundError.prototype);
    var targetName;

    if (entityClass instanceof _index__WEBPACK_IMPORTED_MODULE_1__["EntitySchema"]) {
      targetName = entityClass.options.name;
    } else if (typeof entityClass === "function") {
      targetName = entityClass.name;
    } else {
      targetName = entityClass;
    }

    var criteriaString = _this.stringifyCriteria(criteria);

    _this.message = "Could not find any entity of type \"" + targetName + "\" matching: " + criteriaString;
    return _this;
  }

  EntityNotFoundError.prototype.stringifyCriteria = function (criteria) {
    try {
      return JSON.stringify(criteria, null, 4);
    } catch (e) {}

    return "" + criteria;
  };

  return EntityNotFoundError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/FindRelationsNotFoundError.js":
/*!**************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/FindRelationsNotFoundError.js ***!
  \**************************************************************************/
/*! exports provided: FindRelationsNotFoundError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FindRelationsNotFoundError", function() { return FindRelationsNotFoundError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when relations specified in the find options were not found in the entities.
*/

var FindRelationsNotFoundError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](FindRelationsNotFoundError, _super);

  function FindRelationsNotFoundError(notFoundRelations) {
    var _this = _super.call(this) || this;

    Object.setPrototypeOf(_this, FindRelationsNotFoundError.prototype);

    if (notFoundRelations.length === 1) {
      _this.message = "Relation \"" + notFoundRelations[0] + "\" was not found, please check if it is correct and really exist in your entity.";
    } else {
      _this.message = "Relations " + notFoundRelations.map(function (relation) {
        return "\"" + relation + "\"";
      }).join(", ") + " were not found, please check if relations are correct and they exist in your entities.";
    }

    return _this;
  }

  return FindRelationsNotFoundError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/InitializedRelationError.js":
/*!************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/InitializedRelationError.js ***!
  \************************************************************************/
/*! exports provided: InitializedRelationError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InitializedRelationError", function() { return InitializedRelationError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when relation has array initialized which is forbidden my ORM.
 *
 * @see https://github.com/typeorm/typeorm/issues/1319
 * @see http://typeorm.io/#/relations-faq/avoid-relation-property-initializers
 */

var InitializedRelationError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](InitializedRelationError, _super);

  function InitializedRelationError(relation) {
    var _this = _super.call(this) || this;

    Object.setPrototypeOf(_this, InitializedRelationError.prototype);
    _this.message = "Array initializations are not allowed in entity relations. " + ("Please remove array initialization (= []) from \"" + relation.entityMetadata.targetName + "#" + relation.propertyPath + "\". ") + "This is ORM requirement to make relations to work properly. Refer docs for more information.";
    return _this;
  }

  return InitializedRelationError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/InsertValuesMissingError.js":
/*!************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/InsertValuesMissingError.js ***!
  \************************************************************************/
/*! exports provided: InsertValuesMissingError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InsertValuesMissingError", function() { return InsertValuesMissingError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when user tries to insert using QueryBuilder but do not specify what to insert.
 */

var InsertValuesMissingError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](InsertValuesMissingError, _super);

  function InsertValuesMissingError() {
    var _this = _super.call(this) || this;

    _this.name = "InsertValuesMissingError";
    Object.setPrototypeOf(_this, InsertValuesMissingError.prototype);
    _this.message = "Cannot perform insert query because values are not defined. Call \"qb.values(...)\" method to specify inserted values.";
    return _this;
  }

  return InsertValuesMissingError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/LimitOnUpdateNotSupportedError.js":
/*!******************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/LimitOnUpdateNotSupportedError.js ***!
  \******************************************************************************/
/*! exports provided: LimitOnUpdateNotSupportedError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LimitOnUpdateNotSupportedError", function() { return LimitOnUpdateNotSupportedError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when user tries to build an UPDATE query with LIMIT but the database does not support it.
*/

var LimitOnUpdateNotSupportedError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](LimitOnUpdateNotSupportedError, _super);

  function LimitOnUpdateNotSupportedError() {
    var _this = _super.call(this) || this;

    _this.name = "LimitOnUpdateNotSupportedError";
    Object.setPrototypeOf(_this, LimitOnUpdateNotSupportedError.prototype);
    _this.message = "Your database does not support LIMIT on UPDATE statements.";
    return _this;
  }

  return LimitOnUpdateNotSupportedError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/LockNotSupportedOnGivenDriverError.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/LockNotSupportedOnGivenDriverError.js ***!
  \**********************************************************************************/
/*! exports provided: LockNotSupportedOnGivenDriverError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LockNotSupportedOnGivenDriverError", function() { return LockNotSupportedOnGivenDriverError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when selected sql driver does not supports locking.
 */

var LockNotSupportedOnGivenDriverError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](LockNotSupportedOnGivenDriverError, _super);

  function LockNotSupportedOnGivenDriverError() {
    var _this = _super.call(this) || this;

    _this.name = "LockNotSupportedOnGivenDriverError";
    Object.setPrototypeOf(_this, LockNotSupportedOnGivenDriverError.prototype);
    _this.message = "Locking not supported on given driver.";
    return _this;
  }

  return LockNotSupportedOnGivenDriverError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/MissingDeleteDateColumnError.js":
/*!****************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/MissingDeleteDateColumnError.js ***!
  \****************************************************************************/
/*! exports provided: MissingDeleteDateColumnError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MissingDeleteDateColumnError", function() { return MissingDeleteDateColumnError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 */

var MissingDeleteDateColumnError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](MissingDeleteDateColumnError, _super);

  function MissingDeleteDateColumnError(entityMetadata) {
    var _this = _super.call(this) || this;

    _this.name = "MissingDeleteDateColumnError";
    Object.setPrototypeOf(_this, MissingDeleteDateColumnError.prototype);
    _this.message = "Entity \"" + entityMetadata.name + "\" does not have delete date columns.";
    return _this;
  }

  return MissingDeleteDateColumnError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/MissingDriverError.js":
/*!******************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/MissingDriverError.js ***!
  \******************************************************************/
/*! exports provided: MissingDriverError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MissingDriverError", function() { return MissingDriverError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when consumer specifies driver type that does not exist or supported.
 */

var MissingDriverError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](MissingDriverError, _super);

  function MissingDriverError(driverType) {
    var _this = _super.call(this) || this;

    _this.name = "MissingDriverError";
    Object.setPrototypeOf(_this, MissingDriverError.prototype);
    _this.message = "Wrong driver: \"" + driverType + "\" given. Supported drivers are: \"cordova\", \"expo\", \"mariadb\", \"mongodb\", \"mssql\", \"mysql\", \"oracle\", \"postgres\", \"sqlite\", \"sqljs\", \"react-native\".";
    return _this;
  }

  return MissingDriverError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/MissingPrimaryColumnError.js":
/*!*************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/MissingPrimaryColumnError.js ***!
  \*************************************************************************/
/*! exports provided: MissingPrimaryColumnError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MissingPrimaryColumnError", function() { return MissingPrimaryColumnError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 */

var MissingPrimaryColumnError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](MissingPrimaryColumnError, _super);

  function MissingPrimaryColumnError(entityMetadata) {
    var _this = _super.call(this) || this;

    _this.name = "MissingPrimaryColumnError";
    Object.setPrototypeOf(_this, MissingPrimaryColumnError.prototype);
    _this.message = "Entity \"" + entityMetadata.name + "\" does not have a primary column. Primary column is required to " + "have in all your entities. Use @PrimaryColumn decorator to add a primary column to your entity.";
    return _this;
  }

  return MissingPrimaryColumnError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/MustBeEntityError.js":
/*!*****************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/MustBeEntityError.js ***!
  \*****************************************************************/
/*! exports provided: MustBeEntityError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MustBeEntityError", function() { return MustBeEntityError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when method expects entity but instead something else is given.
 */

var MustBeEntityError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](MustBeEntityError, _super);

  function MustBeEntityError(operation, wrongValue) {
    var _this = _super.call(this) || this;

    _this.name = "MustBeEntityError";
    Object.setPrototypeOf(_this, MustBeEntityError.prototype);
    _this.message = "Cannot " + operation + ", given value must be an entity, instead \"" + wrongValue + "\" is given.";
    return _this;
  }

  return MustBeEntityError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/NoConnectionOptionError.js":
/*!***********************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/NoConnectionOptionError.js ***!
  \***********************************************************************/
/*! exports provided: NoConnectionOptionError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoConnectionOptionError", function() { return NoConnectionOptionError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when some option is not set in the connection options.
 */

var NoConnectionOptionError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](NoConnectionOptionError, _super);

  function NoConnectionOptionError(optionName) {
    var _this = _super.call(this) || this;

    Object.setPrototypeOf(_this, NoConnectionOptionError.prototype);
    _this.message = "Option \"" + optionName + "\" is not set in your connection options, please define \"" + optionName + "\" option in your connection options or ormconfig.json";
    return _this;
  }

  return NoConnectionOptionError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/NoNeedToReleaseEntityManagerError.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/NoNeedToReleaseEntityManagerError.js ***!
  \*********************************************************************************/
/*! exports provided: NoNeedToReleaseEntityManagerError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoNeedToReleaseEntityManagerError", function() { return NoNeedToReleaseEntityManagerError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when consumer tries to release entity manager that does not use single database connection.
 */

var NoNeedToReleaseEntityManagerError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](NoNeedToReleaseEntityManagerError, _super);

  function NoNeedToReleaseEntityManagerError() {
    var _this = _super.call(this) || this;

    _this.name = "NoNeedToReleaseEntityManagerError";
    Object.setPrototypeOf(_this, NoNeedToReleaseEntityManagerError.prototype);
    _this.message = "Entity manager is not using single database connection and cannot be released. " + "Only entity managers created by connection#createEntityManagerWithSingleDatabaseConnection " + "methods have a single database connection and they should be released.";
    return _this;
  }

  return NoNeedToReleaseEntityManagerError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/NoVersionOrUpdateDateColumnError.js":
/*!********************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/NoVersionOrUpdateDateColumnError.js ***!
  \********************************************************************************/
/*! exports provided: NoVersionOrUpdateDateColumnError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoVersionOrUpdateDateColumnError", function() { return NoVersionOrUpdateDateColumnError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when an entity does not have no version and no update date column.
 */

var NoVersionOrUpdateDateColumnError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](NoVersionOrUpdateDateColumnError, _super);

  function NoVersionOrUpdateDateColumnError(entity) {
    var _this = _super.call(this) || this;

    _this.name = "NoVersionOrUpdateDateColumnError";
    Object.setPrototypeOf(_this, NoVersionOrUpdateDateColumnError.prototype);
    _this.message = "Entity " + entity + " does not have version or update date columns.";
    return _this;
  }

  return NoVersionOrUpdateDateColumnError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/OffsetWithoutLimitNotSupportedError.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/OffsetWithoutLimitNotSupportedError.js ***!
  \***********************************************************************************/
/*! exports provided: OffsetWithoutLimitNotSupportedError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OffsetWithoutLimitNotSupportedError", function() { return OffsetWithoutLimitNotSupportedError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when user tries to build SELECT query using OFFSET without LIMIT applied but database does not support it.
*/

var OffsetWithoutLimitNotSupportedError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](OffsetWithoutLimitNotSupportedError, _super);

  function OffsetWithoutLimitNotSupportedError() {
    var _this = _super.call(this) || this;

    _this.name = "OffsetWithoutLimitNotSupportedError";
    Object.setPrototypeOf(_this, OffsetWithoutLimitNotSupportedError.prototype);
    _this.message = "RDBMS does not support OFFSET without LIMIT in SELECT statements. You must use limit in conjunction with offset function (or take in conjunction with skip function if you are using pagination).";
    return _this;
  }

  return OffsetWithoutLimitNotSupportedError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/OptimisticLockCanNotBeUsedError.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/OptimisticLockCanNotBeUsedError.js ***!
  \*******************************************************************************/
/*! exports provided: OptimisticLockCanNotBeUsedError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OptimisticLockCanNotBeUsedError", function() { return OptimisticLockCanNotBeUsedError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when an optimistic lock cannot be used in query builder.
 */

var OptimisticLockCanNotBeUsedError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](OptimisticLockCanNotBeUsedError, _super);

  function OptimisticLockCanNotBeUsedError() {
    var _this = _super.call(this) || this;

    _this.name = "OptimisticLockCanNotBeUsedError";
    Object.setPrototypeOf(_this, OptimisticLockCanNotBeUsedError.prototype);
    _this.message = "The optimistic lock can be used only with getOne() method.";
    return _this;
  }

  return OptimisticLockCanNotBeUsedError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/OptimisticLockVersionMismatchError.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/OptimisticLockVersionMismatchError.js ***!
  \**********************************************************************************/
/*! exports provided: OptimisticLockVersionMismatchError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OptimisticLockVersionMismatchError", function() { return OptimisticLockVersionMismatchError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when a version check on an object that uses optimistic locking through a version field fails.
 */

var OptimisticLockVersionMismatchError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](OptimisticLockVersionMismatchError, _super);

  function OptimisticLockVersionMismatchError(entity, expectedVersion, actualVersion) {
    var _this = _super.call(this) || this;

    _this.name = "OptimisticLockVersionMismatchError";
    Object.setPrototypeOf(_this, OptimisticLockVersionMismatchError.prototype);
    _this.message = "The optimistic lock on entity " + entity + " failed, version " + expectedVersion + " was expected, but is actually " + actualVersion + ".";
    return _this;
  }

  return OptimisticLockVersionMismatchError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/PessimisticLockTransactionRequiredError.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/PessimisticLockTransactionRequiredError.js ***!
  \***************************************************************************************/
/*! exports provided: PessimisticLockTransactionRequiredError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PessimisticLockTransactionRequiredError", function() { return PessimisticLockTransactionRequiredError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when a transaction is required for the current operation, but there is none open.
 */

var PessimisticLockTransactionRequiredError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](PessimisticLockTransactionRequiredError, _super);

  function PessimisticLockTransactionRequiredError() {
    var _this = _super.call(this) || this;

    _this.name = "PessimisticLockTransactionRequiredError";
    Object.setPrototypeOf(_this, PessimisticLockTransactionRequiredError.prototype);
    _this.message = "An open transaction is required for pessimistic lock.";
    return _this;
  }

  return PessimisticLockTransactionRequiredError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/PrimaryColumnCannotBeNullableError.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/PrimaryColumnCannotBeNullableError.js ***!
  \**********************************************************************************/
/*! exports provided: PrimaryColumnCannotBeNullableError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrimaryColumnCannotBeNullableError", function() { return PrimaryColumnCannotBeNullableError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");


var PrimaryColumnCannotBeNullableError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](PrimaryColumnCannotBeNullableError, _super);

  function PrimaryColumnCannotBeNullableError(object, propertyName) {
    var _this = _super.call(this) || this;

    _this.name = "PrimaryColumnCannotBeNullableError";
    Object.setPrototypeOf(_this, PrimaryColumnCannotBeNullableError.prototype);
    _this.message = "Primary column " + object.constructor.name + "#" + propertyName + " cannot be nullable. " + "Its not allowed for primary keys. Try to remove nullable option.";
    return _this;
  }

  return PrimaryColumnCannotBeNullableError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/QueryFailedError.js":
/*!****************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/QueryFailedError.js ***!
  \****************************************************************/
/*! exports provided: QueryFailedError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueryFailedError", function() { return QueryFailedError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_ObjectUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/ObjectUtils */ "./node_modules/typeorm/browser/util/ObjectUtils.js");


/**
 * Thrown when query execution has failed.
*/

var QueryFailedError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](QueryFailedError, _super);

  function QueryFailedError(query, parameters, driverError) {
    var _this = _super.call(this) || this;

    Object.setPrototypeOf(_this, QueryFailedError.prototype);
    _this.message = driverError.toString().replace(/^error: /, "").replace(/^Error: /, "").replace(/^Request/, "");
    _util_ObjectUtils__WEBPACK_IMPORTED_MODULE_1__["ObjectUtils"].assign(_this, tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, driverError, {
      name: "QueryFailedError",
      query: query,
      parameters: parameters || []
    }));
    return _this;
  }

  return QueryFailedError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/QueryRunnerAlreadyReleasedError.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/QueryRunnerAlreadyReleasedError.js ***!
  \*******************************************************************************/
/*! exports provided: QueryRunnerAlreadyReleasedError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueryRunnerAlreadyReleasedError", function() { return QueryRunnerAlreadyReleasedError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 */

var QueryRunnerAlreadyReleasedError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](QueryRunnerAlreadyReleasedError, _super);

  function QueryRunnerAlreadyReleasedError() {
    var _this = _super.call(this) || this;

    _this.name = "QueryRunnerAlreadyReleasedError";
    Object.setPrototypeOf(_this, QueryRunnerAlreadyReleasedError.prototype);
    _this.message = "Query runner already released. Cannot run queries anymore.";
    return _this;
  }

  return QueryRunnerAlreadyReleasedError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/QueryRunnerProviderAlreadyReleasedError.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/QueryRunnerProviderAlreadyReleasedError.js ***!
  \***************************************************************************************/
/*! exports provided: QueryRunnerProviderAlreadyReleasedError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueryRunnerProviderAlreadyReleasedError", function() { return QueryRunnerProviderAlreadyReleasedError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when consumer tries to use query runner from query runner provider after it was released.
 */

var QueryRunnerProviderAlreadyReleasedError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](QueryRunnerProviderAlreadyReleasedError, _super);

  function QueryRunnerProviderAlreadyReleasedError() {
    var _this = _super.call(this) || this;

    _this.name = "QueryRunnerProviderAlreadyReleasedError";
    Object.setPrototypeOf(_this, QueryRunnerProviderAlreadyReleasedError.prototype);
    _this.message = "Database connection provided by a query runner was already released, cannot continue to use its querying methods anymore.";
    return _this;
  }

  return QueryRunnerProviderAlreadyReleasedError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/RepositoryNotFoundError.js":
/*!***********************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/RepositoryNotFoundError.js ***!
  \***********************************************************************/
/*! exports provided: RepositoryNotFoundError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RepositoryNotFoundError", function() { return RepositoryNotFoundError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index */ "./node_modules/typeorm/browser/index.js");


/**
 * Thrown when repository for the given class is not found.
 */

var RepositoryNotFoundError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](RepositoryNotFoundError, _super);

  function RepositoryNotFoundError(connectionName, entityClass) {
    var _this = _super.call(this) || this;

    _this.name = "RepositoryNotFoundError";
    Object.setPrototypeOf(_this, RepositoryNotFoundError.prototype);
    var targetName;

    if (entityClass instanceof _index__WEBPACK_IMPORTED_MODULE_1__["EntitySchema"]) {
      targetName = entityClass.options.name;
    } else if (typeof entityClass === "function") {
      targetName = entityClass.name;
    } else {
      targetName = entityClass;
    }

    _this.message = "No repository for \"" + targetName + "\" was found. Looks like this entity is not registered in " + ("current \"" + connectionName + "\" connection?");
    return _this;
  }

  return RepositoryNotFoundError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/RepositoryNotTreeError.js":
/*!**********************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/RepositoryNotTreeError.js ***!
  \**********************************************************************/
/*! exports provided: RepositoryNotTreeError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RepositoryNotTreeError", function() { return RepositoryNotTreeError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index */ "./node_modules/typeorm/browser/index.js");


/**
 * Thrown when repository for the given class is not found.
 */

var RepositoryNotTreeError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](RepositoryNotTreeError, _super);

  function RepositoryNotTreeError(target) {
    var _this = _super.call(this) || this;

    _this.name = "RepositoryNotTreeError";
    Object.setPrototypeOf(_this, RepositoryNotTreeError.prototype);
    var targetName;

    if (target instanceof _index__WEBPACK_IMPORTED_MODULE_1__["EntitySchema"]) {
      targetName = target.options.name;
    } else if (typeof target === "function") {
      targetName = target.name;
    } else {
      targetName = target;
    }

    _this.message = "Repository of the \"" + targetName + "\" class is not a TreeRepository. Try to apply @Tree decorator on your entity.";
    return _this;
  }

  return RepositoryNotTreeError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/ReturningStatementNotSupportedError.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/ReturningStatementNotSupportedError.js ***!
  \***********************************************************************************/
/*! exports provided: ReturningStatementNotSupportedError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReturningStatementNotSupportedError", function() { return ReturningStatementNotSupportedError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when user tries to build a query with RETURNING / OUTPUT statement,
 * but used database does not support it.
 */

var ReturningStatementNotSupportedError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](ReturningStatementNotSupportedError, _super);

  function ReturningStatementNotSupportedError() {
    var _this = _super.call(this) || this;

    _this.name = "ReturningStatementNotSupportedError";
    Object.setPrototypeOf(_this, ReturningStatementNotSupportedError.prototype);
    _this.message = "OUTPUT or RETURNING clause only supported by Microsoft SQL Server or PostgreSQL databases.";
    return _this;
  }

  return ReturningStatementNotSupportedError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/SubjectRemovedAndUpdatedError.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/SubjectRemovedAndUpdatedError.js ***!
  \*****************************************************************************/
/*! exports provided: SubjectRemovedAndUpdatedError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubjectRemovedAndUpdatedError", function() { return SubjectRemovedAndUpdatedError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when same object is scheduled for remove and updation at the same time.
 */

var SubjectRemovedAndUpdatedError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](SubjectRemovedAndUpdatedError, _super);

  function SubjectRemovedAndUpdatedError(subject) {
    var _this = _super.call(this) || this;

    _this.name = "SubjectRemovedAndUpdatedError";
    Object.setPrototypeOf(_this, SubjectRemovedAndUpdatedError.prototype);
    _this.message = "Removed entity \"" + subject.metadata.name + "\" is also scheduled for update operation. " + "Make sure you are not updating and removing same object (note that update or remove may be executed by cascade operations).";
    return _this;
  }

  return SubjectRemovedAndUpdatedError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/SubjectWithoutIdentifierError.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/SubjectWithoutIdentifierError.js ***!
  \*****************************************************************************/
/*! exports provided: SubjectWithoutIdentifierError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubjectWithoutIdentifierError", function() { return SubjectWithoutIdentifierError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when operation is going to be executed on a subject without identifier.
 * This error should never be thrown, however it still presents to prevent user from updation or removing the whole table.
 * If this error occurs still, it most probably is an ORM internal problem which must be reported and fixed.
 */

var SubjectWithoutIdentifierError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](SubjectWithoutIdentifierError, _super);

  function SubjectWithoutIdentifierError(subject) {
    var _this = _super.call(this) || this;

    _this.name = "SubjectWithoutIdentifierError";
    Object.setPrototypeOf(_this, SubjectWithoutIdentifierError.prototype);
    _this.message = "Internal error. Subject " + subject.metadata.targetName + " must have an identifier to perform operation. " + "Please report a github issue if you face this error.";
    return _this;
  }

  return SubjectWithoutIdentifierError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/TransactionAlreadyStartedError.js":
/*!******************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/TransactionAlreadyStartedError.js ***!
  \******************************************************************************/
/*! exports provided: TransactionAlreadyStartedError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransactionAlreadyStartedError", function() { return TransactionAlreadyStartedError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when transaction is already started and user tries to run it again.
 */

var TransactionAlreadyStartedError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](TransactionAlreadyStartedError, _super);

  function TransactionAlreadyStartedError() {
    var _this = _super.call(this) || this;

    _this.name = "TransactionAlreadyStartedError";
    Object.setPrototypeOf(_this, TransactionAlreadyStartedError.prototype);
    _this.message = "Transaction already started for the given connection, commit current transaction before starting a new one.";
    return _this;
  }

  return TransactionAlreadyStartedError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/TransactionNotStartedError.js":
/*!**************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/TransactionNotStartedError.js ***!
  \**************************************************************************/
/*! exports provided: TransactionNotStartedError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransactionNotStartedError", function() { return TransactionNotStartedError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when transaction is not started yet and user tries to run commit or rollback.
 */

var TransactionNotStartedError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](TransactionNotStartedError, _super);

  function TransactionNotStartedError() {
    var _this = _super.call(this) || this;

    _this.name = "TransactionNotStartedError";
    Object.setPrototypeOf(_this, TransactionNotStartedError.prototype);
    _this.message = "Transaction is not started yet, start transaction before committing or rolling it back.";
    return _this;
  }

  return TransactionNotStartedError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/TreeRepositoryNotSupportedError.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/TreeRepositoryNotSupportedError.js ***!
  \*******************************************************************************/
/*! exports provided: TreeRepositoryNotSupportedError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TreeRepositoryNotSupportedError", function() { return TreeRepositoryNotSupportedError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");


var TreeRepositoryNotSupportedError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](TreeRepositoryNotSupportedError, _super);

  function TreeRepositoryNotSupportedError(driver) {
    var _this = _super.call(this) || this;

    _this.name = "TreeRepositoryNotSupportedError";
    Object.setPrototypeOf(_this, TreeRepositoryNotSupportedError.prototype);
    _this.message = "Tree repositories are not supported in " + driver.options.type + " driver.";
    return _this;
  }

  return TreeRepositoryNotSupportedError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/error/UpdateValuesMissingError.js":
/*!************************************************************************!*\
  !*** ./node_modules/typeorm/browser/error/UpdateValuesMissingError.js ***!
  \************************************************************************/
/*! exports provided: UpdateValuesMissingError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UpdateValuesMissingError", function() { return UpdateValuesMissingError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Thrown when user tries to update using QueryBuilder but do not specify what to update.
 */

var UpdateValuesMissingError =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](UpdateValuesMissingError, _super);

  function UpdateValuesMissingError() {
    var _this = _super.call(this) || this;

    _this.name = "UpdateValuesMissingError";
    Object.setPrototypeOf(_this, UpdateValuesMissingError.prototype);
    _this.message = "Cannot perform update query because update values are not defined. Call \"qb.set(...)\" method to specify updated values.";
    return _this;
  }

  return UpdateValuesMissingError;
}(Error);



/***/ }),

/***/ "./node_modules/typeorm/browser/find-options/FindOperator.js":
/*!*******************************************************************!*\
  !*** ./node_modules/typeorm/browser/find-options/FindOperator.js ***!
  \*******************************************************************/
/*! exports provided: FindOperator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FindOperator", function() { return FindOperator; });
/**
 * Find Operator used in Find Conditions.
 */
var FindOperator =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function FindOperator(type, value, useParameter, multipleParameters) {
    if (useParameter === void 0) {
      useParameter = true;
    }

    if (multipleParameters === void 0) {
      multipleParameters = false;
    }

    this._type = type;
    this._value = value;
    this._useParameter = useParameter;
    this._multipleParameters = multipleParameters;
  }

  Object.defineProperty(FindOperator.prototype, "useParameter", {
    // -------------------------------------------------------------------------
    // Accessors
    // -------------------------------------------------------------------------

    /**
     * Indicates if parameter is used or not for this operator.
     * Extracts final value if value is another find operator.
     */
    get: function get() {
      if (this._value instanceof FindOperator) return this._value.useParameter;
      return this._useParameter;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FindOperator.prototype, "multipleParameters", {
    /**
     * Indicates if multiple parameters must be used for this operator.
     * Extracts final value if value is another find operator.
     */
    get: function get() {
      if (this._value instanceof FindOperator) return this._value.multipleParameters;
      return this._multipleParameters;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FindOperator.prototype, "value", {
    /**
     * Gets the final value needs to be used as parameter value.
     */
    get: function get() {
      if (this._value instanceof FindOperator) return this._value.value;
      return this._value;
    },
    enumerable: true,
    configurable: true
  }); // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Gets SQL needs to be inserted into final query.
   */

  FindOperator.prototype.toSql = function (connection, aliasPath, parameters) {
    switch (this._type) {
      case "not":
        if (this._value instanceof FindOperator) {
          return "NOT(" + this._value.toSql(connection, aliasPath, parameters) + ")";
        } else {
          return aliasPath + " != " + parameters[0];
        }

      case "lessThan":
        return aliasPath + " < " + parameters[0];

      case "lessThanOrEqual":
        return aliasPath + " <= " + parameters[0];

      case "moreThan":
        return aliasPath + " > " + parameters[0];

      case "moreThanOrEqual":
        return aliasPath + " >= " + parameters[0];

      case "equal":
        return aliasPath + " = " + parameters[0];

      case "like":
        return aliasPath + " LIKE " + parameters[0];

      case "between":
        return aliasPath + " BETWEEN " + parameters[0] + " AND " + parameters[1];

      case "in":
        return aliasPath + " IN (" + parameters.join(", ") + ")";

      case "any":
        return aliasPath + " = ANY(" + parameters[0] + ")";

      case "isNull":
        return aliasPath + " IS NULL";

      case "raw":
        if (this.value instanceof Function) {
          return this.value(aliasPath);
        } else {
          return aliasPath + " = " + this.value;
        }

    }

    return "";
  };

  return FindOperator;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/find-options/FindOptionsUtils.js":
/*!***********************************************************************!*\
  !*** ./node_modules/typeorm/browser/find-options/FindOptionsUtils.js ***!
  \***********************************************************************/
/*! exports provided: FindOptionsUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FindOptionsUtils", function() { return FindOptionsUtils; });
/* harmony import */ var _error_FindRelationsNotFoundError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/FindRelationsNotFoundError */ "./node_modules/typeorm/browser/error/FindRelationsNotFoundError.js");
/* harmony import */ var _util_StringUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/StringUtils */ "./node_modules/typeorm/browser/util/StringUtils.js");


/**
 * Utilities to work with FindOptions.
 */

var FindOptionsUtils =
/** @class */
function () {
  function FindOptionsUtils() {} // -------------------------------------------------------------------------
  // Public Static Methods
  // -------------------------------------------------------------------------

  /**
   * Checks if given object is really instance of FindOneOptions interface.
   */


  FindOptionsUtils.isFindOneOptions = function (obj) {
    var possibleOptions = obj;
    return possibleOptions && (Array.isArray(possibleOptions.select) || possibleOptions.where instanceof Object || typeof possibleOptions.where === "string" || Array.isArray(possibleOptions.relations) || possibleOptions.join instanceof Object || possibleOptions.order instanceof Object || possibleOptions.cache instanceof Object || typeof possibleOptions.cache === "boolean" || typeof possibleOptions.cache === "number" || possibleOptions.lock instanceof Object || possibleOptions.loadRelationIds instanceof Object || typeof possibleOptions.loadRelationIds === "boolean" || typeof possibleOptions.loadEagerRelations === "boolean" || typeof possibleOptions.withDeleted === "boolean");
  };
  /**
   * Checks if given object is really instance of FindManyOptions interface.
   */


  FindOptionsUtils.isFindManyOptions = function (obj) {
    var possibleOptions = obj;
    return possibleOptions && (this.isFindOneOptions(possibleOptions) || typeof possibleOptions.skip === "number" || typeof possibleOptions.take === "number" || typeof possibleOptions.skip === "string" || typeof possibleOptions.take === "string");
  };
  /**
   * Checks if given object is really instance of FindOptions interface.
   */


  FindOptionsUtils.extractFindManyOptionsAlias = function (object) {
    if (this.isFindManyOptions(object) && object.join) return object.join.alias;
    return undefined;
  };
  /**
   * Applies give find many options to the given query builder.
   */


  FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder = function (qb, options) {
    if (this.isFindManyOptions(options)) return this.applyOptionsToQueryBuilder(qb, options);
    if (options) return qb.where(options);
    return qb;
  };
  /**
   * Applies give find options to the given query builder.
   */


  FindOptionsUtils.applyOptionsToQueryBuilder = function (qb, options) {
    // if options are not set then simply return query builder. This is made for simplicity of usage.
    if (!options || !this.isFindOneOptions(options) && !this.isFindManyOptions(options)) return qb;
    if (!qb.expressionMap.mainAlias || !qb.expressionMap.mainAlias.hasMetadata) return qb;
    var metadata = qb.expressionMap.mainAlias.metadata; // apply all options from FindOptions

    if (options.select) {
      qb.select([]);
      options.select.forEach(function (select) {
        if (!metadata.findColumnWithPropertyPath(String(select))) throw new Error(select + " column was not found in the " + metadata.name + " entity.");
        qb.addSelect(qb.alias + "." + select);
      });
    }

    if (options.where) qb.where(options.where);
    if (options.skip) qb.skip(options.skip);
    if (options.take) qb.take(options.take);
    if (options.order) Object.keys(options.order).forEach(function (key) {
      var order = options.order[key];
      if (!metadata.findColumnWithPropertyPath(key)) throw new Error(key + " column was not found in the " + metadata.name + " entity.");

      switch (order) {
        case 1:
          qb.addOrderBy(qb.alias + "." + key, "ASC");
          break;

        case -1:
          qb.addOrderBy(qb.alias + "." + key, "DESC");
          break;

        case "ASC":
          qb.addOrderBy(qb.alias + "." + key, "ASC");
          break;

        case "DESC":
          qb.addOrderBy(qb.alias + "." + key, "DESC");
          break;
      }
    });

    if (options.relations) {
      var allRelations = options.relations.map(function (relation) {
        return relation;
      });
      this.applyRelationsRecursively(qb, allRelations, qb.expressionMap.mainAlias.name, qb.expressionMap.mainAlias.metadata, ""); // recursive removes found relations from allRelations array
      // if there are relations left in this array it means those relations were not found in the entity structure
      // so, we give an exception about not found relations

      if (allRelations.length > 0) throw new _error_FindRelationsNotFoundError__WEBPACK_IMPORTED_MODULE_0__["FindRelationsNotFoundError"](allRelations);
    }

    if (options.join) {
      if (options.join.leftJoin) Object.keys(options.join.leftJoin).forEach(function (key) {
        qb.leftJoin(options.join.leftJoin[key], key);
      });
      if (options.join.innerJoin) Object.keys(options.join.innerJoin).forEach(function (key) {
        qb.innerJoin(options.join.innerJoin[key], key);
      });
      if (options.join.leftJoinAndSelect) Object.keys(options.join.leftJoinAndSelect).forEach(function (key) {
        qb.leftJoinAndSelect(options.join.leftJoinAndSelect[key], key);
      });
      if (options.join.innerJoinAndSelect) Object.keys(options.join.innerJoinAndSelect).forEach(function (key) {
        qb.innerJoinAndSelect(options.join.innerJoinAndSelect[key], key);
      });
    }

    if (options.cache) {
      if (options.cache instanceof Object) {
        var cache = options.cache;
        qb.cache(cache.id, cache.milliseconds);
      } else {
        qb.cache(options.cache);
      }
    }

    if (options.lock) {
      if (options.lock.mode === "optimistic") {
        qb.setLock(options.lock.mode, options.lock.version);
      } else if (options.lock.mode === "pessimistic_read" || options.lock.mode === "pessimistic_write" || options.lock.mode === "dirty_read") {
        qb.setLock(options.lock.mode);
      }
    }

    if (options.withDeleted) {
      qb.withDeleted();
    }

    if (options.loadRelationIds === true) {
      qb.loadAllRelationIds();
    } else if (options.loadRelationIds instanceof Object) {
      qb.loadAllRelationIds(options.loadRelationIds);
    }

    return qb;
  }; // -------------------------------------------------------------------------
  // Protected Static Methods
  // -------------------------------------------------------------------------

  /**
   * Adds joins for all relations and sub-relations of the given relations provided in the find options.
   */


  FindOptionsUtils.applyRelationsRecursively = function (qb, allRelations, alias, metadata, prefix) {
    var _this = this; // find all relations that match given prefix


    var matchedBaseRelations = [];

    if (prefix) {
      var regexp_1 = new RegExp("^" + prefix.replace(".", "\\.") + "\\.");
      matchedBaseRelations = allRelations.filter(function (relation) {
        return relation.match(regexp_1);
      }).map(function (relation) {
        return relation.replace(regexp_1, "");
      }).filter(function (relation) {
        return metadata.findRelationWithPropertyPath(relation);
      });
    } else {
      matchedBaseRelations = allRelations.filter(function (relation) {
        return metadata.findRelationWithPropertyPath(relation);
      });
    } // go through all matched relations and add join for them


    matchedBaseRelations.forEach(function (relation) {
      // generate a relation alias
      var relationAlias = alias + "__" + relation; // shorten it if needed by the driver

      if (qb.connection.driver.maxAliasLength && relationAlias.length > qb.connection.driver.maxAliasLength) {
        relationAlias = Object(_util_StringUtils__WEBPACK_IMPORTED_MODULE_1__["shorten"])(relationAlias);
      } // add a join for the found relation


      var selection = alias + "." + relation;
      qb.leftJoinAndSelect(selection, relationAlias); // join the eager relations of the found relation

      var relMetadata = metadata.relations.find(function (metadata) {
        return metadata.propertyName === relation;
      });

      if (relMetadata) {
        _this.joinEagerRelations(qb, relationAlias, relMetadata.inverseEntityMetadata);
      } // remove added relations from the allRelations array, this is needed to find all not found relations at the end


      allRelations.splice(allRelations.indexOf(prefix ? prefix + "." + relation : relation), 1); // try to find sub-relations

      var join = qb.expressionMap.joinAttributes.find(function (join) {
        return join.entityOrProperty === selection;
      });

      _this.applyRelationsRecursively(qb, allRelations, join.alias.name, join.metadata, prefix ? prefix + "." + relation : relation);
    });
  };

  FindOptionsUtils.joinEagerRelations = function (qb, alias, metadata) {
    var _this = this;

    metadata.eagerRelations.forEach(function (relation) {
      var relationAlias = qb.connection.namingStrategy.eagerJoinRelationAlias(alias, relation.propertyPath);
      qb.leftJoinAndSelect(alias + "." + relation.propertyPath, relationAlias);

      _this.joinEagerRelations(qb, relationAlias, relation.inverseEntityMetadata);
    });
  };

  return FindOptionsUtils;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/find-options/operator/Any.js":
/*!*******************************************************************!*\
  !*** ./node_modules/typeorm/browser/find-options/operator/Any.js ***!
  \*******************************************************************/
/*! exports provided: Any */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Any", function() { return Any; });
/* harmony import */ var _FindOperator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../FindOperator */ "./node_modules/typeorm/browser/find-options/FindOperator.js");

/**
 * Find Options Operator.
 * Example: { someField: Any([...]) }
 */

function Any(value) {
  return new _FindOperator__WEBPACK_IMPORTED_MODULE_0__["FindOperator"]("any", value);
}

/***/ }),

/***/ "./node_modules/typeorm/browser/find-options/operator/Between.js":
/*!***********************************************************************!*\
  !*** ./node_modules/typeorm/browser/find-options/operator/Between.js ***!
  \***********************************************************************/
/*! exports provided: Between */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Between", function() { return Between; });
/* harmony import */ var _FindOperator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../FindOperator */ "./node_modules/typeorm/browser/find-options/FindOperator.js");

/**
 * Find Options Operator.
 * Example: { someField: Between(x, y) }
 */

function Between(from, to) {
  return new _FindOperator__WEBPACK_IMPORTED_MODULE_0__["FindOperator"]("between", [from, to], true, true);
}

/***/ }),

/***/ "./node_modules/typeorm/browser/find-options/operator/Equal.js":
/*!*********************************************************************!*\
  !*** ./node_modules/typeorm/browser/find-options/operator/Equal.js ***!
  \*********************************************************************/
/*! exports provided: Equal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Equal", function() { return Equal; });
/* harmony import */ var _FindOperator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../FindOperator */ "./node_modules/typeorm/browser/find-options/FindOperator.js");

/**
 * Find Options Operator.
 * Example: { someField: Equal("value") }
 */

function Equal(value) {
  return new _FindOperator__WEBPACK_IMPORTED_MODULE_0__["FindOperator"]("equal", value);
}

/***/ }),

/***/ "./node_modules/typeorm/browser/find-options/operator/In.js":
/*!******************************************************************!*\
  !*** ./node_modules/typeorm/browser/find-options/operator/In.js ***!
  \******************************************************************/
/*! exports provided: In */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "In", function() { return In; });
/* harmony import */ var _FindOperator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../FindOperator */ "./node_modules/typeorm/browser/find-options/FindOperator.js");

/**
 * Find Options Operator.
 * Example: { someField: In([...]) }
 */

function In(value) {
  return new _FindOperator__WEBPACK_IMPORTED_MODULE_0__["FindOperator"]("in", value, true, true);
}

/***/ }),

/***/ "./node_modules/typeorm/browser/find-options/operator/IsNull.js":
/*!**********************************************************************!*\
  !*** ./node_modules/typeorm/browser/find-options/operator/IsNull.js ***!
  \**********************************************************************/
/*! exports provided: IsNull */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IsNull", function() { return IsNull; });
/* harmony import */ var _FindOperator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../FindOperator */ "./node_modules/typeorm/browser/find-options/FindOperator.js");

/**
 * Find Options Operator.
 * Example: { someField: IsNull() }
 */

function IsNull() {
  return new _FindOperator__WEBPACK_IMPORTED_MODULE_0__["FindOperator"]("isNull", undefined, false);
}

/***/ }),

/***/ "./node_modules/typeorm/browser/find-options/operator/LessThan.js":
/*!************************************************************************!*\
  !*** ./node_modules/typeorm/browser/find-options/operator/LessThan.js ***!
  \************************************************************************/
/*! exports provided: LessThan */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LessThan", function() { return LessThan; });
/* harmony import */ var _FindOperator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../FindOperator */ "./node_modules/typeorm/browser/find-options/FindOperator.js");

/**
 * Find Options Operator.
 * Example: { someField: LessThan(10) }
 */

function LessThan(value) {
  return new _FindOperator__WEBPACK_IMPORTED_MODULE_0__["FindOperator"]("lessThan", value);
}

/***/ }),

/***/ "./node_modules/typeorm/browser/find-options/operator/LessThanOrEqual.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/typeorm/browser/find-options/operator/LessThanOrEqual.js ***!
  \*******************************************************************************/
/*! exports provided: LessThanOrEqual */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LessThanOrEqual", function() { return LessThanOrEqual; });
/* harmony import */ var _FindOperator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../FindOperator */ "./node_modules/typeorm/browser/find-options/FindOperator.js");

/**
 * Find Options Operator.
 * Example: { someField: LessThanOrEqual(10) }
 */

function LessThanOrEqual(value) {
  return new _FindOperator__WEBPACK_IMPORTED_MODULE_0__["FindOperator"]("lessThanOrEqual", value);
}

/***/ }),

/***/ "./node_modules/typeorm/browser/find-options/operator/Like.js":
/*!********************************************************************!*\
  !*** ./node_modules/typeorm/browser/find-options/operator/Like.js ***!
  \********************************************************************/
/*! exports provided: Like */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Like", function() { return Like; });
/* harmony import */ var _FindOperator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../FindOperator */ "./node_modules/typeorm/browser/find-options/FindOperator.js");

/**
 * Find Options Operator.
 * Example: { someField: Like("%some sting%") }
 */

function Like(value) {
  return new _FindOperator__WEBPACK_IMPORTED_MODULE_0__["FindOperator"]("like", value);
}

/***/ }),

/***/ "./node_modules/typeorm/browser/find-options/operator/MoreThan.js":
/*!************************************************************************!*\
  !*** ./node_modules/typeorm/browser/find-options/operator/MoreThan.js ***!
  \************************************************************************/
/*! exports provided: MoreThan */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MoreThan", function() { return MoreThan; });
/* harmony import */ var _FindOperator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../FindOperator */ "./node_modules/typeorm/browser/find-options/FindOperator.js");

/**
 * Find Options Operator.
 * Example: { someField: MoreThan(10) }
 */

function MoreThan(value) {
  return new _FindOperator__WEBPACK_IMPORTED_MODULE_0__["FindOperator"]("moreThan", value);
}

/***/ }),

/***/ "./node_modules/typeorm/browser/find-options/operator/MoreThanOrEqual.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/typeorm/browser/find-options/operator/MoreThanOrEqual.js ***!
  \*******************************************************************************/
/*! exports provided: MoreThanOrEqual */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MoreThanOrEqual", function() { return MoreThanOrEqual; });
/* harmony import */ var _FindOperator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../FindOperator */ "./node_modules/typeorm/browser/find-options/FindOperator.js");

/**
 * Find Options Operator.
 * Example: { someField: MoreThanOrEqual(10) }
 */

function MoreThanOrEqual(value) {
  return new _FindOperator__WEBPACK_IMPORTED_MODULE_0__["FindOperator"]("moreThanOrEqual", value);
}

/***/ }),

/***/ "./node_modules/typeorm/browser/find-options/operator/Not.js":
/*!*******************************************************************!*\
  !*** ./node_modules/typeorm/browser/find-options/operator/Not.js ***!
  \*******************************************************************/
/*! exports provided: Not */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Not", function() { return Not; });
/* harmony import */ var _FindOperator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../FindOperator */ "./node_modules/typeorm/browser/find-options/FindOperator.js");

/**
 * Find Options Operator.
 * Used to negotiate expression.
 * Example: { title: not("hello") } will return entities where title not equal to "hello".
 */

function Not(value) {
  return new _FindOperator__WEBPACK_IMPORTED_MODULE_0__["FindOperator"]("not", value);
}

/***/ }),

/***/ "./node_modules/typeorm/browser/find-options/operator/Raw.js":
/*!*******************************************************************!*\
  !*** ./node_modules/typeorm/browser/find-options/operator/Raw.js ***!
  \*******************************************************************/
/*! exports provided: Raw */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Raw", function() { return Raw; });
/* harmony import */ var _FindOperator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../FindOperator */ "./node_modules/typeorm/browser/find-options/FindOperator.js");

/**
 * Find Options Operator.
 * Example: { someField: Raw([...]) }
 */

function Raw(value) {
  return new _FindOperator__WEBPACK_IMPORTED_MODULE_0__["FindOperator"]("raw", value, false);
}

/***/ }),

/***/ "./node_modules/typeorm/browser/index.js":
/*!***********************************************!*\
  !*** ./node_modules/typeorm/browser/index.js ***!
  \***********************************************/
/*! exports provided: useContainer, getFromContainer, QueryFailedError, Column, CreateDateColumn, DeleteDateColumn, PrimaryGeneratedColumn, PrimaryColumn, UpdateDateColumn, VersionColumn, ViewColumn, ObjectIdColumn, AfterInsert, AfterLoad, AfterRemove, AfterUpdate, BeforeInsert, BeforeRemove, BeforeUpdate, EventSubscriber, JoinColumn, JoinTable, ManyToMany, ManyToOne, OneToMany, OneToOne, RelationCount, RelationId, Entity, ChildEntity, TableInheritance, ViewEntity, Transaction, TransactionManager, TransactionRepository, TreeLevelColumn, TreeParent, TreeChildren, Tree, Index, Unique, Check, Exclusion, Generated, EntityRepository, Any, Between, Equal, In, IsNull, LessThan, LessThanOrEqual, Like, MoreThan, MoreThanOrEqual, Not, Raw, FindOperator, FindOptionsUtils, AdvancedConsoleLogger, SimpleConsoleLogger, FileLogger, EntityMetadata, AbstractRepository, MongoDriver, MongoQueryRunner, PostgresDriver, SqlServerDriver, SapDriver, MysqlDriver, OracleDriver, TableCheck, TableColumn, TableExclusion, TableForeignKey, TableIndex, TableUnique, Table, MssqlParameter, ConnectionOptionsReader, Connection, ConnectionManager, QueryBuilder, SelectQueryBuilder, DeleteQueryBuilder, InsertQueryBuilder, UpdateQueryBuilder, RelationQueryBuilder, Brackets, InsertResult, UpdateResult, DeleteResult, EntityManager, MongoEntityManager, Migration, MigrationExecutor, DefaultNamingStrategy, Repository, TreeRepository, MongoRepository, BaseEntity, EntitySchema, PromiseUtils, getMetadataArgsStorage, getConnectionOptions, getConnectionManager, createConnection, createConnections, getConnection, getManager, getMongoManager, getSqljsManager, getRepository, getTreeRepository, getCustomRepository, getMongoRepository, createQueryBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMetadataArgsStorage", function() { return getMetadataArgsStorage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getConnectionOptions", function() { return getConnectionOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getConnectionManager", function() { return getConnectionManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createConnection", function() { return createConnection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createConnections", function() { return createConnections; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getConnection", function() { return getConnection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getManager", function() { return getManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMongoManager", function() { return getMongoManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSqljsManager", function() { return getSqljsManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRepository", function() { return getRepository; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTreeRepository", function() { return getTreeRepository; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCustomRepository", function() { return getCustomRepository; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMongoRepository", function() { return getMongoRepository; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createQueryBuilder", function() { return createQueryBuilder; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reflect-metadata */ "./node_modules/reflect-metadata/Reflect.js");
/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(reflect_metadata__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _connection_ConnectionManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./connection/ConnectionManager */ "./node_modules/typeorm/browser/connection/ConnectionManager.js");
/* harmony import */ var _metadata_args_MetadataArgsStorage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./metadata-args/MetadataArgsStorage */ "./node_modules/typeorm/browser/metadata-args/MetadataArgsStorage.js");
/* harmony import */ var _container__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./container */ "./node_modules/typeorm/browser/container.js");
/* harmony import */ var _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./platform/PlatformTools */ "./node_modules/typeorm/browser/platform/PlatformTools.js");
/* harmony import */ var _connection_ConnectionOptionsReader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./connection/ConnectionOptionsReader */ "./node_modules/typeorm/browser/connection/ConnectionOptionsReader.js");
/* harmony import */ var _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util/PromiseUtils */ "./node_modules/typeorm/browser/util/PromiseUtils.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "useContainer", function() { return _container__WEBPACK_IMPORTED_MODULE_4__["useContainer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getFromContainer", function() { return _container__WEBPACK_IMPORTED_MODULE_4__["getFromContainer"]; });

/* harmony import */ var _error_QueryFailedError__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./error/QueryFailedError */ "./node_modules/typeorm/browser/error/QueryFailedError.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QueryFailedError", function() { return _error_QueryFailedError__WEBPACK_IMPORTED_MODULE_8__["QueryFailedError"]; });

/* harmony import */ var _decorator_columns_Column__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./decorator/columns/Column */ "./node_modules/typeorm/browser/decorator/columns/Column.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Column", function() { return _decorator_columns_Column__WEBPACK_IMPORTED_MODULE_9__["Column"]; });

/* harmony import */ var _decorator_columns_CreateDateColumn__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./decorator/columns/CreateDateColumn */ "./node_modules/typeorm/browser/decorator/columns/CreateDateColumn.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CreateDateColumn", function() { return _decorator_columns_CreateDateColumn__WEBPACK_IMPORTED_MODULE_10__["CreateDateColumn"]; });

/* harmony import */ var _decorator_columns_DeleteDateColumn__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./decorator/columns/DeleteDateColumn */ "./node_modules/typeorm/browser/decorator/columns/DeleteDateColumn.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DeleteDateColumn", function() { return _decorator_columns_DeleteDateColumn__WEBPACK_IMPORTED_MODULE_11__["DeleteDateColumn"]; });

/* harmony import */ var _decorator_columns_PrimaryGeneratedColumn__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./decorator/columns/PrimaryGeneratedColumn */ "./node_modules/typeorm/browser/decorator/columns/PrimaryGeneratedColumn.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PrimaryGeneratedColumn", function() { return _decorator_columns_PrimaryGeneratedColumn__WEBPACK_IMPORTED_MODULE_12__["PrimaryGeneratedColumn"]; });

/* harmony import */ var _decorator_columns_PrimaryColumn__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./decorator/columns/PrimaryColumn */ "./node_modules/typeorm/browser/decorator/columns/PrimaryColumn.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PrimaryColumn", function() { return _decorator_columns_PrimaryColumn__WEBPACK_IMPORTED_MODULE_13__["PrimaryColumn"]; });

/* harmony import */ var _decorator_columns_UpdateDateColumn__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./decorator/columns/UpdateDateColumn */ "./node_modules/typeorm/browser/decorator/columns/UpdateDateColumn.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UpdateDateColumn", function() { return _decorator_columns_UpdateDateColumn__WEBPACK_IMPORTED_MODULE_14__["UpdateDateColumn"]; });

/* harmony import */ var _decorator_columns_VersionColumn__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./decorator/columns/VersionColumn */ "./node_modules/typeorm/browser/decorator/columns/VersionColumn.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VersionColumn", function() { return _decorator_columns_VersionColumn__WEBPACK_IMPORTED_MODULE_15__["VersionColumn"]; });

/* harmony import */ var _decorator_columns_ViewColumn__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./decorator/columns/ViewColumn */ "./node_modules/typeorm/browser/decorator/columns/ViewColumn.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ViewColumn", function() { return _decorator_columns_ViewColumn__WEBPACK_IMPORTED_MODULE_16__["ViewColumn"]; });

/* harmony import */ var _decorator_columns_ObjectIdColumn__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./decorator/columns/ObjectIdColumn */ "./node_modules/typeorm/browser/decorator/columns/ObjectIdColumn.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ObjectIdColumn", function() { return _decorator_columns_ObjectIdColumn__WEBPACK_IMPORTED_MODULE_17__["ObjectIdColumn"]; });

/* harmony import */ var _decorator_listeners_AfterInsert__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./decorator/listeners/AfterInsert */ "./node_modules/typeorm/browser/decorator/listeners/AfterInsert.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AfterInsert", function() { return _decorator_listeners_AfterInsert__WEBPACK_IMPORTED_MODULE_18__["AfterInsert"]; });

/* harmony import */ var _decorator_listeners_AfterLoad__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./decorator/listeners/AfterLoad */ "./node_modules/typeorm/browser/decorator/listeners/AfterLoad.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AfterLoad", function() { return _decorator_listeners_AfterLoad__WEBPACK_IMPORTED_MODULE_19__["AfterLoad"]; });

/* harmony import */ var _decorator_listeners_AfterRemove__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./decorator/listeners/AfterRemove */ "./node_modules/typeorm/browser/decorator/listeners/AfterRemove.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AfterRemove", function() { return _decorator_listeners_AfterRemove__WEBPACK_IMPORTED_MODULE_20__["AfterRemove"]; });

/* harmony import */ var _decorator_listeners_AfterUpdate__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./decorator/listeners/AfterUpdate */ "./node_modules/typeorm/browser/decorator/listeners/AfterUpdate.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AfterUpdate", function() { return _decorator_listeners_AfterUpdate__WEBPACK_IMPORTED_MODULE_21__["AfterUpdate"]; });

/* harmony import */ var _decorator_listeners_BeforeInsert__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./decorator/listeners/BeforeInsert */ "./node_modules/typeorm/browser/decorator/listeners/BeforeInsert.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BeforeInsert", function() { return _decorator_listeners_BeforeInsert__WEBPACK_IMPORTED_MODULE_22__["BeforeInsert"]; });

/* harmony import */ var _decorator_listeners_BeforeRemove__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./decorator/listeners/BeforeRemove */ "./node_modules/typeorm/browser/decorator/listeners/BeforeRemove.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BeforeRemove", function() { return _decorator_listeners_BeforeRemove__WEBPACK_IMPORTED_MODULE_23__["BeforeRemove"]; });

/* harmony import */ var _decorator_listeners_BeforeUpdate__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./decorator/listeners/BeforeUpdate */ "./node_modules/typeorm/browser/decorator/listeners/BeforeUpdate.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BeforeUpdate", function() { return _decorator_listeners_BeforeUpdate__WEBPACK_IMPORTED_MODULE_24__["BeforeUpdate"]; });

/* harmony import */ var _decorator_listeners_EventSubscriber__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./decorator/listeners/EventSubscriber */ "./node_modules/typeorm/browser/decorator/listeners/EventSubscriber.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EventSubscriber", function() { return _decorator_listeners_EventSubscriber__WEBPACK_IMPORTED_MODULE_25__["EventSubscriber"]; });

/* harmony import */ var _decorator_relations_JoinColumn__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./decorator/relations/JoinColumn */ "./node_modules/typeorm/browser/decorator/relations/JoinColumn.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JoinColumn", function() { return _decorator_relations_JoinColumn__WEBPACK_IMPORTED_MODULE_26__["JoinColumn"]; });

/* harmony import */ var _decorator_relations_JoinTable__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./decorator/relations/JoinTable */ "./node_modules/typeorm/browser/decorator/relations/JoinTable.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JoinTable", function() { return _decorator_relations_JoinTable__WEBPACK_IMPORTED_MODULE_27__["JoinTable"]; });

/* harmony import */ var _decorator_relations_ManyToMany__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./decorator/relations/ManyToMany */ "./node_modules/typeorm/browser/decorator/relations/ManyToMany.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ManyToMany", function() { return _decorator_relations_ManyToMany__WEBPACK_IMPORTED_MODULE_28__["ManyToMany"]; });

/* harmony import */ var _decorator_relations_ManyToOne__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./decorator/relations/ManyToOne */ "./node_modules/typeorm/browser/decorator/relations/ManyToOne.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ManyToOne", function() { return _decorator_relations_ManyToOne__WEBPACK_IMPORTED_MODULE_29__["ManyToOne"]; });

/* harmony import */ var _decorator_relations_OneToMany__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./decorator/relations/OneToMany */ "./node_modules/typeorm/browser/decorator/relations/OneToMany.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OneToMany", function() { return _decorator_relations_OneToMany__WEBPACK_IMPORTED_MODULE_30__["OneToMany"]; });

/* harmony import */ var _decorator_relations_OneToOne__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./decorator/relations/OneToOne */ "./node_modules/typeorm/browser/decorator/relations/OneToOne.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OneToOne", function() { return _decorator_relations_OneToOne__WEBPACK_IMPORTED_MODULE_31__["OneToOne"]; });

/* harmony import */ var _decorator_relations_RelationCount__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./decorator/relations/RelationCount */ "./node_modules/typeorm/browser/decorator/relations/RelationCount.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RelationCount", function() { return _decorator_relations_RelationCount__WEBPACK_IMPORTED_MODULE_32__["RelationCount"]; });

/* harmony import */ var _decorator_relations_RelationId__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./decorator/relations/RelationId */ "./node_modules/typeorm/browser/decorator/relations/RelationId.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RelationId", function() { return _decorator_relations_RelationId__WEBPACK_IMPORTED_MODULE_33__["RelationId"]; });

/* harmony import */ var _decorator_entity_Entity__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./decorator/entity/Entity */ "./node_modules/typeorm/browser/decorator/entity/Entity.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Entity", function() { return _decorator_entity_Entity__WEBPACK_IMPORTED_MODULE_34__["Entity"]; });

/* harmony import */ var _decorator_entity_ChildEntity__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./decorator/entity/ChildEntity */ "./node_modules/typeorm/browser/decorator/entity/ChildEntity.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ChildEntity", function() { return _decorator_entity_ChildEntity__WEBPACK_IMPORTED_MODULE_35__["ChildEntity"]; });

/* harmony import */ var _decorator_entity_TableInheritance__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./decorator/entity/TableInheritance */ "./node_modules/typeorm/browser/decorator/entity/TableInheritance.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TableInheritance", function() { return _decorator_entity_TableInheritance__WEBPACK_IMPORTED_MODULE_36__["TableInheritance"]; });

/* harmony import */ var _decorator_entity_view_ViewEntity__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./decorator/entity-view/ViewEntity */ "./node_modules/typeorm/browser/decorator/entity-view/ViewEntity.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ViewEntity", function() { return _decorator_entity_view_ViewEntity__WEBPACK_IMPORTED_MODULE_37__["ViewEntity"]; });

/* harmony import */ var _decorator_transaction_Transaction__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./decorator/transaction/Transaction */ "./node_modules/typeorm/browser/decorator/transaction/Transaction.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Transaction", function() { return _decorator_transaction_Transaction__WEBPACK_IMPORTED_MODULE_38__["Transaction"]; });

/* harmony import */ var _decorator_transaction_TransactionManager__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./decorator/transaction/TransactionManager */ "./node_modules/typeorm/browser/decorator/transaction/TransactionManager.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransactionManager", function() { return _decorator_transaction_TransactionManager__WEBPACK_IMPORTED_MODULE_39__["TransactionManager"]; });

/* harmony import */ var _decorator_transaction_TransactionRepository__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./decorator/transaction/TransactionRepository */ "./node_modules/typeorm/browser/decorator/transaction/TransactionRepository.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransactionRepository", function() { return _decorator_transaction_TransactionRepository__WEBPACK_IMPORTED_MODULE_40__["TransactionRepository"]; });

/* harmony import */ var _decorator_tree_TreeLevelColumn__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./decorator/tree/TreeLevelColumn */ "./node_modules/typeorm/browser/decorator/tree/TreeLevelColumn.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TreeLevelColumn", function() { return _decorator_tree_TreeLevelColumn__WEBPACK_IMPORTED_MODULE_41__["TreeLevelColumn"]; });

/* harmony import */ var _decorator_tree_TreeParent__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./decorator/tree/TreeParent */ "./node_modules/typeorm/browser/decorator/tree/TreeParent.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TreeParent", function() { return _decorator_tree_TreeParent__WEBPACK_IMPORTED_MODULE_42__["TreeParent"]; });

/* harmony import */ var _decorator_tree_TreeChildren__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./decorator/tree/TreeChildren */ "./node_modules/typeorm/browser/decorator/tree/TreeChildren.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TreeChildren", function() { return _decorator_tree_TreeChildren__WEBPACK_IMPORTED_MODULE_43__["TreeChildren"]; });

/* harmony import */ var _decorator_tree_Tree__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./decorator/tree/Tree */ "./node_modules/typeorm/browser/decorator/tree/Tree.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Tree", function() { return _decorator_tree_Tree__WEBPACK_IMPORTED_MODULE_44__["Tree"]; });

/* harmony import */ var _decorator_Index__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./decorator/Index */ "./node_modules/typeorm/browser/decorator/Index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Index", function() { return _decorator_Index__WEBPACK_IMPORTED_MODULE_45__["Index"]; });

/* harmony import */ var _decorator_Unique__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./decorator/Unique */ "./node_modules/typeorm/browser/decorator/Unique.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Unique", function() { return _decorator_Unique__WEBPACK_IMPORTED_MODULE_46__["Unique"]; });

/* harmony import */ var _decorator_Check__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./decorator/Check */ "./node_modules/typeorm/browser/decorator/Check.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Check", function() { return _decorator_Check__WEBPACK_IMPORTED_MODULE_47__["Check"]; });

/* harmony import */ var _decorator_Exclusion__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./decorator/Exclusion */ "./node_modules/typeorm/browser/decorator/Exclusion.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Exclusion", function() { return _decorator_Exclusion__WEBPACK_IMPORTED_MODULE_48__["Exclusion"]; });

/* harmony import */ var _decorator_Generated__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./decorator/Generated */ "./node_modules/typeorm/browser/decorator/Generated.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Generated", function() { return _decorator_Generated__WEBPACK_IMPORTED_MODULE_49__["Generated"]; });

/* harmony import */ var _decorator_EntityRepository__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./decorator/EntityRepository */ "./node_modules/typeorm/browser/decorator/EntityRepository.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EntityRepository", function() { return _decorator_EntityRepository__WEBPACK_IMPORTED_MODULE_50__["EntityRepository"]; });

/* harmony import */ var _find_options_operator_Any__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./find-options/operator/Any */ "./node_modules/typeorm/browser/find-options/operator/Any.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Any", function() { return _find_options_operator_Any__WEBPACK_IMPORTED_MODULE_51__["Any"]; });

/* harmony import */ var _find_options_operator_Between__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./find-options/operator/Between */ "./node_modules/typeorm/browser/find-options/operator/Between.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Between", function() { return _find_options_operator_Between__WEBPACK_IMPORTED_MODULE_52__["Between"]; });

/* harmony import */ var _find_options_operator_Equal__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./find-options/operator/Equal */ "./node_modules/typeorm/browser/find-options/operator/Equal.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Equal", function() { return _find_options_operator_Equal__WEBPACK_IMPORTED_MODULE_53__["Equal"]; });

/* harmony import */ var _find_options_operator_In__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./find-options/operator/In */ "./node_modules/typeorm/browser/find-options/operator/In.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "In", function() { return _find_options_operator_In__WEBPACK_IMPORTED_MODULE_54__["In"]; });

/* harmony import */ var _find_options_operator_IsNull__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./find-options/operator/IsNull */ "./node_modules/typeorm/browser/find-options/operator/IsNull.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IsNull", function() { return _find_options_operator_IsNull__WEBPACK_IMPORTED_MODULE_55__["IsNull"]; });

/* harmony import */ var _find_options_operator_LessThan__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./find-options/operator/LessThan */ "./node_modules/typeorm/browser/find-options/operator/LessThan.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LessThan", function() { return _find_options_operator_LessThan__WEBPACK_IMPORTED_MODULE_56__["LessThan"]; });

/* harmony import */ var _find_options_operator_LessThanOrEqual__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./find-options/operator/LessThanOrEqual */ "./node_modules/typeorm/browser/find-options/operator/LessThanOrEqual.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LessThanOrEqual", function() { return _find_options_operator_LessThanOrEqual__WEBPACK_IMPORTED_MODULE_57__["LessThanOrEqual"]; });

/* harmony import */ var _find_options_operator_Like__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./find-options/operator/Like */ "./node_modules/typeorm/browser/find-options/operator/Like.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Like", function() { return _find_options_operator_Like__WEBPACK_IMPORTED_MODULE_58__["Like"]; });

/* harmony import */ var _find_options_operator_MoreThan__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./find-options/operator/MoreThan */ "./node_modules/typeorm/browser/find-options/operator/MoreThan.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MoreThan", function() { return _find_options_operator_MoreThan__WEBPACK_IMPORTED_MODULE_59__["MoreThan"]; });

/* harmony import */ var _find_options_operator_MoreThanOrEqual__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./find-options/operator/MoreThanOrEqual */ "./node_modules/typeorm/browser/find-options/operator/MoreThanOrEqual.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MoreThanOrEqual", function() { return _find_options_operator_MoreThanOrEqual__WEBPACK_IMPORTED_MODULE_60__["MoreThanOrEqual"]; });

/* harmony import */ var _find_options_operator_Not__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./find-options/operator/Not */ "./node_modules/typeorm/browser/find-options/operator/Not.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Not", function() { return _find_options_operator_Not__WEBPACK_IMPORTED_MODULE_61__["Not"]; });

/* harmony import */ var _find_options_operator_Raw__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./find-options/operator/Raw */ "./node_modules/typeorm/browser/find-options/operator/Raw.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Raw", function() { return _find_options_operator_Raw__WEBPACK_IMPORTED_MODULE_62__["Raw"]; });

/* harmony import */ var _find_options_FindOperator__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./find-options/FindOperator */ "./node_modules/typeorm/browser/find-options/FindOperator.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FindOperator", function() { return _find_options_FindOperator__WEBPACK_IMPORTED_MODULE_63__["FindOperator"]; });

/* harmony import */ var _find_options_FindOptionsUtils__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./find-options/FindOptionsUtils */ "./node_modules/typeorm/browser/find-options/FindOptionsUtils.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FindOptionsUtils", function() { return _find_options_FindOptionsUtils__WEBPACK_IMPORTED_MODULE_64__["FindOptionsUtils"]; });

/* harmony import */ var _logger_AdvancedConsoleLogger__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./logger/AdvancedConsoleLogger */ "./node_modules/typeorm/browser/logger/AdvancedConsoleLogger.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AdvancedConsoleLogger", function() { return _logger_AdvancedConsoleLogger__WEBPACK_IMPORTED_MODULE_65__["AdvancedConsoleLogger"]; });

/* harmony import */ var _logger_SimpleConsoleLogger__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./logger/SimpleConsoleLogger */ "./node_modules/typeorm/browser/logger/SimpleConsoleLogger.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SimpleConsoleLogger", function() { return _logger_SimpleConsoleLogger__WEBPACK_IMPORTED_MODULE_66__["SimpleConsoleLogger"]; });

/* harmony import */ var _logger_FileLogger__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./logger/FileLogger */ "./node_modules/typeorm/browser/logger/FileLogger.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FileLogger", function() { return _logger_FileLogger__WEBPACK_IMPORTED_MODULE_67__["FileLogger"]; });

/* harmony import */ var _metadata_EntityMetadata__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./metadata/EntityMetadata */ "./node_modules/typeorm/browser/metadata/EntityMetadata.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EntityMetadata", function() { return _metadata_EntityMetadata__WEBPACK_IMPORTED_MODULE_68__["EntityMetadata"]; });

/* harmony import */ var _entity_manager_EntityManager__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./entity-manager/EntityManager */ "./node_modules/typeorm/browser/entity-manager/EntityManager.js");
/* empty/unused harmony star reexport *//* harmony import */ var _repository_AbstractRepository__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./repository/AbstractRepository */ "./node_modules/typeorm/browser/repository/AbstractRepository.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AbstractRepository", function() { return _repository_AbstractRepository__WEBPACK_IMPORTED_MODULE_70__["AbstractRepository"]; });

/* harmony import */ var _repository_Repository__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./repository/Repository */ "./node_modules/typeorm/browser/repository/Repository.js");
/* empty/unused harmony star reexport *//* harmony import */ var _repository_BaseEntity__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./repository/BaseEntity */ "./node_modules/typeorm/browser/repository/BaseEntity.js");
/* empty/unused harmony star reexport *//* harmony import */ var _repository_TreeRepository__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./repository/TreeRepository */ "./node_modules/typeorm/browser/repository/TreeRepository.js");
/* empty/unused harmony star reexport *//* harmony import */ var _repository_MongoRepository__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./repository/MongoRepository */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MongoDriver", function() { return _repository_MongoRepository__WEBPACK_IMPORTED_MODULE_74__["MongoDriver"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MongoQueryRunner", function() { return _repository_MongoRepository__WEBPACK_IMPORTED_MODULE_74__["MongoQueryRunner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PostgresDriver", function() { return _repository_MongoRepository__WEBPACK_IMPORTED_MODULE_74__["PostgresDriver"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SqlServerDriver", function() { return _repository_MongoRepository__WEBPACK_IMPORTED_MODULE_74__["SqlServerDriver"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SapDriver", function() { return _repository_MongoRepository__WEBPACK_IMPORTED_MODULE_74__["SapDriver"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MysqlDriver", function() { return _repository_MongoRepository__WEBPACK_IMPORTED_MODULE_74__["MysqlDriver"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OracleDriver", function() { return _repository_MongoRepository__WEBPACK_IMPORTED_MODULE_74__["OracleDriver"]; });

/* harmony import */ var _schema_builder_table_TableCheck__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./schema-builder/table/TableCheck */ "./node_modules/typeorm/browser/schema-builder/table/TableCheck.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TableCheck", function() { return _schema_builder_table_TableCheck__WEBPACK_IMPORTED_MODULE_75__["TableCheck"]; });

/* harmony import */ var _schema_builder_table_TableColumn__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./schema-builder/table/TableColumn */ "./node_modules/typeorm/browser/schema-builder/table/TableColumn.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TableColumn", function() { return _schema_builder_table_TableColumn__WEBPACK_IMPORTED_MODULE_76__["TableColumn"]; });

/* harmony import */ var _schema_builder_table_TableExclusion__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./schema-builder/table/TableExclusion */ "./node_modules/typeorm/browser/schema-builder/table/TableExclusion.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TableExclusion", function() { return _schema_builder_table_TableExclusion__WEBPACK_IMPORTED_MODULE_77__["TableExclusion"]; });

/* harmony import */ var _schema_builder_table_TableForeignKey__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./schema-builder/table/TableForeignKey */ "./node_modules/typeorm/browser/schema-builder/table/TableForeignKey.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TableForeignKey", function() { return _schema_builder_table_TableForeignKey__WEBPACK_IMPORTED_MODULE_78__["TableForeignKey"]; });

/* harmony import */ var _schema_builder_table_TableIndex__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./schema-builder/table/TableIndex */ "./node_modules/typeorm/browser/schema-builder/table/TableIndex.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TableIndex", function() { return _schema_builder_table_TableIndex__WEBPACK_IMPORTED_MODULE_79__["TableIndex"]; });

/* harmony import */ var _schema_builder_table_TableUnique__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./schema-builder/table/TableUnique */ "./node_modules/typeorm/browser/schema-builder/table/TableUnique.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TableUnique", function() { return _schema_builder_table_TableUnique__WEBPACK_IMPORTED_MODULE_80__["TableUnique"]; });

/* harmony import */ var _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./schema-builder/table/Table */ "./node_modules/typeorm/browser/schema-builder/table/Table.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Table", function() { return _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_81__["Table"]; });

/* harmony import */ var _driver_mongodb_typings__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./driver/mongodb/typings */ "./node_modules/typeorm/browser/driver/mongodb/typings.js");
/* empty/unused harmony star reexport *//* harmony import */ var _driver_sqlserver_MssqlParameter__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./driver/sqlserver/MssqlParameter */ "./node_modules/typeorm/browser/driver/sqlserver/MssqlParameter.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MssqlParameter", function() { return _driver_sqlserver_MssqlParameter__WEBPACK_IMPORTED_MODULE_83__["MssqlParameter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConnectionOptionsReader", function() { return _connection_ConnectionOptionsReader__WEBPACK_IMPORTED_MODULE_6__["ConnectionOptionsReader"]; });

/* harmony import */ var _connection_Connection__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./connection/Connection */ "./node_modules/typeorm/browser/connection/Connection.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Connection", function() { return _connection_Connection__WEBPACK_IMPORTED_MODULE_84__["Connection"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConnectionManager", function() { return _connection_ConnectionManager__WEBPACK_IMPORTED_MODULE_2__["ConnectionManager"]; });

/* harmony import */ var _query_builder_QueryBuilder__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./query-builder/QueryBuilder */ "./node_modules/typeorm/browser/query-builder/QueryBuilder.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QueryBuilder", function() { return _query_builder_QueryBuilder__WEBPACK_IMPORTED_MODULE_85__["QueryBuilder"]; });

/* harmony import */ var _query_builder_SelectQueryBuilder__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./query-builder/SelectQueryBuilder */ "./node_modules/typeorm/browser/query-builder/SelectQueryBuilder.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SelectQueryBuilder", function() { return _query_builder_SelectQueryBuilder__WEBPACK_IMPORTED_MODULE_86__["SelectQueryBuilder"]; });

/* harmony import */ var _query_builder_DeleteQueryBuilder__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./query-builder/DeleteQueryBuilder */ "./node_modules/typeorm/browser/query-builder/DeleteQueryBuilder.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DeleteQueryBuilder", function() { return _query_builder_DeleteQueryBuilder__WEBPACK_IMPORTED_MODULE_87__["DeleteQueryBuilder"]; });

/* harmony import */ var _query_builder_InsertQueryBuilder__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./query-builder/InsertQueryBuilder */ "./node_modules/typeorm/browser/query-builder/InsertQueryBuilder.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "InsertQueryBuilder", function() { return _query_builder_InsertQueryBuilder__WEBPACK_IMPORTED_MODULE_88__["InsertQueryBuilder"]; });

/* harmony import */ var _query_builder_UpdateQueryBuilder__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./query-builder/UpdateQueryBuilder */ "./node_modules/typeorm/browser/query-builder/UpdateQueryBuilder.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UpdateQueryBuilder", function() { return _query_builder_UpdateQueryBuilder__WEBPACK_IMPORTED_MODULE_89__["UpdateQueryBuilder"]; });

/* harmony import */ var _query_builder_RelationQueryBuilder__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./query-builder/RelationQueryBuilder */ "./node_modules/typeorm/browser/query-builder/RelationQueryBuilder.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RelationQueryBuilder", function() { return _query_builder_RelationQueryBuilder__WEBPACK_IMPORTED_MODULE_90__["RelationQueryBuilder"]; });

/* harmony import */ var _query_builder_Brackets__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./query-builder/Brackets */ "./node_modules/typeorm/browser/query-builder/Brackets.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Brackets", function() { return _query_builder_Brackets__WEBPACK_IMPORTED_MODULE_91__["Brackets"]; });

/* harmony import */ var _query_builder_result_InsertResult__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./query-builder/result/InsertResult */ "./node_modules/typeorm/browser/query-builder/result/InsertResult.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "InsertResult", function() { return _query_builder_result_InsertResult__WEBPACK_IMPORTED_MODULE_92__["InsertResult"]; });

/* harmony import */ var _query_builder_result_UpdateResult__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ./query-builder/result/UpdateResult */ "./node_modules/typeorm/browser/query-builder/result/UpdateResult.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UpdateResult", function() { return _query_builder_result_UpdateResult__WEBPACK_IMPORTED_MODULE_93__["UpdateResult"]; });

/* harmony import */ var _query_builder_result_DeleteResult__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(/*! ./query-builder/result/DeleteResult */ "./node_modules/typeorm/browser/query-builder/result/DeleteResult.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DeleteResult", function() { return _query_builder_result_DeleteResult__WEBPACK_IMPORTED_MODULE_94__["DeleteResult"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EntityManager", function() { return _entity_manager_EntityManager__WEBPACK_IMPORTED_MODULE_69__["EntityManager"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MongoEntityManager", function() { return _repository_MongoRepository__WEBPACK_IMPORTED_MODULE_74__["MongoEntityManager"]; });

/* harmony import */ var _migration_Migration__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(/*! ./migration/Migration */ "./node_modules/typeorm/browser/migration/Migration.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Migration", function() { return _migration_Migration__WEBPACK_IMPORTED_MODULE_95__["Migration"]; });

/* harmony import */ var _migration_MigrationExecutor__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(/*! ./migration/MigrationExecutor */ "./node_modules/typeorm/browser/migration/MigrationExecutor.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MigrationExecutor", function() { return _migration_MigrationExecutor__WEBPACK_IMPORTED_MODULE_96__["MigrationExecutor"]; });

/* harmony import */ var _naming_strategy_DefaultNamingStrategy__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(/*! ./naming-strategy/DefaultNamingStrategy */ "./node_modules/typeorm/browser/naming-strategy/DefaultNamingStrategy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DefaultNamingStrategy", function() { return _naming_strategy_DefaultNamingStrategy__WEBPACK_IMPORTED_MODULE_97__["DefaultNamingStrategy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Repository", function() { return _repository_Repository__WEBPACK_IMPORTED_MODULE_71__["Repository"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TreeRepository", function() { return _repository_TreeRepository__WEBPACK_IMPORTED_MODULE_73__["TreeRepository"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MongoRepository", function() { return _repository_MongoRepository__WEBPACK_IMPORTED_MODULE_74__["MongoRepository"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BaseEntity", function() { return _repository_BaseEntity__WEBPACK_IMPORTED_MODULE_72__["BaseEntity"]; });

/* harmony import */ var _entity_schema_EntitySchema__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(/*! ./entity-schema/EntitySchema */ "./node_modules/typeorm/browser/entity-schema/EntitySchema.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EntitySchema", function() { return _entity_schema_EntitySchema__WEBPACK_IMPORTED_MODULE_98__["EntitySchema"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PromiseUtils", function() { return _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_7__["PromiseUtils"]; });


/*!
 */







 // -------------------------------------------------------------------------
// Commonly Used exports
// -------------------------------------------------------------------------





































































































 // -------------------------------------------------------------------------
// Deprecated
// -------------------------------------------------------------------------
// -------------------------------------------------------------------------
// Commonly used functionality
// -------------------------------------------------------------------------

/**
 * Gets metadata args storage.
 */

function getMetadataArgsStorage() {
  // we should store metadata storage in a global variable otherwise it brings too much problems
  // one of the problem is that if any entity (or any other) will be imported before consumer will call
  // useContainer method with his own container implementation, that entity will be registered in the
  // old old container (default one post probably) and consumer will his entity.
  // calling useContainer before he imports any entity (or any other) is not always convenient.
  // another reason is that when we run migrations typeorm is being called from a global package
  // and it may load entities which register decorators in typeorm of local package
  // this leads to impossibility of usage of entities in migrations and cli related operations
  var globalScope = _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_5__["PlatformTools"].getGlobalVariable();
  if (!globalScope.typeormMetadataArgsStorage) globalScope.typeormMetadataArgsStorage = new _metadata_args_MetadataArgsStorage__WEBPACK_IMPORTED_MODULE_3__["MetadataArgsStorage"]();
  return globalScope.typeormMetadataArgsStorage;
}
/**
 * Reads connection options stored in ormconfig configuration file.
 */

function getConnectionOptions(connectionName) {
  if (connectionName === void 0) {
    connectionName = "default";
  }

  return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
      return [2
      /*return*/
      , new _connection_ConnectionOptionsReader__WEBPACK_IMPORTED_MODULE_6__["ConnectionOptionsReader"]().get(connectionName)];
    });
  });
}
/**
 * Gets a ConnectionManager which creates connections.
 */

function getConnectionManager() {
  return Object(_container__WEBPACK_IMPORTED_MODULE_4__["getFromContainer"])(_connection_ConnectionManager__WEBPACK_IMPORTED_MODULE_2__["ConnectionManager"]);
}
/**
 * Creates a new connection and registers it in the manager.
 *
 * If connection options were not specified, then it will try to create connection automatically,
 * based on content of ormconfig (json/js/yml/xml/env) file or environment variables.
 * Only one connection from ormconfig will be created (name "default" or connection without name).
 */

function createConnection(optionsOrName) {
  return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
    var connectionName, options, _a;

    return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
      switch (_b.label) {
        case 0:
          connectionName = typeof optionsOrName === "string" ? optionsOrName : "default";
          if (!(optionsOrName instanceof Object)) return [3
          /*break*/
          , 1];
          _a = optionsOrName;
          return [3
          /*break*/
          , 3];

        case 1:
          return [4
          /*yield*/
          , getConnectionOptions(connectionName)];

        case 2:
          _a = _b.sent();
          _b.label = 3;

        case 3:
          options = _a;
          return [2
          /*return*/
          , getConnectionManager().create(options).connect()];
      }
    });
  });
}
/**
 * Creates new connections and registers them in the manager.
 *
 * If connection options were not specified, then it will try to create connection automatically,
 * based on content of ormconfig (json/js/yml/xml/env) file or environment variables.
 * All connections from the ormconfig will be created.
 */

function createConnections(options) {
  return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
    var connections;
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
      switch (_a.label) {
        case 0:
          if (!!options) return [3
          /*break*/
          , 2];
          return [4
          /*yield*/
          , new _connection_ConnectionOptionsReader__WEBPACK_IMPORTED_MODULE_6__["ConnectionOptionsReader"]().all()];

        case 1:
          options = _a.sent();
          _a.label = 2;

        case 2:
          connections = options.map(function (options) {
            return getConnectionManager().create(options);
          });
          return [2
          /*return*/
          , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_7__["PromiseUtils"].runInSequence(connections, function (connection) {
            return connection.connect();
          })];
      }
    });
  });
}
/**
 * Gets connection from the connection manager.
 * If connection name wasn't specified, then "default" connection will be retrieved.
 */

function getConnection(connectionName) {
  if (connectionName === void 0) {
    connectionName = "default";
  }

  return getConnectionManager().get(connectionName);
}
/**
 * Gets entity manager from the connection.
 * If connection name wasn't specified, then "default" connection will be retrieved.
 */

function getManager(connectionName) {
  if (connectionName === void 0) {
    connectionName = "default";
  }

  return getConnectionManager().get(connectionName).manager;
}
/**
 * Gets MongoDB entity manager from the connection.
 * If connection name wasn't specified, then "default" connection will be retrieved.
 */

function getMongoManager(connectionName) {
  if (connectionName === void 0) {
    connectionName = "default";
  }

  return getConnectionManager().get(connectionName).manager;
}
/**
 * Gets Sqljs entity manager from connection name.
 * "default" connection is used, when no name is specified.
 * Only works when Sqljs driver is used.
 */

function getSqljsManager(connectionName) {
  if (connectionName === void 0) {
    connectionName = "default";
  }

  return getConnectionManager().get(connectionName).manager;
}
/**
 * Gets repository for the given entity class.
 */

function getRepository(entityClass, connectionName) {
  if (connectionName === void 0) {
    connectionName = "default";
  }

  return getConnectionManager().get(connectionName).getRepository(entityClass);
}
/**
 * Gets tree repository for the given entity class.
 */

function getTreeRepository(entityClass, connectionName) {
  if (connectionName === void 0) {
    connectionName = "default";
  }

  return getConnectionManager().get(connectionName).getTreeRepository(entityClass);
}
/**
 * Gets tree repository for the given entity class.
 */

function getCustomRepository(customRepository, connectionName) {
  if (connectionName === void 0) {
    connectionName = "default";
  }

  return getConnectionManager().get(connectionName).getCustomRepository(customRepository);
}
/**
 * Gets mongodb repository for the given entity class or name.
 */

function getMongoRepository(entityClass, connectionName) {
  if (connectionName === void 0) {
    connectionName = "default";
  }

  return getConnectionManager().get(connectionName).getMongoRepository(entityClass);
}
/**
 * Creates a new query builder.
 */

function createQueryBuilder(entityClass, alias, connectionName) {
  if (connectionName === void 0) {
    connectionName = "default";
  }

  if (entityClass) {
    return getRepository(entityClass, connectionName).createQueryBuilder(alias);
  }

  return getConnection(connectionName).createQueryBuilder();
}

/***/ }),

/***/ "./node_modules/typeorm/browser/logger/AdvancedConsoleLogger.js":
/*!**********************************************************************!*\
  !*** ./node_modules/typeorm/browser/logger/AdvancedConsoleLogger.js ***!
  \**********************************************************************/
/*! exports provided: AdvancedConsoleLogger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AdvancedConsoleLogger", function() { return AdvancedConsoleLogger; });
/* harmony import */ var _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform/PlatformTools */ "./node_modules/typeorm/browser/platform/PlatformTools.js");

/**
 * Performs logging of the events in TypeORM.
 * This version of logger uses console to log events and use syntax highlighting.
 */

var AdvancedConsoleLogger =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function AdvancedConsoleLogger(options) {
    this.options = options;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Logs query and parameters used in it.
   */


  AdvancedConsoleLogger.prototype.logQuery = function (query, parameters, queryRunner) {
    if (this.options === "all" || this.options === true || Array.isArray(this.options) && this.options.indexOf("query") !== -1) {
      var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");
      _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].logInfo("query:", _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].highlightSql(sql));
    }
  };
  /**
   * Logs query that is failed.
   */


  AdvancedConsoleLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {
    if (this.options === "all" || this.options === true || Array.isArray(this.options) && this.options.indexOf("error") !== -1) {
      var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");
      _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].logError("query failed:", _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].highlightSql(sql));
      _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].logError("error:", error);
    }
  };
  /**
   * Logs query that is slow.
   */


  AdvancedConsoleLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {
    var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");
    _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].logWarn("query is slow:", _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].highlightSql(sql));
    _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].logWarn("execution time:", time);
  };
  /**
   * Logs events from the schema build process.
   */


  AdvancedConsoleLogger.prototype.logSchemaBuild = function (message, queryRunner) {
    if (this.options === "all" || Array.isArray(this.options) && this.options.indexOf("schema") !== -1) {
      _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].log(message);
    }
  };
  /**
   * Logs events from the migration run process.
   */


  AdvancedConsoleLogger.prototype.logMigration = function (message, queryRunner) {
    _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].log(message);
  };
  /**
   * Perform logging using given logger, or by default to the console.
   * Log has its own level and message.
   */


  AdvancedConsoleLogger.prototype.log = function (level, message, queryRunner) {
    switch (level) {
      case "log":
        if (this.options === "all" || Array.isArray(this.options) && this.options.indexOf("log") !== -1) _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].log(message);
        break;

      case "info":
        if (this.options === "all" || Array.isArray(this.options) && this.options.indexOf("info") !== -1) _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].logInfo("INFO:", message);
        break;

      case "warn":
        if (this.options === "all" || Array.isArray(this.options) && this.options.indexOf("warn") !== -1) console.warn(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].warn(message));
        break;
    }
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Converts parameters to a string.
   * Sometimes parameters can have circular objects and therefor we are handle this case too.
   */


  AdvancedConsoleLogger.prototype.stringifyParams = function (parameters) {
    try {
      return JSON.stringify(parameters);
    } catch (error) {
      // most probably circular objects in parameters
      return parameters;
    }
  };

  return AdvancedConsoleLogger;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/logger/DebugLogger.js":
/*!************************************************************!*\
  !*** ./node_modules/typeorm/browser/logger/DebugLogger.js ***!
  \************************************************************/
/*! exports provided: DebugLogger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DebugLogger", function() { return DebugLogger; });
/* harmony import */ var _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform/PlatformTools */ "./node_modules/typeorm/browser/platform/PlatformTools.js");

/**
 * Performs logging of the events in TypeORM via debug library.
 */

var DebugLogger =
/** @class */
function () {
  function DebugLogger() {
    this.debug = _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].load("debug");
    this.debugQueryLog = this.debug("typeorm:query:log");
    this.debugQueryError = this.debug("typeorm:query:error");
    this.debugQuerySlow = this.debug("typeorm:query:slow");
    this.debugSchemaBuild = this.debug("typeorm:schema");
    this.debugMigration = this.debug("typeorm:migration");
    this.debugLog = this.debug("typeorm:log");
    this.debugInfo = this.debug("typeorm:info");
    this.debugWarn = this.debug("typeorm:warn");
  }
  /**
   * Logs query and parameters used in it.
   */


  DebugLogger.prototype.logQuery = function (query, parameters, queryRunner) {
    if (this.debugQueryLog.enabled) {
      this.debugQueryLog(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].highlightSql(query) + ";");

      if (parameters && parameters.length) {
        this.debugQueryLog("parameters:", parameters);
      }
    }
  };
  /**
   * Logs query that failed.
   */


  DebugLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {
    if (this.debugQueryError.enabled) {
      this.debugQueryError(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].highlightSql(query) + ";");

      if (parameters && parameters.length) {
        this.debugQueryError("parameters:", parameters);
      }

      this.debugQueryError("error: ", error);
    }
  };
  /**
   * Logs query that is slow.
   */


  DebugLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {
    if (this.debugQuerySlow.enabled) {
      this.debugQuerySlow(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].highlightSql(query) + ";");

      if (parameters && parameters.length) {
        this.debugQuerySlow("parameters:", parameters);
      }

      this.debugQuerySlow("execution time:", time);
    }
  };
  /**
   * Logs events from the schema build process.
   */


  DebugLogger.prototype.logSchemaBuild = function (message, queryRunner) {
    if (this.debugSchemaBuild.enabled) {
      this.debugSchemaBuild(message);
    }
  };
  /**
   * Logs events from the migration run process.
   */


  DebugLogger.prototype.logMigration = function (message, queryRunner) {
    if (this.debugMigration.enabled) {
      this.debugMigration(message);
    }
  };
  /**
   * Perform logging using given logger.
   * Log has its own level and message.
   */


  DebugLogger.prototype.log = function (level, message, queryRunner) {
    switch (level) {
      case "log":
        if (this.debugLog.enabled) {
          this.debugLog(message);
        }

        break;

      case "info":
        if (this.debugInfo.enabled) {
          this.debugInfo(message);
        }

        break;

      case "warn":
        if (this.debugWarn.enabled) {
          this.debugWarn(message);
        }

        break;
    }
  };

  return DebugLogger;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/logger/FileLogger.js":
/*!***********************************************************!*\
  !*** ./node_modules/typeorm/browser/logger/FileLogger.js ***!
  \***********************************************************/
/*! exports provided: FileLogger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileLogger", function() { return FileLogger; });
/* harmony import */ var _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform/PlatformTools */ "./node_modules/typeorm/browser/platform/PlatformTools.js");

/**
 * Performs logging of the events in TypeORM.
 * This version of logger logs everything into ormlogs.log file.
 */

var FileLogger =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function FileLogger(options) {
    this.options = options;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Logs query and parameters used in it.
   */


  FileLogger.prototype.logQuery = function (query, parameters, queryRunner) {
    if (this.options === "all" || this.options === true || Array.isArray(this.options) && this.options.indexOf("query") !== -1) {
      var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");
      this.write("[QUERY]: " + sql);
    }
  };
  /**
   * Logs query that is failed.
   */


  FileLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {
    if (this.options === "all" || this.options === true || Array.isArray(this.options) && this.options.indexOf("error") !== -1) {
      var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");
      this.write(["[FAILED QUERY]: " + sql, "[QUERY ERROR]: " + error]);
    }
  };
  /**
   * Logs query that is slow.
   */


  FileLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {
    var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");
    this.write("[SLOW QUERY: " + time + " ms]: " + sql);
  };
  /**
   * Logs events from the schema build process.
   */


  FileLogger.prototype.logSchemaBuild = function (message, queryRunner) {
    if (this.options === "all" || Array.isArray(this.options) && this.options.indexOf("schema") !== -1) {
      this.write(message);
    }
  };
  /**
   * Logs events from the migrations run process.
   */


  FileLogger.prototype.logMigration = function (message, queryRunner) {
    this.write(message);
  };
  /**
   * Perform logging using given logger, or by default to the console.
   * Log has its own level and message.
   */


  FileLogger.prototype.log = function (level, message, queryRunner) {
    switch (level) {
      case "log":
        if (this.options === "all" || Array.isArray(this.options) && this.options.indexOf("log") !== -1) this.write("[LOG]: " + message);
        break;

      case "info":
        if (this.options === "all" || Array.isArray(this.options) && this.options.indexOf("info") !== -1) this.write("[INFO]: " + message);
        break;

      case "warn":
        if (this.options === "all" || Array.isArray(this.options) && this.options.indexOf("warn") !== -1) this.write("[WARN]: " + message);
        break;
    }
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Writes given strings into the log file.
   */


  FileLogger.prototype.write = function (strings) {
    strings = Array.isArray(strings) ? strings : [strings];
    var basePath = _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].load("app-root-path").path;
    strings = strings.map(function (str) {
      return "[" + new Date().toISOString() + "]" + str;
    });
    _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].appendFileSync(basePath + "/ormlogs.log", strings.join("\r\n") + "\r\n"); // todo: use async or implement promises?
  };
  /**
   * Converts parameters to a string.
   * Sometimes parameters can have circular objects and therefor we are handle this case too.
   */


  FileLogger.prototype.stringifyParams = function (parameters) {
    try {
      return JSON.stringify(parameters);
    } catch (error) {
      // most probably circular objects in parameters
      return parameters;
    }
  };

  return FileLogger;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/logger/LoggerFactory.js":
/*!**************************************************************!*\
  !*** ./node_modules/typeorm/browser/logger/LoggerFactory.js ***!
  \**************************************************************/
/*! exports provided: LoggerFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoggerFactory", function() { return LoggerFactory; });
/* harmony import */ var _SimpleConsoleLogger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SimpleConsoleLogger */ "./node_modules/typeorm/browser/logger/SimpleConsoleLogger.js");
/* harmony import */ var _AdvancedConsoleLogger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AdvancedConsoleLogger */ "./node_modules/typeorm/browser/logger/AdvancedConsoleLogger.js");
/* harmony import */ var _FileLogger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FileLogger */ "./node_modules/typeorm/browser/logger/FileLogger.js");
/* harmony import */ var _DebugLogger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DebugLogger */ "./node_modules/typeorm/browser/logger/DebugLogger.js");




/**
 * Helps to create logger instances.
 */

var LoggerFactory =
/** @class */
function () {
  function LoggerFactory() {}
  /**
   * Creates a new logger depend on a given connection's driver.
   */


  LoggerFactory.prototype.create = function (logger, options) {
    if (logger instanceof Object) return logger;

    if (logger) {
      switch (logger) {
        case "simple-console":
          return new _SimpleConsoleLogger__WEBPACK_IMPORTED_MODULE_0__["SimpleConsoleLogger"](options);

        case "file":
          return new _FileLogger__WEBPACK_IMPORTED_MODULE_2__["FileLogger"](options);

        case "advanced-console":
          return new _AdvancedConsoleLogger__WEBPACK_IMPORTED_MODULE_1__["AdvancedConsoleLogger"](options);

        case "debug":
          return new _DebugLogger__WEBPACK_IMPORTED_MODULE_3__["DebugLogger"]();
      }
    }

    return new _AdvancedConsoleLogger__WEBPACK_IMPORTED_MODULE_1__["AdvancedConsoleLogger"](options);
  };

  return LoggerFactory;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/logger/SimpleConsoleLogger.js":
/*!********************************************************************!*\
  !*** ./node_modules/typeorm/browser/logger/SimpleConsoleLogger.js ***!
  \********************************************************************/
/*! exports provided: SimpleConsoleLogger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SimpleConsoleLogger", function() { return SimpleConsoleLogger; });
/**
 * Performs logging of the events in TypeORM.
 * This version of logger uses console to log events and does not use syntax highlighting.
 */
var SimpleConsoleLogger =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function SimpleConsoleLogger(options) {
    this.options = options;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Logs query and parameters used in it.
   */


  SimpleConsoleLogger.prototype.logQuery = function (query, parameters, queryRunner) {
    if (this.options === "all" || this.options === true || Array.isArray(this.options) && this.options.indexOf("query") !== -1) {
      var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");
      console.log("query" + ": " + sql);
    }
  };
  /**
   * Logs query that is failed.
   */


  SimpleConsoleLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {
    if (this.options === "all" || this.options === true || Array.isArray(this.options) && this.options.indexOf("error") !== -1) {
      var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");
      console.log("query failed: " + sql);
      console.log("error:", error);
    }
  };
  /**
   * Logs query that is slow.
   */


  SimpleConsoleLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {
    var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");
    console.log("query is slow: " + sql);
    console.log("execution time: " + time);
  };
  /**
   * Logs events from the schema build process.
   */


  SimpleConsoleLogger.prototype.logSchemaBuild = function (message, queryRunner) {
    if (this.options === "all" || Array.isArray(this.options) && this.options.indexOf("schema") !== -1) {
      console.log(message);
    }
  };
  /**
   * Logs events from the migrations run process.
   */


  SimpleConsoleLogger.prototype.logMigration = function (message, queryRunner) {
    console.log(message);
  };
  /**
   * Perform logging using given logger, or by default to the console.
   * Log has its own level and message.
   */


  SimpleConsoleLogger.prototype.log = function (level, message, queryRunner) {
    switch (level) {
      case "log":
        if (this.options === "all" || Array.isArray(this.options) && this.options.indexOf("log") !== -1) console.log(message);
        break;

      case "info":
        if (this.options === "all" || Array.isArray(this.options) && this.options.indexOf("info") !== -1) console.info(message);
        break;

      case "warn":
        if (this.options === "all" || Array.isArray(this.options) && this.options.indexOf("warn") !== -1) console.warn(message);
        break;
    }
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Converts parameters to a string.
   * Sometimes parameters can have circular objects and therefor we are handle this case too.
   */


  SimpleConsoleLogger.prototype.stringifyParams = function (parameters) {
    try {
      return JSON.stringify(parameters);
    } catch (error) {
      // most probably circular objects in parameters
      return parameters;
    }
  };

  return SimpleConsoleLogger;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/metadata-args/MetadataArgsStorage.js":
/*!***************************************************************************!*\
  !*** ./node_modules/typeorm/browser/metadata-args/MetadataArgsStorage.js ***!
  \***************************************************************************/
/*! exports provided: MetadataArgsStorage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetadataArgsStorage", function() { return MetadataArgsStorage; });
/* harmony import */ var _metadata_builder_MetadataUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../metadata-builder/MetadataUtils */ "./node_modules/typeorm/browser/metadata-builder/MetadataUtils.js");

/**
 * Storage all metadatas args of all available types: tables, columns, subscribers, relations, etc.
 * Each metadata args represents some specifications of what it represents.
 * MetadataArgs used to create a real Metadata objects.
 */

var MetadataArgsStorage =
/** @class */
function () {
  function MetadataArgsStorage() {
    // -------------------------------------------------------------------------
    // Properties
    // -------------------------------------------------------------------------
    this.tables = [];
    this.trees = [];
    this.entityRepositories = [];
    this.transactionEntityManagers = [];
    this.transactionRepositories = [];
    this.namingStrategies = [];
    this.entitySubscribers = [];
    this.indices = [];
    this.uniques = [];
    this.checks = [];
    this.exclusions = [];
    this.columns = [];
    this.generations = [];
    this.relations = [];
    this.joinColumns = [];
    this.joinTables = [];
    this.entityListeners = [];
    this.relationCounts = [];
    this.relationIds = [];
    this.embeddeds = [];
    this.inheritances = [];
    this.discriminatorValues = [];
  }

  MetadataArgsStorage.prototype.filterTables = function (target) {
    return this.filterByTarget(this.tables, target);
  };

  MetadataArgsStorage.prototype.filterColumns = function (target) {
    return this.filterByTargetAndWithoutDuplicateProperties(this.columns, target);
  };

  MetadataArgsStorage.prototype.findGenerated = function (target, propertyName) {
    return this.generations.find(function (generated) {
      return (Array.isArray(target) ? target.indexOf(generated.target) !== -1 : generated.target === target) && generated.propertyName === propertyName;
    });
  };

  MetadataArgsStorage.prototype.findTree = function (target) {
    return this.trees.find(function (tree) {
      return Array.isArray(target) ? target.indexOf(tree.target) !== -1 : tree.target === target;
    });
  };

  MetadataArgsStorage.prototype.filterRelations = function (target) {
    return this.filterByTargetAndWithoutDuplicateProperties(this.relations, target);
  };

  MetadataArgsStorage.prototype.filterRelationIds = function (target) {
    return this.filterByTargetAndWithoutDuplicateProperties(this.relationIds, target);
  };

  MetadataArgsStorage.prototype.filterRelationCounts = function (target) {
    return this.filterByTargetAndWithoutDuplicateProperties(this.relationCounts, target);
  };

  MetadataArgsStorage.prototype.filterIndices = function (target) {
    // todo: implement parent-entity overrides?
    return this.indices.filter(function (index) {
      return Array.isArray(target) ? target.indexOf(index.target) !== -1 : index.target === target;
    });
  };

  MetadataArgsStorage.prototype.filterUniques = function (target) {
    return this.uniques.filter(function (unique) {
      return Array.isArray(target) ? target.indexOf(unique.target) !== -1 : unique.target === target;
    });
  };

  MetadataArgsStorage.prototype.filterChecks = function (target) {
    return this.checks.filter(function (check) {
      return Array.isArray(target) ? target.indexOf(check.target) !== -1 : check.target === target;
    });
  };

  MetadataArgsStorage.prototype.filterExclusions = function (target) {
    return this.exclusions.filter(function (exclusion) {
      return Array.isArray(target) ? target.indexOf(exclusion.target) !== -1 : exclusion.target === target;
    });
  };

  MetadataArgsStorage.prototype.filterListeners = function (target) {
    return this.filterByTarget(this.entityListeners, target);
  };

  MetadataArgsStorage.prototype.filterEmbeddeds = function (target) {
    return this.filterByTargetAndWithoutDuplicateEmbeddedProperties(this.embeddeds, target);
  };

  MetadataArgsStorage.prototype.findJoinTable = function (target, propertyName) {
    return this.joinTables.find(function (joinTable) {
      return joinTable.target === target && joinTable.propertyName === propertyName;
    });
  };

  MetadataArgsStorage.prototype.filterJoinColumns = function (target, propertyName) {
    // todo: implement parent-entity overrides?
    return this.joinColumns.filter(function (joinColumn) {
      return joinColumn.target === target && joinColumn.propertyName === propertyName;
    });
  };

  MetadataArgsStorage.prototype.filterSubscribers = function (target) {
    return this.filterByTarget(this.entitySubscribers, target);
  };

  MetadataArgsStorage.prototype.filterNamingStrategies = function (target) {
    return this.filterByTarget(this.namingStrategies, target);
  };

  MetadataArgsStorage.prototype.filterTransactionEntityManagers = function (target, propertyName) {
    return this.transactionEntityManagers.filter(function (transactionEm) {
      return (Array.isArray(target) ? target.indexOf(transactionEm.target) !== -1 : transactionEm.target === target) && transactionEm.methodName === propertyName;
    });
  };

  MetadataArgsStorage.prototype.filterTransactionRepository = function (target, propertyName) {
    return this.transactionRepositories.filter(function (transactionEm) {
      return (Array.isArray(target) ? target.indexOf(transactionEm.target) !== -1 : transactionEm.target === target) && transactionEm.methodName === propertyName;
    });
  };

  MetadataArgsStorage.prototype.filterSingleTableChildren = function (target) {
    return this.tables.filter(function (table) {
      return table.target instanceof Function && target instanceof Function && _metadata_builder_MetadataUtils__WEBPACK_IMPORTED_MODULE_0__["MetadataUtils"].isInherited(table.target, target) && table.type === "entity-child";
    });
  };

  MetadataArgsStorage.prototype.findInheritanceType = function (target) {
    return this.inheritances.find(function (inheritance) {
      return inheritance.target === target;
    });
  };

  MetadataArgsStorage.prototype.findDiscriminatorValue = function (target) {
    return this.discriminatorValues.find(function (discriminatorValue) {
      return discriminatorValue.target === target;
    });
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Filters given array by a given target or targets.
   */


  MetadataArgsStorage.prototype.filterByTarget = function (array, target) {
    return array.filter(function (table) {
      return Array.isArray(target) ? target.indexOf(table.target) !== -1 : table.target === target;
    });
  };
  /**
   * Filters given array by a given target or targets and prevents duplicate property names.
   */


  MetadataArgsStorage.prototype.filterByTargetAndWithoutDuplicateProperties = function (array, target) {
    var newArray = [];
    array.forEach(function (item) {
      var sameTarget = Array.isArray(target) ? target.indexOf(item.target) !== -1 : item.target === target;

      if (sameTarget) {
        if (!newArray.find(function (newItem) {
          return newItem.propertyName === item.propertyName;
        })) newArray.push(item);
      }
    });
    return newArray;
  };
  /**
   * Filters given array by a given target or targets and prevents duplicate embedded property names.
   */


  MetadataArgsStorage.prototype.filterByTargetAndWithoutDuplicateEmbeddedProperties = function (array, target) {
    var newArray = [];
    array.forEach(function (item) {
      var sameTarget = Array.isArray(target) ? target.indexOf(item.target) !== -1 : item.target === target;

      if (sameTarget) {
        var isDuplicateEmbeddedProperty = newArray.find(function (newItem) {
          return newItem.prefix === item.prefix && newItem.propertyName === item.propertyName;
        });
        if (!isDuplicateEmbeddedProperty) newArray.push(item);
      }
    });
    return newArray;
  };

  return MetadataArgsStorage;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/metadata-builder/ClosureJunctionEntityMetadataBuilder.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/metadata-builder/ClosureJunctionEntityMetadataBuilder.js ***!
  \***********************************************************************************************/
/*! exports provided: ClosureJunctionEntityMetadataBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClosureJunctionEntityMetadataBuilder", function() { return ClosureJunctionEntityMetadataBuilder; });
/* harmony import */ var _metadata_EntityMetadata__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../metadata/EntityMetadata */ "./node_modules/typeorm/browser/metadata/EntityMetadata.js");
/* harmony import */ var _metadata_ColumnMetadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../metadata/ColumnMetadata */ "./node_modules/typeorm/browser/metadata/ColumnMetadata.js");
/* harmony import */ var _metadata_ForeignKeyMetadata__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../metadata/ForeignKeyMetadata */ "./node_modules/typeorm/browser/metadata/ForeignKeyMetadata.js");
/* harmony import */ var _metadata_IndexMetadata__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../metadata/IndexMetadata */ "./node_modules/typeorm/browser/metadata/IndexMetadata.js");




/**
 * Creates EntityMetadata for junction tables of the closure entities.
 * Closure junction tables are tables generated by closure entities.
 */

var ClosureJunctionEntityMetadataBuilder =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function ClosureJunctionEntityMetadataBuilder(connection) {
    this.connection = connection;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Builds EntityMetadata for the closure junction of the given closure entity.
   */


  ClosureJunctionEntityMetadataBuilder.prototype.build = function (parentClosureEntityMetadata) {
    var _this = this; // create entity metadata itself


    var entityMetadata = new _metadata_EntityMetadata__WEBPACK_IMPORTED_MODULE_0__["EntityMetadata"]({
      parentClosureEntityMetadata: parentClosureEntityMetadata,
      connection: this.connection,
      args: {
        target: "",
        name: parentClosureEntityMetadata.tableNameWithoutPrefix,
        type: "closure-junction"
      }
    });
    entityMetadata.build(); // create ancestor and descendant columns for new closure junction table

    parentClosureEntityMetadata.primaryColumns.forEach(function (primaryColumn) {
      entityMetadata.ownColumns.push(new _metadata_ColumnMetadata__WEBPACK_IMPORTED_MODULE_1__["ColumnMetadata"]({
        connection: _this.connection,
        entityMetadata: entityMetadata,
        closureType: "ancestor",
        referencedColumn: primaryColumn,
        args: {
          target: "",
          mode: "virtual",
          propertyName: primaryColumn.propertyName + "_ancestor",
          options: {
            primary: true,
            length: primaryColumn.length,
            type: primaryColumn.type
          }
        }
      }));
      entityMetadata.ownColumns.push(new _metadata_ColumnMetadata__WEBPACK_IMPORTED_MODULE_1__["ColumnMetadata"]({
        connection: _this.connection,
        entityMetadata: entityMetadata,
        closureType: "descendant",
        referencedColumn: primaryColumn,
        args: {
          target: "",
          mode: "virtual",
          propertyName: primaryColumn.propertyName + "_descendant",
          options: {
            primary: true,
            length: primaryColumn.length,
            type: primaryColumn.type
          }
        }
      }));
    });
    entityMetadata.ownIndices = [new _metadata_IndexMetadata__WEBPACK_IMPORTED_MODULE_3__["IndexMetadata"]({
      entityMetadata: entityMetadata,
      columns: [entityMetadata.ownColumns[0]],
      args: {
        target: entityMetadata.target,
        synchronize: true
      }
    }), new _metadata_IndexMetadata__WEBPACK_IMPORTED_MODULE_3__["IndexMetadata"]({
      entityMetadata: entityMetadata,
      columns: [entityMetadata.ownColumns[1]],
      args: {
        target: entityMetadata.target,
        synchronize: true
      }
    })]; // if tree level column was defined by a closure entity then add it to the junction columns as well

    if (parentClosureEntityMetadata.treeLevelColumn) {
      entityMetadata.ownColumns.push(new _metadata_ColumnMetadata__WEBPACK_IMPORTED_MODULE_1__["ColumnMetadata"]({
        connection: this.connection,
        entityMetadata: entityMetadata,
        args: {
          target: "",
          mode: "virtual",
          propertyName: "level",
          options: {
            type: this.connection.driver.mappedDataTypes.treeLevel
          }
        }
      }));
    } // create junction table foreign keys


    entityMetadata.foreignKeys = [new _metadata_ForeignKeyMetadata__WEBPACK_IMPORTED_MODULE_2__["ForeignKeyMetadata"]({
      entityMetadata: entityMetadata,
      referencedEntityMetadata: parentClosureEntityMetadata,
      columns: [entityMetadata.ownColumns[0]],
      referencedColumns: parentClosureEntityMetadata.primaryColumns
    }), new _metadata_ForeignKeyMetadata__WEBPACK_IMPORTED_MODULE_2__["ForeignKeyMetadata"]({
      entityMetadata: entityMetadata,
      referencedEntityMetadata: parentClosureEntityMetadata,
      columns: [entityMetadata.ownColumns[1]],
      referencedColumns: parentClosureEntityMetadata.primaryColumns
    })];
    return entityMetadata;
  };

  return ClosureJunctionEntityMetadataBuilder;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/metadata-builder/EntityMetadataBuilder.js":
/*!********************************************************************************!*\
  !*** ./node_modules/typeorm/browser/metadata-builder/EntityMetadataBuilder.js ***!
  \********************************************************************************/
/*! exports provided: EntityMetadataBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntityMetadataBuilder", function() { return EntityMetadataBuilder; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _driver_cockroachdb_CockroachDriver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../driver/cockroachdb/CockroachDriver */ "./node_modules/typeorm/browser/driver/cockroachdb/CockroachDriver.js");
/* harmony import */ var _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../driver/sap/SapDriver */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");
/* harmony import */ var _metadata_EntityMetadata__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../metadata/EntityMetadata */ "./node_modules/typeorm/browser/metadata/EntityMetadata.js");
/* harmony import */ var _metadata_ColumnMetadata__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../metadata/ColumnMetadata */ "./node_modules/typeorm/browser/metadata/ColumnMetadata.js");
/* harmony import */ var _metadata_IndexMetadata__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../metadata/IndexMetadata */ "./node_modules/typeorm/browser/metadata/IndexMetadata.js");
/* harmony import */ var _metadata_RelationMetadata__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../metadata/RelationMetadata */ "./node_modules/typeorm/browser/metadata/RelationMetadata.js");
/* harmony import */ var _metadata_EmbeddedMetadata__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../metadata/EmbeddedMetadata */ "./node_modules/typeorm/browser/metadata/EmbeddedMetadata.js");
/* harmony import */ var _metadata_RelationIdMetadata__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../metadata/RelationIdMetadata */ "./node_modules/typeorm/browser/metadata/RelationIdMetadata.js");
/* harmony import */ var _metadata_RelationCountMetadata__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../metadata/RelationCountMetadata */ "./node_modules/typeorm/browser/metadata/RelationCountMetadata.js");
/* harmony import */ var _MetadataUtils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./MetadataUtils */ "./node_modules/typeorm/browser/metadata-builder/MetadataUtils.js");
/* harmony import */ var _JunctionEntityMetadataBuilder__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./JunctionEntityMetadataBuilder */ "./node_modules/typeorm/browser/metadata-builder/JunctionEntityMetadataBuilder.js");
/* harmony import */ var _ClosureJunctionEntityMetadataBuilder__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ClosureJunctionEntityMetadataBuilder */ "./node_modules/typeorm/browser/metadata-builder/ClosureJunctionEntityMetadataBuilder.js");
/* harmony import */ var _RelationJoinColumnBuilder__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./RelationJoinColumnBuilder */ "./node_modules/typeorm/browser/metadata-builder/RelationJoinColumnBuilder.js");
/* harmony import */ var _metadata_EntityListenerMetadata__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../metadata/EntityListenerMetadata */ "./node_modules/typeorm/browser/metadata/EntityListenerMetadata.js");
/* harmony import */ var _metadata_UniqueMetadata__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../metadata/UniqueMetadata */ "./node_modules/typeorm/browser/metadata/UniqueMetadata.js");
/* harmony import */ var _metadata_CheckMetadata__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../metadata/CheckMetadata */ "./node_modules/typeorm/browser/metadata/CheckMetadata.js");
/* harmony import */ var _metadata_ExclusionMetadata__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../metadata/ExclusionMetadata */ "./node_modules/typeorm/browser/metadata/ExclusionMetadata.js");
/* harmony import */ var _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../driver/aurora-data-api/AuroraDataApiDriver */ "./node_modules/typeorm/browser/driver/aurora-data-api/AuroraDataApiDriver.js");






















/**
 * Builds EntityMetadata objects and all its sub-metadatas.
 */

var EntityMetadataBuilder =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function EntityMetadataBuilder(connection, metadataArgsStorage) {
    this.connection = connection;
    this.metadataArgsStorage = metadataArgsStorage;
    this.junctionEntityMetadataBuilder = new _JunctionEntityMetadataBuilder__WEBPACK_IMPORTED_MODULE_11__["JunctionEntityMetadataBuilder"](connection);
    this.closureJunctionEntityMetadataBuilder = new _ClosureJunctionEntityMetadataBuilder__WEBPACK_IMPORTED_MODULE_12__["ClosureJunctionEntityMetadataBuilder"](connection);
    this.relationJoinColumnBuilder = new _RelationJoinColumnBuilder__WEBPACK_IMPORTED_MODULE_13__["RelationJoinColumnBuilder"](connection);
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Builds a complete entity metadatas for the given entity classes.
   */


  EntityMetadataBuilder.prototype.build = function (entityClasses) {
    var _this = this; // if entity classes to filter entities by are given then do filtering, otherwise use all


    var allTables = entityClasses ? this.metadataArgsStorage.filterTables(entityClasses) : this.metadataArgsStorage.tables; // filter out table metadata args for those we really create entity metadatas and tables in the db

    var realTables = allTables.filter(function (table) {
      return table.type === "regular" || table.type === "closure" || table.type === "entity-child" || table.type === "view";
    }); // create entity metadatas for a user defined entities (marked with @Entity decorator or loaded from entity schemas)

    var entityMetadatas = realTables.map(function (tableArgs) {
      return _this.createEntityMetadata(tableArgs);
    }); // compute parent entity metadatas for table inheritance

    entityMetadatas.forEach(function (entityMetadata) {
      return _this.computeParentEntityMetadata(entityMetadatas, entityMetadata);
    }); // after all metadatas created we set child entity metadatas for table inheritance

    entityMetadatas.forEach(function (metadata) {
      metadata.childEntityMetadatas = entityMetadatas.filter(function (childMetadata) {
        return metadata.target instanceof Function && childMetadata.target instanceof Function && _MetadataUtils__WEBPACK_IMPORTED_MODULE_10__["MetadataUtils"].isInherited(childMetadata.target, metadata.target);
      });
    }); // build entity metadata (step0), first for non-single-table-inherited entity metadatas (dependant)

    entityMetadatas.filter(function (entityMetadata) {
      return entityMetadata.tableType !== "entity-child";
    }).forEach(function (entityMetadata) {
      return entityMetadata.build();
    }); // build entity metadata (step0), now for single-table-inherited entity metadatas (dependant)

    entityMetadatas.filter(function (entityMetadata) {
      return entityMetadata.tableType === "entity-child";
    }).forEach(function (entityMetadata) {
      return entityMetadata.build();
    }); // compute entity metadata columns, relations, etc. first for the regular, non-single-table-inherited entity metadatas

    entityMetadatas.filter(function (entityMetadata) {
      return entityMetadata.tableType !== "entity-child";
    }).forEach(function (entityMetadata) {
      return _this.computeEntityMetadataStep1(entityMetadatas, entityMetadata);
    }); // then do it for single table inheritance children (since they are depend on their parents to be built)

    entityMetadatas.filter(function (entityMetadata) {
      return entityMetadata.tableType === "entity-child";
    }).forEach(function (entityMetadata) {
      return _this.computeEntityMetadataStep1(entityMetadatas, entityMetadata);
    }); // calculate entity metadata computed properties and all its sub-metadatas

    entityMetadatas.forEach(function (entityMetadata) {
      return _this.computeEntityMetadataStep2(entityMetadata);
    }); // calculate entity metadata's inverse properties

    entityMetadatas.forEach(function (entityMetadata) {
      return _this.computeInverseProperties(entityMetadata, entityMetadatas);
    }); // go through all entity metadatas and create foreign keys / junction entity metadatas for their relations

    entityMetadatas.filter(function (entityMetadata) {
      return entityMetadata.tableType !== "entity-child";
    }).forEach(function (entityMetadata) {
      // create entity's relations join columns (for many-to-one and one-to-one owner)
      entityMetadata.relations.filter(function (relation) {
        return relation.isOneToOne || relation.isManyToOne;
      }).forEach(function (relation) {
        var joinColumns = _this.metadataArgsStorage.filterJoinColumns(relation.target, relation.propertyName);

        var _a = _this.relationJoinColumnBuilder.build(joinColumns, relation),
            foreignKey = _a.foreignKey,
            uniqueConstraint = _a.uniqueConstraint; // create a foreign key based on its metadata args


        if (foreignKey) {
          relation.registerForeignKeys(foreignKey); // push it to the relation and thus register there a join column

          entityMetadata.foreignKeys.push(foreignKey);
        }

        if (uniqueConstraint) {
          if (_this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["MysqlDriver"] || _this.connection.driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_18__["AuroraDataApiDriver"] || _this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["SqlServerDriver"] || _this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["SapDriver"]) {
            var index = new _metadata_IndexMetadata__WEBPACK_IMPORTED_MODULE_5__["IndexMetadata"]({
              entityMetadata: uniqueConstraint.entityMetadata,
              columns: uniqueConstraint.columns,
              args: {
                target: uniqueConstraint.target,
                name: uniqueConstraint.name,
                unique: true,
                synchronize: true
              }
            });

            if (_this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["SqlServerDriver"]) {
              index.where = index.columns.map(function (column) {
                return _this.connection.driver.escape(column.databaseName) + " IS NOT NULL";
              }).join(" AND ");
            }

            if (relation.embeddedMetadata) {
              relation.embeddedMetadata.indices.push(index);
            } else {
              relation.entityMetadata.ownIndices.push(index);
            }

            _this.computeEntityMetadataStep2(entityMetadata);
          } else {
            if (relation.embeddedMetadata) {
              relation.embeddedMetadata.uniques.push(uniqueConstraint);
            } else {
              relation.entityMetadata.ownUniques.push(uniqueConstraint);
            }

            _this.computeEntityMetadataStep2(entityMetadata);
          }
        }

        if (foreignKey && _this.connection.driver instanceof _driver_cockroachdb_CockroachDriver__WEBPACK_IMPORTED_MODULE_1__["CockroachDriver"]) {
          var index = new _metadata_IndexMetadata__WEBPACK_IMPORTED_MODULE_5__["IndexMetadata"]({
            entityMetadata: relation.entityMetadata,
            columns: foreignKey.columns,
            args: {
              target: relation.entityMetadata.target,
              synchronize: true
            }
          });

          if (relation.embeddedMetadata) {
            relation.embeddedMetadata.indices.push(index);
          } else {
            relation.entityMetadata.ownIndices.push(index);
          }

          _this.computeEntityMetadataStep2(entityMetadata);
        }
      }); // create junction entity metadatas for entity many-to-many relations

      entityMetadata.relations.filter(function (relation) {
        return relation.isManyToMany;
      }).forEach(function (relation) {
        var joinTable = _this.metadataArgsStorage.findJoinTable(relation.target, relation.propertyName);

        if (!joinTable) return; // no join table set - no need to do anything (it means this is many-to-many inverse side)
        // here we create a junction entity metadata for a new junction table of many-to-many relation

        var junctionEntityMetadata = _this.junctionEntityMetadataBuilder.build(relation, joinTable);

        relation.registerForeignKeys.apply(relation, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](junctionEntityMetadata.foreignKeys));
        relation.registerJunctionEntityMetadata(junctionEntityMetadata); // compute new entity metadata properties and push it to entity metadatas pool

        _this.computeEntityMetadataStep2(junctionEntityMetadata);

        _this.computeInverseProperties(junctionEntityMetadata, entityMetadatas);

        entityMetadatas.push(junctionEntityMetadata);
      });
    }); // update entity metadata depend properties

    entityMetadatas.forEach(function (entityMetadata) {
      entityMetadata.relationsWithJoinColumns = entityMetadata.relations.filter(function (relation) {
        return relation.isWithJoinColumn;
      });
      entityMetadata.hasNonNullableRelations = entityMetadata.relationsWithJoinColumns.some(function (relation) {
        return !relation.isNullable || relation.isPrimary;
      });
    }); // generate closure junction tables for all closure tables

    entityMetadatas.filter(function (metadata) {
      return metadata.treeType === "closure-table";
    }).forEach(function (entityMetadata) {
      var closureJunctionEntityMetadata = _this.closureJunctionEntityMetadataBuilder.build(entityMetadata);

      entityMetadata.closureJunctionTable = closureJunctionEntityMetadata;

      _this.computeEntityMetadataStep2(closureJunctionEntityMetadata);

      _this.computeInverseProperties(closureJunctionEntityMetadata, entityMetadatas);

      entityMetadatas.push(closureJunctionEntityMetadata);
    }); // generate keys for tables with single-table inheritance

    entityMetadatas.filter(function (metadata) {
      return metadata.inheritancePattern === "STI" && metadata.discriminatorColumn;
    }).forEach(function (entityMetadata) {
      return _this.createKeysForTableInheritance(entityMetadata);
    }); // build all indices (need to do it after relations and their join columns are built)

    entityMetadatas.forEach(function (entityMetadata) {
      entityMetadata.indices.forEach(function (index) {
        return index.build(_this.connection.namingStrategy);
      });
    }); // build all unique constraints (need to do it after relations and their join columns are built)

    entityMetadatas.forEach(function (entityMetadata) {
      entityMetadata.uniques.forEach(function (unique) {
        return unique.build(_this.connection.namingStrategy);
      });
    }); // build all check constraints

    entityMetadatas.forEach(function (entityMetadata) {
      entityMetadata.checks.forEach(function (check) {
        return check.build(_this.connection.namingStrategy);
      });
    }); // build all exclusion constraints

    entityMetadatas.forEach(function (entityMetadata) {
      entityMetadata.exclusions.forEach(function (exclusion) {
        return exclusion.build(_this.connection.namingStrategy);
      });
    }); // add lazy initializer for entity relations

    entityMetadatas.filter(function (metadata) {
      return metadata.target instanceof Function;
    }).forEach(function (entityMetadata) {
      entityMetadata.relations.filter(function (relation) {
        return relation.isLazy;
      }).forEach(function (relation) {
        _this.connection.relationLoader.enableLazyLoad(relation, entityMetadata.target.prototype);
      });
    });
    entityMetadatas.forEach(function (entityMetadata) {
      entityMetadata.columns.forEach(function (column) {
        // const target = column.embeddedMetadata ? column.embeddedMetadata.type : column.target;
        var generated = _this.metadataArgsStorage.findGenerated(column.target, column.propertyName);

        if (generated) {
          column.isGenerated = true;
          column.generationStrategy = generated.strategy;

          if (generated.strategy === "uuid") {
            column.type = "uuid";
          } else if (generated.strategy === "rowid") {
            column.type = "int";
          } else {
            column.type = column.type || Number;
          }

          column.build(_this.connection);

          _this.computeEntityMetadataStep2(entityMetadata);
        }
      });
    });
    return entityMetadatas;
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Creates entity metadata from the given table args.
   * Creates column, relation, etc. metadatas for everything this entity metadata owns.
   */


  EntityMetadataBuilder.prototype.createEntityMetadata = function (tableArgs) {
    // we take all "inheritance tree" from a target entity to collect all stored metadata args
    // (by decorators or inside entity schemas). For example for target Post < ContentModel < Unit
    // it will be an array of [Post, ContentModel, Unit] and we can then get all metadata args of those classes
    var inheritanceTree = tableArgs.target instanceof Function ? _MetadataUtils__WEBPACK_IMPORTED_MODULE_10__["MetadataUtils"].getInheritanceTree(tableArgs.target) : [tableArgs.target]; // todo: implement later here inheritance for string-targets

    var tableInheritance = this.metadataArgsStorage.findInheritanceType(tableArgs.target);
    var tableTree = this.metadataArgsStorage.findTree(tableArgs.target); // if single table inheritance used, we need to copy all children columns in to parent table

    var singleTableChildrenTargets;

    if (tableInheritance && tableInheritance.pattern === "STI" || tableArgs.type === "entity-child") {
      singleTableChildrenTargets = this.metadataArgsStorage.filterSingleTableChildren(tableArgs.target).map(function (args) {
        return args.target;
      }).filter(function (target) {
        return target instanceof Function;
      });
      inheritanceTree.push.apply(inheritanceTree, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](singleTableChildrenTargets));
    }

    return new _metadata_EntityMetadata__WEBPACK_IMPORTED_MODULE_3__["EntityMetadata"]({
      connection: this.connection,
      args: tableArgs,
      inheritanceTree: inheritanceTree,
      tableTree: tableTree,
      inheritancePattern: tableInheritance ? tableInheritance.pattern : undefined
    });
  };

  EntityMetadataBuilder.prototype.computeParentEntityMetadata = function (allEntityMetadatas, entityMetadata) {
    // after all metadatas created we set parent entity metadata for table inheritance
    if (entityMetadata.tableType === "entity-child") {
      entityMetadata.parentEntityMetadata = allEntityMetadatas.find(function (allEntityMetadata) {
        return allEntityMetadata.inheritanceTree.indexOf(entityMetadata.target) !== -1 && allEntityMetadata.inheritancePattern === "STI";
      });
    }
  };

  EntityMetadataBuilder.prototype.computeEntityMetadataStep1 = function (allEntityMetadatas, entityMetadata) {
    var _this = this;

    var _a, _b, _c;

    var entityInheritance = this.metadataArgsStorage.findInheritanceType(entityMetadata.target);
    var discriminatorValue = this.metadataArgsStorage.findDiscriminatorValue(entityMetadata.target);
    entityMetadata.discriminatorValue = discriminatorValue ? discriminatorValue.value : entityMetadata.target.name; // todo: pass this to naming strategy to generate a name
    // if single table inheritance is used, we need to mark all embedded columns as nullable

    entityMetadata.embeddeds = this.createEmbeddedsRecursively(entityMetadata, this.metadataArgsStorage.filterEmbeddeds(entityMetadata.inheritanceTree)).map(function (embedded) {
      if (entityMetadata.inheritancePattern === "STI") {
        embedded.columns = embedded.columns.map(function (column) {
          column.isNullable = true;
          return column;
        });
      }

      return embedded;
    });
    entityMetadata.ownColumns = this.metadataArgsStorage.filterColumns(entityMetadata.inheritanceTree).map(function (args) {
      // for single table children we reuse columns created for their parents
      if (entityMetadata.tableType === "entity-child") return entityMetadata.parentEntityMetadata.ownColumns.find(function (column) {
        return column.propertyName === args.propertyName;
      });
      var column = new _metadata_ColumnMetadata__WEBPACK_IMPORTED_MODULE_4__["ColumnMetadata"]({
        connection: _this.connection,
        entityMetadata: entityMetadata,
        args: args
      }); // if single table inheritance used, we need to mark all inherit table columns as nullable

      var columnInSingleTableInheritedChild = allEntityMetadatas.find(function (otherEntityMetadata) {
        return otherEntityMetadata.tableType === "entity-child" && otherEntityMetadata.target === args.target;
      });
      if (columnInSingleTableInheritedChild) column.isNullable = true;
      return column;
    }); // for table inheritance we need to add a discriminator column
    //

    if (entityInheritance && entityInheritance.column) {
      var discriminatorColumnName_1 = entityInheritance.column && entityInheritance.column.name ? entityInheritance.column.name : "type";
      var discriminatorColumn = entityMetadata.ownColumns.find(function (column) {
        return column.propertyName === discriminatorColumnName_1;
      });

      if (!discriminatorColumn) {
        discriminatorColumn = new _metadata_ColumnMetadata__WEBPACK_IMPORTED_MODULE_4__["ColumnMetadata"]({
          connection: this.connection,
          entityMetadata: entityMetadata,
          args: {
            target: entityMetadata.target,
            mode: "virtual",
            propertyName: discriminatorColumnName_1,
            options: entityInheritance.column || {
              name: discriminatorColumnName_1,
              type: "varchar",
              nullable: false
            }
          }
        });
        discriminatorColumn.isVirtual = true;
        discriminatorColumn.isDiscriminator = true;
        entityMetadata.ownColumns.push(discriminatorColumn);
      } else {
        discriminatorColumn.isDiscriminator = true;
      }
    } // add discriminator column to the child entity metadatas
    // discriminator column will not be there automatically since we are creating it in the code above


    if (entityMetadata.tableType === "entity-child") {
      var discriminatorColumn_1 = entityMetadata.parentEntityMetadata.ownColumns.find(function (column) {
        return column.isDiscriminator;
      });

      if (discriminatorColumn_1 && !entityMetadata.ownColumns.find(function (column) {
        return column === discriminatorColumn_1;
      })) {
        entityMetadata.ownColumns.push(discriminatorColumn_1);
      }
    } // check if tree is used then we need to add extra columns for specific tree types


    if (entityMetadata.treeType === "materialized-path") {
      entityMetadata.ownColumns.push(new _metadata_ColumnMetadata__WEBPACK_IMPORTED_MODULE_4__["ColumnMetadata"]({
        connection: this.connection,
        entityMetadata: entityMetadata,
        materializedPath: true,
        args: {
          target: entityMetadata.target,
          mode: "virtual",
          propertyName: "mpath",
          options:
          /*tree.column || */
          {
            name: "mpath",
            type: "varchar",
            nullable: true,
            "default": ""
          }
        }
      }));
    } else if (entityMetadata.treeType === "nested-set") {
      entityMetadata.ownColumns.push(new _metadata_ColumnMetadata__WEBPACK_IMPORTED_MODULE_4__["ColumnMetadata"]({
        connection: this.connection,
        entityMetadata: entityMetadata,
        nestedSetLeft: true,
        args: {
          target: entityMetadata.target,
          mode: "virtual",
          propertyName: "nsleft",
          options:
          /*tree.column || */
          {
            name: "nsleft",
            type: "integer",
            nullable: false,
            "default": 1
          }
        }
      }));
      entityMetadata.ownColumns.push(new _metadata_ColumnMetadata__WEBPACK_IMPORTED_MODULE_4__["ColumnMetadata"]({
        connection: this.connection,
        entityMetadata: entityMetadata,
        nestedSetRight: true,
        args: {
          target: entityMetadata.target,
          mode: "virtual",
          propertyName: "nsright",
          options:
          /*tree.column || */
          {
            name: "nsright",
            type: "integer",
            nullable: false,
            "default": 2
          }
        }
      }));
    }

    entityMetadata.ownRelations = this.metadataArgsStorage.filterRelations(entityMetadata.inheritanceTree).map(function (args) {
      // for single table children we reuse relations created for their parents
      if (entityMetadata.tableType === "entity-child") return entityMetadata.parentEntityMetadata.ownRelations.find(function (relation) {
        return relation.propertyName === args.propertyName;
      });
      return new _metadata_RelationMetadata__WEBPACK_IMPORTED_MODULE_6__["RelationMetadata"]({
        entityMetadata: entityMetadata,
        args: args
      });
    });
    entityMetadata.relationIds = this.metadataArgsStorage.filterRelationIds(entityMetadata.inheritanceTree).map(function (args) {
      // for single table children we reuse relation ids created for their parents
      if (entityMetadata.tableType === "entity-child") return entityMetadata.parentEntityMetadata.relationIds.find(function (relationId) {
        return relationId.propertyName === args.propertyName;
      });
      return new _metadata_RelationIdMetadata__WEBPACK_IMPORTED_MODULE_8__["RelationIdMetadata"]({
        entityMetadata: entityMetadata,
        args: args
      });
    });
    entityMetadata.relationCounts = this.metadataArgsStorage.filterRelationCounts(entityMetadata.inheritanceTree).map(function (args) {
      // for single table children we reuse relation counts created for their parents
      if (entityMetadata.tableType === "entity-child") return entityMetadata.parentEntityMetadata.relationCounts.find(function (relationCount) {
        return relationCount.propertyName === args.propertyName;
      });
      return new _metadata_RelationCountMetadata__WEBPACK_IMPORTED_MODULE_9__["RelationCountMetadata"]({
        entityMetadata: entityMetadata,
        args: args
      });
    });
    entityMetadata.ownListeners = this.metadataArgsStorage.filterListeners(entityMetadata.inheritanceTree).map(function (args) {
      return new _metadata_EntityListenerMetadata__WEBPACK_IMPORTED_MODULE_14__["EntityListenerMetadata"]({
        entityMetadata: entityMetadata,
        args: args
      });
    });
    entityMetadata.checks = this.metadataArgsStorage.filterChecks(entityMetadata.inheritanceTree).map(function (args) {
      return new _metadata_CheckMetadata__WEBPACK_IMPORTED_MODULE_16__["CheckMetadata"]({
        entityMetadata: entityMetadata,
        args: args
      });
    }); // Only PostgreSQL supports exclusion constraints.

    if (this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["PostgresDriver"]) {
      entityMetadata.exclusions = this.metadataArgsStorage.filterExclusions(entityMetadata.inheritanceTree).map(function (args) {
        return new _metadata_ExclusionMetadata__WEBPACK_IMPORTED_MODULE_17__["ExclusionMetadata"]({
          entityMetadata: entityMetadata,
          args: args
        });
      });
    }

    if (this.connection.driver instanceof _driver_cockroachdb_CockroachDriver__WEBPACK_IMPORTED_MODULE_1__["CockroachDriver"]) {
      entityMetadata.ownIndices = this.metadataArgsStorage.filterIndices(entityMetadata.inheritanceTree).filter(function (args) {
        return !args.unique;
      }).map(function (args) {
        return new _metadata_IndexMetadata__WEBPACK_IMPORTED_MODULE_5__["IndexMetadata"]({
          entityMetadata: entityMetadata,
          args: args
        });
      });
      var uniques = this.metadataArgsStorage.filterIndices(entityMetadata.inheritanceTree).filter(function (args) {
        return args.unique;
      }).map(function (args) {
        return new _metadata_UniqueMetadata__WEBPACK_IMPORTED_MODULE_15__["UniqueMetadata"]({
          entityMetadata: entityMetadata,
          args: {
            target: args.target,
            name: args.name,
            columns: args.columns
          }
        });
      });

      (_a = entityMetadata.ownUniques).push.apply(_a, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](uniques));
    } else {
      entityMetadata.ownIndices = this.metadataArgsStorage.filterIndices(entityMetadata.inheritanceTree).map(function (args) {
        return new _metadata_IndexMetadata__WEBPACK_IMPORTED_MODULE_5__["IndexMetadata"]({
          entityMetadata: entityMetadata,
          args: args
        });
      });
    } // Mysql and SAP HANA stores unique constraints as unique indices.


    if (this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["MysqlDriver"] || this.connection.driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_18__["AuroraDataApiDriver"] || this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["SapDriver"]) {
      var indices = this.metadataArgsStorage.filterUniques(entityMetadata.inheritanceTree).map(function (args) {
        return new _metadata_IndexMetadata__WEBPACK_IMPORTED_MODULE_5__["IndexMetadata"]({
          entityMetadata: entityMetadata,
          args: {
            target: args.target,
            name: args.name,
            columns: args.columns,
            unique: true,
            synchronize: true
          }
        });
      });

      (_b = entityMetadata.ownIndices).push.apply(_b, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](indices));
    } else {
      var uniques = this.metadataArgsStorage.filterUniques(entityMetadata.inheritanceTree).map(function (args) {
        return new _metadata_UniqueMetadata__WEBPACK_IMPORTED_MODULE_15__["UniqueMetadata"]({
          entityMetadata: entityMetadata,
          args: args
        });
      });

      (_c = entityMetadata.ownUniques).push.apply(_c, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](uniques));
    }
  };
  /**
   * Creates from the given embedded metadata args real embedded metadatas with its columns and relations,
   * and does the same for all its sub-embeddeds (goes recursively).
   */


  EntityMetadataBuilder.prototype.createEmbeddedsRecursively = function (entityMetadata, embeddedArgs) {
    var _this = this;

    return embeddedArgs.map(function (embeddedArgs) {
      var embeddedMetadata = new _metadata_EmbeddedMetadata__WEBPACK_IMPORTED_MODULE_7__["EmbeddedMetadata"]({
        entityMetadata: entityMetadata,
        args: embeddedArgs
      });
      var targets = _MetadataUtils__WEBPACK_IMPORTED_MODULE_10__["MetadataUtils"].getInheritanceTree(embeddedMetadata.type);
      embeddedMetadata.columns = _this.metadataArgsStorage.filterColumns(targets).map(function (args) {
        return new _metadata_ColumnMetadata__WEBPACK_IMPORTED_MODULE_4__["ColumnMetadata"]({
          connection: _this.connection,
          entityMetadata: entityMetadata,
          embeddedMetadata: embeddedMetadata,
          args: args
        });
      });
      embeddedMetadata.relations = _this.metadataArgsStorage.filterRelations(targets).map(function (args) {
        return new _metadata_RelationMetadata__WEBPACK_IMPORTED_MODULE_6__["RelationMetadata"]({
          entityMetadata: entityMetadata,
          embeddedMetadata: embeddedMetadata,
          args: args
        });
      });
      embeddedMetadata.listeners = _this.metadataArgsStorage.filterListeners(targets).map(function (args) {
        return new _metadata_EntityListenerMetadata__WEBPACK_IMPORTED_MODULE_14__["EntityListenerMetadata"]({
          entityMetadata: entityMetadata,
          embeddedMetadata: embeddedMetadata,
          args: args
        });
      });
      embeddedMetadata.indices = _this.metadataArgsStorage.filterIndices(targets).map(function (args) {
        return new _metadata_IndexMetadata__WEBPACK_IMPORTED_MODULE_5__["IndexMetadata"]({
          entityMetadata: entityMetadata,
          embeddedMetadata: embeddedMetadata,
          args: args
        });
      });
      embeddedMetadata.uniques = _this.metadataArgsStorage.filterUniques(targets).map(function (args) {
        return new _metadata_UniqueMetadata__WEBPACK_IMPORTED_MODULE_15__["UniqueMetadata"]({
          entityMetadata: entityMetadata,
          embeddedMetadata: embeddedMetadata,
          args: args
        });
      });
      embeddedMetadata.relationIds = _this.metadataArgsStorage.filterRelationIds(targets).map(function (args) {
        return new _metadata_RelationIdMetadata__WEBPACK_IMPORTED_MODULE_8__["RelationIdMetadata"]({
          entityMetadata: entityMetadata,
          args: args
        });
      });
      embeddedMetadata.relationCounts = _this.metadataArgsStorage.filterRelationCounts(targets).map(function (args) {
        return new _metadata_RelationCountMetadata__WEBPACK_IMPORTED_MODULE_9__["RelationCountMetadata"]({
          entityMetadata: entityMetadata,
          args: args
        });
      });
      embeddedMetadata.embeddeds = _this.createEmbeddedsRecursively(entityMetadata, _this.metadataArgsStorage.filterEmbeddeds(targets));
      embeddedMetadata.embeddeds.forEach(function (subEmbedded) {
        return subEmbedded.parentEmbeddedMetadata = embeddedMetadata;
      });
      entityMetadata.allEmbeddeds.push(embeddedMetadata);
      return embeddedMetadata;
    });
  };
  /**
   * Computes all entity metadata's computed properties, and all its sub-metadatas (relations, columns, embeds, etc).
   */


  EntityMetadataBuilder.prototype.computeEntityMetadataStep2 = function (entityMetadata) {
    var _this = this;

    entityMetadata.embeddeds.forEach(function (embedded) {
      return embedded.build(_this.connection);
    });
    entityMetadata.embeddeds.forEach(function (embedded) {
      embedded.columnsFromTree.forEach(function (column) {
        return column.build(_this.connection);
      });
      embedded.relationsFromTree.forEach(function (relation) {
        return relation.build();
      });
    });
    entityMetadata.ownColumns.forEach(function (column) {
      return column.build(_this.connection);
    });
    entityMetadata.ownRelations.forEach(function (relation) {
      return relation.build();
    });
    entityMetadata.relations = entityMetadata.embeddeds.reduce(function (relations, embedded) {
      return relations.concat(embedded.relationsFromTree);
    }, entityMetadata.ownRelations);
    entityMetadata.eagerRelations = entityMetadata.relations.filter(function (relation) {
      return relation.isEager;
    });
    entityMetadata.lazyRelations = entityMetadata.relations.filter(function (relation) {
      return relation.isLazy;
    });
    entityMetadata.oneToOneRelations = entityMetadata.relations.filter(function (relation) {
      return relation.isOneToOne;
    });
    entityMetadata.oneToManyRelations = entityMetadata.relations.filter(function (relation) {
      return relation.isOneToMany;
    });
    entityMetadata.manyToOneRelations = entityMetadata.relations.filter(function (relation) {
      return relation.isManyToOne;
    });
    entityMetadata.manyToManyRelations = entityMetadata.relations.filter(function (relation) {
      return relation.isManyToMany;
    });
    entityMetadata.ownerOneToOneRelations = entityMetadata.relations.filter(function (relation) {
      return relation.isOneToOneOwner;
    });
    entityMetadata.ownerManyToManyRelations = entityMetadata.relations.filter(function (relation) {
      return relation.isManyToManyOwner;
    });
    entityMetadata.treeParentRelation = entityMetadata.relations.find(function (relation) {
      return relation.isTreeParent;
    });
    entityMetadata.treeChildrenRelation = entityMetadata.relations.find(function (relation) {
      return relation.isTreeChildren;
    });
    entityMetadata.columns = entityMetadata.embeddeds.reduce(function (columns, embedded) {
      return columns.concat(embedded.columnsFromTree);
    }, entityMetadata.ownColumns);
    entityMetadata.listeners = entityMetadata.embeddeds.reduce(function (columns, embedded) {
      return columns.concat(embedded.listenersFromTree);
    }, entityMetadata.ownListeners);
    entityMetadata.afterLoadListeners = entityMetadata.listeners.filter(function (listener) {
      return listener.type === "after-load";
    });
    entityMetadata.afterInsertListeners = entityMetadata.listeners.filter(function (listener) {
      return listener.type === "after-insert";
    });
    entityMetadata.afterUpdateListeners = entityMetadata.listeners.filter(function (listener) {
      return listener.type === "after-update";
    });
    entityMetadata.afterRemoveListeners = entityMetadata.listeners.filter(function (listener) {
      return listener.type === "after-remove";
    });
    entityMetadata.beforeInsertListeners = entityMetadata.listeners.filter(function (listener) {
      return listener.type === "before-insert";
    });
    entityMetadata.beforeUpdateListeners = entityMetadata.listeners.filter(function (listener) {
      return listener.type === "before-update";
    });
    entityMetadata.beforeRemoveListeners = entityMetadata.listeners.filter(function (listener) {
      return listener.type === "before-remove";
    });
    entityMetadata.indices = entityMetadata.embeddeds.reduce(function (columns, embedded) {
      return columns.concat(embedded.indicesFromTree);
    }, entityMetadata.ownIndices);
    entityMetadata.uniques = entityMetadata.embeddeds.reduce(function (columns, embedded) {
      return columns.concat(embedded.uniquesFromTree);
    }, entityMetadata.ownUniques);
    entityMetadata.primaryColumns = entityMetadata.columns.filter(function (column) {
      return column.isPrimary;
    });
    entityMetadata.nonVirtualColumns = entityMetadata.columns.filter(function (column) {
      return !column.isVirtual;
    });
    entityMetadata.ancestorColumns = entityMetadata.columns.filter(function (column) {
      return column.closureType === "ancestor";
    });
    entityMetadata.descendantColumns = entityMetadata.columns.filter(function (column) {
      return column.closureType === "descendant";
    });
    entityMetadata.hasMultiplePrimaryKeys = entityMetadata.primaryColumns.length > 1;
    entityMetadata.generatedColumns = entityMetadata.columns.filter(function (column) {
      return column.isGenerated || column.isObjectId;
    });
    entityMetadata.hasUUIDGeneratedColumns = entityMetadata.columns.filter(function (column) {
      return column.isGenerated || column.generationStrategy === "uuid";
    }).length > 0;
    entityMetadata.createDateColumn = entityMetadata.columns.find(function (column) {
      return column.isCreateDate;
    });
    entityMetadata.updateDateColumn = entityMetadata.columns.find(function (column) {
      return column.isUpdateDate;
    });
    entityMetadata.deleteDateColumn = entityMetadata.columns.find(function (column) {
      return column.isDeleteDate;
    });
    entityMetadata.versionColumn = entityMetadata.columns.find(function (column) {
      return column.isVersion;
    });
    entityMetadata.discriminatorColumn = entityMetadata.columns.find(function (column) {
      return column.isDiscriminator;
    });
    entityMetadata.treeLevelColumn = entityMetadata.columns.find(function (column) {
      return column.isTreeLevel;
    });
    entityMetadata.nestedSetLeftColumn = entityMetadata.columns.find(function (column) {
      return column.isNestedSetLeft;
    });
    entityMetadata.nestedSetRightColumn = entityMetadata.columns.find(function (column) {
      return column.isNestedSetRight;
    });
    entityMetadata.materializedPathColumn = entityMetadata.columns.find(function (column) {
      return column.isMaterializedPath;
    });
    entityMetadata.objectIdColumn = entityMetadata.columns.find(function (column) {
      return column.isObjectId;
    });
    entityMetadata.foreignKeys.forEach(function (foreignKey) {
      return foreignKey.build(_this.connection.namingStrategy);
    });
    entityMetadata.propertiesMap = entityMetadata.createPropertiesMap();
    entityMetadata.relationIds.forEach(function (relationId) {
      return relationId.build();
    });
    entityMetadata.relationCounts.forEach(function (relationCount) {
      return relationCount.build();
    });
    entityMetadata.embeddeds.forEach(function (embedded) {
      embedded.relationIdsFromTree.forEach(function (relationId) {
        return relationId.build();
      });
      embedded.relationCountsFromTree.forEach(function (relationCount) {
        return relationCount.build();
      });
    });
  };
  /**
   * Computes entity metadata's relations inverse side properties.
   */


  EntityMetadataBuilder.prototype.computeInverseProperties = function (entityMetadata, entityMetadatas) {
    entityMetadata.relations.forEach(function (relation) {
      // compute inverse side (related) entity metadatas for all relation metadatas
      var inverseEntityMetadata = entityMetadatas.find(function (m) {
        return m.target === relation.type || typeof relation.type === "string" && m.targetName === relation.type;
      });
      if (!inverseEntityMetadata) throw new Error("Entity metadata for " + entityMetadata.name + "#" + relation.propertyPath + " was not found. Check if you specified a correct entity object and if it's connected in the connection options.");
      relation.inverseEntityMetadata = inverseEntityMetadata;
      relation.inverseSidePropertyPath = relation.buildInverseSidePropertyPath(); // and compute inverse relation and mark if it has such

      relation.inverseRelation = inverseEntityMetadata.relations.find(function (foundRelation) {
        return foundRelation.propertyPath === relation.inverseSidePropertyPath;
      });
    });
  };
  /**
   * Creates indices for the table of single table inheritance.
   */


  EntityMetadataBuilder.prototype.createKeysForTableInheritance = function (entityMetadata) {
    entityMetadata.indices.push(new _metadata_IndexMetadata__WEBPACK_IMPORTED_MODULE_5__["IndexMetadata"]({
      entityMetadata: entityMetadata,
      columns: [entityMetadata.discriminatorColumn],
      args: {
        target: entityMetadata.target,
        unique: false
      }
    }));
  };

  return EntityMetadataBuilder;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/metadata-builder/EntityMetadataValidator.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/typeorm/browser/metadata-builder/EntityMetadataValidator.js ***!
  \**********************************************************************************/
/*! exports provided: EntityMetadataValidator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntityMetadataValidator", function() { return EntityMetadataValidator; });
/* harmony import */ var _error_MissingPrimaryColumnError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/MissingPrimaryColumnError */ "./node_modules/typeorm/browser/error/MissingPrimaryColumnError.js");
/* harmony import */ var _error_CircularRelationsError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/CircularRelationsError */ "./node_modules/typeorm/browser/error/CircularRelationsError.js");
/* harmony import */ var _util_DepGraph__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/DepGraph */ "./node_modules/typeorm/browser/util/DepGraph.js");
/* harmony import */ var _error_DataTypeNotSupportedError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/DataTypeNotSupportedError */ "./node_modules/typeorm/browser/error/DataTypeNotSupportedError.js");
/* harmony import */ var _driver_mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../driver/mongodb/MongoDriver */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");
/* harmony import */ var _error_NoConnectionOptionError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/NoConnectionOptionError */ "./node_modules/typeorm/browser/error/NoConnectionOptionError.js");
/* harmony import */ var _error_InitializedRelationError__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../error/InitializedRelationError */ "./node_modules/typeorm/browser/error/InitializedRelationError.js");
/* harmony import */ var _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../driver/aurora-data-api/AuroraDataApiDriver */ "./node_modules/typeorm/browser/driver/aurora-data-api/AuroraDataApiDriver.js");









 /// todo: add check if there are multiple tables with the same name
/// todo: add checks when generated column / table names are too long for the specific driver
// todo: type in function validation, inverse side function validation
// todo: check on build for duplicate names, since naming checking was removed from MetadataStorage
// todo: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?
// todo: check if multiple tree parent metadatas in validator
// todo: tree decorators can be used only on closure table (validation)
// todo: throw error if parent tree metadata was not specified in a closure table
// todo: MetadataArgsStorage: type in function validation, inverse side function validation
// todo: MetadataArgsStorage: check on build for duplicate names, since naming checking was removed from MetadataStorage
// todo: MetadataArgsStorage: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?
// todo: MetadataArgsStorage: check for duplicate targets too since this check has been removed too
// todo: check if relation decorator contains primary: true and nullable: true
// todo: check column length, precision. scale
// todo: MySQL index can be unique or spatial or fulltext

/**
 * Validates built entity metadatas.
 */

var EntityMetadataValidator =
/** @class */
function () {
  function EntityMetadataValidator() {} // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Validates all given entity metadatas.
   */


  EntityMetadataValidator.prototype.validateMany = function (entityMetadatas, driver) {
    var _this = this;

    entityMetadatas.forEach(function (entityMetadata) {
      return _this.validate(entityMetadata, entityMetadatas, driver);
    });
    this.validateDependencies(entityMetadatas);
    this.validateEagerRelations(entityMetadatas);
  };
  /**
   * Validates given entity metadata.
   */


  EntityMetadataValidator.prototype.validate = function (entityMetadata, allEntityMetadatas, driver) {
    // check if table metadata has an id
    if (!entityMetadata.primaryColumns.length && !entityMetadata.isJunction) throw new _error_MissingPrimaryColumnError__WEBPACK_IMPORTED_MODULE_0__["MissingPrimaryColumnError"](entityMetadata); // validate if table is using inheritance it has a discriminator
    // also validate if discriminator values are not empty and not repeated

    if (entityMetadata.inheritancePattern === "STI") {
      if (!entityMetadata.discriminatorColumn) throw new Error("Entity " + entityMetadata.name + " using single-table inheritance, it should also have a discriminator column. Did you forget to put discriminator column options?");
      if (["", undefined, null].indexOf(entityMetadata.discriminatorValue) !== -1) throw new Error("Entity " + entityMetadata.name + " has empty discriminator value. Discriminator value should not be empty.");
      var sameDiscriminatorValueEntityMetadata = allEntityMetadatas.find(function (metadata) {
        return metadata !== entityMetadata && metadata.discriminatorValue === entityMetadata.discriminatorValue;
      });
      if (sameDiscriminatorValueEntityMetadata) throw new Error("Entities " + entityMetadata.name + " and " + sameDiscriminatorValueEntityMetadata.name + " as equal discriminator values. Make sure their discriminator values are not equal using @DiscriminatorValue decorator.");
    }

    entityMetadata.relationCounts.forEach(function (relationCount) {
      if (relationCount.relation.isManyToOne || relationCount.relation.isOneToOne) throw new Error("Relation count can not be implemented on ManyToOne or OneToOne relations.");
    });

    if (!(driver instanceof _driver_mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_4__["MongoDriver"])) {
      entityMetadata.columns.forEach(function (column) {
        var normalizedColumn = driver.normalizeType(column);
        if (driver.supportedDataTypes.indexOf(normalizedColumn) === -1) throw new _error_DataTypeNotSupportedError__WEBPACK_IMPORTED_MODULE_3__["DataTypeNotSupportedError"](column, normalizedColumn, driver.options.type);
        if (column.length && driver.withLengthColumnTypes.indexOf(normalizedColumn) === -1) throw new Error("Column " + column.propertyName + " of Entity " + entityMetadata.name + " does not support length property.");
      });
    }

    if (driver instanceof _driver_mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_4__["MysqlDriver"] || driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_7__["AuroraDataApiDriver"]) {
      var generatedColumns = entityMetadata.columns.filter(function (column) {
        return column.isGenerated && column.generationStrategy !== "uuid";
      });
      if (generatedColumns.length > 1) throw new Error("Error in " + entityMetadata.name + " entity. There can be only one auto-increment column in MySql table.");
    } // for mysql we are able to not define a default selected database, instead all entities can have their database
    // defined in their decorators. To make everything work either all entities must have database define and we
    // can live without database set in the connection options, either database in the connection options must be set


    if (driver instanceof _driver_mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_4__["MysqlDriver"]) {
      var metadatasWithDatabase = allEntityMetadatas.filter(function (metadata) {
        return metadata.database;
      });
      if (metadatasWithDatabase.length === 0 && !driver.database) throw new _error_NoConnectionOptionError__WEBPACK_IMPORTED_MODULE_5__["NoConnectionOptionError"]("database");
    }

    if (driver instanceof _driver_mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_4__["SqlServerDriver"]) {
      var charsetColumns = entityMetadata.columns.filter(function (column) {
        return column.charset;
      });
      if (charsetColumns.length > 1) throw new Error("Character set specifying is not supported in Sql Server");
    } // check if relations are all without initialized properties


    var entityInstance = entityMetadata.create();
    entityMetadata.relations.forEach(function (relation) {
      if (relation.isManyToMany || relation.isOneToMany) {
        // we skip relations for which persistence is disabled since initialization in them cannot harm somehow
        if (relation.persistenceEnabled === false) return; // get entity relation value and check if its an array

        var relationInitializedValue = relation.getEntityValue(entityInstance);
        if (Array.isArray(relationInitializedValue)) throw new _error_InitializedRelationError__WEBPACK_IMPORTED_MODULE_6__["InitializedRelationError"](relation);
      }
    }); // validate relations

    entityMetadata.relations.forEach(function (relation) {// check join tables:
      // using JoinTable is possible only on one side of the many-to-many relation
      // todo(dima): fix
      // if (relation.joinTable) {
      //     if (!relation.isManyToMany)
      //         throw new UsingJoinTableIsNotAllowedError(entityMetadata, relation);
      //     // if there is inverse side of the relation, then check if it does not have join table too
      //     if (relation.hasInverseSide && relation.inverseRelation.joinTable)
      //         throw new UsingJoinTableOnlyOnOneSideAllowedError(entityMetadata, relation);
      // }
      // check join columns:
      // using JoinColumn is possible only on one side of the relation and on one-to-one, many-to-one relation types
      // first check if relation is one-to-one or many-to-one
      // todo(dima): fix

      /*if (relation.joinColumn) {
           // join column can be applied only on one-to-one and many-to-one relations
          if (!relation.isOneToOne && !relation.isManyToOne)
              throw new UsingJoinColumnIsNotAllowedError(entityMetadata, relation);
           // if there is inverse side of the relation, then check if it does not have join table too
          if (relation.hasInverseSide && relation.inverseRelation.joinColumn && relation.isOneToOne)
              throw new UsingJoinColumnOnlyOnOneSideAllowedError(entityMetadata, relation);
           // check if join column really has referenced column
          if (relation.joinColumn && !relation.joinColumn.referencedColumn)
              throw new Error(`Join column does not have referenced column set`);
       }
       // if its a one-to-one relation and JoinColumn is missing on both sides of the relation
      // or its one-side relation without JoinColumn we should give an error
      if (!relation.joinColumn && relation.isOneToOne && (!relation.hasInverseSide || !relation.inverseRelation.joinColumn))
          throw new MissingJoinColumnError(entityMetadata, relation);*/
      // if its a many-to-many relation and JoinTable is missing on both sides of the relation
      // or its one-side relation without JoinTable we should give an error
      // todo(dima): fix it
      // if (!relation.joinTable && relation.isManyToMany && (!relation.hasInverseSide || !relation.inverseRelation.joinTable))
      //     throw new MissingJoinTableError(entityMetadata, relation);
      // todo: validate if its one-to-one and side which does not have join column MUST have inverse side
      // todo: validate if its many-to-many and side which does not have join table MUST have inverse side
      // todo: if there is a relation, and inverse side is specified only on one side, shall we give error
      // todo: with message like: "Inverse side is specified only on one side of the relationship. Specify on other side too to prevent confusion".
      // todo: add validation if there two entities with the same target, and show error message with description of the problem (maybe file was renamed/moved but left in output directory)
      // todo: check if there are multiple columns on the same column applied.
      // todo: check column type if is missing in relational databases (throw new Error(`Column type of ${type} cannot be determined.`);)
      // todo: include driver-specific checks. for example in mongodb empty prefixes are not allowed
      // todo: if multiple columns with same name - throw exception, including cases when columns are in embeds with same prefixes or without prefix at all
      // todo: if multiple primary key used, at least one of them must be unique or @Index decorator must be set on entity
      // todo: check if entity with duplicate names, some decorators exist
    }); // make sure cascade remove is not set for both sides of relationships (can be set in OneToOne decorators)

    entityMetadata.relations.forEach(function (relation) {
      var isCircularCascadeRemove = relation.isCascadeRemove && relation.inverseRelation && relation.inverseRelation.isCascadeRemove;
      if (isCircularCascadeRemove) throw new Error("Relation " + entityMetadata.name + "#" + relation.propertyName + " and " + relation.inverseRelation.entityMetadata.name + "#" + relation.inverseRelation.propertyName + " both has cascade remove set. " + "This may lead to unexpected circular removals. Please set cascade remove only from one side of relationship.");
    }); // todo: maybe better just deny removal from one to one relation without join column?

    entityMetadata.eagerRelations.forEach(function (relation) {});
  };
  /**
   * Validates dependencies of the entity metadatas.
   */


  EntityMetadataValidator.prototype.validateDependencies = function (entityMetadatas) {
    var graph = new _util_DepGraph__WEBPACK_IMPORTED_MODULE_2__["DepGraph"]();
    entityMetadatas.forEach(function (entityMetadata) {
      graph.addNode(entityMetadata.name);
    });
    entityMetadatas.forEach(function (entityMetadata) {
      entityMetadata.relationsWithJoinColumns.filter(function (relation) {
        return !relation.isNullable;
      }).forEach(function (relation) {
        graph.addDependency(entityMetadata.name, relation.inverseEntityMetadata.name);
      });
    });

    try {
      graph.overallOrder();
    } catch (err) {
      throw new _error_CircularRelationsError__WEBPACK_IMPORTED_MODULE_1__["CircularRelationsError"](err.toString().replace("Error: Dependency Cycle Found: ", ""));
    }
  };
  /**
   * Validates eager relations to prevent circular dependency in them.
   */


  EntityMetadataValidator.prototype.validateEagerRelations = function (entityMetadatas) {
    entityMetadatas.forEach(function (entityMetadata) {
      entityMetadata.eagerRelations.forEach(function (relation) {
        if (relation.inverseRelation && relation.inverseRelation.isEager) throw new Error("Circular eager relations are disallowed. " + (entityMetadata.targetName + "#" + relation.propertyPath + " contains \"eager: true\", and its inverse side ") + (relation.inverseEntityMetadata.targetName + "#" + relation.inverseRelation.propertyPath + " contains \"eager: true\" as well.") + " Remove \"eager: true\" from one side of the relation.");
      });
    });
  };

  return EntityMetadataValidator;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/metadata-builder/JunctionEntityMetadataBuilder.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/metadata-builder/JunctionEntityMetadataBuilder.js ***!
  \****************************************************************************************/
/*! exports provided: JunctionEntityMetadataBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JunctionEntityMetadataBuilder", function() { return JunctionEntityMetadataBuilder; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _driver_mysql_MysqlDriver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../driver/mysql/MysqlDriver */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");
/* harmony import */ var _metadata_ColumnMetadata__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../metadata/ColumnMetadata */ "./node_modules/typeorm/browser/metadata/ColumnMetadata.js");
/* harmony import */ var _metadata_EntityMetadata__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../metadata/EntityMetadata */ "./node_modules/typeorm/browser/metadata/EntityMetadata.js");
/* harmony import */ var _metadata_ForeignKeyMetadata__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../metadata/ForeignKeyMetadata */ "./node_modules/typeorm/browser/metadata/ForeignKeyMetadata.js");
/* harmony import */ var _metadata_IndexMetadata__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../metadata/IndexMetadata */ "./node_modules/typeorm/browser/metadata/IndexMetadata.js");
/* harmony import */ var _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../driver/aurora-data-api/AuroraDataApiDriver */ "./node_modules/typeorm/browser/driver/aurora-data-api/AuroraDataApiDriver.js");







/**
 * Creates EntityMetadata for junction tables.
 * Junction tables are tables generated by many-to-many relations.
 */

var JunctionEntityMetadataBuilder =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function JunctionEntityMetadataBuilder(connection) {
    this.connection = connection;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Builds EntityMetadata for the junction of the given many-to-many relation.
   */


  JunctionEntityMetadataBuilder.prototype.build = function (relation, joinTable) {
    var _this = this;

    var referencedColumns = this.collectReferencedColumns(relation, joinTable);
    var inverseReferencedColumns = this.collectInverseReferencedColumns(relation, joinTable);
    var joinTableName = joinTable.name || this.connection.namingStrategy.joinTableName(relation.entityMetadata.tableNameWithoutPrefix, relation.inverseEntityMetadata.tableNameWithoutPrefix, relation.propertyPath, relation.inverseRelation ? relation.inverseRelation.propertyName : "");
    var entityMetadata = new _metadata_EntityMetadata__WEBPACK_IMPORTED_MODULE_3__["EntityMetadata"]({
      connection: this.connection,
      args: {
        target: "",
        name: joinTableName,
        type: "junction",
        database: joinTable.database || relation.entityMetadata.database,
        schema: joinTable.schema || relation.entityMetadata.schema
      }
    });
    entityMetadata.build(); // create original side junction columns

    var junctionColumns = referencedColumns.map(function (referencedColumn) {
      var joinColumn = joinTable.joinColumns ? joinTable.joinColumns.find(function (joinColumnArgs) {
        return (!joinColumnArgs.referencedColumnName || joinColumnArgs.referencedColumnName === referencedColumn.propertyName) && !!joinColumnArgs.name;
      }) : undefined;
      var columnName = joinColumn && joinColumn.name ? joinColumn.name : _this.connection.namingStrategy.joinTableColumnName(relation.entityMetadata.tableNameWithoutPrefix, referencedColumn.propertyName, referencedColumn.databaseName);
      return new _metadata_ColumnMetadata__WEBPACK_IMPORTED_MODULE_2__["ColumnMetadata"]({
        connection: _this.connection,
        entityMetadata: entityMetadata,
        referencedColumn: referencedColumn,
        args: {
          target: "",
          mode: "virtual",
          propertyName: columnName,
          options: {
            name: columnName,
            length: !referencedColumn.length && (_this.connection.driver instanceof _driver_mysql_MysqlDriver__WEBPACK_IMPORTED_MODULE_1__["MysqlDriver"] || _this.connection.driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_6__["AuroraDataApiDriver"]) && (referencedColumn.generationStrategy === "uuid" || referencedColumn.type === "uuid") ? "36" : referencedColumn.length,
            width: referencedColumn.width,
            type: referencedColumn.type,
            precision: referencedColumn.precision,
            scale: referencedColumn.scale,
            charset: referencedColumn.charset,
            collation: referencedColumn.collation,
            zerofill: referencedColumn.zerofill,
            unsigned: referencedColumn.zerofill ? true : referencedColumn.unsigned,
            nullable: false,
            primary: true
          }
        }
      });
    }); // create inverse side junction columns

    var inverseJunctionColumns = inverseReferencedColumns.map(function (inverseReferencedColumn) {
      var joinColumn = joinTable.inverseJoinColumns ? joinTable.inverseJoinColumns.find(function (joinColumnArgs) {
        return (!joinColumnArgs.referencedColumnName || joinColumnArgs.referencedColumnName === inverseReferencedColumn.propertyName) && !!joinColumnArgs.name;
      }) : undefined;
      var columnName = joinColumn && joinColumn.name ? joinColumn.name : _this.connection.namingStrategy.joinTableInverseColumnName(relation.inverseEntityMetadata.tableNameWithoutPrefix, inverseReferencedColumn.propertyName, inverseReferencedColumn.databaseName);
      return new _metadata_ColumnMetadata__WEBPACK_IMPORTED_MODULE_2__["ColumnMetadata"]({
        connection: _this.connection,
        entityMetadata: entityMetadata,
        referencedColumn: inverseReferencedColumn,
        args: {
          target: "",
          mode: "virtual",
          propertyName: columnName,
          options: {
            length: !inverseReferencedColumn.length && (_this.connection.driver instanceof _driver_mysql_MysqlDriver__WEBPACK_IMPORTED_MODULE_1__["MysqlDriver"] || _this.connection.driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_6__["AuroraDataApiDriver"]) && (inverseReferencedColumn.generationStrategy === "uuid" || inverseReferencedColumn.type === "uuid") ? "36" : inverseReferencedColumn.length,
            type: inverseReferencedColumn.type,
            precision: inverseReferencedColumn.precision,
            scale: inverseReferencedColumn.scale,
            charset: inverseReferencedColumn.charset,
            collation: inverseReferencedColumn.collation,
            zerofill: inverseReferencedColumn.zerofill,
            unsigned: inverseReferencedColumn.zerofill ? true : inverseReferencedColumn.unsigned,
            name: columnName,
            nullable: false,
            primary: true
          }
        }
      });
    });
    this.changeDuplicatedColumnNames(junctionColumns, inverseJunctionColumns); // set junction table columns

    entityMetadata.ownerColumns = junctionColumns;
    entityMetadata.inverseColumns = inverseJunctionColumns;
    entityMetadata.ownColumns = tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](junctionColumns, inverseJunctionColumns);
    entityMetadata.ownColumns.forEach(function (column) {
      return column.relationMetadata = relation;
    }); // create junction table foreign keys

    entityMetadata.foreignKeys = [new _metadata_ForeignKeyMetadata__WEBPACK_IMPORTED_MODULE_4__["ForeignKeyMetadata"]({
      entityMetadata: entityMetadata,
      referencedEntityMetadata: relation.entityMetadata,
      columns: junctionColumns,
      referencedColumns: referencedColumns,
      onDelete: relation.onDelete || "CASCADE"
    }), new _metadata_ForeignKeyMetadata__WEBPACK_IMPORTED_MODULE_4__["ForeignKeyMetadata"]({
      entityMetadata: entityMetadata,
      referencedEntityMetadata: relation.inverseEntityMetadata,
      columns: inverseJunctionColumns,
      referencedColumns: inverseReferencedColumns,
      onDelete: relation.onDelete || "CASCADE"
    })]; // create junction table indices

    entityMetadata.ownIndices = [new _metadata_IndexMetadata__WEBPACK_IMPORTED_MODULE_5__["IndexMetadata"]({
      entityMetadata: entityMetadata,
      columns: junctionColumns,
      args: {
        target: entityMetadata.target,
        synchronize: true
      }
    }), new _metadata_IndexMetadata__WEBPACK_IMPORTED_MODULE_5__["IndexMetadata"]({
      entityMetadata: entityMetadata,
      columns: inverseJunctionColumns,
      args: {
        target: entityMetadata.target,
        synchronize: true
      }
    })]; // finally return entity metadata

    return entityMetadata;
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Collects referenced columns from the given join column args.
   */


  JunctionEntityMetadataBuilder.prototype.collectReferencedColumns = function (relation, joinTable) {
    var hasAnyReferencedColumnName = joinTable.joinColumns ? joinTable.joinColumns.find(function (joinColumn) {
      return !!joinColumn.referencedColumnName;
    }) : false;

    if (!joinTable.joinColumns || joinTable.joinColumns && !hasAnyReferencedColumnName) {
      return relation.entityMetadata.columns.filter(function (column) {
        return column.isPrimary;
      });
    } else {
      return joinTable.joinColumns.map(function (joinColumn) {
        var referencedColumn = relation.entityMetadata.columns.find(function (column) {
          return column.propertyName === joinColumn.referencedColumnName;
        });
        if (!referencedColumn) throw new Error("Referenced column " + joinColumn.referencedColumnName + " was not found in entity " + relation.entityMetadata.name);
        return referencedColumn;
      });
    }
  };
  /**
   * Collects inverse referenced columns from the given join column args.
   */


  JunctionEntityMetadataBuilder.prototype.collectInverseReferencedColumns = function (relation, joinTable) {
    var hasInverseJoinColumns = !!joinTable.inverseJoinColumns;
    var hasAnyInverseReferencedColumnName = hasInverseJoinColumns ? joinTable.inverseJoinColumns.find(function (joinColumn) {
      return !!joinColumn.referencedColumnName;
    }) : false;

    if (!hasInverseJoinColumns || hasInverseJoinColumns && !hasAnyInverseReferencedColumnName) {
      return relation.inverseEntityMetadata.primaryColumns;
    } else {
      return joinTable.inverseJoinColumns.map(function (joinColumn) {
        var referencedColumn = relation.inverseEntityMetadata.ownColumns.find(function (column) {
          return column.propertyName === joinColumn.referencedColumnName;
        });
        if (!referencedColumn) throw new Error("Referenced column " + joinColumn.referencedColumnName + " was not found in entity " + relation.inverseEntityMetadata.name);
        return referencedColumn;
      });
    }
  };

  JunctionEntityMetadataBuilder.prototype.changeDuplicatedColumnNames = function (junctionColumns, inverseJunctionColumns) {
    var _this = this;

    junctionColumns.forEach(function (junctionColumn) {
      inverseJunctionColumns.forEach(function (inverseJunctionColumn) {
        if (junctionColumn.givenDatabaseName === inverseJunctionColumn.givenDatabaseName) {
          var junctionColumnName = _this.connection.namingStrategy.joinTableColumnDuplicationPrefix(junctionColumn.propertyName, 1);

          junctionColumn.propertyName = junctionColumnName;
          junctionColumn.givenDatabaseName = junctionColumnName;

          var inverseJunctionColumnName = _this.connection.namingStrategy.joinTableColumnDuplicationPrefix(inverseJunctionColumn.propertyName, 2);

          inverseJunctionColumn.propertyName = inverseJunctionColumnName;
          inverseJunctionColumn.givenDatabaseName = inverseJunctionColumnName;
        }
      });
    });
  };

  return JunctionEntityMetadataBuilder;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/metadata-builder/MetadataUtils.js":
/*!************************************************************************!*\
  !*** ./node_modules/typeorm/browser/metadata-builder/MetadataUtils.js ***!
  \************************************************************************/
/*! exports provided: MetadataUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetadataUtils", function() { return MetadataUtils; });
/**
 * Metadata args utility functions.
 */
var MetadataUtils =
/** @class */
function () {
  function MetadataUtils() {}
  /**
   * Gets given's entity all inherited classes.
   * Gives in order from parents to children.
   * For example Post extends ContentModel which extends Unit it will give
   * [Unit, ContentModel, Post]
   */


  MetadataUtils.getInheritanceTree = function (entity) {
    var tree = [entity];

    var getPrototypeOf = function getPrototypeOf(object) {
      var proto = Object.getPrototypeOf(object);

      if (proto && proto.name) {
        tree.push(proto);
        getPrototypeOf(proto);
      }
    };

    getPrototypeOf(entity);
    return tree;
  };
  /**
   * Checks if this table is inherited from another table.
   */


  MetadataUtils.isInherited = function (target1, target2) {
    return target1.prototype instanceof target2;
  };
  /**
   * Filters given array of targets by a given classes.
   * If classes are not given, then it returns array itself.
   */


  MetadataUtils.filterByTarget = function (array, classes) {
    if (!classes) return array;
    return array.filter(function (item) {
      return item.target && classes.indexOf(item.target) !== -1;
    });
  };

  return MetadataUtils;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/metadata-builder/RelationJoinColumnBuilder.js":
/*!************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/metadata-builder/RelationJoinColumnBuilder.js ***!
  \************************************************************************************/
/*! exports provided: RelationJoinColumnBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RelationJoinColumnBuilder", function() { return RelationJoinColumnBuilder; });
/* harmony import */ var _driver_mysql_MysqlDriver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../driver/mysql/MysqlDriver */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");
/* harmony import */ var _metadata_ColumnMetadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../metadata/ColumnMetadata */ "./node_modules/typeorm/browser/metadata/ColumnMetadata.js");
/* harmony import */ var _metadata_UniqueMetadata__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../metadata/UniqueMetadata */ "./node_modules/typeorm/browser/metadata/UniqueMetadata.js");
/* harmony import */ var _metadata_ForeignKeyMetadata__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../metadata/ForeignKeyMetadata */ "./node_modules/typeorm/browser/metadata/ForeignKeyMetadata.js");
/* harmony import */ var _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../driver/aurora-data-api/AuroraDataApiDriver */ "./node_modules/typeorm/browser/driver/aurora-data-api/AuroraDataApiDriver.js");






/**
 * Builds join column for the many-to-one and one-to-one owner relations.
 *
 * Cases it should cover:
 * 1. when join column is set with custom name and without referenced column name
 * we need automatically set referenced column name - primary ids by default
 * @JoinColumn({ name: "custom_name" })
 *
 * 2. when join column is set with only referenced column name
 * we need automatically set join column name - relation name + referenced column name
 * @JoinColumn({ referencedColumnName: "title" })
 *
 * 3. when join column is set without both referenced column name and join column name
 * we need to automatically set both of them
 * @JoinColumn()
 *
 * 4. when join column is not set at all (as in case of @ManyToOne relation)
 * we need to create join column for it with proper referenced column name and join column name
 *
 * 5. when multiple join columns set none of referencedColumnName and name can be optional
 * both options are required
 * @JoinColumn([
 *      { name: "category_title", referencedColumnName: "type" },
 *      { name: "category_title", referencedColumnName: "name" },
 * ])
 *
 * Since for many-to-one relations having JoinColumn decorator is not required,
 * we need to go thought each many-to-one relation without join column decorator set
 * and create join column metadata args for them.
 */

var RelationJoinColumnBuilder =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function RelationJoinColumnBuilder(connection) {
    this.connection = connection;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Builds a foreign key of the many-to-one or one-to-one owner relations.
   */


  RelationJoinColumnBuilder.prototype.build = function (joinColumns, relation) {
    var referencedColumns = this.collectReferencedColumns(joinColumns, relation);
    if (!referencedColumns.length) return {
      foreignKey: undefined,
      uniqueConstraint: undefined
    }; // this case is possible only for one-to-one non owning side

    var columns = this.collectColumns(joinColumns, relation, referencedColumns);
    var foreignKey = new _metadata_ForeignKeyMetadata__WEBPACK_IMPORTED_MODULE_3__["ForeignKeyMetadata"]({
      entityMetadata: relation.entityMetadata,
      referencedEntityMetadata: relation.inverseEntityMetadata,
      namingStrategy: this.connection.namingStrategy,
      columns: columns,
      referencedColumns: referencedColumns,
      onDelete: relation.onDelete,
      onUpdate: relation.onUpdate,
      deferrable: relation.deferrable
    }); // Oracle does not allow both primary and unique constraints on the same column

    if (this.connection.driver instanceof _driver_mysql_MysqlDriver__WEBPACK_IMPORTED_MODULE_0__["OracleDriver"] && columns.every(function (column) {
      return column.isPrimary;
    })) return {
      foreignKey: foreignKey,
      uniqueConstraint: undefined
    }; // CockroachDB requires UNIQUE constraints on referenced columns

    if (referencedColumns.length > 0 && relation.isOneToOne) {
      var uniqueConstraint = new _metadata_UniqueMetadata__WEBPACK_IMPORTED_MODULE_2__["UniqueMetadata"]({
        entityMetadata: relation.entityMetadata,
        columns: foreignKey.columns,
        args: {
          name: this.connection.namingStrategy.relationConstraintName(relation.entityMetadata.tablePath, foreignKey.columns.map(function (c) {
            return c.databaseName;
          })),
          target: relation.entityMetadata.target
        }
      });
      uniqueConstraint.build(this.connection.namingStrategy);
      return {
        foreignKey: foreignKey,
        uniqueConstraint: uniqueConstraint
      };
    }

    return {
      foreignKey: foreignKey,
      uniqueConstraint: undefined
    };
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Collects referenced columns from the given join column args.
   */


  RelationJoinColumnBuilder.prototype.collectReferencedColumns = function (joinColumns, relation) {
    var hasAnyReferencedColumnName = joinColumns.find(function (joinColumnArgs) {
      return !!joinColumnArgs.referencedColumnName;
    });
    var manyToOneWithoutJoinColumn = joinColumns.length === 0 && relation.isManyToOne;
    var hasJoinColumnWithoutAnyReferencedColumnName = joinColumns.length > 0 && !hasAnyReferencedColumnName;

    if (manyToOneWithoutJoinColumn || hasJoinColumnWithoutAnyReferencedColumnName) {
      // covers case3 and case1
      return relation.inverseEntityMetadata.primaryColumns;
    } else {
      // cases with referenced columns defined
      return joinColumns.map(function (joinColumn) {
        var referencedColumn = relation.inverseEntityMetadata.ownColumns.find(function (column) {
          return column.propertyName === joinColumn.referencedColumnName;
        }); // todo: can we also search in relations?

        if (!referencedColumn) throw new Error("Referenced column " + joinColumn.referencedColumnName + " was not found in entity " + relation.inverseEntityMetadata.name);
        return referencedColumn;
      });
    }
  };
  /**
   * Collects columns from the given join column args.
   */


  RelationJoinColumnBuilder.prototype.collectColumns = function (joinColumns, relation, referencedColumns) {
    var _this = this;

    return referencedColumns.map(function (referencedColumn) {
      // in the case if relation has join column with only name set we need this check
      var joinColumnMetadataArg = joinColumns.find(function (joinColumn) {
        return (!joinColumn.referencedColumnName || joinColumn.referencedColumnName === referencedColumn.propertyName) && !!joinColumn.name;
      });
      var joinColumnName = joinColumnMetadataArg ? joinColumnMetadataArg.name : _this.connection.namingStrategy.joinColumnName(relation.propertyName, referencedColumn.propertyName);
      var relationalColumn = relation.entityMetadata.ownColumns.find(function (column) {
        return column.databaseName === joinColumnName;
      });

      if (!relationalColumn) {
        relationalColumn = new _metadata_ColumnMetadata__WEBPACK_IMPORTED_MODULE_1__["ColumnMetadata"]({
          connection: _this.connection,
          entityMetadata: relation.entityMetadata,
          args: {
            target: "",
            mode: "virtual",
            propertyName: relation.propertyName,
            options: {
              name: joinColumnName,
              type: referencedColumn.type,
              length: !referencedColumn.length && (_this.connection.driver instanceof _driver_mysql_MysqlDriver__WEBPACK_IMPORTED_MODULE_0__["MysqlDriver"] || _this.connection.driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_4__["AuroraDataApiDriver"]) && (referencedColumn.generationStrategy === "uuid" || referencedColumn.type === "uuid") ? "36" : referencedColumn.length,
              width: referencedColumn.width,
              charset: referencedColumn.charset,
              collation: referencedColumn.collation,
              precision: referencedColumn.precision,
              scale: referencedColumn.scale,
              zerofill: referencedColumn.zerofill,
              unsigned: referencedColumn.unsigned,
              comment: referencedColumn.comment,
              primary: relation.isPrimary,
              nullable: relation.isNullable
            }
          }
        });
        relation.entityMetadata.registerColumn(relationalColumn);
      }

      relationalColumn.referencedColumn = referencedColumn; // its important to set it here because we need to set referenced column for user defined join column

      relationalColumn.type = referencedColumn.type; // also since types of relational column and join column must be equal we override user defined column type

      relationalColumn.relationMetadata = relation;
      relationalColumn.build(_this.connection);
      return relationalColumn;
    });
  };

  return RelationJoinColumnBuilder;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/metadata/CheckMetadata.js":
/*!****************************************************************!*\
  !*** ./node_modules/typeorm/browser/metadata/CheckMetadata.js ***!
  \****************************************************************/
/*! exports provided: CheckMetadata */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CheckMetadata", function() { return CheckMetadata; });
/**
 * Check metadata contains all information about table's check constraints.
 */
var CheckMetadata =
/** @class */
function () {
  // ---------------------------------------------------------------------
  // Constructor
  // ---------------------------------------------------------------------
  function CheckMetadata(options) {
    this.entityMetadata = options.entityMetadata;

    if (options.args) {
      this.target = options.args.target;
      this.expression = options.args.expression;
      this.givenName = options.args.name;
    }
  } // ---------------------------------------------------------------------
  // Public Build Methods
  // ---------------------------------------------------------------------

  /**
   * Builds some depend check constraint properties.
   * Must be called after all entity metadata's properties map, columns and relations are built.
   */


  CheckMetadata.prototype.build = function (namingStrategy) {
    this.name = this.givenName ? this.givenName : namingStrategy.checkConstraintName(this.entityMetadata.tablePath, this.expression);
    return this;
  };

  return CheckMetadata;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/metadata/ColumnMetadata.js":
/*!*****************************************************************!*\
  !*** ./node_modules/typeorm/browser/metadata/ColumnMetadata.js ***!
  \*****************************************************************/
/*! exports provided: ColumnMetadata */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColumnMetadata", function() { return ColumnMetadata; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_OrmUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/OrmUtils */ "./node_modules/typeorm/browser/util/OrmUtils.js");
/* harmony import */ var _driver_mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../driver/mongodb/MongoDriver */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");
/* harmony import */ var _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/PromiseUtils */ "./node_modules/typeorm/browser/util/PromiseUtils.js");
/* harmony import */ var _find_options_FindOperator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../find-options/FindOperator */ "./node_modules/typeorm/browser/find-options/FindOperator.js");
/* harmony import */ var _util_ApplyValueTransformers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/ApplyValueTransformers */ "./node_modules/typeorm/browser/util/ApplyValueTransformers.js");






/**
 * This metadata contains all information about entity's column.
 */

var ColumnMetadata =
/** @class */
function () {
  // ---------------------------------------------------------------------
  // Constructor
  // ---------------------------------------------------------------------
  function ColumnMetadata(options) {
    /**
     * Type's length in the database.
     */
    this.length = "";
    /**
     * Indicates if this column is a primary key.
     */

    this.isPrimary = false;
    /**
     * Indicates if this column is generated (auto increment or generated other way).
     */

    this.isGenerated = false;
    /**
     * Indicates if column can contain nulls or not.
     */

    this.isNullable = false;
    /**
     * Indicates if column is selected by query builder or not.
     */

    this.isSelect = true;
    /**
     * Indicates if column is inserted by default or not.
     */

    this.isInsert = true;
    /**
     * Indicates if column allows updates or not.
     */

    this.isUpdate = true;
    /**
     * Column comment.
     * This feature is not supported by all databases.
     */

    this.comment = "";
    /**
     * Puts ZEROFILL attribute on to numeric column. Works only for MySQL.
     * If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column
     */

    this.zerofill = false;
    /**
     * Puts UNSIGNED attribute on to numeric column. Works only for MySQL.
     */

    this.unsigned = false;
    /**
     * Indicates if this column is an array.
     */

    this.isArray = false;
    /**
     * Indicates if column is virtual. Virtual columns are not mapped to the entity.
     */

    this.isVirtual = false;
    /**
     * Indicates if column is discriminator. Discriminator columns are not mapped to the entity.
     */

    this.isDiscriminator = false;
    /**
     * Indicates if column is tree-level column. Tree-level columns are used in closure entities.
     */

    this.isTreeLevel = false;
    /**
     * Indicates if this column contains an entity creation date.
     */

    this.isCreateDate = false;
    /**
     * Indicates if this column contains an entity update date.
     */

    this.isUpdateDate = false;
    /**
     * Indicates if this column contains an entity delete date.
     */

    this.isDeleteDate = false;
    /**
     * Indicates if this column contains an entity version.
     */

    this.isVersion = false;
    /**
     * Indicates if this column contains an object id.
     */

    this.isObjectId = false;
    /**
     * Indicates if this column is nested set's left column.
     * Used only in tree entities with nested-set type.
     */

    this.isNestedSetLeft = false;
    /**
     * Indicates if this column is nested set's right column.
     * Used only in tree entities with nested-set type.
     */

    this.isNestedSetRight = false;
    /**
     * Indicates if this column is materialized path's path column.
     * Used only in tree entities with materialized path type.
     */

    this.isMaterializedPath = false;
    this.entityMetadata = options.entityMetadata;
    this.embeddedMetadata = options.embeddedMetadata;
    this.referencedColumn = options.referencedColumn;
    if (options.args.target) this.target = options.args.target;
    if (options.args.propertyName) this.propertyName = options.args.propertyName;
    if (options.args.options.name) this.givenDatabaseName = options.args.options.name;
    if (options.args.options.type) this.type = options.args.options.type;
    if (options.args.options.length) this.length = options.args.options.length ? options.args.options.length.toString() : "";
    if (options.args.options.width) this.width = options.args.options.width;
    if (options.args.options.charset) this.charset = options.args.options.charset;
    if (options.args.options.collation) this.collation = options.args.options.collation;
    if (options.args.options.primary) this.isPrimary = options.args.options.primary;
    if (options.args.options["default"] === null) // to make sure default: null is the same as nullable: true
      this.isNullable = true;
    if (options.args.options.nullable !== undefined) this.isNullable = options.args.options.nullable;
    if (options.args.options.select !== undefined) this.isSelect = options.args.options.select;
    if (options.args.options.insert !== undefined) this.isInsert = options.args.options.insert;
    if (options.args.options.update !== undefined) this.isUpdate = options.args.options.update;
    if (options.args.options.readonly !== undefined) this.isUpdate = !options.args.options.readonly;
    if (options.args.options.comment) this.comment = options.args.options.comment;
    if (options.args.options["default"] !== undefined) this["default"] = options.args.options["default"];
    if (options.args.options.onUpdate) this.onUpdate = options.args.options.onUpdate;
    if (options.args.options.scale !== null && options.args.options.scale !== undefined) this.scale = options.args.options.scale;

    if (options.args.options.zerofill) {
      this.zerofill = options.args.options.zerofill;
      this.unsigned = true; // if you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column
    }

    if (options.args.options.unsigned) this.unsigned = options.args.options.unsigned;
    if (options.args.options.precision !== undefined) this.precision = options.args.options.precision;

    if (options.args.options["enum"]) {
      if (options.args.options["enum"] instanceof Object && !Array.isArray(options.args.options["enum"])) {
        this["enum"] = Object.keys(options.args.options["enum"]).filter(function (key) {
          return isNaN(+key);
        }) // remove numeric keys - typescript numeric enum types generate them
        .map(function (key) {
          return options.args.options["enum"][key];
        });
      } else {
        this["enum"] = options.args.options["enum"];
      }
    }

    if (options.args.options.enumName) {
      this.enumName = options.args.options.enumName;
    }

    if (options.args.options.asExpression) {
      this.asExpression = options.args.options.asExpression;
      this.generatedType = options.args.options.generatedType ? options.args.options.generatedType : "VIRTUAL";
    }

    if (options.args.options.hstoreType) this.hstoreType = options.args.options.hstoreType;
    if (options.args.options.array) this.isArray = options.args.options.array;

    if (options.args.mode) {
      this.isVirtual = options.args.mode === "virtual";
      this.isTreeLevel = options.args.mode === "treeLevel";
      this.isCreateDate = options.args.mode === "createDate";
      this.isUpdateDate = options.args.mode === "updateDate";
      this.isDeleteDate = options.args.mode === "deleteDate";
      this.isVersion = options.args.mode === "version";
      this.isObjectId = options.args.mode === "objectId";
    }

    if (options.args.options.transformer) this.transformer = options.args.options.transformer;
    if (options.args.options.spatialFeatureType) this.spatialFeatureType = options.args.options.spatialFeatureType;
    if (options.args.options.srid !== undefined) this.srid = options.args.options.srid;
    if (this.isTreeLevel) this.type = options.connection.driver.mappedDataTypes.treeLevel;

    if (this.isCreateDate) {
      if (!this.type) this.type = options.connection.driver.mappedDataTypes.createDate;
      if (!this["default"]) this["default"] = function () {
        return options.connection.driver.mappedDataTypes.createDateDefault;
      };
      if (this.precision === undefined && options.connection.driver.mappedDataTypes.createDatePrecision) this.precision = options.connection.driver.mappedDataTypes.createDatePrecision;
    }

    if (this.isUpdateDate) {
      if (!this.type) this.type = options.connection.driver.mappedDataTypes.updateDate;
      if (!this["default"]) this["default"] = function () {
        return options.connection.driver.mappedDataTypes.updateDateDefault;
      };
      if (this.precision === undefined && options.connection.driver.mappedDataTypes.updateDatePrecision) this.precision = options.connection.driver.mappedDataTypes.updateDatePrecision;
    }

    if (this.isDeleteDate) {
      if (!this.type) this.type = options.connection.driver.mappedDataTypes.deleteDate;
      if (!this.isNullable) this.isNullable = options.connection.driver.mappedDataTypes.deleteDateNullable;
      if (this.precision === undefined && options.connection.driver.mappedDataTypes.deleteDatePrecision) this.precision = options.connection.driver.mappedDataTypes.deleteDatePrecision;
    }

    if (this.isVersion) this.type = options.connection.driver.mappedDataTypes.version;
    if (options.closureType) this.closureType = options.closureType;
    if (options.nestedSetLeft) this.isNestedSetLeft = options.nestedSetLeft;
    if (options.nestedSetRight) this.isNestedSetRight = options.nestedSetRight;
    if (options.materializedPath) this.isMaterializedPath = options.materializedPath;
  } // ---------------------------------------------------------------------
  // Public Methods
  // ---------------------------------------------------------------------

  /**
   * Creates entity id map from the given entity ids array.
   */


  ColumnMetadata.prototype.createValueMap = function (value, useDatabaseName) {
    var _this = this;

    if (useDatabaseName === void 0) {
      useDatabaseName = false;
    }

    var _a; // extract column value from embeds of entity if column is in embedded


    if (this.embeddedMetadata) {
      // example: post[data][information][counters].id where "data", "information" and "counters" are embeddeds
      // we need to get value of "id" column from the post real entity object and return it in a
      // { data: { information: { counters: { id: ... } } } } format
      // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]
      var propertyNames = tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](this.embeddedMetadata.parentPropertyNames); // now need to access post[data][information][counters] to get column value from the counters
      // and on each step we need to create complex literal object, e.g. first { data },
      // then { data: { information } }, then { data: { information: { counters } } },
      // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }
      // this recursive function helps doing that


      var extractEmbeddedColumnValue_1 = function extractEmbeddedColumnValue_1(propertyNames, map) {
        var propertyName = propertyNames.shift();

        if (propertyName) {
          map[propertyName] = {};
          extractEmbeddedColumnValue_1(propertyNames, map[propertyName]);
          return map;
        } // this is bugfix for #720 when increment number is bigint we need to make sure its a string


        if ((_this.generationStrategy === "increment" || _this.generationStrategy === "rowid") && _this.type === "bigint") value = String(value);
        map[useDatabaseName ? _this.databaseName : _this.propertyName] = value;
        return map;
      };

      return extractEmbeddedColumnValue_1(propertyNames, {});
    } else {
      // no embeds - no problems. Simply return column property name and its value of the entity
      // this is bugfix for #720 when increment number is bigint we need to make sure its a string
      if ((this.generationStrategy === "increment" || this.generationStrategy === "rowid") && this.type === "bigint") value = String(value);
      return _a = {}, _a[useDatabaseName ? this.databaseName : this.propertyName] = value, _a;
    }
  };
  /**
   * Extracts column value and returns its column name with this value in a literal object.
   * If column is in embedded (or recursive embedded) it returns complex literal object.
   *
   * Examples what this method can return depend if this column is in embeds.
   * { id: 1 } or { title: "hello" }, { counters: { code: 1 } }, { data: { information: { counters: { code: 1 } } } }
   */


  ColumnMetadata.prototype.getEntityValueMap = function (entity, options) {
    var _this = this;

    var _a, _b;

    var returnNulls = false; // options && options.skipNulls === false ? false : true; // todo: remove if current will not bring problems, uncomment if it will.
    // extract column value from embeds of entity if column is in embedded

    if (this.embeddedMetadata) {
      // example: post[data][information][counters].id where "data", "information" and "counters" are embeddeds
      // we need to get value of "id" column from the post real entity object and return it in a
      // { data: { information: { counters: { id: ... } } } } format
      // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]
      var propertyNames = tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](this.embeddedMetadata.parentPropertyNames); // now need to access post[data][information][counters] to get column value from the counters
      // and on each step we need to create complex literal object, e.g. first { data },
      // then { data: { information } }, then { data: { information: { counters } } },
      // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }
      // this recursive function helps doing that


      var extractEmbeddedColumnValue_2 = function extractEmbeddedColumnValue_2(propertyNames, value, map) {
        var propertyName = propertyNames.shift();
        if (value === undefined) return map;

        if (propertyName) {
          var submap = {};
          extractEmbeddedColumnValue_2(propertyNames, value[propertyName], submap);

          if (Object.keys(submap).length > 0) {
            map[propertyName] = submap;
          }

          return map;
        }

        if (value[_this.propertyName] !== undefined && (returnNulls === false || value[_this.propertyName] !== null)) map[_this.propertyName] = value[_this.propertyName];
        return map;
      };

      var map = {};
      extractEmbeddedColumnValue_2(propertyNames, entity, map);
      return Object.keys(map).length > 0 ? map : undefined;
    } else {
      // no embeds - no problems. Simply return column property name and its value of the entity
      if (this.relationMetadata && entity[this.propertyName] && entity[this.propertyName] instanceof Object) {
        var map = this.relationMetadata.joinColumns.reduce(function (map, joinColumn) {
          var value = joinColumn.referencedColumn.getEntityValueMap(entity[_this.propertyName]);
          if (value === undefined) return map;
          return _util_OrmUtils__WEBPACK_IMPORTED_MODULE_1__["OrmUtils"].mergeDeep(map, value);
        }, {});
        if (Object.keys(map).length > 0) return _a = {}, _a[this.propertyName] = map, _a;
        return undefined;
      } else {
        if (entity[this.propertyName] !== undefined && (returnNulls === false || entity[this.propertyName] !== null)) return _b = {}, _b[this.propertyName] = entity[this.propertyName], _b;
        return undefined;
      }
    }
  };
  /**
   * Extracts column value from the given entity.
   * If column is in embedded (or recursive embedded) it extracts its value from there.
   */


  ColumnMetadata.prototype.getEntityValue = function (entity, transform) {
    if (transform === void 0) {
      transform = false;
    }

    if (entity === undefined || entity === null) return undefined; // extract column value from embeddeds of entity if column is in embedded

    var value = undefined;

    if (this.embeddedMetadata) {
      // example: post[data][information][counters].id where "data", "information" and "counters" are embeddeds
      // we need to get value of "id" column from the post real entity object
      // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]
      var propertyNames = tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](this.embeddedMetadata.parentPropertyNames); // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters
      // this recursive function takes array of generated property names and gets the post[data][information][counters] embed


      var extractEmbeddedColumnValue_3 = function extractEmbeddedColumnValue_3(propertyNames, value) {
        var propertyName = propertyNames.shift();
        return propertyName && value ? extractEmbeddedColumnValue_3(propertyNames, value[propertyName]) : value;
      }; // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]


      var embeddedObject = extractEmbeddedColumnValue_3(propertyNames, entity);

      if (embeddedObject) {
        if (this.relationMetadata && this.referencedColumn) {
          var relatedEntity = this.relationMetadata.getEntityValue(embeddedObject);

          if (relatedEntity && relatedEntity instanceof Object && !(relatedEntity instanceof _find_options_FindOperator__WEBPACK_IMPORTED_MODULE_4__["FindOperator"])) {
            value = this.referencedColumn.getEntityValue(_util_PromiseUtils__WEBPACK_IMPORTED_MODULE_3__["PromiseUtils"].extractValue(relatedEntity));
          } else if (embeddedObject[this.propertyName] && embeddedObject[this.propertyName] instanceof Object && !(embeddedObject[this.propertyName] instanceof _find_options_FindOperator__WEBPACK_IMPORTED_MODULE_4__["FindOperator"])) {
            value = this.referencedColumn.getEntityValue(_util_PromiseUtils__WEBPACK_IMPORTED_MODULE_3__["PromiseUtils"].extractValue(embeddedObject[this.propertyName]));
          } else {
            value = _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_3__["PromiseUtils"].extractValue(embeddedObject[this.propertyName]);
          }
        } else if (this.referencedColumn) {
          value = this.referencedColumn.getEntityValue(_util_PromiseUtils__WEBPACK_IMPORTED_MODULE_3__["PromiseUtils"].extractValue(embeddedObject[this.propertyName]));
        } else {
          value = _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_3__["PromiseUtils"].extractValue(embeddedObject[this.propertyName]);
        }
      }
    } else {
      // no embeds - no problems. Simply return column name by property name of the entity
      if (this.relationMetadata && this.referencedColumn) {
        var relatedEntity = this.relationMetadata.getEntityValue(entity);

        if (relatedEntity && relatedEntity instanceof Object && !(relatedEntity instanceof _find_options_FindOperator__WEBPACK_IMPORTED_MODULE_4__["FindOperator"]) && !(relatedEntity instanceof Function)) {
          value = this.referencedColumn.getEntityValue(_util_PromiseUtils__WEBPACK_IMPORTED_MODULE_3__["PromiseUtils"].extractValue(relatedEntity));
        } else if (entity[this.propertyName] && entity[this.propertyName] instanceof Object && !(entity[this.propertyName] instanceof _find_options_FindOperator__WEBPACK_IMPORTED_MODULE_4__["FindOperator"]) && !(entity[this.propertyName] instanceof Function)) {
          value = this.referencedColumn.getEntityValue(_util_PromiseUtils__WEBPACK_IMPORTED_MODULE_3__["PromiseUtils"].extractValue(entity[this.propertyName]));
        } else {
          value = entity[this.propertyName];
        }
      } else if (this.referencedColumn) {
        value = this.referencedColumn.getEntityValue(_util_PromiseUtils__WEBPACK_IMPORTED_MODULE_3__["PromiseUtils"].extractValue(entity[this.propertyName]));
      } else {
        value = entity[this.propertyName];
      }
    }

    if (transform && this.transformer) value = _util_ApplyValueTransformers__WEBPACK_IMPORTED_MODULE_5__["ApplyValueTransformers"].transformTo(this.transformer, value);
    return value;
  };
  /**
   * Sets given entity's column value.
   * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.
   */


  ColumnMetadata.prototype.setEntityValue = function (entity, value) {
    var _this = this;

    if (this.embeddedMetadata) {
      // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]
      var extractEmbeddedColumnValue_4 = function extractEmbeddedColumnValue_4(embeddedMetadatas, map) {
        // if (!object[embeddedMetadata.propertyName])
        //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();
        var embeddedMetadata = embeddedMetadatas.shift();

        if (embeddedMetadata) {
          if (!map[embeddedMetadata.propertyName]) map[embeddedMetadata.propertyName] = embeddedMetadata.create();
          extractEmbeddedColumnValue_4(embeddedMetadatas, map[embeddedMetadata.propertyName]);
          return map;
        }

        map[_this.propertyName] = value;
        return map;
      };

      return extractEmbeddedColumnValue_4(tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](this.embeddedMetadata.embeddedMetadataTree), entity);
    } else {
      entity[this.propertyName] = value;
    }
  }; // ---------------------------------------------------------------------
  // Builder Methods
  // ---------------------------------------------------------------------


  ColumnMetadata.prototype.build = function (connection) {
    this.propertyPath = this.buildPropertyPath();
    this.propertyAliasName = this.propertyPath.replace(".", "_");
    this.databaseName = this.buildDatabaseName(connection);
    this.databasePath = this.buildDatabasePath();
    this.databaseNameWithoutPrefixes = connection.namingStrategy.columnName(this.propertyName, this.givenDatabaseName, []);
    return this;
  };

  ColumnMetadata.prototype.buildPropertyPath = function () {
    var path = "";
    if (this.embeddedMetadata && this.embeddedMetadata.parentPropertyNames.length) path = this.embeddedMetadata.parentPropertyNames.join(".") + ".";
    path += this.propertyName; // we add reference column to property path only if this column is virtual
    // because if its not virtual it means user defined a real column for this relation
    // also we don't do it if column is inside a junction table

    if (!this.entityMetadata.isJunction && this.isVirtual && this.referencedColumn && this.referencedColumn.propertyName !== this.propertyName) path += "." + this.referencedColumn.propertyName;
    return path;
  };

  ColumnMetadata.prototype.buildDatabasePath = function () {
    var path = "";
    if (this.embeddedMetadata && this.embeddedMetadata.parentPropertyNames.length) path = this.embeddedMetadata.parentPropertyNames.join(".") + ".";
    path += this.databaseName; // we add reference column to property path only if this column is virtual
    // because if its not virtual it means user defined a real column for this relation
    // also we don't do it if column is inside a junction table

    if (!this.entityMetadata.isJunction && this.isVirtual && this.referencedColumn && this.referencedColumn.databaseName !== this.databaseName) path += "." + this.referencedColumn.databaseName;
    return path;
  };

  ColumnMetadata.prototype.buildDatabaseName = function (connection) {
    var propertyNames = this.embeddedMetadata ? this.embeddedMetadata.parentPrefixes : [];
    if (connection.driver instanceof _driver_mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_2__["MongoDriver"]) // we don't need to include embedded name for the mongodb column names
      propertyNames = [];
    return connection.namingStrategy.columnName(this.propertyName, this.givenDatabaseName, propertyNames);
  };

  return ColumnMetadata;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/metadata/EmbeddedMetadata.js":
/*!*******************************************************************!*\
  !*** ./node_modules/typeorm/browser/metadata/EmbeddedMetadata.js ***!
  \*******************************************************************/
/*! exports provided: EmbeddedMetadata */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EmbeddedMetadata", function() { return EmbeddedMetadata; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _driver_mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../driver/mongodb/MongoDriver */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");


/**
 * Contains all information about entity's embedded property.
 */

var EmbeddedMetadata =
/** @class */
function () {
  // ---------------------------------------------------------------------
  // Constructor
  // ---------------------------------------------------------------------
  function EmbeddedMetadata(options) {
    /**
     * Columns inside this embed.
     */
    this.columns = [];
    /**
     * Relations inside this embed.
     */

    this.relations = [];
    /**
     * Entity listeners inside this embed.
     */

    this.listeners = [];
    /**
     * Indices applied to the embed columns.
     */

    this.indices = [];
    /**
     * Uniques applied to the embed columns.
     */

    this.uniques = [];
    /**
     * Relation ids inside this embed.
     */

    this.relationIds = [];
    /**
     * Relation counts inside this embed.
     */

    this.relationCounts = [];
    /**
     * Nested embeddable in this embeddable (which has current embedded as parent embedded).
     */

    this.embeddeds = [];
    /**
     * Indicates if this embedded is in array mode.
     *
     * This option works only in mongodb.
     */

    this.isArray = false;
    /**
     * Returns array of property names of current embed and all its parent embeds.
     *
     * example: post[data][information][counters].id where "data", "information" and "counters" are embeds
     * we need to get value of "id" column from the post real entity object.
     * this method will return ["data", "information", "counters"]
     */

    this.parentPropertyNames = [];
    /**
     * Returns array of prefixes of current embed and all its parent embeds.
     */

    this.parentPrefixes = [];
    /**
     * Returns embed metadatas from all levels of the parent tree.
     *
     * example: post[data][information][counters].id where "data", "information" and "counters" are embeds
     * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]
     */

    this.embeddedMetadataTree = [];
    /**
     * Embed metadatas from all levels of the parent tree.
     *
     * example: post[data][information][counters].id where "data", "information" and "counters" are embeds
     * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]
     */

    this.columnsFromTree = [];
    /**
     * Relations of this embed and all relations from its child embeds.
     */

    this.relationsFromTree = [];
    /**
     * Relations of this embed and all relations from its child embeds.
     */

    this.listenersFromTree = [];
    /**
     * Indices of this embed and all indices from its child embeds.
     */

    this.indicesFromTree = [];
    /**
     * Uniques of this embed and all uniques from its child embeds.
     */

    this.uniquesFromTree = [];
    /**
     * Relation ids of this embed and all relation ids from its child embeds.
     */

    this.relationIdsFromTree = [];
    /**
     * Relation counts of this embed and all relation counts from its child embeds.
     */

    this.relationCountsFromTree = [];
    this.entityMetadata = options.entityMetadata;
    this.type = options.args.type();
    this.propertyName = options.args.propertyName;
    this.customPrefix = options.args.prefix;
    this.isArray = options.args.isArray;
  } // ---------------------------------------------------------------------
  // Public Methods
  // ---------------------------------------------------------------------

  /**
   * Creates a new embedded object.
   */


  EmbeddedMetadata.prototype.create = function () {
    return new this.type();
  }; // ---------------------------------------------------------------------
  // Builder Methods
  // ---------------------------------------------------------------------


  EmbeddedMetadata.prototype.build = function (connection) {
    this.embeddeds.forEach(function (embedded) {
      return embedded.build(connection);
    });
    this.prefix = this.buildPrefix(connection);
    this.parentPropertyNames = this.buildParentPropertyNames();
    this.parentPrefixes = this.buildParentPrefixes();
    this.propertyPath = this.parentPropertyNames.join(".");
    this.embeddedMetadataTree = this.buildEmbeddedMetadataTree();
    this.columnsFromTree = this.buildColumnsFromTree();
    this.relationsFromTree = this.buildRelationsFromTree();
    this.listenersFromTree = this.buildListenersFromTree();
    this.indicesFromTree = this.buildIndicesFromTree();
    this.uniquesFromTree = this.buildUniquesFromTree();
    this.relationIdsFromTree = this.buildRelationIdsFromTree();
    this.relationCountsFromTree = this.buildRelationCountsFromTree();
    return this;
  }; // ---------------------------------------------------------------------
  // Protected Methods
  // ---------------------------------------------------------------------


  EmbeddedMetadata.prototype.buildPartialPrefix = function () {
    // if prefix option was not set or explicitly set to true - default prefix
    if (this.customPrefix === undefined || this.customPrefix === true) {
      return [this.propertyName];
    } // if prefix option was set to empty string or explicity set to false - disable prefix


    if (this.customPrefix === "" || this.customPrefix === false) {
      return [];
    } // use custom prefix


    if (typeof this.customPrefix === "string") {
      return [this.customPrefix];
    }

    throw new Error("Invalid prefix option given for " + this.entityMetadata.targetName + "#" + this.propertyName);
  };

  EmbeddedMetadata.prototype.buildPrefix = function (connection) {
    if (connection.driver instanceof _driver_mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_1__["MongoDriver"]) return this.propertyName;
    var prefixes = [];
    if (this.parentEmbeddedMetadata) prefixes.push(this.parentEmbeddedMetadata.buildPrefix(connection));
    prefixes.push.apply(prefixes, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](this.buildPartialPrefix()));
    return prefixes.join("_"); // todo: use naming strategy instead of "_"  !!!
  };

  EmbeddedMetadata.prototype.buildParentPropertyNames = function () {
    return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildParentPropertyNames().concat(this.propertyName) : [this.propertyName];
  };

  EmbeddedMetadata.prototype.buildParentPrefixes = function () {
    return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildParentPrefixes().concat(this.buildPartialPrefix()) : this.buildPartialPrefix();
  };

  EmbeddedMetadata.prototype.buildEmbeddedMetadataTree = function () {
    return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildEmbeddedMetadataTree().concat(this) : [this];
  };

  EmbeddedMetadata.prototype.buildColumnsFromTree = function () {
    return this.embeddeds.reduce(function (columns, embedded) {
      return columns.concat(embedded.buildColumnsFromTree());
    }, this.columns);
  };

  EmbeddedMetadata.prototype.buildRelationsFromTree = function () {
    return this.embeddeds.reduce(function (relations, embedded) {
      return relations.concat(embedded.buildRelationsFromTree());
    }, this.relations);
  };

  EmbeddedMetadata.prototype.buildListenersFromTree = function () {
    return this.embeddeds.reduce(function (relations, embedded) {
      return relations.concat(embedded.buildListenersFromTree());
    }, this.listeners);
  };

  EmbeddedMetadata.prototype.buildIndicesFromTree = function () {
    return this.embeddeds.reduce(function (relations, embedded) {
      return relations.concat(embedded.buildIndicesFromTree());
    }, this.indices);
  };

  EmbeddedMetadata.prototype.buildUniquesFromTree = function () {
    return this.embeddeds.reduce(function (relations, embedded) {
      return relations.concat(embedded.buildUniquesFromTree());
    }, this.uniques);
  };

  EmbeddedMetadata.prototype.buildRelationIdsFromTree = function () {
    return this.embeddeds.reduce(function (relations, embedded) {
      return relations.concat(embedded.buildRelationIdsFromTree());
    }, this.relationIds);
  };

  EmbeddedMetadata.prototype.buildRelationCountsFromTree = function () {
    return this.embeddeds.reduce(function (relations, embedded) {
      return relations.concat(embedded.buildRelationCountsFromTree());
    }, this.relationCounts);
  };

  return EmbeddedMetadata;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/metadata/EntityListenerMetadata.js":
/*!*************************************************************************!*\
  !*** ./node_modules/typeorm/browser/metadata/EntityListenerMetadata.js ***!
  \*************************************************************************/
/*! exports provided: EntityListenerMetadata */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntityListenerMetadata", function() { return EntityListenerMetadata; });
/**
 * This metadata contains all information about entity's listeners.
 */
var EntityListenerMetadata =
/** @class */
function () {
  // ---------------------------------------------------------------------
  // Constructor
  // ---------------------------------------------------------------------
  function EntityListenerMetadata(options) {
    this.entityMetadata = options.entityMetadata;
    this.embeddedMetadata = options.embeddedMetadata;
    this.target = options.args.target;
    this.propertyName = options.args.propertyName;
    this.type = options.args.type;
  } // ---------------------------------------------------------------------
  // Public Methods
  // ---------------------------------------------------------------------

  /**
   * Checks if entity listener is allowed to be executed on the given entity.
   */


  EntityListenerMetadata.prototype.isAllowed = function (entity) {
    return this.entityMetadata.target === entity.constructor || // todo: .constructor won't work for entity schemas, but there are no entity listeners in schemas since there are no objects, right?
    this.entityMetadata.target instanceof Function && entity.constructor.prototype instanceof this.entityMetadata.target; // todo: also need to implement entity schema inheritance
  };
  /**
   * Executes listener method of the given entity.
   */


  EntityListenerMetadata.prototype.execute = function (entity) {
    if (!this.embeddedMetadata) return entity[this.propertyName]();
    this.callEntityEmbeddedMethod(entity, this.embeddedMetadata.propertyPath.split("."));
  }; // ---------------------------------------------------------------------
  // Protected Methods
  // ---------------------------------------------------------------------

  /**
   * Calls embedded entity listener method no matter how nested it is.
   */


  EntityListenerMetadata.prototype.callEntityEmbeddedMethod = function (entity, propertyPaths) {
    var propertyPath = propertyPaths.shift();
    if (!propertyPath || !entity[propertyPath]) return;

    if (propertyPaths.length === 0) {
      entity[propertyPath][this.propertyName]();
    } else {
      if (entity[propertyPath]) this.callEntityEmbeddedMethod(entity[propertyPath], propertyPaths);
    }
  };

  return EntityListenerMetadata;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/metadata/EntityMetadata.js":
/*!*****************************************************************!*\
  !*** ./node_modules/typeorm/browser/metadata/EntityMetadata.js ***!
  \*****************************************************************/
/*! exports provided: EntityMetadata */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntityMetadata", function() { return EntityMetadata; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _driver_postgres_PostgresDriver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../driver/postgres/PostgresDriver */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");
/* harmony import */ var _error_CannotCreateEntityIdMapError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/CannotCreateEntityIdMapError */ "./node_modules/typeorm/browser/error/CannotCreateEntityIdMapError.js");
/* harmony import */ var _util_OrmUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/OrmUtils */ "./node_modules/typeorm/browser/util/OrmUtils.js");
/* harmony import */ var _util_StringUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/StringUtils */ "./node_modules/typeorm/browser/util/StringUtils.js");







/**
 * Contains all entity metadata.
 */

var EntityMetadata =
/** @class */
function () {
  // ---------------------------------------------------------------------
  // Constructor
  // ---------------------------------------------------------------------
  function EntityMetadata(options) {
    /**
     * Children entity metadatas. Used in inheritance patterns.
     */
    this.childEntityMetadatas = [];
    /**
     * All "inheritance tree" from a target entity.
     * For example for target Post < ContentModel < Unit it will be an array of [Post, ContentModel, Unit].
     * It also contains child entities for single table inheritance.
     */

    this.inheritanceTree = [];
    /**
     * Table type. Tables can be abstract, closure, junction, embedded, etc.
     */

    this.tableType = "regular";
    /**
     * Enables Sqlite "WITHOUT ROWID" modifier for the "CREATE TABLE" statement
     */

    this.withoutRowid = false;
    /**
     * Indicates if schema will be synchronized for this entity or not.
     */

    this.synchronize = true;
    /**
     * Checks if there any non-nullable column exist in this entity.
     */

    this.hasNonNullableRelations = false;
    /**
     * Indicates if this entity metadata of a junction table, or not.
     * Junction table is a table created by many-to-many relationship.
     *
     * Its also possible to understand if entity is junction via tableType.
     */

    this.isJunction = false;
    /**
     * Checks if this table is a junction table of the closure table.
     * This type is for tables that contain junction metadata of the closure tables.
     */

    this.isClosureJunction = false;
    /**
     * Checks if entity's table has multiple primary columns.
     */

    this.hasMultiplePrimaryKeys = false;
    /**
     * Indicates if this entity metadata has uuid generated columns.
     */

    this.hasUUIDGeneratedColumns = false;
    /**
     * Entity's column metadatas defined by user.
     */

    this.ownColumns = [];
    /**
     * Columns of the entity, including columns that are coming from the embeddeds of this entity.
     */

    this.columns = [];
    /**
     * Ancestor columns used only in closure junction tables.
     */

    this.ancestorColumns = [];
    /**
     * Descendant columns used only in closure junction tables.
     */

    this.descendantColumns = [];
    /**
     * All columns except for virtual columns.
     */

    this.nonVirtualColumns = [];
    /**
     * In the case if this entity metadata is junction table's entity metadata,
     * this will contain all referenced columns of owner entity.
     */

    this.ownerColumns = [];
    /**
     * In the case if this entity metadata is junction table's entity metadata,
     * this will contain all referenced columns of inverse entity.
     */

    this.inverseColumns = [];
    /**
     * Gets the column with generated flag.
     */

    this.generatedColumns = [];
    /**
     * Gets the primary columns.
     */

    this.primaryColumns = [];
    /**
     * Entity's relation metadatas.
     */

    this.ownRelations = [];
    /**
     * Relations of the entity, including relations that are coming from the embeddeds of this entity.
     */

    this.relations = [];
    /**
     * List of eager relations this metadata has.
     */

    this.eagerRelations = [];
    /**
     * List of eager relations this metadata has.
     */

    this.lazyRelations = [];
    /**
     * Gets only one-to-one relations of the entity.
     */

    this.oneToOneRelations = [];
    /**
     * Gets only owner one-to-one relations of the entity.
     */

    this.ownerOneToOneRelations = [];
    /**
     * Gets only one-to-many relations of the entity.
     */

    this.oneToManyRelations = [];
    /**
     * Gets only many-to-one relations of the entity.
     */

    this.manyToOneRelations = [];
    /**
     * Gets only many-to-many relations of the entity.
     */

    this.manyToManyRelations = [];
    /**
     * Gets only owner many-to-many relations of the entity.
     */

    this.ownerManyToManyRelations = [];
    /**
     * Gets only owner one-to-one and many-to-one relations.
     */

    this.relationsWithJoinColumns = [];
    /**
     * Entity's relation id metadatas.
     */

    this.relationIds = [];
    /**
     * Entity's relation id metadatas.
     */

    this.relationCounts = [];
    /**
     * Entity's foreign key metadatas.
     */

    this.foreignKeys = [];
    /**
     * Entity's embedded metadatas.
     */

    this.embeddeds = [];
    /**
     * All embeddeds - embeddeds from this entity metadata and from all child embeddeds, etc.
     */

    this.allEmbeddeds = [];
    /**
     * Entity's own indices.
     */

    this.ownIndices = [];
    /**
     * Entity's index metadatas.
     */

    this.indices = [];
    /**
     * Entity's unique metadatas.
     */

    this.uniques = [];
    /**
     * Entity's own uniques.
     */

    this.ownUniques = [];
    /**
     * Entity's check metadatas.
     */

    this.checks = [];
    /**
     * Entity's exclusion metadatas.
     */

    this.exclusions = [];
    /**
     * Entity's own listener metadatas.
     */

    this.ownListeners = [];
    /**
     * Entity listener metadatas.
     */

    this.listeners = [];
    /**
     * Listener metadatas with "AFTER LOAD" type.
     */

    this.afterLoadListeners = [];
    /**
     * Listener metadatas with "AFTER INSERT" type.
     */

    this.beforeInsertListeners = [];
    /**
     * Listener metadatas with "AFTER INSERT" type.
     */

    this.afterInsertListeners = [];
    /**
     * Listener metadatas with "AFTER UPDATE" type.
     */

    this.beforeUpdateListeners = [];
    /**
     * Listener metadatas with "AFTER UPDATE" type.
     */

    this.afterUpdateListeners = [];
    /**
     * Listener metadatas with "AFTER REMOVE" type.
     */

    this.beforeRemoveListeners = [];
    /**
     * Listener metadatas with "AFTER REMOVE" type.
     */

    this.afterRemoveListeners = [];
    this.connection = options.connection;
    this.inheritanceTree = options.inheritanceTree || [];
    this.inheritancePattern = options.inheritancePattern;
    this.treeType = options.tableTree ? options.tableTree.type : undefined;
    this.parentClosureEntityMetadata = options.parentClosureEntityMetadata;
    this.tableMetadataArgs = options.args;
    this.target = this.tableMetadataArgs.target;
    this.tableType = this.tableMetadataArgs.type;
    this.expression = this.tableMetadataArgs.expression;
    this.withoutRowid = this.tableMetadataArgs.withoutRowid;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Creates a new entity.
   */


  EntityMetadata.prototype.create = function (queryRunner) {
    var _this = this; // if target is set to a function (e.g. class) that can be created then create it


    var ret;

    if (this.target instanceof Function) {
      ret = new this.target();
      this.lazyRelations.forEach(function (relation) {
        return _this.connection.relationLoader.enableLazyLoad(relation, ret, queryRunner);
      });
      return ret;
    } // otherwise simply return a new empty object


    var newObject = {};
    this.lazyRelations.forEach(function (relation) {
      return _this.connection.relationLoader.enableLazyLoad(relation, newObject, queryRunner);
    });
    return newObject;
  };
  /**
   * Checks if given entity has an id.
   */


  EntityMetadata.prototype.hasId = function (entity) {
    if (!entity) return false;
    return this.primaryColumns.every(function (primaryColumn) {
      var value = primaryColumn.getEntityValue(entity);
      return value !== null && value !== undefined && value !== "";
    });
  };
  /**
   * Checks if given entity / object contains ALL primary keys entity must have.
   * Returns true if it contains all of them, false if at least one of them is not defined.
   */


  EntityMetadata.prototype.hasAllPrimaryKeys = function (entity) {
    return this.primaryColumns.every(function (primaryColumn) {
      var value = primaryColumn.getEntityValue(entity);
      return value !== null && value !== undefined;
    });
  };
  /**
   * Ensures that given object is an entity id map.
   * If given id is an object then it means its already id map.
   * If given id isn't an object then it means its a value of the id column
   * and it creates a new id map with this value and name of the primary column.
   */


  EntityMetadata.prototype.ensureEntityIdMap = function (id) {
    if (id instanceof Object) return id;
    if (this.hasMultiplePrimaryKeys) throw new _error_CannotCreateEntityIdMapError__WEBPACK_IMPORTED_MODULE_2__["CannotCreateEntityIdMapError"](this, id);
    return this.primaryColumns[0].createValueMap(id);
  };
  /**
   * Gets primary keys of the entity and returns them in a literal object.
   * For example, for Post{ id: 1, title: "hello" } where id is primary it will return { id: 1 }
   * For multiple primary keys it returns multiple keys in object.
   * For primary keys inside embeds it returns complex object literal with keys in them.
   */


  EntityMetadata.prototype.getEntityIdMap = function (entity) {
    if (!entity) return undefined;
    return EntityMetadata.getValueMap(entity, this.primaryColumns, {
      skipNulls: true
    });
  };
  /**
   * Creates a "mixed id map".
   * If entity has multiple primary keys (ids) then it will return just regular id map, like what getEntityIdMap returns.
   * But if entity has a single primary key then it will return just value of the id column of the entity, just value.
   * This is called mixed id map.
   */


  EntityMetadata.prototype.getEntityIdMixedMap = function (entity) {
    if (!entity) return entity;
    var idMap = this.getEntityIdMap(entity);

    if (this.hasMultiplePrimaryKeys) {
      return idMap;
    } else if (idMap) {
      return this.primaryColumns[0].getEntityValue(idMap); // todo: what about parent primary column?
    }

    return idMap;
  };
  /**
   * Compares two different entities by their ids.
   * Returns true if they match, false otherwise.
   */


  EntityMetadata.prototype.compareEntities = function (firstEntity, secondEntity) {
    var firstEntityIdMap = this.getEntityIdMap(firstEntity);
    if (!firstEntityIdMap) return false;
    var secondEntityIdMap = this.getEntityIdMap(secondEntity);
    if (!secondEntityIdMap) return false;
    return EntityMetadata.compareIds(firstEntityIdMap, secondEntityIdMap);
  };
  /**
   * Finds column with a given property name.
   */


  EntityMetadata.prototype.findColumnWithPropertyName = function (propertyName) {
    return this.columns.find(function (column) {
      return column.propertyName === propertyName;
    });
  };
  /**
   * Finds column with a given database name.
   */


  EntityMetadata.prototype.findColumnWithDatabaseName = function (databaseName) {
    return this.columns.find(function (column) {
      return column.databaseName === databaseName;
    });
  };
  /**
   * Finds column with a given property path.
   */


  EntityMetadata.prototype.findColumnWithPropertyPath = function (propertyPath) {
    var column = this.columns.find(function (column) {
      return column.propertyPath === propertyPath;
    });
    if (column) return column; // in the case if column with property path was not found, try to find a relation with such property path
    // if we find relation and it has a single join column then its the column user was seeking

    var relation = this.relations.find(function (relation) {
      return relation.propertyPath === propertyPath;
    });
    if (relation && relation.joinColumns.length === 1) return relation.joinColumns[0];
    return undefined;
  };
  /**
   * Finds columns with a given property path.
   * Property path can match a relation, and relations can contain multiple columns.
   */


  EntityMetadata.prototype.findColumnsWithPropertyPath = function (propertyPath) {
    var column = this.columns.find(function (column) {
      return column.propertyPath === propertyPath;
    });
    if (column) return [column]; // in the case if column with property path was not found, try to find a relation with such property path
    // if we find relation and it has a single join column then its the column user was seeking

    var relation = this.relations.find(function (relation) {
      return relation.propertyPath === propertyPath;
    });
    if (relation && relation.joinColumns) return relation.joinColumns;
    return [];
  };
  /**
   * Finds relation with the given property path.
   */


  EntityMetadata.prototype.findRelationWithPropertyPath = function (propertyPath) {
    return this.relations.find(function (relation) {
      return relation.propertyPath === propertyPath;
    });
  };
  /**
   * Checks if there is an embedded with a given property path.
   */


  EntityMetadata.prototype.hasEmbeddedWithPropertyPath = function (propertyPath) {
    return this.allEmbeddeds.some(function (embedded) {
      return embedded.propertyPath === propertyPath;
    });
  };
  /**
   * Finds embedded with a given property path.
   */


  EntityMetadata.prototype.findEmbeddedWithPropertyPath = function (propertyPath) {
    return this.allEmbeddeds.find(function (embedded) {
      return embedded.propertyPath === propertyPath;
    });
  };
  /**
   * Iterates through entity and finds and extracts all values from relations in the entity.
   * If relation value is an array its being flattened.
   */


  EntityMetadata.prototype.extractRelationValuesFromEntity = function (entity, relations) {
    var relationsAndValues = [];
    relations.forEach(function (relation) {
      var value = relation.getEntityValue(entity);

      if (Array.isArray(value)) {
        value.forEach(function (subValue) {
          return relationsAndValues.push([relation, subValue, relation.inverseEntityMetadata]);
        });
      } else if (value) {
        relationsAndValues.push([relation, value, relation.inverseEntityMetadata]);
      }
    });
    return relationsAndValues;
  }; // -------------------------------------------------------------------------
  // Public Static Methods
  // -------------------------------------------------------------------------

  /**
   * Creates a property paths for a given entity.
   */


  EntityMetadata.createPropertyPath = function (metadata, entity, prefix) {
    var _this = this;

    if (prefix === void 0) {
      prefix = "";
    }

    var paths = [];
    Object.keys(entity).forEach(function (key) {
      // check for function is needed in the cases when createPropertyPath used on values containg a function as a value
      // example: .update().set({ name: () => `SUBSTR('', 1, 2)` })
      var parentPath = prefix ? prefix + "." + key : key;

      if (metadata.hasEmbeddedWithPropertyPath(parentPath)) {
        var subPaths = _this.createPropertyPath(metadata, entity[key], parentPath);

        paths.push.apply(paths, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](subPaths));
      } else {
        var path = prefix ? prefix + "." + key : key;
        paths.push(path);
      }
    });
    return paths;
  };
  /**
   * Finds difference between two entity id maps.
   * Returns items that exist in the first array and absent in the second array.
   */


  EntityMetadata.difference = function (firstIdMaps, secondIdMaps) {
    return firstIdMaps.filter(function (firstIdMap) {
      return !secondIdMaps.find(function (secondIdMap) {
        return _util_OrmUtils__WEBPACK_IMPORTED_MODULE_3__["OrmUtils"].deepCompare(firstIdMap, secondIdMap);
      });
    });
  };
  /**
   * Compares ids of the two entities.
   * Returns true if they match, false otherwise.
   */


  EntityMetadata.compareIds = function (firstId, secondId) {
    if (firstId === undefined || firstId === null || secondId === undefined || secondId === null) return false;
    return _util_OrmUtils__WEBPACK_IMPORTED_MODULE_3__["OrmUtils"].deepCompare(firstId, secondId);
  };
  /**
   * Creates value map from the given values and columns.
   * Examples of usages are primary columns map and join columns map.
   */


  EntityMetadata.getValueMap = function (entity, columns, options) {
    return columns.reduce(function (map, column) {
      var value = column.getEntityValueMap(entity, options); // make sure that none of the values of the columns are not missing

      if (map === undefined || value === null || value === undefined) return undefined;
      return column.isObjectId ? Object.assign(map, value) : _util_OrmUtils__WEBPACK_IMPORTED_MODULE_3__["OrmUtils"].mergeDeep(map, value);
    }, {});
  }; // ---------------------------------------------------------------------
  // Public Builder Methods
  // ---------------------------------------------------------------------


  EntityMetadata.prototype.build = function () {
    var namingStrategy = this.connection.namingStrategy;
    var entityPrefix = this.connection.options.entityPrefix;
    this.engine = this.tableMetadataArgs.engine;
    this.database = this.tableMetadataArgs.type === "entity-child" && this.parentEntityMetadata ? this.parentEntityMetadata.database : this.tableMetadataArgs.database;

    if (this.tableMetadataArgs.schema) {
      this.schema = this.tableMetadataArgs.schema;
    } else if (this.tableMetadataArgs.type === "entity-child" && this.parentEntityMetadata) {
      this.schema = this.parentEntityMetadata.schema;
    } else {
      this.schema = this.connection.options.schema;
    }

    this.givenTableName = this.tableMetadataArgs.type === "entity-child" && this.parentEntityMetadata ? this.parentEntityMetadata.givenTableName : this.tableMetadataArgs.name;
    this.synchronize = this.tableMetadataArgs.synchronize === false ? false : true;
    this.targetName = this.tableMetadataArgs.target instanceof Function ? this.tableMetadataArgs.target.name : this.tableMetadataArgs.target;

    if (this.tableMetadataArgs.type === "closure-junction") {
      this.tableNameWithoutPrefix = namingStrategy.closureJunctionTableName(this.givenTableName);
    } else if (this.tableMetadataArgs.type === "entity-child" && this.parentEntityMetadata) {
      this.tableNameWithoutPrefix = namingStrategy.tableName(this.parentEntityMetadata.targetName, this.parentEntityMetadata.givenTableName);
    } else {
      this.tableNameWithoutPrefix = namingStrategy.tableName(this.targetName, this.givenTableName);

      if (this.connection.driver.maxAliasLength && this.connection.driver.maxAliasLength > 0 && this.tableNameWithoutPrefix.length > this.connection.driver.maxAliasLength) {
        this.tableNameWithoutPrefix = Object(_util_StringUtils__WEBPACK_IMPORTED_MODULE_4__["shorten"])(this.tableNameWithoutPrefix, {
          separator: "_",
          segmentLength: 3
        });
      }
    }

    this.tableName = entityPrefix ? namingStrategy.prefixTableName(entityPrefix, this.tableNameWithoutPrefix) : this.tableNameWithoutPrefix;
    this.target = this.target ? this.target : this.tableName;
    this.name = this.targetName ? this.targetName : this.tableName;
    this.expression = this.tableMetadataArgs.expression;
    this.withoutRowid = this.tableMetadataArgs.withoutRowid === true ? true : false;
    this.tablePath = this.buildTablePath();
    this.schemaPath = this.buildSchemaPath();
    this.orderBy = this.tableMetadataArgs.orderBy instanceof Function ? this.tableMetadataArgs.orderBy(this.propertiesMap) : this.tableMetadataArgs.orderBy; // todo: is propertiesMap available here? Looks like its not

    this.isJunction = this.tableMetadataArgs.type === "closure-junction" || this.tableMetadataArgs.type === "junction";
    this.isClosureJunction = this.tableMetadataArgs.type === "closure-junction";
  };
  /**
   * Registers a new column in the entity and recomputes all depend properties.
   */


  EntityMetadata.prototype.registerColumn = function (column) {
    if (this.ownColumns.indexOf(column) !== -1) return;
    this.ownColumns.push(column);
    this.columns = this.embeddeds.reduce(function (columns, embedded) {
      return columns.concat(embedded.columnsFromTree);
    }, this.ownColumns);
    this.primaryColumns = this.columns.filter(function (column) {
      return column.isPrimary;
    });
    this.hasMultiplePrimaryKeys = this.primaryColumns.length > 1;
    this.hasUUIDGeneratedColumns = this.columns.filter(function (column) {
      return column.isGenerated || column.generationStrategy === "uuid";
    }).length > 0;
    this.propertiesMap = this.createPropertiesMap();
    if (this.childEntityMetadatas) this.childEntityMetadatas.forEach(function (entityMetadata) {
      return entityMetadata.registerColumn(column);
    });
  };
  /**
   * Creates a special object - all columns and relations of the object (plus columns and relations from embeds)
   * in a special format - { propertyName: propertyName }.
   *
   * example: Post{ id: number, name: string, counterEmbed: { count: number }, category: Category }.
   * This method will create following object:
   * { id: "id", counterEmbed: { count: "counterEmbed.count" }, category: "category" }
   */


  EntityMetadata.prototype.createPropertiesMap = function () {
    var map = {};
    this.columns.forEach(function (column) {
      return _util_OrmUtils__WEBPACK_IMPORTED_MODULE_3__["OrmUtils"].mergeDeep(map, column.createValueMap(column.propertyPath));
    });
    this.relations.forEach(function (relation) {
      return _util_OrmUtils__WEBPACK_IMPORTED_MODULE_3__["OrmUtils"].mergeDeep(map, relation.createValueMap(relation.propertyPath));
    });
    return map;
  };
  /**
   * Builds table path using database name, schema name and table name.
   */


  EntityMetadata.prototype.buildTablePath = function () {
    var tablePath = this.tableName;

    if (this.schema && (this.connection.driver instanceof _driver_postgres_PostgresDriver__WEBPACK_IMPORTED_MODULE_1__["PostgresDriver"] || this.connection.driver instanceof _driver_postgres_PostgresDriver__WEBPACK_IMPORTED_MODULE_1__["SqlServerDriver"] || this.connection.driver instanceof _driver_postgres_PostgresDriver__WEBPACK_IMPORTED_MODULE_1__["SapDriver"])) {
      tablePath = this.schema + "." + tablePath;
    }

    if (this.database && !(this.connection.driver instanceof _driver_postgres_PostgresDriver__WEBPACK_IMPORTED_MODULE_1__["PostgresDriver"])) {
      if (!this.schema && this.connection.driver instanceof _driver_postgres_PostgresDriver__WEBPACK_IMPORTED_MODULE_1__["SqlServerDriver"]) {
        tablePath = this.database + ".." + tablePath;
      } else {
        tablePath = this.database + "." + tablePath;
      }
    }

    return tablePath;
  };
  /**
   * Builds table path using schema name and database name.
   */


  EntityMetadata.prototype.buildSchemaPath = function () {
    if (!this.schema) return undefined;
    return this.database && !(this.connection.driver instanceof _driver_postgres_PostgresDriver__WEBPACK_IMPORTED_MODULE_1__["PostgresDriver"]) ? this.database + "." + this.schema : this.schema;
  };

  return EntityMetadata;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/metadata/ExclusionMetadata.js":
/*!********************************************************************!*\
  !*** ./node_modules/typeorm/browser/metadata/ExclusionMetadata.js ***!
  \********************************************************************/
/*! exports provided: ExclusionMetadata */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExclusionMetadata", function() { return ExclusionMetadata; });
/**
 * Exclusion metadata contains all information about table's exclusion constraints.
 */
var ExclusionMetadata =
/** @class */
function () {
  // ---------------------------------------------------------------------
  // Constructor
  // ---------------------------------------------------------------------
  function ExclusionMetadata(options) {
    this.entityMetadata = options.entityMetadata;

    if (options.args) {
      this.target = options.args.target;
      this.expression = options.args.expression;
      this.givenName = options.args.name;
    }
  } // ---------------------------------------------------------------------
  // Public Build Methods
  // ---------------------------------------------------------------------

  /**
   * Builds some depend exclusion constraint properties.
   * Must be called after all entity metadata's properties map, columns and relations are built.
   */


  ExclusionMetadata.prototype.build = function (namingStrategy) {
    this.name = this.givenName ? this.givenName : namingStrategy.exclusionConstraintName(this.entityMetadata.tablePath, this.expression);
    return this;
  };

  return ExclusionMetadata;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/metadata/ForeignKeyMetadata.js":
/*!*********************************************************************!*\
  !*** ./node_modules/typeorm/browser/metadata/ForeignKeyMetadata.js ***!
  \*********************************************************************/
/*! exports provided: ForeignKeyMetadata */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ForeignKeyMetadata", function() { return ForeignKeyMetadata; });
/**
 * Contains all information about entity's foreign key.
 */
var ForeignKeyMetadata =
/** @class */
function () {
  // ---------------------------------------------------------------------
  // Constructor
  // ---------------------------------------------------------------------
  function ForeignKeyMetadata(options) {
    /**
     * Array of columns of this foreign key.
     */
    this.columns = [];
    /**
     * Array of referenced columns.
     */

    this.referencedColumns = [];
    /**
     * Gets array of column names.
     */

    this.columnNames = [];
    /**
     * Gets array of referenced column names.
     */

    this.referencedColumnNames = [];
    this.entityMetadata = options.entityMetadata;
    this.referencedEntityMetadata = options.referencedEntityMetadata;
    this.columns = options.columns;
    this.referencedColumns = options.referencedColumns;
    this.onDelete = options.onDelete || "NO ACTION";
    this.onUpdate = options.onUpdate || "NO ACTION";
    this.deferrable = options.deferrable;
    if (options.namingStrategy) this.build(options.namingStrategy);
  } // ---------------------------------------------------------------------
  // Public Methods
  // ---------------------------------------------------------------------

  /**
   * Builds some depend foreign key properties.
   * Must be called after all entity metadatas and their columns are built.
   */


  ForeignKeyMetadata.prototype.build = function (namingStrategy) {
    this.columnNames = this.columns.map(function (column) {
      return column.databaseName;
    });
    this.referencedColumnNames = this.referencedColumns.map(function (column) {
      return column.databaseName;
    });
    this.referencedTablePath = this.referencedEntityMetadata.tablePath;
    this.name = namingStrategy.foreignKeyName(this.entityMetadata.tablePath, this.columnNames, this.referencedTablePath, this.referencedColumnNames);
  };

  return ForeignKeyMetadata;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/metadata/IndexMetadata.js":
/*!****************************************************************!*\
  !*** ./node_modules/typeorm/browser/metadata/IndexMetadata.js ***!
  \****************************************************************/
/*! exports provided: IndexMetadata */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IndexMetadata", function() { return IndexMetadata; });
/**
 * Index metadata contains all information about table's index.
 */
var IndexMetadata =
/** @class */
function () {
  // ---------------------------------------------------------------------
  // Constructor
  // ---------------------------------------------------------------------
  function IndexMetadata(options) {
    /**
     * Indicates if this index must be unique.
     */
    this.isUnique = false;
    /**
     * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.
     * Works only in MySQL.
     */

    this.isSpatial = false;
    /**
     * The FULLTEXT modifier indexes the entire column and does not allow prefixing.
     * Works only in MySQL.
     */

    this.isFulltext = false;
    /**
     * Indicates if this index must synchronize with database index.
     */

    this.synchronize = true;
    /**
     * Indexed columns.
     */

    this.columns = [];
    /**
     * Map of column names with order set.
     * Used only by MongoDB driver.
     */

    this.columnNamesWithOrderingMap = {};
    this.entityMetadata = options.entityMetadata;
    this.embeddedMetadata = options.embeddedMetadata;
    if (options.columns) this.columns = options.columns;

    if (options.args) {
      this.target = options.args.target;
      if (options.args.synchronize !== null && options.args.synchronize !== undefined) this.synchronize = options.args.synchronize;
      this.isUnique = !!options.args.unique;
      this.isSpatial = !!options.args.spatial;
      this.isFulltext = !!options.args.fulltext;
      this.parser = options.args.parser;
      this.where = options.args.where;
      this.isSparse = options.args.sparse;
      this.isBackground = options.args.background;
      this.expireAfterSeconds = options.args.expireAfterSeconds;
      this.givenName = options.args.name;
      this.givenColumnNames = options.args.columns;
    }
  } // ---------------------------------------------------------------------
  // Public Build Methods
  // ---------------------------------------------------------------------

  /**
   * Builds some depend index properties.
   * Must be called after all entity metadata's properties map, columns and relations are built.
   */


  IndexMetadata.prototype.build = function (namingStrategy) {
    var _this = this;

    if (this.synchronize === false) {
      this.name = this.givenName;
      return this;
    }

    var map = {}; // if columns already an array of string then simply return it

    if (this.givenColumnNames) {
      var columnPropertyPaths = [];

      if (Array.isArray(this.givenColumnNames)) {
        columnPropertyPaths = this.givenColumnNames.map(function (columnName) {
          if (_this.embeddedMetadata) return _this.embeddedMetadata.propertyPath + "." + columnName;
          return columnName;
        });
        columnPropertyPaths.forEach(function (propertyPath) {
          return map[propertyPath] = 1;
        });
      } else {
        // todo: indices in embeds are not implemented in this syntax. deprecate this syntax?
        // if columns is a function that returns array of field names then execute it and get columns names from it
        var columnsFnResult_1 = this.givenColumnNames(this.entityMetadata.propertiesMap);

        if (Array.isArray(columnsFnResult_1)) {
          columnPropertyPaths = columnsFnResult_1.map(function (i) {
            return String(i);
          });
          columnPropertyPaths.forEach(function (name) {
            return map[name] = 1;
          });
        } else {
          columnPropertyPaths = Object.keys(columnsFnResult_1).map(function (i) {
            return String(i);
          });
          Object.keys(columnsFnResult_1).forEach(function (columnName) {
            return map[columnName] = columnsFnResult_1[columnName];
          });
        }
      }

      this.columns = columnPropertyPaths.map(function (propertyPath) {
        var columnWithSameName = _this.entityMetadata.columns.find(function (column) {
          return column.propertyPath === propertyPath;
        });

        if (columnWithSameName) {
          return [columnWithSameName];
        }

        var relationWithSameName = _this.entityMetadata.relations.find(function (relation) {
          return relation.isWithJoinColumn && relation.propertyName === propertyPath;
        });

        if (relationWithSameName) {
          return relationWithSameName.joinColumns;
        }

        var indexName = _this.givenName ? "\"" + _this.givenName + "\" " : "";
        var entityName = _this.entityMetadata.targetName;
        throw new Error("Index " + indexName + "contains column that is missing in the entity (" + entityName + "): " + propertyPath);
      }).reduce(function (a, b) {
        return a.concat(b);
      });
    }

    this.columnNamesWithOrderingMap = Object.keys(map).reduce(function (updatedMap, key) {
      var column = _this.entityMetadata.columns.find(function (column) {
        return column.propertyPath === key;
      });

      if (column) updatedMap[column.databasePath] = map[key];
      return updatedMap;
    }, {});
    this.name = this.givenName ? this.givenName : namingStrategy.indexName(this.entityMetadata.tablePath, this.columns.map(function (column) {
      return column.databaseName;
    }), this.where);
    return this;
  };

  return IndexMetadata;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/metadata/RelationCountMetadata.js":
/*!************************************************************************!*\
  !*** ./node_modules/typeorm/browser/metadata/RelationCountMetadata.js ***!
  \************************************************************************/
/*! exports provided: RelationCountMetadata */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RelationCountMetadata", function() { return RelationCountMetadata; });
/**
 * Contains all information about entity's relation count.
 */
var RelationCountMetadata =
/** @class */
function () {
  // ---------------------------------------------------------------------
  // Constructor
  // ---------------------------------------------------------------------
  function RelationCountMetadata(options) {
    this.entityMetadata = options.entityMetadata;
    this.target = options.args.target;
    this.propertyName = options.args.propertyName;
    this.relationNameOrFactory = options.args.relation;
    this.alias = options.args.alias;
    this.queryBuilderFactory = options.args.queryBuilderFactory;
  } // ---------------------------------------------------------------------
  // Public Builder Methods
  // ---------------------------------------------------------------------

  /**
   * Builds some depend relation count metadata properties.
   * This builder method should be used only after entity metadata, its properties map and all relations are build.
   */


  RelationCountMetadata.prototype.build = function () {
    var propertyPath = this.relationNameOrFactory instanceof Function ? this.relationNameOrFactory(this.entityMetadata.propertiesMap) : this.relationNameOrFactory;
    var relation = this.entityMetadata.findRelationWithPropertyPath(propertyPath);
    if (!relation) throw new Error("Cannot find relation " + propertyPath + ". Wrong relation specified for @RelationCount decorator.");
    this.relation = relation;
  };

  return RelationCountMetadata;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/metadata/RelationIdMetadata.js":
/*!*********************************************************************!*\
  !*** ./node_modules/typeorm/browser/metadata/RelationIdMetadata.js ***!
  \*********************************************************************/
/*! exports provided: RelationIdMetadata */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RelationIdMetadata", function() { return RelationIdMetadata; });
/**
 * Contains all information about entity's relation count.
 */
var RelationIdMetadata =
/** @class */
function () {
  // ---------------------------------------------------------------------
  // Constructor
  // ---------------------------------------------------------------------
  function RelationIdMetadata(options) {
    this.entityMetadata = options.entityMetadata;
    this.target = options.args.target;
    this.propertyName = options.args.propertyName;
    this.relationNameOrFactory = options.args.relation;
    this.alias = options.args.alias;
    this.queryBuilderFactory = options.args.queryBuilderFactory;
  } // ---------------------------------------------------------------------
  // Public Methods
  // ---------------------------------------------------------------------

  /**
   * Sets relation id value from the given entity.
   *
   * todo: make it to work in embeds as well.
   */


  RelationIdMetadata.prototype.setValue = function (entity) {
    var _this = this;

    var inverseEntity = this.relation.getEntityValue(entity);

    if (Array.isArray(inverseEntity)) {
      entity[this.propertyName] = inverseEntity.map(function (item) {
        return _this.relation.inverseEntityMetadata.getEntityIdMixedMap(item);
      }).filter(function (item) {
        return item !== null && item !== undefined;
      });
    } else {
      var value = this.relation.inverseEntityMetadata.getEntityIdMixedMap(inverseEntity);
      if (value !== undefined) entity[this.propertyName] = value;
    }
  }; // ---------------------------------------------------------------------
  // Public Builder Methods
  // ---------------------------------------------------------------------

  /**
   * Builds some depend relation id properties.
   * This builder method should be used only after entity metadata, its properties map and all relations are build.
   */


  RelationIdMetadata.prototype.build = function () {
    var propertyPath = this.relationNameOrFactory instanceof Function ? this.relationNameOrFactory(this.entityMetadata.propertiesMap) : this.relationNameOrFactory;
    var relation = this.entityMetadata.findRelationWithPropertyPath(propertyPath);
    if (!relation) throw new Error("Cannot find relation " + propertyPath + ". Wrong relation specified for @RelationId decorator.");
    this.relation = relation;
  };

  return RelationIdMetadata;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/metadata/RelationMetadata.js":
/*!*******************************************************************!*\
  !*** ./node_modules/typeorm/browser/metadata/RelationMetadata.js ***!
  \*******************************************************************/
/*! exports provided: RelationMetadata */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RelationMetadata", function() { return RelationMetadata; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _EntityMetadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EntityMetadata */ "./node_modules/typeorm/browser/metadata/EntityMetadata.js");


/**
 * Contains all information about some entity's relation.
 */

var RelationMetadata =
/** @class */
function () {
  // ---------------------------------------------------------------------
  // Constructor
  // ---------------------------------------------------------------------
  function RelationMetadata(options) {
    /**
     * Indicates if this is a parent (can be only many-to-one relation) relation in the tree tables.
     */
    this.isTreeParent = false;
    /**
     * Indicates if this is a children (can be only one-to-many relation) relation in the tree tables.
     */

    this.isTreeChildren = false;
    /**
     * Indicates if this relation's column is a primary key.
     * Can be used only for many-to-one and owner one-to-one relations.
     */

    this.isPrimary = false;
    /**
     * Indicates if this relation is lazily loaded.
     */

    this.isLazy = false;
    /**
     * Indicates if this relation is eagerly loaded.
     */

    this.isEager = false;
    /**
     * Indicates if persistence is enabled for the relation.
     * By default its enabled, but if you want to avoid any changes in the relation to be reflected in the database you can disable it.
     * If its disabled you can only change a relation from inverse side of a relation or using relation query builder functionality.
     * This is useful for performance optimization since its disabling avoid multiple extra queries during entity save.
     */

    this.persistenceEnabled = true;
    /**
     * If set to true then related objects are allowed to be inserted to the database.
     */

    this.isCascadeInsert = false;
    /**
     * If set to true then related objects are allowed to be updated in the database.
     */

    this.isCascadeUpdate = false;
    /**
     * If set to true then related objects are allowed to be remove from the database.
     */

    this.isCascadeRemove = false;
    /**
     * If set to true then related objects are allowed to be soft-removed from the database.
     */

    this.isCascadeSoftRemove = false;
    /**
     * If set to true then related objects are allowed to be recovered from the database.
     */

    this.isCascadeRecover = false;
    /**
     * Indicates if relation column value can be nullable or not.
     */

    this.isNullable = true;
    /**
     * Indicates if this side is an owner of this relation.
     */

    this.isOwning = false;
    /**
     * Checks if this relation's type is "one-to-one".
     */

    this.isOneToOne = false;
    /**
     * Checks if this relation is owner side of the "one-to-one" relation.
     * Owner side means this side of relation has a join column in the table.
     */

    this.isOneToOneOwner = false;
    /**
     * Checks if this relation has a join column (e.g. is it many-to-one or one-to-one owner side).
     */

    this.isWithJoinColumn = false;
    /**
     * Checks if this relation is NOT owner side of the "one-to-one" relation.
     * NOT owner side means this side of relation does not have a join column in the table.
     */

    this.isOneToOneNotOwner = false;
    /**
     * Checks if this relation's type is "one-to-many".
     */

    this.isOneToMany = false;
    /**
     * Checks if this relation's type is "many-to-one".
     */

    this.isManyToOne = false;
    /**
     * Checks if this relation's type is "many-to-many".
     */

    this.isManyToMany = false;
    /**
     * Checks if this relation's type is "many-to-many", and is owner side of the relationship.
     * Owner side means this side of relation has a join table.
     */

    this.isManyToManyOwner = false;
    /**
     * Checks if this relation's type is "many-to-many", and is NOT owner side of the relationship.
     * Not owner side means this side of relation does not have a join table.
     */

    this.isManyToManyNotOwner = false;
    /**
     * Foreign keys created for this relation.
     */

    this.foreignKeys = [];
    /**
     * Join table columns.
     * Join columns can be obtained only from owner side of the relation.
     * From non-owner side of the relation join columns will be empty.
     * If this relation is a many-to-one/one-to-one then it takes join columns from the current entity.
     * If this relation is many-to-many then it takes all owner join columns from the junction entity.
     */

    this.joinColumns = [];
    /**
     * Inverse join table columns.
     * Inverse join columns are supported only for many-to-many relations
     * and can be obtained only from owner side of the relation.
     * From non-owner side of the relation join columns will be undefined.
     */

    this.inverseJoinColumns = [];
    this.entityMetadata = options.entityMetadata;
    this.embeddedMetadata = options.embeddedMetadata;
    var args = options.args;
    this.target = args.target;
    this.propertyName = args.propertyName;
    this.relationType = args.relationType;
    if (args.inverseSideProperty) this.givenInverseSidePropertyFactory = args.inverseSideProperty;
    this.isLazy = args.isLazy || false;
    this.isCascadeInsert = args.options.cascade === true || args.options.cascade instanceof Array && args.options.cascade.indexOf("insert") !== -1;
    this.isCascadeUpdate = args.options.cascade === true || args.options.cascade instanceof Array && args.options.cascade.indexOf("update") !== -1;
    this.isCascadeRemove = args.options.cascade === true || args.options.cascade instanceof Array && args.options.cascade.indexOf("remove") !== -1;
    this.isCascadeSoftRemove = args.options.cascade === true || args.options.cascade instanceof Array && args.options.cascade.indexOf("soft-remove") !== -1;
    this.isCascadeRecover = args.options.cascade === true || args.options.cascade instanceof Array && args.options.cascade.indexOf("recover") !== -1;
    this.isCascadeInsert = args.options.cascade === true || Array.isArray(args.options.cascade) && args.options.cascade.indexOf("insert") !== -1;
    this.isCascadeUpdate = args.options.cascade === true || Array.isArray(args.options.cascade) && args.options.cascade.indexOf("update") !== -1;
    this.isCascadeRemove = args.options.cascade === true || Array.isArray(args.options.cascade) && args.options.cascade.indexOf("remove") !== -1;
    this.isCascadeSoftRemove = args.options.cascade === true || Array.isArray(args.options.cascade) && args.options.cascade.indexOf("soft-remove") !== -1;
    this.isCascadeRecover = args.options.cascade === true || Array.isArray(args.options.cascade) && args.options.cascade.indexOf("recover") !== -1;
    this.isPrimary = args.options.primary || false;
    this.isNullable = args.options.nullable === false || this.isPrimary ? false : true;
    this.onDelete = args.options.onDelete;
    this.onUpdate = args.options.onUpdate;
    this.deferrable = args.options.deferrable;
    this.isEager = args.options.eager || false;
    this.persistenceEnabled = args.options.persistence === false ? false : true;
    this.isTreeParent = args.isTreeParent || false;
    this.isTreeChildren = args.isTreeChildren || false;
    this.type = args.type instanceof Function ? args.type() : args.type;
    this.isOneToOne = this.relationType === "one-to-one";
    this.isOneToMany = this.relationType === "one-to-many";
    this.isManyToOne = this.relationType === "many-to-one";
    this.isManyToMany = this.relationType === "many-to-many";
    this.isOneToOneNotOwner = this.isOneToOne ? true : false;
    this.isManyToManyNotOwner = this.isManyToMany ? true : false;
  } // ---------------------------------------------------------------------
  // Public Methods
  // ---------------------------------------------------------------------

  /**
   * Creates join column ids map from the given related entity ids array.
   */


  RelationMetadata.prototype.getRelationIdMap = function (entity) {
    var joinColumns = this.isOwning ? this.joinColumns : this.inverseRelation.joinColumns;
    var referencedColumns = joinColumns.map(function (joinColumn) {
      return joinColumn.referencedColumn;
    }); // console.log("entity", entity);
    // console.log("referencedColumns", referencedColumns);

    return _EntityMetadata__WEBPACK_IMPORTED_MODULE_1__["EntityMetadata"].getValueMap(entity, referencedColumns);
  };
  /**
   * Ensures that given object is an entity id map.
   * If given id is an object then it means its already id map.
   * If given id isn't an object then it means its a value of the id column
   * and it creates a new id map with this value and name of the primary column.
   */


  RelationMetadata.prototype.ensureRelationIdMap = function (id) {
    if (id instanceof Object) return id;
    var joinColumns = this.isOwning ? this.joinColumns : this.inverseRelation.joinColumns;
    var referencedColumns = joinColumns.map(function (joinColumn) {
      return joinColumn.referencedColumn;
    });
    if (referencedColumns.length > 1) throw new Error("Cannot create relation id map for a single value because relation contains multiple referenced columns.");
    return referencedColumns[0].createValueMap(id);
  };
  /**
   * Extracts column value from the given entity.
   * If column is in embedded (or recursive embedded) it extracts its value from there.
   */


  RelationMetadata.prototype.getEntityValue = function (entity, getLazyRelationsPromiseValue) {
    if (getLazyRelationsPromiseValue === void 0) {
      getLazyRelationsPromiseValue = false;
    }

    if (entity === null || entity === undefined) return undefined; // extract column value from embeddeds of entity if column is in embedded

    if (this.embeddedMetadata) {
      // example: post[data][information][counters].id where "data", "information" and "counters" are embeddeds
      // we need to get value of "id" column from the post real entity object
      // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]
      var propertyNames = tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](this.embeddedMetadata.parentPropertyNames); // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters
      // this recursive function takes array of generated property names and gets the post[data][information][counters] embed


      var extractEmbeddedColumnValue_1 = function extractEmbeddedColumnValue_1(propertyNames, value) {
        var propertyName = propertyNames.shift();

        if (propertyName) {
          if (value[propertyName]) {
            return extractEmbeddedColumnValue_1(propertyNames, value[propertyName]);
          }

          return undefined;
        }

        return value;
      }; // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]


      var embeddedObject = extractEmbeddedColumnValue_1(propertyNames, entity);

      if (this.isLazy) {
        if (embeddedObject["__" + this.propertyName + "__"] !== undefined) return embeddedObject["__" + this.propertyName + "__"];
        if (getLazyRelationsPromiseValue === true) return embeddedObject[this.propertyName];
        return undefined;
      }

      return embeddedObject ? embeddedObject[this.isLazy ? "__" + this.propertyName + "__" : this.propertyName] : undefined;
    } else {
      // no embeds - no problems. Simply return column name by property name of the entity
      if (this.isLazy) {
        if (entity["__" + this.propertyName + "__"] !== undefined) return entity["__" + this.propertyName + "__"];
        if (getLazyRelationsPromiseValue === true) return entity[this.propertyName];
        return undefined;
      }

      return entity[this.propertyName];
    }
  };
  /**
   * Sets given entity's relation's value.
   * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.
   *
   * If merge is set to true, it merges given value into currently
   */


  RelationMetadata.prototype.setEntityValue = function (entity, value) {
    var propertyName = this.isLazy ? "__" + this.propertyName + "__" : this.propertyName;

    if (this.embeddedMetadata) {
      // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]
      var extractEmbeddedColumnValue_2 = function extractEmbeddedColumnValue_2(embeddedMetadatas, map) {
        // if (!object[embeddedMetadata.propertyName])
        //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();
        var embeddedMetadata = embeddedMetadatas.shift();

        if (embeddedMetadata) {
          if (!map[embeddedMetadata.propertyName]) map[embeddedMetadata.propertyName] = embeddedMetadata.create();
          extractEmbeddedColumnValue_2(embeddedMetadatas, map[embeddedMetadata.propertyName]);
          return map;
        }

        map[propertyName] = value;
        return map;
      };

      return extractEmbeddedColumnValue_2(tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](this.embeddedMetadata.embeddedMetadataTree), entity);
    } else {
      entity[propertyName] = value;
    }
  };
  /**
   * Creates entity id map from the given entity ids array.
   */


  RelationMetadata.prototype.createValueMap = function (value) {
    var _this = this;

    var _a; // extract column value from embeds of entity if column is in embedded


    if (this.embeddedMetadata) {
      // example: post[data][information][counters].id where "data", "information" and "counters" are embeddeds
      // we need to get value of "id" column from the post real entity object and return it in a
      // { data: { information: { counters: { id: ... } } } } format
      // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]
      var propertyNames = tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](this.embeddedMetadata.parentPropertyNames); // now need to access post[data][information][counters] to get column value from the counters
      // and on each step we need to create complex literal object, e.g. first { data },
      // then { data: { information } }, then { data: { information: { counters } } },
      // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }
      // this recursive function helps doing that


      var extractEmbeddedColumnValue_3 = function extractEmbeddedColumnValue_3(propertyNames, map) {
        var propertyName = propertyNames.shift();

        if (propertyName) {
          map[propertyName] = {};
          extractEmbeddedColumnValue_3(propertyNames, map[propertyName]);
          return map;
        }

        map[_this.propertyName] = value;
        return map;
      };

      return extractEmbeddedColumnValue_3(propertyNames, {});
    } else {
      // no embeds - no problems. Simply return column property name and its value of the entity
      return _a = {}, _a[this.propertyName] = value, _a;
    }
  }; // ---------------------------------------------------------------------
  // Builder Methods
  // ---------------------------------------------------------------------

  /**
   * Builds some depend relation metadata properties.
   * This builder method should be used only after embedded metadata tree was build.
   */


  RelationMetadata.prototype.build = function () {
    this.propertyPath = this.buildPropertyPath();
  };
  /**
   * Registers given foreign keys in the relation.
   * This builder method should be used to register foreign key in the relation.
   */


  RelationMetadata.prototype.registerForeignKeys = function () {
    var foreignKeys = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      foreignKeys[_i] = arguments[_i];
    }

    var _a;

    (_a = this.foreignKeys).push.apply(_a, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](foreignKeys));

    this.joinColumns = this.foreignKeys[0] ? this.foreignKeys[0].columns : [];
    this.inverseJoinColumns = this.foreignKeys[1] ? this.foreignKeys[1].columns : [];
    this.isOwning = this.isManyToOne || (this.isManyToMany || this.isOneToOne) && this.joinColumns.length > 0;
    this.isOneToOneOwner = this.isOneToOne && this.isOwning;
    this.isOneToOneNotOwner = this.isOneToOne && !this.isOwning;
    this.isManyToManyOwner = this.isManyToMany && this.isOwning;
    this.isManyToManyNotOwner = this.isManyToMany && !this.isOwning;
    this.isWithJoinColumn = this.isManyToOne || this.isOneToOneOwner;
  };
  /**
   * Registers a given junction entity metadata.
   * This builder method can be called after junction entity metadata for the many-to-many relation was created.
   */


  RelationMetadata.prototype.registerJunctionEntityMetadata = function (junctionEntityMetadata) {
    this.junctionEntityMetadata = junctionEntityMetadata;
    this.joinTableName = junctionEntityMetadata.tableName;

    if (this.inverseRelation) {
      this.inverseRelation.junctionEntityMetadata = junctionEntityMetadata;
      this.joinTableName = junctionEntityMetadata.tableName;
    }
  };
  /**
   * Builds inverse side property path based on given inverse side property factory.
   * This builder method should be used only after properties map of the inverse entity metadata was build.
   */


  RelationMetadata.prototype.buildInverseSidePropertyPath = function () {
    if (this.givenInverseSidePropertyFactory) {
      var ownerEntityPropertiesMap = this.inverseEntityMetadata.propertiesMap;
      if (typeof this.givenInverseSidePropertyFactory === "function") return this.givenInverseSidePropertyFactory(ownerEntityPropertiesMap);
      if (typeof this.givenInverseSidePropertyFactory === "string") return this.givenInverseSidePropertyFactory;
    } else if (this.isTreeParent && this.entityMetadata.treeChildrenRelation) {
      return this.entityMetadata.treeChildrenRelation.propertyName;
    } else if (this.isTreeChildren && this.entityMetadata.treeParentRelation) {
      return this.entityMetadata.treeParentRelation.propertyName;
    }

    return "";
  };
  /**
   * Builds relation's property path based on its embedded tree.
   */


  RelationMetadata.prototype.buildPropertyPath = function () {
    if (!this.embeddedMetadata || !this.embeddedMetadata.parentPropertyNames.length) return this.propertyName;
    return this.embeddedMetadata.parentPropertyNames.join(".") + "." + this.propertyName;
  };

  return RelationMetadata;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/metadata/UniqueMetadata.js":
/*!*****************************************************************!*\
  !*** ./node_modules/typeorm/browser/metadata/UniqueMetadata.js ***!
  \*****************************************************************/
/*! exports provided: UniqueMetadata */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UniqueMetadata", function() { return UniqueMetadata; });
/**
 * Unique metadata contains all information about table's unique constraints.
 */
var UniqueMetadata =
/** @class */
function () {
  // ---------------------------------------------------------------------
  // Constructor
  // ---------------------------------------------------------------------
  function UniqueMetadata(options) {
    /**
     * Unique columns.
     */
    this.columns = [];
    /**
     * Map of column names with order set.
     * Used only by MongoDB driver.
     */

    this.columnNamesWithOrderingMap = {};
    this.entityMetadata = options.entityMetadata;
    this.embeddedMetadata = options.embeddedMetadata;
    if (options.columns) this.columns = options.columns;

    if (options.args) {
      this.target = options.args.target;
      this.givenName = options.args.name;
      this.givenColumnNames = options.args.columns;
    }
  } // ---------------------------------------------------------------------
  // Public Build Methods
  // ---------------------------------------------------------------------

  /**
   * Builds some depend unique constraint properties.
   * Must be called after all entity metadata's properties map, columns and relations are built.
   */


  UniqueMetadata.prototype.build = function (namingStrategy) {
    var _this = this;

    var map = {}; // if columns already an array of string then simply return it

    if (this.givenColumnNames) {
      var columnPropertyPaths = [];

      if (Array.isArray(this.givenColumnNames)) {
        columnPropertyPaths = this.givenColumnNames.map(function (columnName) {
          if (_this.embeddedMetadata) return _this.embeddedMetadata.propertyPath + "." + columnName;
          return columnName;
        });
        columnPropertyPaths.forEach(function (propertyPath) {
          return map[propertyPath] = 1;
        });
      } else {
        // if columns is a function that returns array of field names then execute it and get columns names from it
        var columnsFnResult_1 = this.givenColumnNames(this.entityMetadata.propertiesMap);

        if (Array.isArray(columnsFnResult_1)) {
          columnPropertyPaths = columnsFnResult_1.map(function (i) {
            return String(i);
          });
          columnPropertyPaths.forEach(function (name) {
            return map[name] = 1;
          });
        } else {
          columnPropertyPaths = Object.keys(columnsFnResult_1).map(function (i) {
            return String(i);
          });
          Object.keys(columnsFnResult_1).forEach(function (columnName) {
            return map[columnName] = columnsFnResult_1[columnName];
          });
        }
      }

      this.columns = columnPropertyPaths.map(function (propertyName) {
        var columnWithSameName = _this.entityMetadata.columns.find(function (column) {
          return column.propertyPath === propertyName;
        });

        if (columnWithSameName) {
          return [columnWithSameName];
        }

        var relationWithSameName = _this.entityMetadata.relations.find(function (relation) {
          return relation.isWithJoinColumn && relation.propertyName === propertyName;
        });

        if (relationWithSameName) {
          return relationWithSameName.joinColumns;
        }

        var indexName = _this.givenName ? "\"" + _this.givenName + "\" " : "";
        var entityName = _this.entityMetadata.targetName;
        throw new Error("Unique constraint " + indexName + "contains column that is missing in the entity (" + entityName + "): " + propertyName);
      }).reduce(function (a, b) {
        return a.concat(b);
      });
    }

    this.columnNamesWithOrderingMap = Object.keys(map).reduce(function (updatedMap, key) {
      var column = _this.entityMetadata.columns.find(function (column) {
        return column.propertyPath === key;
      });

      if (column) updatedMap[column.databasePath] = map[key];
      return updatedMap;
    }, {});
    this.name = this.givenName ? this.givenName : namingStrategy.uniqueConstraintName(this.entityMetadata.tablePath, this.columns.map(function (column) {
      return column.databaseName;
    }));
    return this;
  };

  return UniqueMetadata;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/metadata/types/EventListenerTypes.js":
/*!***************************************************************************!*\
  !*** ./node_modules/typeorm/browser/metadata/types/EventListenerTypes.js ***!
  \***************************************************************************/
/*! exports provided: EventListenerTypes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventListenerTypes", function() { return EventListenerTypes; });
/**
 * Provides a constants for each entity listener type.
 */
var EventListenerTypes =
/** @class */
function () {
  function EventListenerTypes() {}

  EventListenerTypes.AFTER_LOAD = "after-load";
  EventListenerTypes.BEFORE_INSERT = "before-insert";
  EventListenerTypes.AFTER_INSERT = "after-insert";
  EventListenerTypes.BEFORE_UPDATE = "before-update";
  EventListenerTypes.AFTER_UPDATE = "after-update";
  EventListenerTypes.BEFORE_REMOVE = "before-remove";
  EventListenerTypes.AFTER_REMOVE = "after-remove";
  return EventListenerTypes;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/migration/Migration.js":
/*!*************************************************************!*\
  !*** ./node_modules/typeorm/browser/migration/Migration.js ***!
  \*************************************************************/
/*! exports provided: Migration */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Migration", function() { return Migration; });
/**
 * Represents entity of the migration in the database.
 */
var Migration =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function Migration(id, timestamp, name, instance) {
    this.id = id;
    this.timestamp = timestamp;
    this.name = name;
    this.instance = instance;
  }

  return Migration;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/migration/MigrationExecutor.js":
/*!*********************************************************************!*\
  !*** ./node_modules/typeorm/browser/migration/MigrationExecutor.js ***!
  \*********************************************************************/
/*! exports provided: MigrationExecutor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MigrationExecutor", function() { return MigrationExecutor; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../schema-builder/table/Table */ "./node_modules/typeorm/browser/schema-builder/table/Table.js");
/* harmony import */ var _Migration__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Migration */ "./node_modules/typeorm/browser/migration/Migration.js");
/* harmony import */ var _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/PromiseUtils */ "./node_modules/typeorm/browser/util/PromiseUtils.js");
/* harmony import */ var _driver_sqlserver_SqlServerDriver__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../driver/sqlserver/SqlServerDriver */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");
/* harmony import */ var _driver_sqlserver_MssqlParameter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../driver/sqlserver/MssqlParameter */ "./node_modules/typeorm/browser/driver/sqlserver/MssqlParameter.js");







/**
 * Executes migrations: runs pending and reverts previously executed migrations.
 */

var MigrationExecutor =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function MigrationExecutor(connection, queryRunner) {
    this.connection = connection;
    this.queryRunner = queryRunner; // -------------------------------------------------------------------------
    // Public Properties
    // -------------------------------------------------------------------------

    /**
     * Indicates how migrations should be run in transactions.
     *   all: all migrations are run in a single transaction
     *   none: all migrations are run without a transaction
     *   each: each migration is run in a separate transaction
     */

    this.transaction = "all";
    var options = this.connection.driver.options;
    this.migrationsTableName = connection.options.migrationsTableName || "migrations";
    this.migrationsTable = this.connection.driver.buildTableName(this.migrationsTableName, options.schema, options.database);
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Tries to execute a single migration given.
   */


  MigrationExecutor.prototype.executeMigration = function (migration) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , this.withQueryRunner(function (queryRunner) {
          return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
              switch (_a.label) {
                case 0:
                  return [4
                  /*yield*/
                  , this.createMigrationsTableIfNotExist(queryRunner)];

                case 1:
                  _a.sent();

                  return [4
                  /*yield*/
                  , migration.instance.up(queryRunner)];

                case 2:
                  _a.sent();

                  return [4
                  /*yield*/
                  , this.insertExecutedMigration(queryRunner, migration)];

                case 3:
                  _a.sent();

                  return [2
                  /*return*/
                  , migration];
              }
            });
          });
        })];
      });
    });
  };
  /**
   * Returns an array of all migrations.
   */


  MigrationExecutor.prototype.getAllMigrations = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , Promise.resolve(this.getMigrations())];
      });
    });
  };
  /**
   * Returns an array of all executed migrations.
   */


  MigrationExecutor.prototype.getExecutedMigrations = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , this.withQueryRunner(function (queryRunner) {
          return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
              switch (_a.label) {
                case 0:
                  return [4
                  /*yield*/
                  , this.createMigrationsTableIfNotExist(queryRunner)];

                case 1:
                  _a.sent();

                  return [4
                  /*yield*/
                  , this.loadExecutedMigrations(queryRunner)];

                case 2:
                  return [2
                  /*return*/
                  , _a.sent()];
              }
            });
          });
        })];
      });
    });
  };
  /**
   * Returns an array of all pending migrations.
   */


  MigrationExecutor.prototype.getPendingMigrations = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var allMigrations, executedMigrations;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.getAllMigrations()];

          case 1:
            allMigrations = _a.sent();
            return [4
            /*yield*/
            , this.getExecutedMigrations()];

          case 2:
            executedMigrations = _a.sent();
            return [2
            /*return*/
            , allMigrations.filter(function (migration) {
              return executedMigrations.find(function (executedMigration) {
                return executedMigration.name === migration.name;
              });
            })];
        }
      });
    });
  };
  /**
   * Inserts an executed migration.
   */


  MigrationExecutor.prototype.insertMigration = function (migration) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      _this.withQueryRunner(function (queryRunner) {
        _this.insertExecutedMigration(queryRunner, migration).then(resolve)["catch"](reject);
      });
    });
  };
  /**
   * Deletes an executed migration.
   */


  MigrationExecutor.prototype.deleteMigration = function (migration) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      _this.withQueryRunner(function (queryRunner) {
        _this.deleteExecutedMigration(queryRunner, migration).then(resolve)["catch"](reject);
      });
    });
  };
  /**
   * Lists all migrations and whether they have been executed or not
   * returns true if there are unapplied migrations
   */


  MigrationExecutor.prototype.showMigrations = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var e_1, _a, hasUnappliedMigrations, queryRunner, executedMigrations, allMigrations, _loop_1, this_1, allMigrations_1, allMigrations_1_1, migration;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            hasUnappliedMigrations = false;
            queryRunner = this.queryRunner || this.connection.createQueryRunner("master"); // create migrations table if its not created yet

            return [4
            /*yield*/
            , this.createMigrationsTableIfNotExist(queryRunner)];

          case 1:
            // create migrations table if its not created yet
            _b.sent();

            return [4
            /*yield*/
            , this.loadExecutedMigrations(queryRunner)];

          case 2:
            executedMigrations = _b.sent();
            allMigrations = this.getMigrations();

            _loop_1 = function _loop_1(migration) {
              var executedMigration = executedMigrations.find(function (executedMigration) {
                return executedMigration.name === migration.name;
              });

              if (executedMigration) {
                this_1.connection.logger.logSchemaBuild(" [X] " + migration.name);
              } else {
                hasUnappliedMigrations = true;
                this_1.connection.logger.logSchemaBuild(" [ ] " + migration.name);
              }
            };

            this_1 = this;

            try {
              for (allMigrations_1 = tslib__WEBPACK_IMPORTED_MODULE_0__["__values"](allMigrations), allMigrations_1_1 = allMigrations_1.next(); !allMigrations_1_1.done; allMigrations_1_1 = allMigrations_1.next()) {
                migration = allMigrations_1_1.value;

                _loop_1(migration);
              }
            } catch (e_1_1) {
              e_1 = {
                error: e_1_1
              };
            } finally {
              try {
                if (allMigrations_1_1 && !allMigrations_1_1.done && (_a = allMigrations_1["return"])) _a.call(allMigrations_1);
              } finally {
                if (e_1) throw e_1.error;
              }
            }

            if (!!this.queryRunner) return [3
            /*break*/
            , 4];
            return [4
            /*yield*/
            , queryRunner.release()];

          case 3:
            _b.sent();

            _b.label = 4;

          case 4:
            return [2
            /*return*/
            , hasUnappliedMigrations];
        }
      });
    });
  };
  /**
   * Executes all pending migrations. Pending migrations are migrations that are not yet executed,
   * thus not saved in the database.
   */


  MigrationExecutor.prototype.executePendingMigrations = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var queryRunner, executedMigrations, lastTimeExecutedMigration, allMigrations, successMigrations, pendingMigrations, transactionStartedByUs, err_1, rollbackError_1;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            queryRunner = this.queryRunner || this.connection.createQueryRunner("master"); // create migrations table if its not created yet

            return [4
            /*yield*/
            , this.createMigrationsTableIfNotExist(queryRunner)];

          case 1:
            // create migrations table if its not created yet
            _a.sent();

            return [4
            /*yield*/
            , this.loadExecutedMigrations(queryRunner)];

          case 2:
            executedMigrations = _a.sent();
            lastTimeExecutedMigration = this.getLatestTimestampMigration(executedMigrations);
            allMigrations = this.getMigrations();
            successMigrations = [];
            pendingMigrations = allMigrations.filter(function (migration) {
              // check if we already have executed migration
              var executedMigration = executedMigrations.find(function (executedMigration) {
                return executedMigration.name === migration.name;
              });
              if (executedMigration) return false; // migration is new and not executed. now check if its timestamp is correct
              // if (lastTimeExecutedMigration && migration.timestamp < lastTimeExecutedMigration.timestamp)
              //     throw new Error(`New migration found: ${migration.name}, however this migration's timestamp is not valid. Migration's timestamp should not be older then migrations already executed in the database.`);
              // every check is passed means that migration was not run yet and we need to run it

              return true;
            });
            if (!!pendingMigrations.length) return [3
            /*break*/
            , 5];
            this.connection.logger.logSchemaBuild("No migrations are pending");
            if (!!this.queryRunner) return [3
            /*break*/
            , 4];
            return [4
            /*yield*/
            , queryRunner.release()];

          case 3:
            _a.sent();

            _a.label = 4;

          case 4:
            return [2
            /*return*/
            , []];

          case 5:
            // log information about migration execution
            this.connection.logger.logSchemaBuild(executedMigrations.length + " migrations are already loaded in the database.");
            this.connection.logger.logSchemaBuild(allMigrations.length + " migrations were found in the source code.");
            if (lastTimeExecutedMigration) this.connection.logger.logSchemaBuild(lastTimeExecutedMigration.name + " is the last executed migration. It was executed on " + new Date(lastTimeExecutedMigration.timestamp).toString() + ".");
            this.connection.logger.logSchemaBuild(pendingMigrations.length + " migrations are new migrations that needs to be executed.");
            transactionStartedByUs = false;
            if (!(this.transaction === "all" && !queryRunner.isTransactionActive)) return [3
            /*break*/
            , 7];
            return [4
            /*yield*/
            , queryRunner.startTransaction()];

          case 6:
            _a.sent();

            transactionStartedByUs = true;
            _a.label = 7;

          case 7:
            _a.trys.push([7, 11, 16, 19]);

            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_3__["PromiseUtils"].runInSequence(pendingMigrations, function (migration) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var _this = this;

                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      if (!(this.transaction === "each" && !queryRunner.isTransactionActive)) return [3
                      /*break*/
                      , 2];
                      return [4
                      /*yield*/
                      , queryRunner.startTransaction()];

                    case 1:
                      _a.sent();

                      transactionStartedByUs = true;
                      _a.label = 2;

                    case 2:
                      return [2
                      /*return*/
                      , migration.instance.up(queryRunner).then(function () {
                        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                          return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                            switch (_a.label) {
                              case 0:
                                // now when migration is executed we need to insert record about it into the database
                                return [4
                                /*yield*/
                                , this.insertExecutedMigration(queryRunner, migration)];

                              case 1:
                                _a.sent();

                                if (!(this.transaction === "each" && transactionStartedByUs)) return [3
                                /*break*/
                                , 3];
                                return [4
                                /*yield*/
                                , queryRunner.commitTransaction()];

                              case 2:
                                _a.sent();

                                _a.label = 3;

                              case 3:
                                return [2
                                /*return*/
                                ];
                            }
                          });
                        });
                      }).then(function () {
                        successMigrations.push(migration);

                        _this.connection.logger.logSchemaBuild("Migration " + migration.name + " has been executed successfully.");
                      })];
                  }
                });
              });
            })];

          case 8:
            _a.sent();

            if (!(this.transaction === "all" && transactionStartedByUs)) return [3
            /*break*/
            , 10];
            return [4
            /*yield*/
            , queryRunner.commitTransaction()];

          case 9:
            _a.sent();

            _a.label = 10;

          case 10:
            return [3
            /*break*/
            , 19];

          case 11:
            err_1 = _a.sent();
            if (!transactionStartedByUs) return [3
            /*break*/
            , 15];
            _a.label = 12;

          case 12:
            _a.trys.push([12, 14,, 15]);

            return [4
            /*yield*/
            , queryRunner.rollbackTransaction()];

          case 13:
            _a.sent();

            return [3
            /*break*/
            , 15];

          case 14:
            rollbackError_1 = _a.sent();
            return [3
            /*break*/
            , 15];

          case 15:
            throw err_1;

          case 16:
            if (!!this.queryRunner) return [3
            /*break*/
            , 18];
            return [4
            /*yield*/
            , queryRunner.release()];

          case 17:
            _a.sent();

            _a.label = 18;

          case 18:
            return [7
            /*endfinally*/
            ];

          case 19:
            return [2
            /*return*/
            , successMigrations];
        }
      });
    });
  };
  /**
   * Reverts last migration that were run.
   */


  MigrationExecutor.prototype.undoLastMigration = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var queryRunner, executedMigrations, lastTimeExecutedMigration, allMigrations, migrationToRevert, transactionStartedByUs, err_2, rollbackError_2;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            queryRunner = this.queryRunner || this.connection.createQueryRunner("master"); // create migrations table if its not created yet

            return [4
            /*yield*/
            , this.createMigrationsTableIfNotExist(queryRunner)];

          case 1:
            // create migrations table if its not created yet
            _a.sent();

            return [4
            /*yield*/
            , this.loadExecutedMigrations(queryRunner)];

          case 2:
            executedMigrations = _a.sent();
            lastTimeExecutedMigration = this.getLatestExecutedMigration(executedMigrations); // if no migrations found in the database then nothing to revert

            if (!lastTimeExecutedMigration) {
              this.connection.logger.logSchemaBuild("No migrations was found in the database. Nothing to revert!");
              return [2
              /*return*/
              ];
            }

            allMigrations = this.getMigrations();
            migrationToRevert = allMigrations.find(function (migration) {
              return migration.name === lastTimeExecutedMigration.name;
            }); // if no migrations found in the database then nothing to revert

            if (!migrationToRevert) throw new Error("No migration " + lastTimeExecutedMigration.name + " was found in the source code. Make sure you have this migration in your codebase and its included in the connection options."); // log information about migration execution

            this.connection.logger.logSchemaBuild(executedMigrations.length + " migrations are already loaded in the database.");
            this.connection.logger.logSchemaBuild(lastTimeExecutedMigration.name + " is the last executed migration. It was executed on " + new Date(lastTimeExecutedMigration.timestamp).toString() + ".");
            this.connection.logger.logSchemaBuild("Now reverting it...");
            transactionStartedByUs = false;
            if (!(this.transaction !== "none" && !queryRunner.isTransactionActive)) return [3
            /*break*/
            , 4];
            return [4
            /*yield*/
            , queryRunner.startTransaction()];

          case 3:
            _a.sent();

            transactionStartedByUs = true;
            _a.label = 4;

          case 4:
            _a.trys.push([4, 9, 14, 17]);

            return [4
            /*yield*/
            , migrationToRevert.instance.down(queryRunner)];

          case 5:
            _a.sent();

            return [4
            /*yield*/
            , this.deleteExecutedMigration(queryRunner, migrationToRevert)];

          case 6:
            _a.sent();

            this.connection.logger.logSchemaBuild("Migration " + migrationToRevert.name + " has been reverted successfully.");
            if (!transactionStartedByUs) return [3
            /*break*/
            , 8];
            return [4
            /*yield*/
            , queryRunner.commitTransaction()];

          case 7:
            _a.sent();

            _a.label = 8;

          case 8:
            return [3
            /*break*/
            , 17];

          case 9:
            err_2 = _a.sent();
            if (!transactionStartedByUs) return [3
            /*break*/
            , 13];
            _a.label = 10;

          case 10:
            _a.trys.push([10, 12,, 13]);

            return [4
            /*yield*/
            , queryRunner.rollbackTransaction()];

          case 11:
            _a.sent();

            return [3
            /*break*/
            , 13];

          case 12:
            rollbackError_2 = _a.sent();
            return [3
            /*break*/
            , 13];

          case 13:
            throw err_2;

          case 14:
            if (!!this.queryRunner) return [3
            /*break*/
            , 16];
            return [4
            /*yield*/
            , queryRunner.release()];

          case 15:
            _a.sent();

            _a.label = 16;

          case 16:
            return [7
            /*endfinally*/
            ];

          case 17:
            return [2
            /*return*/
            ];
        }
      });
    });
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Creates table "migrations" that will store information about executed migrations.
   */


  MigrationExecutor.prototype.createMigrationsTableIfNotExist = function (queryRunner) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var tableExist;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            // If driver is mongo no need to create
            if (this.connection.driver instanceof _driver_sqlserver_SqlServerDriver__WEBPACK_IMPORTED_MODULE_4__["MongoDriver"]) {
              return [2
              /*return*/
              ];
            }

            return [4
            /*yield*/
            , queryRunner.hasTable(this.migrationsTable)];

          case 1:
            tableExist = _a.sent();
            if (!!tableExist) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , queryRunner.createTable(new _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_1__["Table"]({
              name: this.migrationsTable,
              columns: [{
                name: "id",
                type: this.connection.driver.normalizeType({
                  type: this.connection.driver.mappedDataTypes.migrationId
                }),
                isGenerated: true,
                generationStrategy: "increment",
                isPrimary: true,
                isNullable: false
              }, {
                name: "timestamp",
                type: this.connection.driver.normalizeType({
                  type: this.connection.driver.mappedDataTypes.migrationTimestamp
                }),
                isPrimary: false,
                isNullable: false
              }, {
                name: "name",
                type: this.connection.driver.normalizeType({
                  type: this.connection.driver.mappedDataTypes.migrationName
                }),
                isNullable: false
              }]
            }))];

          case 2:
            _a.sent();

            _a.label = 3;

          case 3:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Loads all migrations that were executed and saved into the database (sorts by id).
   */


  MigrationExecutor.prototype.loadExecutedMigrations = function (queryRunner) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var mongoRunner, migrationsRaw;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!(this.connection.driver instanceof _driver_sqlserver_SqlServerDriver__WEBPACK_IMPORTED_MODULE_4__["MongoDriver"])) return [3
            /*break*/
            , 2];
            mongoRunner = queryRunner;
            return [4
            /*yield*/
            , mongoRunner.databaseConnection.db(this.connection.driver.database).collection(this.migrationsTableName).find().sort({
              "_id": -1
            }).toArray()];

          case 1:
            return [2
            /*return*/
            , _a.sent()];

          case 2:
            return [4
            /*yield*/
            , this.connection.manager.createQueryBuilder(queryRunner).select().orderBy(this.connection.driver.escape("id"), "DESC").from(this.migrationsTable, this.migrationsTableName).getRawMany()];

          case 3:
            migrationsRaw = _a.sent();
            return [2
            /*return*/
            , migrationsRaw.map(function (migrationRaw) {
              return new _Migration__WEBPACK_IMPORTED_MODULE_2__["Migration"](parseInt(migrationRaw["id"]), parseInt(migrationRaw["timestamp"]), migrationRaw["name"]);
            })];
        }
      });
    });
  };
  /**
   * Gets all migrations that setup for this connection.
   */


  MigrationExecutor.prototype.getMigrations = function () {
    var migrations = this.connection.migrations.map(function (migration) {
      var migrationClassName = migration.name || migration.constructor.name;
      var migrationTimestamp = parseInt(migrationClassName.substr(-13), 10);

      if (!migrationTimestamp || isNaN(migrationTimestamp)) {
        throw new Error(migrationClassName + " migration name is wrong. Migration class name should have a JavaScript timestamp appended.");
      }

      return new _Migration__WEBPACK_IMPORTED_MODULE_2__["Migration"](undefined, migrationTimestamp, migrationClassName, migration);
    });
    this.checkForDuplicateMigrations(migrations); // sort them by timestamp

    return migrations.sort(function (a, b) {
      return a.timestamp - b.timestamp;
    });
  };

  MigrationExecutor.prototype.checkForDuplicateMigrations = function (migrations) {
    var migrationNames = migrations.map(function (migration) {
      return migration.name;
    });
    var duplicates = Array.from(new Set(migrationNames.filter(function (migrationName, index) {
      return migrationNames.indexOf(migrationName) < index;
    })));

    if (duplicates.length > 0) {
      throw Error("Duplicate migrations: " + duplicates.join(", "));
    }
  };
  /**
   * Finds the latest migration (sorts by timestamp) in the given array of migrations.
   */


  MigrationExecutor.prototype.getLatestTimestampMigration = function (migrations) {
    var sortedMigrations = migrations.map(function (migration) {
      return migration;
    }).sort(function (a, b) {
      return (a.timestamp - b.timestamp) * -1;
    });
    return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;
  };
  /**
   * Finds the latest migration in the given array of migrations.
   * PRE: Migration array must be sorted by descending id.
   */


  MigrationExecutor.prototype.getLatestExecutedMigration = function (sortedMigrations) {
    return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;
  };
  /**
   * Inserts new executed migration's data into migrations table.
   */


  MigrationExecutor.prototype.insertExecutedMigration = function (queryRunner, migration) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var values, mongoRunner, qb;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            values = {};

            if (this.connection.driver instanceof _driver_sqlserver_SqlServerDriver__WEBPACK_IMPORTED_MODULE_4__["SqlServerDriver"]) {
              values["timestamp"] = new _driver_sqlserver_MssqlParameter__WEBPACK_IMPORTED_MODULE_5__["MssqlParameter"](migration.timestamp, this.connection.driver.normalizeType({
                type: this.connection.driver.mappedDataTypes.migrationTimestamp
              }));
              values["name"] = new _driver_sqlserver_MssqlParameter__WEBPACK_IMPORTED_MODULE_5__["MssqlParameter"](migration.name, this.connection.driver.normalizeType({
                type: this.connection.driver.mappedDataTypes.migrationName
              }));
            } else {
              values["timestamp"] = migration.timestamp;
              values["name"] = migration.name;
            }

            if (!(this.connection.driver instanceof _driver_sqlserver_SqlServerDriver__WEBPACK_IMPORTED_MODULE_4__["MongoDriver"])) return [3
            /*break*/
            , 2];
            mongoRunner = queryRunner;
            return [4
            /*yield*/
            , mongoRunner.databaseConnection.db(this.connection.driver.database).collection(this.migrationsTableName).insert(values)];

          case 1:
            _a.sent();

            return [3
            /*break*/
            , 4];

          case 2:
            qb = queryRunner.manager.createQueryBuilder();
            return [4
            /*yield*/
            , qb.insert().into(this.migrationsTable).values(values).execute()];

          case 3:
            _a.sent();

            _a.label = 4;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Delete previously executed migration's data from the migrations table.
   */


  MigrationExecutor.prototype.deleteExecutedMigration = function (queryRunner, migration) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var conditions, mongoRunner, qb;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            conditions = {};

            if (this.connection.driver instanceof _driver_sqlserver_SqlServerDriver__WEBPACK_IMPORTED_MODULE_4__["SqlServerDriver"]) {
              conditions["timestamp"] = new _driver_sqlserver_MssqlParameter__WEBPACK_IMPORTED_MODULE_5__["MssqlParameter"](migration.timestamp, this.connection.driver.normalizeType({
                type: this.connection.driver.mappedDataTypes.migrationTimestamp
              }));
              conditions["name"] = new _driver_sqlserver_MssqlParameter__WEBPACK_IMPORTED_MODULE_5__["MssqlParameter"](migration.name, this.connection.driver.normalizeType({
                type: this.connection.driver.mappedDataTypes.migrationName
              }));
            } else {
              conditions["timestamp"] = migration.timestamp;
              conditions["name"] = migration.name;
            }

            if (!(this.connection.driver instanceof _driver_sqlserver_SqlServerDriver__WEBPACK_IMPORTED_MODULE_4__["MongoDriver"])) return [3
            /*break*/
            , 2];
            mongoRunner = queryRunner;
            return [4
            /*yield*/
            , mongoRunner.databaseConnection.db(this.connection.driver.database).collection(this.migrationsTableName).deleteOne(conditions)];

          case 1:
            _a.sent();

            return [3
            /*break*/
            , 4];

          case 2:
            qb = queryRunner.manager.createQueryBuilder();
            return [4
            /*yield*/
            , qb["delete"]().from(this.migrationsTable).where(qb.escape("timestamp") + " = :timestamp").andWhere(qb.escape("name") + " = :name").setParameters(conditions).execute()];

          case 3:
            _a.sent();

            _a.label = 4;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  MigrationExecutor.prototype.withQueryRunner = function (callback) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var queryRunner;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            queryRunner = this.queryRunner || this.connection.createQueryRunner("master");
            _a.label = 1;

          case 1:
            _a.trys.push([1,, 2, 5]);

            return [2
            /*return*/
            , callback(queryRunner)];

          case 2:
            if (!!this.queryRunner) return [3
            /*break*/
            , 4];
            return [4
            /*yield*/
            , queryRunner.release()];

          case 3:
            _a.sent();

            _a.label = 4;

          case 4:
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  return MigrationExecutor;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/naming-strategy/DefaultNamingStrategy.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/typeorm/browser/naming-strategy/DefaultNamingStrategy.js ***!
  \*******************************************************************************/
/*! exports provided: DefaultNamingStrategy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultNamingStrategy", function() { return DefaultNamingStrategy; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_RandomGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/RandomGenerator */ "./node_modules/typeorm/browser/util/RandomGenerator.js");
/* harmony import */ var _util_StringUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/StringUtils */ "./node_modules/typeorm/browser/util/StringUtils.js");
/* harmony import */ var _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../schema-builder/table/Table */ "./node_modules/typeorm/browser/schema-builder/table/Table.js");




/**
 * Naming strategy that is used by default.
 */

var DefaultNamingStrategy =
/** @class */
function () {
  function DefaultNamingStrategy() {}
  /**
   * Normalizes table name.
   *
   * @param targetName Name of the target entity that can be used to generate a table name.
   * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity("name")
   */


  DefaultNamingStrategy.prototype.tableName = function (targetName, userSpecifiedName) {
    return userSpecifiedName ? userSpecifiedName : Object(_util_StringUtils__WEBPACK_IMPORTED_MODULE_2__["snakeCase"])(targetName);
  };
  /**
   * Creates a table name for a junction table of a closure table.
   *
   * @param originalClosureTableName Name of the closure table which owns this junction table.
   */


  DefaultNamingStrategy.prototype.closureJunctionTableName = function (originalClosureTableName) {
    return originalClosureTableName + "_closure";
  };

  DefaultNamingStrategy.prototype.columnName = function (propertyName, customName, embeddedPrefixes) {
    var name = customName || propertyName;
    if (embeddedPrefixes.length) return Object(_util_StringUtils__WEBPACK_IMPORTED_MODULE_2__["camelCase"])(embeddedPrefixes.join("_")) + Object(_util_StringUtils__WEBPACK_IMPORTED_MODULE_2__["titleCase"])(name);
    return name;
  };

  DefaultNamingStrategy.prototype.relationName = function (propertyName) {
    return propertyName;
  };

  DefaultNamingStrategy.prototype.primaryKeyName = function (tableOrName, columnNames) {
    // sort incoming column names to avoid issue when ["id", "name"] and ["name", "id"] arrays
    var clonedColumnNames = tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](columnNames);

    clonedColumnNames.sort();
    var tableName = tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_3__["Table"] ? tableOrName.name : tableOrName;
    var replacedTableName = tableName.replace(".", "_");
    var key = replacedTableName + "_" + clonedColumnNames.join("_");
    return "PK_" + _util_RandomGenerator__WEBPACK_IMPORTED_MODULE_1__["RandomGenerator"].sha1(key).substr(0, 27);
  };

  DefaultNamingStrategy.prototype.uniqueConstraintName = function (tableOrName, columnNames) {
    // sort incoming column names to avoid issue when ["id", "name"] and ["name", "id"] arrays
    var clonedColumnNames = tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](columnNames);

    clonedColumnNames.sort();
    var tableName = tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_3__["Table"] ? tableOrName.name : tableOrName;
    var replacedTableName = tableName.replace(".", "_");
    var key = replacedTableName + "_" + clonedColumnNames.join("_");
    return "UQ_" + _util_RandomGenerator__WEBPACK_IMPORTED_MODULE_1__["RandomGenerator"].sha1(key).substr(0, 27);
  };

  DefaultNamingStrategy.prototype.relationConstraintName = function (tableOrName, columnNames, where) {
    // sort incoming column names to avoid issue when ["id", "name"] and ["name", "id"] arrays
    var clonedColumnNames = tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](columnNames);

    clonedColumnNames.sort();
    var tableName = tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_3__["Table"] ? tableOrName.name : tableOrName;
    var replacedTableName = tableName.replace(".", "_");
    var key = replacedTableName + "_" + clonedColumnNames.join("_");
    if (where) key += "_" + where;
    return "REL_" + _util_RandomGenerator__WEBPACK_IMPORTED_MODULE_1__["RandomGenerator"].sha1(key).substr(0, 26);
  };

  DefaultNamingStrategy.prototype.defaultConstraintName = function (tableOrName, columnName) {
    var tableName = tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_3__["Table"] ? tableOrName.name : tableOrName;
    var replacedTableName = tableName.replace(".", "_");
    var key = replacedTableName + "_" + columnName;
    return "DF_" + _util_RandomGenerator__WEBPACK_IMPORTED_MODULE_1__["RandomGenerator"].sha1(key).substr(0, 27);
  };

  DefaultNamingStrategy.prototype.foreignKeyName = function (tableOrName, columnNames, _referencedTablePath, _referencedColumnNames) {
    // sort incoming column names to avoid issue when ["id", "name"] and ["name", "id"] arrays
    var clonedColumnNames = tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](columnNames);

    clonedColumnNames.sort();
    var tableName = tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_3__["Table"] ? tableOrName.name : tableOrName;
    var replacedTableName = tableName.replace(".", "_");
    var key = replacedTableName + "_" + clonedColumnNames.join("_");
    return "FK_" + _util_RandomGenerator__WEBPACK_IMPORTED_MODULE_1__["RandomGenerator"].sha1(key).substr(0, 27);
  };

  DefaultNamingStrategy.prototype.indexName = function (tableOrName, columnNames, where) {
    // sort incoming column names to avoid issue when ["id", "name"] and ["name", "id"] arrays
    var clonedColumnNames = tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](columnNames);

    clonedColumnNames.sort();
    var tableName = tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_3__["Table"] ? tableOrName.name : tableOrName;
    var replacedTableName = tableName.replace(".", "_");
    var key = replacedTableName + "_" + clonedColumnNames.join("_");
    if (where) key += "_" + where;
    return "IDX_" + _util_RandomGenerator__WEBPACK_IMPORTED_MODULE_1__["RandomGenerator"].sha1(key).substr(0, 26);
  };

  DefaultNamingStrategy.prototype.checkConstraintName = function (tableOrName, expression) {
    var tableName = tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_3__["Table"] ? tableOrName.name : tableOrName;
    var replacedTableName = tableName.replace(".", "_");
    var key = replacedTableName + "_" + expression;
    return "CHK_" + _util_RandomGenerator__WEBPACK_IMPORTED_MODULE_1__["RandomGenerator"].sha1(key).substr(0, 26);
  };

  DefaultNamingStrategy.prototype.exclusionConstraintName = function (tableOrName, expression) {
    var tableName = tableOrName instanceof _schema_builder_table_Table__WEBPACK_IMPORTED_MODULE_3__["Table"] ? tableOrName.name : tableOrName;
    var replacedTableName = tableName.replace(".", "_");
    var key = replacedTableName + "_" + expression;
    return "XCL_" + _util_RandomGenerator__WEBPACK_IMPORTED_MODULE_1__["RandomGenerator"].sha1(key).substr(0, 26);
  };

  DefaultNamingStrategy.prototype.joinColumnName = function (relationName, referencedColumnName) {
    return Object(_util_StringUtils__WEBPACK_IMPORTED_MODULE_2__["camelCase"])(relationName + "_" + referencedColumnName);
  };

  DefaultNamingStrategy.prototype.joinTableName = function (firstTableName, secondTableName, firstPropertyName, secondPropertyName) {
    return Object(_util_StringUtils__WEBPACK_IMPORTED_MODULE_2__["snakeCase"])(firstTableName + "_" + firstPropertyName.replace(/\./gi, "_") + "_" + secondTableName);
  };

  DefaultNamingStrategy.prototype.joinTableColumnDuplicationPrefix = function (columnName, index) {
    return columnName + "_" + index;
  };

  DefaultNamingStrategy.prototype.joinTableColumnName = function (tableName, propertyName, columnName) {
    return Object(_util_StringUtils__WEBPACK_IMPORTED_MODULE_2__["camelCase"])(tableName + "_" + (columnName ? columnName : propertyName));
  };

  DefaultNamingStrategy.prototype.joinTableInverseColumnName = function (tableName, propertyName, columnName) {
    return this.joinTableColumnName(tableName, propertyName, columnName);
  };
  /**
   * Adds globally set prefix to the table name.
   * This method is executed no matter if prefix was set or not.
   * Table name is either user's given table name, either name generated from entity target.
   * Note that table name comes here already normalized by #tableName method.
   */


  DefaultNamingStrategy.prototype.prefixTableName = function (prefix, tableName) {
    return prefix + tableName;
  };

  DefaultNamingStrategy.prototype.eagerJoinRelationAlias = function (alias, propertyPath) {
    return alias + "_" + propertyPath.replace(".", "_");
  };

  return DefaultNamingStrategy;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/persistence/EntityPersistExecutor.js":
/*!***************************************************************************!*\
  !*** ./node_modules/typeorm/browser/persistence/EntityPersistExecutor.js ***!
  \***************************************************************************/
/*! exports provided: EntityPersistExecutor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntityPersistExecutor", function() { return EntityPersistExecutor; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _error_MustBeEntityError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/MustBeEntityError */ "./node_modules/typeorm/browser/error/MustBeEntityError.js");
/* harmony import */ var _SubjectExecutor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SubjectExecutor */ "./node_modules/typeorm/browser/persistence/SubjectExecutor.js");
/* harmony import */ var _error_CannotDetermineEntityError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/CannotDetermineEntityError */ "./node_modules/typeorm/browser/error/CannotDetermineEntityError.js");
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Subject */ "./node_modules/typeorm/browser/persistence/Subject.js");
/* harmony import */ var _subject_builder_OneToManySubjectBuilder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./subject-builder/OneToManySubjectBuilder */ "./node_modules/typeorm/browser/persistence/subject-builder/OneToManySubjectBuilder.js");
/* harmony import */ var _subject_builder_OneToOneInverseSideSubjectBuilder__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./subject-builder/OneToOneInverseSideSubjectBuilder */ "./node_modules/typeorm/browser/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js");
/* harmony import */ var _subject_builder_ManyToManySubjectBuilder__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./subject-builder/ManyToManySubjectBuilder */ "./node_modules/typeorm/browser/persistence/subject-builder/ManyToManySubjectBuilder.js");
/* harmony import */ var _SubjectDatabaseEntityLoader__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./SubjectDatabaseEntityLoader */ "./node_modules/typeorm/browser/persistence/SubjectDatabaseEntityLoader.js");
/* harmony import */ var _subject_builder_CascadesSubjectBuilder__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./subject-builder/CascadesSubjectBuilder */ "./node_modules/typeorm/browser/persistence/subject-builder/CascadesSubjectBuilder.js");
/* harmony import */ var _util_OrmUtils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../util/OrmUtils */ "./node_modules/typeorm/browser/util/OrmUtils.js");
/* harmony import */ var _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../util/PromiseUtils */ "./node_modules/typeorm/browser/util/PromiseUtils.js");












/**
 * Persists a single entity or multiple entities - saves or removes them.
 */

var EntityPersistExecutor =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function EntityPersistExecutor(connection, queryRunner, mode, target, entity, options) {
    this.connection = connection;
    this.queryRunner = queryRunner;
    this.mode = mode;
    this.target = target;
    this.entity = entity;
    this.options = options;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Executes persistence operation ob given entity or entities.
   */


  EntityPersistExecutor.prototype.execute = function () {
    var _this = this; // check if entity we are going to save is valid and is an object


    if (!this.entity || !(this.entity instanceof Object)) return Promise.reject(new _error_MustBeEntityError__WEBPACK_IMPORTED_MODULE_1__["MustBeEntityError"](this.mode, this.entity)); // we MUST call "fake" resolve here to make sure all properties of lazily loaded relations are resolved

    return Promise.resolve().then(function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
        var queryRunner, entities, entitiesInChunks, executors, executorsWithExecutableOperations, isTransactionStartedByUs, error_1, rollbackError_1;

        var _this = this;

        return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
          switch (_a.label) {
            case 0:
              queryRunner = this.queryRunner || this.connection.createQueryRunner("master"); // save data in the query runner - this is useful functionality to share data from outside of the world
              // with third classes - like subscribers and listener methods

              if (this.options && this.options.data) queryRunner.data = this.options.data;
              _a.label = 1;

            case 1:
              _a.trys.push([1,, 15, 18]);

              entities = Array.isArray(this.entity) ? this.entity : [this.entity];
              entitiesInChunks = this.options && this.options.chunk && this.options.chunk > 0 ? _util_OrmUtils__WEBPACK_IMPORTED_MODULE_10__["OrmUtils"].chunk(entities, this.options.chunk) : [entities];
              return [4
              /*yield*/
              , Promise.all(entitiesInChunks.map(function (entities) {
                return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                  var subjects, cascadesSubjectBuilder;

                  var _this = this;

                  return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                    switch (_a.label) {
                      case 0:
                        subjects = []; // create subjects for all entities we received for the persistence

                        entities.forEach(function (entity) {
                          var entityTarget = _this.target ? _this.target : entity.constructor;
                          if (entityTarget === Object) throw new _error_CannotDetermineEntityError__WEBPACK_IMPORTED_MODULE_3__["CannotDetermineEntityError"](_this.mode);
                          subjects.push(new _Subject__WEBPACK_IMPORTED_MODULE_4__["Subject"]({
                            metadata: _this.connection.getMetadata(entityTarget),
                            entity: entity,
                            canBeInserted: _this.mode === "save",
                            canBeUpdated: _this.mode === "save",
                            mustBeRemoved: _this.mode === "remove",
                            canBeSoftRemoved: _this.mode === "soft-remove",
                            canBeRecovered: _this.mode === "recover"
                          }));
                        });
                        cascadesSubjectBuilder = new _subject_builder_CascadesSubjectBuilder__WEBPACK_IMPORTED_MODULE_9__["CascadesSubjectBuilder"](subjects);
                        subjects.forEach(function (subject) {
                          // next step we build list of subjects we will operate with
                          // these subjects are subjects that we need to insert or update alongside with main persisted entity
                          cascadesSubjectBuilder.build(subject, _this.mode);
                        }); // console.timeEnd("building cascades...");
                        // load database entities for all subjects we have
                        // next step is to load database entities for all operate subjects
                        // console.time("loading...");

                        return [4
                        /*yield*/
                        , new _SubjectDatabaseEntityLoader__WEBPACK_IMPORTED_MODULE_8__["SubjectDatabaseEntityLoader"](queryRunner, subjects).load(this.mode)];

                      case 1:
                        // console.timeEnd("building cascades...");
                        // load database entities for all subjects we have
                        // next step is to load database entities for all operate subjects
                        // console.time("loading...");
                        _a.sent(); // console.timeEnd("loading...");
                        // console.time("other subjects...");
                        // build all related subjects and change maps


                        if (this.mode === "save" || this.mode === "soft-remove" || this.mode === "recover") {
                          new _subject_builder_OneToManySubjectBuilder__WEBPACK_IMPORTED_MODULE_5__["OneToManySubjectBuilder"](subjects).build();
                          new _subject_builder_OneToOneInverseSideSubjectBuilder__WEBPACK_IMPORTED_MODULE_6__["OneToOneInverseSideSubjectBuilder"](subjects).build();
                          new _subject_builder_ManyToManySubjectBuilder__WEBPACK_IMPORTED_MODULE_7__["ManyToManySubjectBuilder"](subjects).build();
                        } else {
                          subjects.forEach(function (subject) {
                            if (subject.mustBeRemoved) {
                              new _subject_builder_ManyToManySubjectBuilder__WEBPACK_IMPORTED_MODULE_7__["ManyToManySubjectBuilder"](subjects).buildForAllRemoval(subject);
                            }
                          });
                        } // console.timeEnd("other subjects...");
                        // console.timeEnd("building subjects...");
                        // console.log("subjects", subjects);
                        // create a subject executor


                        return [2
                        /*return*/
                        , new _SubjectExecutor__WEBPACK_IMPORTED_MODULE_2__["SubjectExecutor"](queryRunner, subjects, this.options)];
                    }
                  });
                });
              }))];

            case 2:
              executors = _a.sent();
              executorsWithExecutableOperations = executors.filter(function (executor) {
                return executor.hasExecutableOperations;
              });
              if (executorsWithExecutableOperations.length === 0) return [2
              /*return*/
              ];
              isTransactionStartedByUs = false;
              _a.label = 3;

            case 3:
              _a.trys.push([3, 9,, 14]);

              if (!!queryRunner.isTransactionActive) return [3
              /*break*/
              , 5];
              if (!(!this.options || this.options.transaction !== false)) return [3
              /*break*/
              , 5];
              isTransactionStartedByUs = true;
              return [4
              /*yield*/
              , queryRunner.startTransaction()];

            case 4:
              _a.sent();

              _a.label = 5;

            case 5:
              // execute all persistence operations for all entities we have
              // console.time("executing subject executors...");
              return [4
              /*yield*/
              , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_11__["PromiseUtils"].runInSequence(executorsWithExecutableOperations, function (executor) {
                return executor.execute();
              })];

            case 6:
              // execute all persistence operations for all entities we have
              // console.time("executing subject executors...");
              _a.sent();

              if (!(isTransactionStartedByUs === true)) return [3
              /*break*/
              , 8];
              return [4
              /*yield*/
              , queryRunner.commitTransaction()];

            case 7:
              _a.sent();

              _a.label = 8;

            case 8:
              return [3
              /*break*/
              , 14];

            case 9:
              error_1 = _a.sent();
              if (!isTransactionStartedByUs) return [3
              /*break*/
              , 13];
              _a.label = 10;

            case 10:
              _a.trys.push([10, 12,, 13]);

              return [4
              /*yield*/
              , queryRunner.rollbackTransaction()];

            case 11:
              _a.sent();

              return [3
              /*break*/
              , 13];

            case 12:
              rollbackError_1 = _a.sent();
              return [3
              /*break*/
              , 13];

            case 13:
              throw error_1;

            case 14:
              return [3
              /*break*/
              , 18];

            case 15:
              if (!!this.queryRunner) return [3
              /*break*/
              , 17];
              return [4
              /*yield*/
              , queryRunner.release()];

            case 16:
              _a.sent();

              _a.label = 17;

            case 17:
              return [7
              /*endfinally*/
              ];

            case 18:
              return [2
              /*return*/
              ];
          }
        });
      });
    });
  };

  return EntityPersistExecutor;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/persistence/Subject.js":
/*!*************************************************************!*\
  !*** ./node_modules/typeorm/browser/persistence/Subject.js ***!
  \*************************************************************/
/*! exports provided: Subject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Subject", function() { return Subject; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_OrmUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/OrmUtils */ "./node_modules/typeorm/browser/util/OrmUtils.js");


/**
 * Subject is a subject of persistence.
 * It holds information about each entity that needs to be persisted:
 * - what entity should be persisted
 * - what is database representation of the persisted entity
 * - what entity metadata of the persisted entity
 * - what is allowed to with persisted entity (insert/update/remove)
 *
 * Having this collection of subjects we can perform database queries.
 */

var Subject =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function Subject(options) {
    var _a;
    /**
     * Subject identifier.
     * This identifier is not limited to table entity primary columns.
     * This can be entity id or ids as well as some unique entity properties, like name or title.
     * Insert / Update / Remove operation will be executed by a given identifier.
     */


    this.identifier = undefined;
    /**
     * Copy of entity but with relational ids fulfilled.
     */

    this.entityWithFulfilledIds = undefined;
    /**
     * Indicates if database entity was loaded.
     * No matter if it was found or not, it indicates the fact of loading.
     */

    this.databaseEntityLoaded = false;
    /**
     * Changes needs to be applied in the database for the given subject.
     */

    this.changeMaps = [];
    /**
     * Indicates if this subject can be inserted into the database.
     * This means that this subject either is newly persisted, either can be inserted by cascades.
     */

    this.canBeInserted = false;
    /**
     * Indicates if this subject can be updated in the database.
     * This means that this subject either was persisted, either can be updated by cascades.
     */

    this.canBeUpdated = false;
    /**
     * Indicates if this subject MUST be removed from the database.
     * This means that this subject either was removed, either was removed by cascades.
     */

    this.mustBeRemoved = false;
    /**
     * Indicates if this subject can be soft-removed from the database.
     * This means that this subject either was soft-removed, either was soft-removed by cascades.
     */

    this.canBeSoftRemoved = false;
    /**
     * Indicates if this subject can be recovered from the database.
     * This means that this subject either was recovered, either was recovered by cascades.
     */

    this.canBeRecovered = false;
    /**
     * Relations updated by the change maps.
     */

    this.updatedRelationMaps = [];
    /**
     * List of updated columns
     */

    this.diffColumns = [];
    /**
     * List of updated relations
     */

    this.diffRelations = [];
    this.metadata = options.metadata;
    this.entity = options.entity;
    this.parentSubject = options.parentSubject;
    if (options.canBeInserted !== undefined) this.canBeInserted = options.canBeInserted;
    if (options.canBeUpdated !== undefined) this.canBeUpdated = options.canBeUpdated;
    if (options.mustBeRemoved !== undefined) this.mustBeRemoved = options.mustBeRemoved;
    if (options.canBeSoftRemoved !== undefined) this.canBeSoftRemoved = options.canBeSoftRemoved;
    if (options.canBeRecovered !== undefined) this.canBeRecovered = options.canBeRecovered;
    if (options.identifier !== undefined) this.identifier = options.identifier;
    if (options.changeMaps !== undefined) (_a = this.changeMaps).push.apply(_a, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](options.changeMaps));
    this.recompute();
  }

  Object.defineProperty(Subject.prototype, "mustBeInserted", {
    // -------------------------------------------------------------------------
    // Accessors
    // -------------------------------------------------------------------------

    /**
     * Checks if this subject must be inserted into the database.
     * Subject can be inserted into the database if it is allowed to be inserted (explicitly persisted or by cascades)
     * and if it does not have database entity set.
     */
    get: function get() {
      return this.canBeInserted && !this.databaseEntity;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Subject.prototype, "mustBeUpdated", {
    /**
     * Checks if this subject must be updated into the database.
     * Subject can be updated in the database if it is allowed to be updated (explicitly persisted or by cascades)
     * and if it does have differentiated columns or relations.
     */
    get: function get() {
      return this.canBeUpdated && this.identifier && (this.databaseEntityLoaded === false || this.databaseEntityLoaded && this.databaseEntity) && // ((this.entity && this.databaseEntity) || (!this.entity && !this.databaseEntity)) &&
      this.changeMaps.length > 0;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Subject.prototype, "mustBeSoftRemoved", {
    /**
     * Checks if this subject must be soft-removed into the database.
     * Subject can be updated in the database if it is allowed to be soft-removed (explicitly persisted or by cascades)
     * and if it does have differentiated columns or relations.
     */
    get: function get() {
      return this.canBeSoftRemoved && this.identifier && (this.databaseEntityLoaded === false || this.databaseEntityLoaded && this.databaseEntity);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Subject.prototype, "mustBeRecovered", {
    /**
     * Checks if this subject must be recovered into the database.
     * Subject can be updated in the database if it is allowed to be recovered (explicitly persisted or by cascades)
     * and if it does have differentiated columns or relations.
     */
    get: function get() {
      return this.canBeRecovered && this.identifier && (this.databaseEntityLoaded === false || this.databaseEntityLoaded && this.databaseEntity);
    },
    enumerable: true,
    configurable: true
  }); // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Creates a value set needs to be inserted / updated in the database.
   * Value set is based on the entity and change maps of the subject.
   * Important note: this method pops data from this subject's change maps.
   */

  Subject.prototype.createValueSetAndPopChangeMap = function () {
    var _this = this;

    var changeMapsWithoutValues = [];
    var changeSet = this.changeMaps.reduce(function (updateMap, changeMap) {
      var value = changeMap.value;

      if (value instanceof Subject) {
        // referenced columns can refer on values both which were just inserted and which were present in the model
        // if entity was just inserted valueSets must contain all values from the entity and values just inserted in the database
        // so, here we check if we have a value set then we simply use it as value to get our reference column values
        // otherwise simply use an entity which cannot be just inserted at the moment and have all necessary data
        value = value.insertedValueSet ? value.insertedValueSet : value.entity;
      } // value = changeMap.valueFactory ? changeMap.valueFactory(value) : changeMap.column.createValueMap(value);


      var valueMap;

      if (_this.metadata.isJunction && changeMap.column) {
        valueMap = changeMap.column.createValueMap(changeMap.column.referencedColumn.getEntityValue(value));
      } else if (changeMap.column) {
        valueMap = changeMap.column.createValueMap(value);
      } else if (changeMap.relation) {
        // value can be a related object, for example: post.question = { id: 1 }
        // or value can be a null or direct relation id, e.g. post.question = 1
        // if its a direction relation id then we just set it to the valueMap,
        // however if its an object then we need to extract its relation id map and set it to the valueMap
        if (value instanceof Object) {
          // get relation id, e.g. referenced column name and its value,
          // for example: { id: 1 } which then will be set to relation, e.g. post.category = { id: 1 }
          var relationId = changeMap.relation.getRelationIdMap(value); // but relation id can be empty, for example in the case when you insert a new post with category
          // and both post and category are newly inserted objects (by cascades) and in this case category will not have id
          // this means we need to insert post without question id and update post's questionId once question be inserted
          // that's why we create a new changeMap operation for future updation of the post entity

          if (relationId === undefined) {
            changeMapsWithoutValues.push(changeMap);
            _this.canBeUpdated = true;
            return updateMap;
          }

          valueMap = changeMap.relation.createValueMap(relationId);

          _this.updatedRelationMaps.push({
            relation: changeMap.relation,
            value: relationId
          });
        } else {
          // value can be "null" or direct relation id here
          valueMap = changeMap.relation.createValueMap(value);

          _this.updatedRelationMaps.push({
            relation: changeMap.relation,
            value: value
          });
        }
      }

      _util_OrmUtils__WEBPACK_IMPORTED_MODULE_1__["OrmUtils"].mergeDeep(updateMap, valueMap);
      return updateMap;
    }, {});
    this.changeMaps = changeMapsWithoutValues;
    return changeSet;
  };
  /**
   * Recomputes entityWithFulfilledIds and identifier when entity changes.
   */


  Subject.prototype.recompute = function () {
    var _this = this;

    if (this.entity) {
      this.entityWithFulfilledIds = Object.assign({}, this.entity);

      if (this.parentSubject) {
        this.metadata.primaryColumns.forEach(function (primaryColumn) {
          if (primaryColumn.relationMetadata && primaryColumn.relationMetadata.inverseEntityMetadata === _this.parentSubject.metadata) {
            primaryColumn.setEntityValue(_this.entityWithFulfilledIds, _this.parentSubject.entity);
          }
        });
      }

      this.identifier = this.metadata.getEntityIdMap(this.entityWithFulfilledIds);
    } else if (this.databaseEntity) {
      this.identifier = this.metadata.getEntityIdMap(this.databaseEntity);
    }
  };

  return Subject;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/persistence/SubjectChangedColumnsComputer.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/typeorm/browser/persistence/SubjectChangedColumnsComputer.js ***!
  \***********************************************************************************/
/*! exports provided: SubjectChangedColumnsComputer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubjectChangedColumnsComputer", function() { return SubjectChangedColumnsComputer; });
/* harmony import */ var _util_DateUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/DateUtils */ "./node_modules/typeorm/browser/util/DateUtils.js");
/* harmony import */ var _metadata_EntityMetadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../metadata/EntityMetadata */ "./node_modules/typeorm/browser/metadata/EntityMetadata.js");
/* harmony import */ var _util_OrmUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/OrmUtils */ "./node_modules/typeorm/browser/util/OrmUtils.js");



/**
 * Finds what columns are changed in the subject entities.
 */

var SubjectChangedColumnsComputer =
/** @class */
function () {
  function SubjectChangedColumnsComputer() {} // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Finds what columns are changed in the subject entities.
   */


  SubjectChangedColumnsComputer.prototype.compute = function (subjects) {
    var _this = this;

    subjects.forEach(function (subject) {
      _this.computeDiffColumns(subject);

      _this.computeDiffRelationalColumns(subjects, subject);
    });
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Differentiate columns from the updated entity and entity stored in the database.
   */


  SubjectChangedColumnsComputer.prototype.computeDiffColumns = function (subject) {
    // if there is no persisted entity then nothing to compute changed in it
    if (!subject.entity) return;
    subject.metadata.columns.forEach(function (column) {
      // ignore special columns
      if (column.isVirtual || column.isDiscriminator || column.isUpdateDate || column.isVersion || column.isCreateDate) return;
      var changeMap = subject.changeMaps.find(function (changeMap) {
        return changeMap.column === column;
      });

      if (changeMap) {
        subject.changeMaps.splice(subject.changeMaps.indexOf(changeMap), 1);
      } // get user provided value - column value from the user provided persisted entity


      var entityValue = column.getEntityValue(subject.entity); // we don't perform operation over undefined properties (but we DO need null properties!)

      if (entityValue === undefined) return; // if there is no database entity then all columns are treated as new, e.g. changed

      if (subject.databaseEntity) {
        // get database value of the column
        var databaseValue = column.getEntityValue(subject.databaseEntity); // filter out "relational columns" only in the case if there is a relation object in entity

        if (column.relationMetadata) {
          var value = column.relationMetadata.getEntityValue(subject.entity);
          if (value !== null && value !== undefined) return;
        }

        var normalizedValue = entityValue; // normalize special values to make proper comparision

        if (entityValue !== null) {
          switch (column.type) {
            case "date":
              normalizedValue = _util_DateUtils__WEBPACK_IMPORTED_MODULE_0__["DateUtils"].mixedDateToDateString(entityValue);
              break;

            case "time":
            case "time with time zone":
            case "time without time zone":
            case "timetz":
              normalizedValue = _util_DateUtils__WEBPACK_IMPORTED_MODULE_0__["DateUtils"].mixedDateToTimeString(entityValue);
              break;

            case "datetime":
            case "datetime2":
            case Date:
            case "timestamp":
            case "timestamp without time zone":
            case "timestamp with time zone":
            case "timestamp with local time zone":
            case "timestamptz":
              normalizedValue = _util_DateUtils__WEBPACK_IMPORTED_MODULE_0__["DateUtils"].mixedDateToUtcDatetimeString(entityValue);
              databaseValue = _util_DateUtils__WEBPACK_IMPORTED_MODULE_0__["DateUtils"].mixedDateToUtcDatetimeString(databaseValue);
              break;

            case "json":
            case "jsonb":
              // JSON.stringify doesn't work because postgresql sorts jsonb before save.
              // If you try to save json '[{"messages": "", "attribute Key": "", "level":""}] ' as jsonb,
              // then postgresql will save it as '[{"level": "", "message":"", "attributeKey": ""}]'
              if (_util_OrmUtils__WEBPACK_IMPORTED_MODULE_2__["OrmUtils"].deepCompare(entityValue, databaseValue)) return;
              break;

            case "simple-array":
              normalizedValue = _util_DateUtils__WEBPACK_IMPORTED_MODULE_0__["DateUtils"].simpleArrayToString(entityValue);
              databaseValue = _util_DateUtils__WEBPACK_IMPORTED_MODULE_0__["DateUtils"].simpleArrayToString(databaseValue);
              break;

            case "simple-enum":
              normalizedValue = _util_DateUtils__WEBPACK_IMPORTED_MODULE_0__["DateUtils"].simpleEnumToString(entityValue);
              databaseValue = _util_DateUtils__WEBPACK_IMPORTED_MODULE_0__["DateUtils"].simpleEnumToString(databaseValue);
              break;

            case "simple-json":
              normalizedValue = _util_DateUtils__WEBPACK_IMPORTED_MODULE_0__["DateUtils"].simpleJsonToString(entityValue);
              databaseValue = _util_DateUtils__WEBPACK_IMPORTED_MODULE_0__["DateUtils"].simpleJsonToString(databaseValue);
              break;
          }
        } // if value is not changed - then do nothing


        if (normalizedValue === databaseValue) return;
      }

      subject.diffColumns.push(column);
      subject.changeMaps.push({
        column: column,
        value: entityValue
      });
    });
  };
  /**
   * Difference columns of the owning one-to-one and many-to-one columns.
   */


  SubjectChangedColumnsComputer.prototype.computeDiffRelationalColumns = function (allSubjects, subject) {
    // if there is no persisted entity then nothing to compute changed in it
    if (!subject.entity) return;
    subject.metadata.relationsWithJoinColumns.forEach(function (relation) {
      // get the related entity from the persisted entity
      var relatedEntity = relation.getEntityValue(subject.entity); // we don't perform operation over undefined properties (but we DO need null properties!)

      if (relatedEntity === undefined) return; // if there is no database entity then all relational columns are treated as new, e.g. changed

      if (subject.databaseEntity) {
        // here we cover two scenarios:
        // 1. related entity can be another entity which is natural way
        // 2. related entity can be just an entity id
        // if relation entity is just a relation id set (for example post.tag = 1)
        // then we create an id map from it to make a proper comparision
        var relatedEntityRelationIdMap = relatedEntity;
        if (relatedEntityRelationIdMap !== null && relatedEntityRelationIdMap instanceof Object) relatedEntityRelationIdMap = relation.getRelationIdMap(relatedEntityRelationIdMap); // get database related entity. Since loadRelationIds are used on databaseEntity
        // related entity will contain only its relation ids

        var databaseRelatedEntityRelationIdMap = relation.getEntityValue(subject.databaseEntity); // if relation ids are equal then we don't need to update anything

        var areRelatedIdsEqual = _metadata_EntityMetadata__WEBPACK_IMPORTED_MODULE_1__["EntityMetadata"].compareIds(relatedEntityRelationIdMap, databaseRelatedEntityRelationIdMap);

        if (areRelatedIdsEqual) {
          return;
        } else {
          subject.diffRelations.push(relation);
        }
      } // if there is an inserted subject for the related entity of the persisted entity then use it as related entity
      // this code is used for related entities without ids to be properly inserted (and then updated if needed)


      var valueSubject = allSubjects.find(function (subject) {
        return subject.mustBeInserted && subject.entity === relatedEntity;
      });
      if (valueSubject) relatedEntity = valueSubject; // find if there is already a relation to be changed

      var changeMap = subject.changeMaps.find(function (changeMap) {
        return changeMap.relation === relation;
      });

      if (changeMap) {
        // and update its value if it was found
        changeMap.value = relatedEntity;
      } else {
        // if it wasn't found add a new relation for change
        subject.changeMaps.push({
          relation: relation,
          value: relatedEntity
        });
      }
    });
  };

  return SubjectChangedColumnsComputer;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/persistence/SubjectDatabaseEntityLoader.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/typeorm/browser/persistence/SubjectDatabaseEntityLoader.js ***!
  \*********************************************************************************/
/*! exports provided: SubjectDatabaseEntityLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubjectDatabaseEntityLoader", function() { return SubjectDatabaseEntityLoader; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Loads database entities for all operate subjects which do not have database entity set.
 * All entities that we load database entities for are marked as updated or inserted.
 * To understand which of them really needs to be inserted or updated we need to load
 * their original representations from the database.
 */

var SubjectDatabaseEntityLoader =
/** @class */
function () {
  // ---------------------------------------------------------------------
  // Constructor
  // ---------------------------------------------------------------------
  function SubjectDatabaseEntityLoader(queryRunner, subjects) {
    this.queryRunner = queryRunner;
    this.subjects = subjects;
  } // ---------------------------------------------------------------------
  // Public Methods
  // ---------------------------------------------------------------------

  /**
   * Loads database entities for all subjects.
   *
   * loadAllRelations flag is used to load all relation ids of the object, no matter if they present in subject entity or not.
   * This option is used for deletion.
   */


  SubjectDatabaseEntityLoader.prototype.load = function (operationType) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var promises;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            promises = this.groupByEntityTargets().map(function (subjectGroup) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var e_1, _a, allIds, allSubjects, loadRelationPropertyPaths, findOptions, entities, allSubjects_1, allSubjects_1_1, subject;

                var _this = this;

                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
                  switch (_b.label) {
                    case 0:
                      allIds = [];
                      allSubjects = [];
                      subjectGroup.subjects.forEach(function (subject) {
                        // we don't load if subject already has a database entity loaded
                        if (subject.databaseEntity || !subject.identifier) return;
                        allIds.push(subject.identifier);
                        allSubjects.push(subject);
                      }); // if there no ids found (means all entities are new and have generated ids) - then nothing to load there

                      if (!allIds.length) return [2
                      /*return*/
                      ];
                      loadRelationPropertyPaths = []; // for the save, soft-remove and recover operation
                      // extract all property paths of the relations we need to load relation ids for
                      // this is for optimization purpose - this way we don't load relation ids for entities
                      // whose relations are undefined, and since they are undefined its really pointless to
                      // load something for them, since undefined properties are skipped by the orm

                      if (operationType === "save" || operationType === "soft-remove" || operationType === "recover") {
                        subjectGroup.subjects.forEach(function (subject) {
                          // gets all relation property paths that exist in the persisted entity.
                          subject.metadata.relations.forEach(function (relation) {
                            var value = relation.getEntityValue(subject.entityWithFulfilledIds);
                            if (value === undefined) return;
                            if (loadRelationPropertyPaths.indexOf(relation.propertyPath) === -1) loadRelationPropertyPaths.push(relation.propertyPath);
                          });
                        });
                      } else {
                        // remove
                        // for remove operation
                        // we only need to load junction relation ids since only they are removed by cascades
                        loadRelationPropertyPaths.push.apply( // remove
                        loadRelationPropertyPaths, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](subjectGroup.subjects[0].metadata.manyToManyRelations.map(function (relation) {
                          return relation.propertyPath;
                        })));
                      }

                      findOptions = {
                        loadEagerRelations: false,
                        loadRelationIds: {
                          relations: loadRelationPropertyPaths,
                          disableMixedMap: true
                        },
                        // the soft-deleted entities should be included in the loaded entities for recover operation
                        withDeleted: true
                      };
                      return [4
                      /*yield*/
                      , this.queryRunner.manager.getRepository(subjectGroup.target).findByIds(allIds, findOptions)];

                    case 1:
                      entities = _b.sent(); // now when we have entities we need to find subject of each entity
                      // and insert that entity into database entity of the found subjects

                      entities.forEach(function (entity) {
                        var subjects = _this.findByPersistEntityLike(subjectGroup.target, entity);

                        subjects.forEach(function (subject) {
                          subject.databaseEntity = entity;
                          if (!subject.identifier) subject.identifier = subject.metadata.hasAllPrimaryKeys(entity) ? subject.metadata.getEntityIdMap(entity) : undefined;
                        });
                      });

                      try {
                        // this way we tell what subjects we tried to load database entities of
                        for (allSubjects_1 = tslib__WEBPACK_IMPORTED_MODULE_0__["__values"](allSubjects), allSubjects_1_1 = allSubjects_1.next(); !allSubjects_1_1.done; allSubjects_1_1 = allSubjects_1.next()) {
                          subject = allSubjects_1_1.value;
                          subject.databaseEntityLoaded = true;
                        }
                      } catch (e_1_1) {
                        e_1 = {
                          error: e_1_1
                        };
                      } finally {
                        try {
                          if (allSubjects_1_1 && !allSubjects_1_1.done && (_a = allSubjects_1["return"])) _a.call(allSubjects_1);
                        } finally {
                          if (e_1) throw e_1.error;
                        }
                      }

                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            });
            return [4
            /*yield*/
            , Promise.all(promises)];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  }; // ---------------------------------------------------------------------
  // Protected Methods
  // ---------------------------------------------------------------------

  /**
   * Finds subjects where entity like given subject's entity.
   * Comparision made by entity id.
   * Multiple subjects may be returned if duplicates are present in the subject array.
   * This will likely result in the same row being updated multiple times during a transaction.
   */


  SubjectDatabaseEntityLoader.prototype.findByPersistEntityLike = function (entityTarget, entity) {
    return this.subjects.filter(function (subject) {
      if (!subject.entity) return false;
      if (subject.entity === entity) return true;
      return subject.metadata.target === entityTarget && subject.metadata.compareEntities(subject.entityWithFulfilledIds, entity);
    });
  };
  /**
   * Groups given Subject objects into groups separated by entity targets.
   */


  SubjectDatabaseEntityLoader.prototype.groupByEntityTargets = function () {
    return this.subjects.reduce(function (groups, operatedEntity) {
      var group = groups.find(function (group) {
        return group.target === operatedEntity.metadata.target;
      });

      if (!group) {
        group = {
          target: operatedEntity.metadata.target,
          subjects: []
        };
        groups.push(group);
      }

      group.subjects.push(operatedEntity);
      return groups;
    }, []);
  };

  return SubjectDatabaseEntityLoader;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/persistence/SubjectExecutor.js":
/*!*********************************************************************!*\
  !*** ./node_modules/typeorm/browser/persistence/SubjectExecutor.js ***!
  \*********************************************************************/
/*! exports provided: SubjectExecutor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubjectExecutor", function() { return SubjectExecutor; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../driver/sap/SapDriver */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");
/* harmony import */ var _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/PromiseUtils */ "./node_modules/typeorm/browser/util/PromiseUtils.js");
/* harmony import */ var _SubjectTopoligicalSorter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SubjectTopoligicalSorter */ "./node_modules/typeorm/browser/persistence/SubjectTopoligicalSorter.js");
/* harmony import */ var _SubjectChangedColumnsComputer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SubjectChangedColumnsComputer */ "./node_modules/typeorm/browser/persistence/SubjectChangedColumnsComputer.js");
/* harmony import */ var _error_SubjectWithoutIdentifierError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/SubjectWithoutIdentifierError */ "./node_modules/typeorm/browser/error/SubjectWithoutIdentifierError.js");
/* harmony import */ var _error_SubjectRemovedAndUpdatedError__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../error/SubjectRemovedAndUpdatedError */ "./node_modules/typeorm/browser/error/SubjectRemovedAndUpdatedError.js");
/* harmony import */ var _subscriber_BroadcasterResult__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../subscriber/BroadcasterResult */ "./node_modules/typeorm/browser/subscriber/BroadcasterResult.js");
/* harmony import */ var _tree_NestedSetSubjectExecutor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./tree/NestedSetSubjectExecutor */ "./node_modules/typeorm/browser/persistence/tree/NestedSetSubjectExecutor.js");
/* harmony import */ var _tree_ClosureSubjectExecutor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./tree/ClosureSubjectExecutor */ "./node_modules/typeorm/browser/persistence/tree/ClosureSubjectExecutor.js");
/* harmony import */ var _tree_MaterializedPathSubjectExecutor__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./tree/MaterializedPathSubjectExecutor */ "./node_modules/typeorm/browser/persistence/tree/MaterializedPathSubjectExecutor.js");
/* harmony import */ var _util_OrmUtils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../util/OrmUtils */ "./node_modules/typeorm/browser/util/OrmUtils.js");















/**
 * Executes all database operations (inserts, updated, deletes) that must be executed
 * with given persistence subjects.
 */

var SubjectExecutor =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function SubjectExecutor(queryRunner, subjects, options) {
    // -------------------------------------------------------------------------
    // Public Properties
    // -------------------------------------------------------------------------

    /**
     * Indicates if executor has any operations to execute (e.g. has insert / update / delete operations to be executed).
     */
    this.hasExecutableOperations = false;
    /**
     * Subjects that must be inserted.
     */

    this.insertSubjects = [];
    /**
     * Subjects that must be updated.
     */

    this.updateSubjects = [];
    /**
     * Subjects that must be removed.
     */

    this.removeSubjects = [];
    /**
     * Subjects that must be soft-removed.
     */

    this.softRemoveSubjects = [];
    /**
     * Subjects that must be recovered.
     */

    this.recoverSubjects = [];
    this.queryRunner = queryRunner;
    this.allSubjects = subjects;
    this.options = options;
    this.validate();
    this.recompute();
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Executes all operations over given array of subjects.
   * Executes queries using given query runner.
   */


  SubjectExecutor.prototype.execute = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var broadcasterResult;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            broadcasterResult = undefined;
            if (!(!this.options || this.options.listeners !== false)) return [3
            /*break*/
            , 2]; // console.time(".broadcastBeforeEventsForAll");

            broadcasterResult = this.broadcastBeforeEventsForAll();
            if (!(broadcasterResult.promises.length > 0)) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , Promise.all(broadcasterResult.promises)];

          case 1:
            _a.sent();

            _a.label = 2;

          case 2:
            // since event listeners and subscribers can call save methods and/or trigger entity changes we need to recompute operational subjects
            // recompute only in the case if any listener or subscriber was really executed
            if (broadcasterResult && broadcasterResult.count > 0) {
              // console.time(".recompute");
              this.insertSubjects.forEach(function (subject) {
                return subject.recompute();
              });
              this.updateSubjects.forEach(function (subject) {
                return subject.recompute();
              });
              this.removeSubjects.forEach(function (subject) {
                return subject.recompute();
              });
              this.softRemoveSubjects.forEach(function (subject) {
                return subject.recompute();
              });
              this.recoverSubjects.forEach(function (subject) {
                return subject.recompute();
              });
              this.recompute(); // console.timeEnd(".recompute");
            } // make sure our insert subjects are sorted (using topological sorting) to make cascade inserts work properly
            // console.timeEnd("prepare");
            // execute all insert operations
            // console.time(".insertion");


            this.insertSubjects = new _SubjectTopoligicalSorter__WEBPACK_IMPORTED_MODULE_3__["SubjectTopoligicalSorter"](this.insertSubjects).sort("insert");
            return [4
            /*yield*/
            , this.executeInsertOperations()];

          case 3:
            _a.sent(); // console.timeEnd(".insertion");
            // recompute update operations since insertion can create updation operations for the
            // properties it wasn't able to handle on its own (referenced columns)


            this.updateSubjects = this.allSubjects.filter(function (subject) {
              return subject.mustBeUpdated;
            }); // execute update operations
            // console.time(".updation");

            return [4
            /*yield*/
            , this.executeUpdateOperations()];

          case 4:
            // execute update operations
            // console.time(".updation");
            _a.sent(); // console.timeEnd(".updation");
            // make sure our remove subjects are sorted (using topological sorting) when multiple entities are passed for the removal
            // console.time(".removal");


            this.removeSubjects = new _SubjectTopoligicalSorter__WEBPACK_IMPORTED_MODULE_3__["SubjectTopoligicalSorter"](this.removeSubjects).sort("delete");
            return [4
            /*yield*/
            , this.executeRemoveOperations()];

          case 5:
            _a.sent(); // console.timeEnd(".removal");
            // recompute soft-remove operations


            this.softRemoveSubjects = this.allSubjects.filter(function (subject) {
              return subject.mustBeSoftRemoved;
            }); // execute soft-remove operations

            return [4
            /*yield*/
            , this.executeSoftRemoveOperations()];

          case 6:
            // execute soft-remove operations
            _a.sent(); // recompute recover operations


            this.recoverSubjects = this.allSubjects.filter(function (subject) {
              return subject.mustBeRecovered;
            }); // execute recover operations

            return [4
            /*yield*/
            , this.executeRecoverOperations()];

          case 7:
            // execute recover operations
            _a.sent(); // update all special columns in persisted entities, like inserted id or remove ids from the removed entities
            // console.time(".updateSpecialColumnsInPersistedEntities");


            return [4
            /*yield*/
            , this.updateSpecialColumnsInPersistedEntities()];

          case 8:
            // update all special columns in persisted entities, like inserted id or remove ids from the removed entities
            // console.time(".updateSpecialColumnsInPersistedEntities");
            _a.sent();

            if (!(!this.options || this.options.listeners !== false)) return [3
            /*break*/
            , 10]; // console.time(".broadcastAfterEventsForAll");

            broadcasterResult = this.broadcastAfterEventsForAll();
            if (!(broadcasterResult.promises.length > 0)) return [3
            /*break*/
            , 10];
            return [4
            /*yield*/
            , Promise.all(broadcasterResult.promises)];

          case 9:
            _a.sent();

            _a.label = 10;

          case 10:
            return [2
            /*return*/
            ];
        }
      });
    });
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Validates all given subjects.
   */


  SubjectExecutor.prototype.validate = function () {
    this.allSubjects.forEach(function (subject) {
      if (subject.mustBeUpdated && subject.mustBeRemoved) throw new _error_SubjectRemovedAndUpdatedError__WEBPACK_IMPORTED_MODULE_6__["SubjectRemovedAndUpdatedError"](subject);
    });
  };
  /**
   * Performs entity re-computations - finds changed columns, re-builds insert/update/remove subjects.
   */


  SubjectExecutor.prototype.recompute = function () {
    new _SubjectChangedColumnsComputer__WEBPACK_IMPORTED_MODULE_4__["SubjectChangedColumnsComputer"]().compute(this.allSubjects);
    this.insertSubjects = this.allSubjects.filter(function (subject) {
      return subject.mustBeInserted;
    });
    this.updateSubjects = this.allSubjects.filter(function (subject) {
      return subject.mustBeUpdated;
    });
    this.removeSubjects = this.allSubjects.filter(function (subject) {
      return subject.mustBeRemoved;
    });
    this.softRemoveSubjects = this.allSubjects.filter(function (subject) {
      return subject.mustBeSoftRemoved;
    });
    this.recoverSubjects = this.allSubjects.filter(function (subject) {
      return subject.mustBeRecovered;
    });
    this.hasExecutableOperations = this.insertSubjects.length > 0 || this.updateSubjects.length > 0 || this.removeSubjects.length > 0 || this.softRemoveSubjects.length > 0 || this.recoverSubjects.length > 0;
  };
  /**
   * Broadcasts "BEFORE_INSERT", "BEFORE_UPDATE", "BEFORE_REMOVE" events for all given subjects.
   */


  SubjectExecutor.prototype.broadcastBeforeEventsForAll = function () {
    var _this = this;

    var result = new _subscriber_BroadcasterResult__WEBPACK_IMPORTED_MODULE_7__["BroadcasterResult"]();
    if (this.insertSubjects.length) this.insertSubjects.forEach(function (subject) {
      return _this.queryRunner.broadcaster.broadcastBeforeInsertEvent(result, subject.metadata, subject.entity);
    });
    if (this.updateSubjects.length) this.updateSubjects.forEach(function (subject) {
      return _this.queryRunner.broadcaster.broadcastBeforeUpdateEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.diffColumns, subject.diffRelations);
    });
    if (this.removeSubjects.length) this.removeSubjects.forEach(function (subject) {
      return _this.queryRunner.broadcaster.broadcastBeforeRemoveEvent(result, subject.metadata, subject.entity, subject.databaseEntity);
    });
    if (this.softRemoveSubjects.length) this.softRemoveSubjects.forEach(function (subject) {
      return _this.queryRunner.broadcaster.broadcastBeforeUpdateEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.diffColumns, subject.diffRelations);
    });
    if (this.recoverSubjects.length) this.recoverSubjects.forEach(function (subject) {
      return _this.queryRunner.broadcaster.broadcastBeforeUpdateEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.diffColumns, subject.diffRelations);
    });
    return result;
  };
  /**
   * Broadcasts "AFTER_INSERT", "AFTER_UPDATE", "AFTER_REMOVE" events for all given subjects.
   * Returns void if there wasn't any listener or subscriber executed.
   * Note: this method has a performance-optimized code organization.
   */


  SubjectExecutor.prototype.broadcastAfterEventsForAll = function () {
    var _this = this;

    var result = new _subscriber_BroadcasterResult__WEBPACK_IMPORTED_MODULE_7__["BroadcasterResult"]();
    if (this.insertSubjects.length) this.insertSubjects.forEach(function (subject) {
      return _this.queryRunner.broadcaster.broadcastAfterInsertEvent(result, subject.metadata, subject.entity);
    });
    if (this.updateSubjects.length) this.updateSubjects.forEach(function (subject) {
      return _this.queryRunner.broadcaster.broadcastAfterUpdateEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.diffColumns, subject.diffRelations);
    });
    if (this.removeSubjects.length) this.removeSubjects.forEach(function (subject) {
      return _this.queryRunner.broadcaster.broadcastAfterRemoveEvent(result, subject.metadata, subject.entity, subject.databaseEntity);
    });
    if (this.softRemoveSubjects.length) this.softRemoveSubjects.forEach(function (subject) {
      return _this.queryRunner.broadcaster.broadcastAfterUpdateEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.diffColumns, subject.diffRelations);
    });
    if (this.recoverSubjects.length) this.recoverSubjects.forEach(function (subject) {
      return _this.queryRunner.broadcaster.broadcastAfterUpdateEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.diffColumns, subject.diffRelations);
    });
    return result;
  };
  /**
   * Executes insert operations.
   */


  SubjectExecutor.prototype.executeInsertOperations = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _a, groupedInsertSubjects, groupedInsertSubjectKeys;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](this.groupBulkSubjects(this.insertSubjects, "insert"), 2), groupedInsertSubjects = _a[0], groupedInsertSubjectKeys = _a[1]; // then we run insertion in the sequential order which is important since we have an ordered subjects

            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_2__["PromiseUtils"].runInSequence(groupedInsertSubjectKeys, function (groupName) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var subjects, bulkInsertMaps, bulkInsertSubjects, singleInsertSubjects, manager, insertResult_1, insertResult_2;

                var _this = this;

                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      subjects = groupedInsertSubjects[groupName];
                      bulkInsertMaps = [];
                      bulkInsertSubjects = [];
                      singleInsertSubjects = [];

                      if (this.queryRunner.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["MongoDriver"]) {
                        subjects.forEach(function (subject) {
                          if (subject.metadata.createDateColumn && subject.entity) {
                            subject.entity[subject.metadata.createDateColumn.databaseName] = new Date();
                          }

                          if (subject.metadata.updateDateColumn && subject.entity) {
                            subject.entity[subject.metadata.updateDateColumn.databaseName] = new Date();
                          }

                          subject.createValueSetAndPopChangeMap();
                          bulkInsertSubjects.push(subject);
                          bulkInsertMaps.push(subject.entity);
                        });
                      } else if (this.queryRunner.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["OracleDriver"]) {
                        subjects.forEach(function (subject) {
                          singleInsertSubjects.push(subject);
                        });
                      } else {
                        subjects.forEach(function (subject) {
                          // we do not insert in bulk in following cases:
                          // - when there is no values in insert (only defaults are inserted), since we cannot use DEFAULT VALUES expression for multiple inserted rows
                          // - when entity is a tree table, since tree tables require extra operation per each inserted row
                          // - when oracle is used, since oracle's bulk insertion is very bad
                          if (subject.changeMaps.length === 0 || subject.metadata.treeType || _this.queryRunner.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["OracleDriver"] || _this.queryRunner.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["SapDriver"]) {
                            singleInsertSubjects.push(subject);
                          } else {
                            bulkInsertSubjects.push(subject);
                            bulkInsertMaps.push(subject.createValueSetAndPopChangeMap());
                          }
                        });
                      }

                      if (!(this.queryRunner instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["MongoQueryRunner"])) return [3
                      /*break*/
                      , 2];
                      manager = this.queryRunner.manager;
                      return [4
                      /*yield*/
                      , manager.insert(subjects[0].metadata.target, bulkInsertMaps)];

                    case 1:
                      insertResult_1 = _a.sent();
                      subjects.forEach(function (subject, index) {
                        subject.identifier = insertResult_1.identifiers[index];
                        subject.generatedMap = insertResult_1.generatedMaps[index];
                        subject.insertedValueSet = bulkInsertMaps[index];
                      });
                      return [3
                      /*break*/
                      , 6];

                    case 2:
                      if (!(bulkInsertMaps.length > 0)) return [3
                      /*break*/
                      , 4];
                      return [4
                      /*yield*/
                      , this.queryRunner.manager.createQueryBuilder().insert().into(subjects[0].metadata.target).values(bulkInsertMaps).updateEntity(this.options && this.options.reload === false ? false : true).callListeners(false).execute()];

                    case 3:
                      insertResult_2 = _a.sent();
                      bulkInsertSubjects.forEach(function (subject, index) {
                        subject.identifier = insertResult_2.identifiers[index];
                        subject.generatedMap = insertResult_2.generatedMaps[index];
                        subject.insertedValueSet = bulkInsertMaps[index];
                      });
                      _a.label = 4;

                    case 4:
                      if (!(singleInsertSubjects.length > 0)) return [3
                      /*break*/
                      , 6];
                      return [4
                      /*yield*/
                      , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_2__["PromiseUtils"].runInSequence(singleInsertSubjects, function (subject) {
                        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                          return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                            switch (_a.label) {
                              case 0:
                                subject.insertedValueSet = subject.createValueSetAndPopChangeMap(); // important to have because query builder sets inserted values into it

                                if (!(subject.metadata.treeType === "nested-set")) return [3
                                /*break*/
                                , 2];
                                return [4
                                /*yield*/
                                , new _tree_NestedSetSubjectExecutor__WEBPACK_IMPORTED_MODULE_8__["NestedSetSubjectExecutor"](this.queryRunner).insert(subject)];

                              case 1:
                                _a.sent();

                                _a.label = 2;

                              case 2:
                                return [4
                                /*yield*/
                                , this.queryRunner.manager.createQueryBuilder().insert().into(subject.metadata.target).values(subject.insertedValueSet).updateEntity(this.options && this.options.reload === false ? false : true).callListeners(false).execute().then(function (insertResult) {
                                  subject.identifier = insertResult.identifiers[0];
                                  subject.generatedMap = insertResult.generatedMaps[0];
                                })];

                              case 3:
                                _a.sent();

                                if (!(subject.metadata.treeType === "closure-table")) return [3
                                /*break*/
                                , 5];
                                return [4
                                /*yield*/
                                , new _tree_ClosureSubjectExecutor__WEBPACK_IMPORTED_MODULE_9__["ClosureSubjectExecutor"](this.queryRunner).insert(subject)];

                              case 4:
                                _a.sent();

                                return [3
                                /*break*/
                                , 7];

                              case 5:
                                if (!(subject.metadata.treeType === "materialized-path")) return [3
                                /*break*/
                                , 7];
                                return [4
                                /*yield*/
                                , new _tree_MaterializedPathSubjectExecutor__WEBPACK_IMPORTED_MODULE_10__["MaterializedPathSubjectExecutor"](this.queryRunner).insert(subject)];

                              case 6:
                                _a.sent();

                                _a.label = 7;

                              case 7:
                                return [2
                                /*return*/
                                ];
                            }
                          });
                        });
                      })];

                    case 5:
                      _a.sent();

                      _a.label = 6;

                    case 6:
                      subjects.forEach(function (subject) {
                        if (subject.generatedMap) {
                          subject.metadata.columns.forEach(function (column) {
                            var value = column.getEntityValue(subject.generatedMap);

                            if (value !== undefined && value !== null) {
                              var preparedValue = _this.queryRunner.connection.driver.prepareHydratedValue(value, column);

                              column.setEntityValue(subject.generatedMap, preparedValue);
                            }
                          });
                        }
                      });
                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            })];

          case 1:
            // then we run insertion in the sequential order which is important since we have an ordered subjects
            _b.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Updates all given subjects in the database.
   */


  SubjectExecutor.prototype.executeUpdateOperations = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , Promise.all(this.updateSubjects.map(function (subject) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var partialEntity, manager, updateMap, updateQueryBuilder, updateResult;

                var _this = this;

                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      if (!subject.identifier) throw new _error_SubjectWithoutIdentifierError__WEBPACK_IMPORTED_MODULE_5__["SubjectWithoutIdentifierError"](subject);
                      if (!(this.queryRunner instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["MongoQueryRunner"])) return [3
                      /*break*/
                      , 2];
                      partialEntity = _util_OrmUtils__WEBPACK_IMPORTED_MODULE_11__["OrmUtils"].mergeDeep({}, subject.entity);

                      if (subject.metadata.objectIdColumn && subject.metadata.objectIdColumn.propertyName) {
                        delete partialEntity[subject.metadata.objectIdColumn.propertyName];
                      }

                      if (subject.metadata.createDateColumn && subject.metadata.createDateColumn.propertyName) {
                        delete partialEntity[subject.metadata.createDateColumn.propertyName];
                      }

                      if (subject.metadata.updateDateColumn && subject.metadata.updateDateColumn.propertyName) {
                        partialEntity[subject.metadata.updateDateColumn.propertyName] = new Date();
                      }

                      manager = this.queryRunner.manager;
                      return [4
                      /*yield*/
                      , manager.update(subject.metadata.target, subject.identifier, partialEntity)];

                    case 1:
                      _a.sent();

                      return [3
                      /*break*/
                      , 4];

                    case 2:
                      updateMap = subject.createValueSetAndPopChangeMap();
                      updateQueryBuilder = this.queryRunner.manager.createQueryBuilder().update(subject.metadata.target).set(updateMap).updateEntity(this.options && this.options.reload === false ? false : true).callListeners(false);

                      if (subject.entity) {
                        updateQueryBuilder.whereEntity(subject.identifier);
                      } else {
                        // in this case identifier is just conditions object to update by
                        updateQueryBuilder.where(subject.identifier);
                      }

                      return [4
                      /*yield*/
                      , updateQueryBuilder.execute()];

                    case 3:
                      updateResult = _a.sent();
                      subject.generatedMap = updateResult.generatedMaps[0];

                      if (subject.generatedMap) {
                        subject.metadata.columns.forEach(function (column) {
                          var value = column.getEntityValue(subject.generatedMap);

                          if (value !== undefined && value !== null) {
                            var preparedValue = _this.queryRunner.connection.driver.prepareHydratedValue(value, column);

                            column.setEntityValue(subject.generatedMap, preparedValue);
                          }
                        });
                      }

                      _a.label = 4;

                    case 4:
                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            }))];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Removes all given subjects from the database.
   *
   * todo: we need to apply topological sort here as well
   */


  SubjectExecutor.prototype.executeRemoveOperations = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _a, groupedRemoveSubjects, groupedRemoveSubjectKeys;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](this.groupBulkSubjects(this.removeSubjects, "delete"), 2), groupedRemoveSubjects = _a[0], groupedRemoveSubjectKeys = _a[1];
            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_2__["PromiseUtils"].runInSequence(groupedRemoveSubjectKeys, function (groupName) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var subjects, deleteMaps, manager;
                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      subjects = groupedRemoveSubjects[groupName];
                      deleteMaps = subjects.map(function (subject) {
                        if (!subject.identifier) throw new _error_SubjectWithoutIdentifierError__WEBPACK_IMPORTED_MODULE_5__["SubjectWithoutIdentifierError"](subject);
                        return subject.identifier;
                      });
                      if (!(this.queryRunner instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["MongoQueryRunner"])) return [3
                      /*break*/
                      , 2];
                      manager = this.queryRunner.manager;
                      return [4
                      /*yield*/
                      , manager["delete"](subjects[0].metadata.target, deleteMaps)];

                    case 1:
                      _a.sent();

                      return [3
                      /*break*/
                      , 4];

                    case 2:
                      // here we execute our deletion query
                      // we don't need to specify entities and set update entity to true since the only thing query builder
                      // will do for use is a primary keys deletion which is handled by us later once persistence is finished
                      // also, we disable listeners because we call them on our own in persistence layer
                      return [4
                      /*yield*/
                      , this.queryRunner.manager.createQueryBuilder()["delete"]().from(subjects[0].metadata.target).where(deleteMaps).callListeners(false).execute()];

                    case 3:
                      // here we execute our deletion query
                      // we don't need to specify entities and set update entity to true since the only thing query builder
                      // will do for use is a primary keys deletion which is handled by us later once persistence is finished
                      // also, we disable listeners because we call them on our own in persistence layer
                      _a.sent();

                      _a.label = 4;

                    case 4:
                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            })];

          case 1:
            _b.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Soft-removes all given subjects in the database.
   */


  SubjectExecutor.prototype.executeSoftRemoveOperations = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , Promise.all(this.softRemoveSubjects.map(function (subject) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var partialEntity, manager, softDeleteQueryBuilder, updateResult;

                var _this = this;

                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      if (!subject.identifier) throw new _error_SubjectWithoutIdentifierError__WEBPACK_IMPORTED_MODULE_5__["SubjectWithoutIdentifierError"](subject);
                      if (!(this.queryRunner instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["MongoQueryRunner"])) return [3
                      /*break*/
                      , 2];
                      partialEntity = _util_OrmUtils__WEBPACK_IMPORTED_MODULE_11__["OrmUtils"].mergeDeep({}, subject.entity);

                      if (subject.metadata.objectIdColumn && subject.metadata.objectIdColumn.propertyName) {
                        delete partialEntity[subject.metadata.objectIdColumn.propertyName];
                      }

                      if (subject.metadata.createDateColumn && subject.metadata.createDateColumn.propertyName) {
                        delete partialEntity[subject.metadata.createDateColumn.propertyName];
                      }

                      if (subject.metadata.updateDateColumn && subject.metadata.updateDateColumn.propertyName) {
                        partialEntity[subject.metadata.updateDateColumn.propertyName] = new Date();
                      }

                      if (subject.metadata.deleteDateColumn && subject.metadata.deleteDateColumn.propertyName) {
                        partialEntity[subject.metadata.deleteDateColumn.propertyName] = new Date();
                      }

                      manager = this.queryRunner.manager;
                      return [4
                      /*yield*/
                      , manager.update(subject.metadata.target, subject.identifier, partialEntity)];

                    case 1:
                      _a.sent();

                      return [3
                      /*break*/
                      , 4];

                    case 2:
                      softDeleteQueryBuilder = this.queryRunner.manager.createQueryBuilder().softDelete().from(subject.metadata.target).updateEntity(this.options && this.options.reload === false ? false : true).callListeners(false);

                      if (subject.entity) {
                        softDeleteQueryBuilder.whereEntity(subject.identifier);
                      } else {
                        // in this case identifier is just conditions object to update by
                        softDeleteQueryBuilder.where(subject.identifier);
                      }

                      return [4
                      /*yield*/
                      , softDeleteQueryBuilder.execute()];

                    case 3:
                      updateResult = _a.sent();
                      subject.generatedMap = updateResult.generatedMaps[0];

                      if (subject.generatedMap) {
                        subject.metadata.columns.forEach(function (column) {
                          var value = column.getEntityValue(subject.generatedMap);

                          if (value !== undefined && value !== null) {
                            var preparedValue = _this.queryRunner.connection.driver.prepareHydratedValue(value, column);

                            column.setEntityValue(subject.generatedMap, preparedValue);
                          }
                        });
                      }

                      _a.label = 4;

                    case 4:
                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            }))];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Recovers all given subjects in the database.
   */


  SubjectExecutor.prototype.executeRecoverOperations = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , Promise.all(this.recoverSubjects.map(function (subject) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var partialEntity, manager, softDeleteQueryBuilder, updateResult;

                var _this = this;

                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      if (!subject.identifier) throw new _error_SubjectWithoutIdentifierError__WEBPACK_IMPORTED_MODULE_5__["SubjectWithoutIdentifierError"](subject);
                      if (!(this.queryRunner instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["MongoQueryRunner"])) return [3
                      /*break*/
                      , 2];
                      partialEntity = _util_OrmUtils__WEBPACK_IMPORTED_MODULE_11__["OrmUtils"].mergeDeep({}, subject.entity);

                      if (subject.metadata.objectIdColumn && subject.metadata.objectIdColumn.propertyName) {
                        delete partialEntity[subject.metadata.objectIdColumn.propertyName];
                      }

                      if (subject.metadata.createDateColumn && subject.metadata.createDateColumn.propertyName) {
                        delete partialEntity[subject.metadata.createDateColumn.propertyName];
                      }

                      if (subject.metadata.updateDateColumn && subject.metadata.updateDateColumn.propertyName) {
                        partialEntity[subject.metadata.updateDateColumn.propertyName] = new Date();
                      }

                      if (subject.metadata.deleteDateColumn && subject.metadata.deleteDateColumn.propertyName) {
                        partialEntity[subject.metadata.deleteDateColumn.propertyName] = null;
                      }

                      manager = this.queryRunner.manager;
                      return [4
                      /*yield*/
                      , manager.update(subject.metadata.target, subject.identifier, partialEntity)];

                    case 1:
                      _a.sent();

                      return [3
                      /*break*/
                      , 4];

                    case 2:
                      softDeleteQueryBuilder = this.queryRunner.manager.createQueryBuilder().restore().from(subject.metadata.target).updateEntity(this.options && this.options.reload === false ? false : true).callListeners(false);

                      if (subject.entity) {
                        softDeleteQueryBuilder.whereEntity(subject.identifier);
                      } else {
                        // in this case identifier is just conditions object to update by
                        softDeleteQueryBuilder.where(subject.identifier);
                      }

                      return [4
                      /*yield*/
                      , softDeleteQueryBuilder.execute()];

                    case 3:
                      updateResult = _a.sent();
                      subject.generatedMap = updateResult.generatedMaps[0];

                      if (subject.generatedMap) {
                        subject.metadata.columns.forEach(function (column) {
                          var value = column.getEntityValue(subject.generatedMap);

                          if (value !== undefined && value !== null) {
                            var preparedValue = _this.queryRunner.connection.driver.prepareHydratedValue(value, column);

                            column.setEntityValue(subject.generatedMap, preparedValue);
                          }
                        });
                      }

                      _a.label = 4;

                    case 4:
                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            }))];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Updates all special columns of the saving entities (create date, update date, version, etc.).
   * Also updates nullable columns and columns with default values.
   */


  SubjectExecutor.prototype.updateSpecialColumnsInPersistedEntities = function () {
    var _this = this; // update inserted entity properties


    if (this.insertSubjects.length) this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.insertSubjects); // update updated entity properties

    if (this.updateSubjects.length) this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.updateSubjects); // update soft-removed entity properties

    if (this.updateSubjects.length) this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.softRemoveSubjects); // update recovered entity properties

    if (this.updateSubjects.length) this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.recoverSubjects); // remove ids from the entities that were removed

    if (this.removeSubjects.length) {
      this.removeSubjects.forEach(function (subject) {
        if (!subject.entity) return;
        subject.metadata.primaryColumns.forEach(function (primaryColumn) {
          primaryColumn.setEntityValue(subject.entity, undefined);
        });
      });
    } // other post-persist updations


    this.allSubjects.forEach(function (subject) {
      if (!subject.entity) return;
      subject.metadata.relationIds.forEach(function (relationId) {
        relationId.setValue(subject.entity);
      }); // mongo _id remove

      if (_this.queryRunner instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["MongoQueryRunner"]) {
        if (subject.metadata.objectIdColumn && subject.metadata.objectIdColumn.databaseName && subject.metadata.objectIdColumn.databaseName !== subject.metadata.objectIdColumn.propertyName) {
          delete subject.entity[subject.metadata.objectIdColumn.databaseName];
        }
      }
    });
  };
  /**
   * Updates all special columns of the saving entities (create date, update date, version, etc.).
   * Also updates nullable columns and columns with default values.
   */


  SubjectExecutor.prototype.updateSpecialColumnsInInsertedAndUpdatedEntities = function (subjects) {
    var _this = this;

    subjects.forEach(function (subject) {
      if (!subject.entity) return; // set values to "null" for nullable columns that did not have values

      subject.metadata.columns.forEach(function (column) {
        // if table inheritance is used make sure this column is not child's column
        if (subject.metadata.childEntityMetadatas.length > 0 && subject.metadata.childEntityMetadatas.map(function (metadata) {
          return metadata.target;
        }).indexOf(column.target) !== -1) return; // entities does not have virtual columns

        if (column.isVirtual) return; // update nullable columns

        if (column.isNullable) {
          var columnValue = column.getEntityValue(subject.entity);
          if (columnValue === undefined) column.setEntityValue(subject.entity, null);
        } // update relational columns


        if (subject.updatedRelationMaps.length > 0) {
          subject.updatedRelationMaps.forEach(function (updatedRelationMap) {
            updatedRelationMap.relation.joinColumns.forEach(function (column) {
              if (column.isVirtual === true) return;
              column.setEntityValue(subject.entity, updatedRelationMap.value instanceof Object ? column.referencedColumn.getEntityValue(updatedRelationMap.value) : updatedRelationMap.value);
            });
          });
        }
      }); // merge into entity all generated values returned by a database

      if (subject.generatedMap) _this.queryRunner.manager.merge(subject.metadata.target, subject.entity, subject.generatedMap);
    });
  };
  /**
   * Groups subjects by metadata names (by tables) to make bulk insertions and deletions possible.
   * However there are some limitations with bulk insertions of data into tables with generated (increment) columns
   * in some drivers. Some drivers like mysql and sqlite does not support returning multiple generated columns
   * after insertion and can only return a single generated column value, that's why its not possible to do bulk insertion,
   * because it breaks insertion result's generatedMap and leads to problems when this subject is used in other subjects saves.
   * That's why we only support bulking in junction tables for those drivers.
   *
   * Other drivers like postgres and sql server support RETURNING / OUTPUT statement which allows to return generated
   * id for each inserted row, that's why bulk insertion is not limited to junction tables in there.
   */


  SubjectExecutor.prototype.groupBulkSubjects = function (subjects, type) {
    var group = {};
    var keys = [];
    var groupingAllowed = type === "delete" || this.queryRunner.connection.driver.isReturningSqlSupported();
    subjects.forEach(function (subject, index) {
      var key = groupingAllowed || subject.metadata.isJunction ? subject.metadata.name : subject.metadata.name + "_" + index;

      if (!group[key]) {
        group[key] = [subject];
        keys.push(key);
      } else {
        group[key].push(subject);
      }
    });
    return [group, keys];
  };

  return SubjectExecutor;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/persistence/SubjectTopoligicalSorter.js":
/*!******************************************************************************!*\
  !*** ./node_modules/typeorm/browser/persistence/SubjectTopoligicalSorter.js ***!
  \******************************************************************************/
/*! exports provided: SubjectTopoligicalSorter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubjectTopoligicalSorter", function() { return SubjectTopoligicalSorter; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Orders insert or remove subjects in proper order (using topological sorting)
 * to make sure insert or remove operations are executed in a proper order.
 */

var SubjectTopoligicalSorter =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function SubjectTopoligicalSorter(subjects) {
    this.subjects = tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](subjects); // copy subjects to prevent changing of sent array

    this.metadatas = this.getUniqueMetadatas(this.subjects);
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Sorts (orders) subjects in their topological order.
   */


  SubjectTopoligicalSorter.prototype.sort = function (direction) {
    var _this = this; // if there are no metadatas it probably mean there is no subjects... we don't have to do anything here


    if (!this.metadatas.length) return this.subjects;
    var sortedSubjects = []; // first if we sort for deletion all junction subjects
    // junction subjects are subjects without entity and database entity set

    if (direction === "delete") {
      var junctionSubjects = this.subjects.filter(function (subject) {
        return !subject.entity && !subject.databaseEntity;
      });
      sortedSubjects.push.apply(sortedSubjects, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](junctionSubjects));
      this.removeAlreadySorted(junctionSubjects);
    } // next we always insert entities with non-nullable relations, sort them first


    var nonNullableDependencies = this.getNonNullableDependencies();
    var sortedNonNullableEntityTargets = this.toposort(nonNullableDependencies);
    if (direction === "insert") sortedNonNullableEntityTargets = sortedNonNullableEntityTargets.reverse(); // so we have a sorted entity targets
    // go thought each of them and find all subjects with sorted entity target
    // add those sorted targets and remove them from original array of targets

    sortedNonNullableEntityTargets.forEach(function (sortedEntityTarget) {
      var entityTargetSubjects = _this.subjects.filter(function (subject) {
        return subject.metadata.targetName === sortedEntityTarget;
      });

      sortedSubjects.push.apply(sortedSubjects, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](entityTargetSubjects));

      _this.removeAlreadySorted(entityTargetSubjects);
    }); // next sort all other entities
    // same process as in above but with other entities

    var otherDependencies = this.getDependencies();
    var sortedOtherEntityTargets = this.toposort(otherDependencies);
    if (direction === "insert") sortedOtherEntityTargets = sortedOtherEntityTargets.reverse();
    sortedOtherEntityTargets.forEach(function (sortedEntityTarget) {
      var entityTargetSubjects = _this.subjects.filter(function (subject) {
        return subject.metadata.targetName === sortedEntityTarget;
      });

      sortedSubjects.push.apply(sortedSubjects, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](entityTargetSubjects));

      _this.removeAlreadySorted(entityTargetSubjects);
    }); // if we have something left in the subjects add them as well

    sortedSubjects.push.apply(sortedSubjects, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](this.subjects));
    return sortedSubjects;
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Removes already sorted subjects from this.subjects list of subjects.
   */


  SubjectTopoligicalSorter.prototype.removeAlreadySorted = function (subjects) {
    var _this = this;

    subjects.forEach(function (subject) {
      _this.subjects.splice(_this.subjects.indexOf(subject), 1);
    });
  };
  /**
   * Extracts all unique metadatas from the given subjects.
   */


  SubjectTopoligicalSorter.prototype.getUniqueMetadatas = function (subjects) {
    var metadatas = [];
    subjects.forEach(function (subject) {
      if (metadatas.indexOf(subject.metadata) === -1) metadatas.push(subject.metadata);
    });
    return metadatas;
  };
  /**
   * Gets dependency tree for all entity metadatas with non-nullable relations.
   * We need to execute insertions first for entities which non-nullable relations.
   */


  SubjectTopoligicalSorter.prototype.getNonNullableDependencies = function () {
    return this.metadatas.reduce(function (dependencies, metadata) {
      metadata.relationsWithJoinColumns.forEach(function (relation) {
        if (relation.isNullable) return;
        dependencies.push([metadata.targetName, relation.inverseEntityMetadata.targetName]);
      });
      return dependencies;
    }, []);
  };
  /**
   * Gets dependency tree for all entity metadatas with non-nullable relations.
   * We need to execute insertions first for entities which non-nullable relations.
   */


  SubjectTopoligicalSorter.prototype.getDependencies = function () {
    return this.metadatas.reduce(function (dependencies, metadata) {
      metadata.relationsWithJoinColumns.forEach(function (relation) {
        // if relation is self-referenced we skip it
        if (relation.inverseEntityMetadata === metadata) return;
        dependencies.push([metadata.targetName, relation.inverseEntityMetadata.targetName]);
      });
      return dependencies;
    }, []);
  };
  /**
   * Sorts given graph using topological sorting algorithm.
   *
   * Algorithm is kindly taken from https://github.com/marcelklehr/toposort repository.
   */


  SubjectTopoligicalSorter.prototype.toposort = function (edges) {
    function uniqueNodes(arr) {
      var res = [];

      for (var i_1 = 0, len = arr.length; i_1 < len; i_1++) {
        var edge = arr[i_1];
        if (res.indexOf(edge[0]) < 0) res.push(edge[0]);
        if (res.indexOf(edge[1]) < 0) res.push(edge[1]);
      }

      return res;
    }

    var nodes = uniqueNodes(edges);
    var cursor = nodes.length,
        sorted = new Array(cursor),
        visited = {},
        i = cursor;

    while (i--) {
      if (!visited[i]) visit(nodes[i], i, []);
    }

    function visit(node, i, predecessors) {
      if (predecessors.indexOf(node) >= 0) {
        throw new Error("Cyclic dependency: " + JSON.stringify(node)); // todo: better error
      }

      if (!~nodes.indexOf(node)) {
        throw new Error("Found unknown node. Make sure to provided all involved nodes. Unknown node: " + JSON.stringify(node));
      }

      if (visited[i]) return;
      visited[i] = true; // outgoing edges

      var outgoing = edges.filter(function (edge) {
        return edge[0] === node;
      });

      if (i = outgoing.length) {
        var preds = predecessors.concat(node);

        do {
          var child = outgoing[--i][1];
          visit(child, nodes.indexOf(child), preds);
        } while (i);
      }

      sorted[--cursor] = node;
    }

    return sorted;
  };

  return SubjectTopoligicalSorter;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/persistence/subject-builder/CascadesSubjectBuilder.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/persistence/subject-builder/CascadesSubjectBuilder.js ***!
  \********************************************************************************************/
/*! exports provided: CascadesSubjectBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CascadesSubjectBuilder", function() { return CascadesSubjectBuilder; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subject */ "./node_modules/typeorm/browser/persistence/Subject.js");


/**
 * Finds all cascade operations of the given subject and cascade operations of the found cascaded subjects,
 * e.g. builds a cascade tree and creates a subjects for them.
 */

var CascadesSubjectBuilder =
/** @class */
function () {
  // ---------------------------------------------------------------------
  // Constructor
  // ---------------------------------------------------------------------
  function CascadesSubjectBuilder(allSubjects) {
    this.allSubjects = allSubjects;
  } // ---------------------------------------------------------------------
  // Public Methods
  // ---------------------------------------------------------------------

  /**
   * Builds a cascade subjects tree and pushes them in into the given array of subjects.
   */


  CascadesSubjectBuilder.prototype.build = function (subject, operationType) {
    var _this = this;

    subject.metadata.extractRelationValuesFromEntity(subject.entity, subject.metadata.relations) // todo: we can create EntityMetadata.cascadeRelations
    .forEach(function (_a) {
      var _b = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](_a, 3),
          relation = _b[0],
          relationEntity = _b[1],
          relationEntityMetadata = _b[2]; // we need only defined values and insert, update, soft-remove or recover cascades of the relation should be set


      if (relationEntity === undefined || relationEntity === null || !relation.isCascadeInsert && !relation.isCascadeUpdate && !relation.isCascadeSoftRemove && !relation.isCascadeRecover) return; // if relation entity is just a relation id set (for example post.tag = 1)
      // then we don't really need to check cascades since there is no object to insert or update

      if (!(relationEntity instanceof Object)) return; // if we already has this entity in list of operated subjects then skip it to avoid recursion

      var alreadyExistRelationEntitySubject = _this.findByPersistEntityLike(relationEntityMetadata.target, relationEntity);

      if (alreadyExistRelationEntitySubject) {
        if (alreadyExistRelationEntitySubject.canBeInserted === false) // if its not marked for insertion yet
          alreadyExistRelationEntitySubject.canBeInserted = relation.isCascadeInsert === true && operationType === "save";
        if (alreadyExistRelationEntitySubject.canBeUpdated === false) // if its not marked for update yet
          alreadyExistRelationEntitySubject.canBeUpdated = relation.isCascadeUpdate === true && operationType === "save";
        if (alreadyExistRelationEntitySubject.canBeSoftRemoved === false) // if its not marked for removal yet
          alreadyExistRelationEntitySubject.canBeSoftRemoved = relation.isCascadeSoftRemove === true && operationType === "soft-remove";
        if (alreadyExistRelationEntitySubject.canBeRecovered === false) // if its not marked for recovery yet
          alreadyExistRelationEntitySubject.canBeRecovered = relation.isCascadeRecover === true && operationType === "recover";
        return;
      } // mark subject with what we can do with it
      // and add to the array of subjects to load only if there is no same entity there already


      var relationEntitySubject = new _Subject__WEBPACK_IMPORTED_MODULE_1__["Subject"]({
        metadata: relationEntityMetadata,
        parentSubject: subject,
        entity: relationEntity,
        canBeInserted: relation.isCascadeInsert === true && operationType === "save",
        canBeUpdated: relation.isCascadeUpdate === true && operationType === "save",
        canBeSoftRemoved: relation.isCascadeSoftRemove === true && operationType === "soft-remove",
        canBeRecovered: relation.isCascadeRecover === true && operationType === "recover"
      });

      _this.allSubjects.push(relationEntitySubject); // go recursively and find other entities we need to insert/update


      _this.build(relationEntitySubject, operationType);
    });
  }; // ---------------------------------------------------------------------
  // Protected Methods
  // ---------------------------------------------------------------------

  /**
   * Finds subject where entity like given subject's entity.
   * Comparision made by entity id.
   */


  CascadesSubjectBuilder.prototype.findByPersistEntityLike = function (entityTarget, entity) {
    return this.allSubjects.find(function (subject) {
      if (!subject.entity) return false;
      if (subject.entity === entity) return true;
      return subject.metadata.target === entityTarget && subject.metadata.compareEntities(subject.entityWithFulfilledIds, entity);
    });
  };

  return CascadesSubjectBuilder;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/persistence/subject-builder/ManyToManySubjectBuilder.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/persistence/subject-builder/ManyToManySubjectBuilder.js ***!
  \**********************************************************************************************/
/*! exports provided: ManyToManySubjectBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ManyToManySubjectBuilder", function() { return ManyToManySubjectBuilder; });
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subject */ "./node_modules/typeorm/browser/persistence/Subject.js");
/* harmony import */ var _util_OrmUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/OrmUtils */ "./node_modules/typeorm/browser/util/OrmUtils.js");
/* harmony import */ var _metadata_EntityMetadata__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../metadata/EntityMetadata */ "./node_modules/typeorm/browser/metadata/EntityMetadata.js");



/**
 * Builds operations needs to be executed for many-to-many relations of the given subjects.
 *
 * by example: post contains owner many-to-many relation with categories in the property called "categories", e.g.
 *             @ManyToMany(type => Category, category => category.posts) categories: Category[]
 *             If user adds categories into the post and saves post we need to bind them.
 *             This operation requires updation of junction table.
 */

var ManyToManySubjectBuilder =
/** @class */
function () {
  // ---------------------------------------------------------------------
  // Constructor
  // ---------------------------------------------------------------------
  function ManyToManySubjectBuilder(subjects) {
    this.subjects = subjects;
  } // ---------------------------------------------------------------------
  // Public Methods
  // ---------------------------------------------------------------------

  /**
   * Builds operations for any changes in the many-to-many relations of the subjects.
   */


  ManyToManySubjectBuilder.prototype.build = function () {
    var _this = this;

    this.subjects.forEach(function (subject) {
      // if subject doesn't have entity then no need to find something that should be inserted or removed
      if (!subject.entity) return; // go through all persistence enabled many-to-many relations and build subject operations for them

      subject.metadata.manyToManyRelations.forEach(function (relation) {
        // skip relations for which persistence is disabled
        if (relation.persistenceEnabled === false) return;

        _this.buildForSubjectRelation(subject, relation);
      });
    });
  };
  /**
   * Builds operations for removal of all many-to-many records of all many-to-many relations of the given subject.
   */


  ManyToManySubjectBuilder.prototype.buildForAllRemoval = function (subject) {
    var _this = this; // if subject does not have a database entity then it means it does not exist in the database
    // if it does not exist in the database then we don't have anything for deletion


    if (!subject.databaseEntity) return; // go through all persistence enabled many-to-many relations and build subject operations for them

    subject.metadata.manyToManyRelations.forEach(function (relation) {
      // skip relations for which persistence is disabled
      if (relation.persistenceEnabled === false) return; // get all related entities (actually related entity relation ids) bind to this subject entity
      // by example: returns category ids of the post we are currently working with (subject.entity is post)

      var relatedEntityRelationIdsInDatabase = relation.getEntityValue(subject.databaseEntity); // go through all related entities and create a new junction subject for each row in junction table

      relatedEntityRelationIdsInDatabase.forEach(function (relationId) {
        var junctionSubject = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]({
          metadata: relation.junctionEntityMetadata,
          parentSubject: subject,
          mustBeRemoved: true,
          identifier: _this.buildJunctionIdentifier(subject, relation, relationId)
        }); // we use unshift because we need to perform those operations before post deletion is performed
        // but post deletion was already added as an subject
        // this is temporary solution, later we need to implement proper sorting of subjects before their removal

        _this.subjects.push(junctionSubject);
      });
    });
  }; // ---------------------------------------------------------------------
  // Protected Methods
  // ---------------------------------------------------------------------

  /**
   * Builds operations for a given subject and relation.
   *
   * by example: subject is "post" entity we are saving here and relation is "categories" inside it here.
   */


  ManyToManySubjectBuilder.prototype.buildForSubjectRelation = function (subject, relation) {
    var _this = this; // load from db all relation ids of inverse entities that are "bind" to the subject's entity
    // this way we gonna check which relation ids are missing and which are new (e.g. inserted or removed)


    var databaseRelatedEntityIds = []; // if subject don't have database entity it means all related entities in persisted subject are new and must be bind
    // and we don't need to remove something that is not exist

    if (subject.databaseEntity) databaseRelatedEntityIds = relation.getEntityValue(subject.databaseEntity); // extract entity's relation value
    // by example: categories inside our post (subject.entity is post)

    var relatedEntities = relation.getEntityValue(subject.entity);
    if (relatedEntities === null) // if value set to null its equal if we set it to empty array - all items must be removed from the database
      relatedEntities = [];
    if (!Array.isArray(relatedEntities)) return; // from all related entities find only those which aren't found in the db - for them we will create operation subjects

    relatedEntities.forEach(function (relatedEntity) {
      // todo: check how it will work for entities which are saved by cascades, but aren't saved in the database yet
      // extract only relation id from the related entities, since we only need it for comparision
      // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)
      var relatedEntityRelationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity); // try to find a subject of this related entity, maybe it was loaded or was marked for persistence

      var relatedEntitySubject = _this.subjects.find(function (subject) {
        return subject.entity === relatedEntity;
      }); // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved


      if (relatedEntitySubject) relatedEntityRelationIdMap = relatedEntitySubject.identifier; // if related entity relation id map is empty it means related entity is newly persisted

      if (!relatedEntityRelationIdMap) {
        // we decided to remove this error because it brings complications when saving object with non-saved entities
        // if related entity does not have a subject then it means user tries to bind entity which wasn't saved
        // in this persistence because he didn't pass this entity for save or he did not set cascades
        // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here
        // we decided to remove this error because it brings complications when saving object with non-saved entities
        // if (!relatedEntitySubject)
        //     throw new Error(`Many-to-many relation "${relation.entityMetadata.name}.${relation.propertyPath}" contains ` +
        //         `entities which do not exist in the database yet, thus they cannot be bind in the database. ` +
        //         `Please setup cascade insertion or save entities before binding it.`);
        if (!relatedEntitySubject) return;
      } // try to find related entity in the database
      // by example: find post's category in the database post's categories


      var relatedEntityExistInDatabase = databaseRelatedEntityIds.find(function (databaseRelatedEntityRelationId) {
        return _metadata_EntityMetadata__WEBPACK_IMPORTED_MODULE_2__["EntityMetadata"].compareIds(databaseRelatedEntityRelationId, relatedEntityRelationIdMap);
      }); // if entity is found then don't do anything - it means binding in junction table already exist, we don't need to add anything

      if (relatedEntityExistInDatabase) return;
      var ownerValue = relation.isOwning ? subject : relatedEntitySubject || relatedEntity; // by example: ownerEntityMap is post from subject here

      var inverseValue = relation.isOwning ? relatedEntitySubject || relatedEntity : subject; // by example: inverseEntityMap is category from categories array here
      // create a new subject for insert operation of junction rows

      var junctionSubject = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]({
        metadata: relation.junctionEntityMetadata,
        parentSubject: subject,
        canBeInserted: true
      });

      _this.subjects.push(junctionSubject);

      relation.junctionEntityMetadata.ownerColumns.forEach(function (column) {
        junctionSubject.changeMaps.push({
          column: column,
          value: ownerValue
        });
      });
      relation.junctionEntityMetadata.inverseColumns.forEach(function (column) {
        junctionSubject.changeMaps.push({
          column: column,
          value: inverseValue
        });
      });
    }); // get all inverse entities relation ids that are "bind" to the currently persisted entity

    var changedInverseEntityRelationIds = [];
    relatedEntities.forEach(function (relatedEntity) {
      // relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)
      var relatedEntityRelationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity); // try to find a subject of this related entity, maybe it was loaded or was marked for persistence

      var relatedEntitySubject = _this.subjects.find(function (subject) {
        return subject.entity === relatedEntity;
      }); // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved


      if (relatedEntitySubject) relatedEntityRelationIdMap = relatedEntitySubject.identifier;
      if (relatedEntityRelationIdMap !== undefined && relatedEntityRelationIdMap !== null) changedInverseEntityRelationIds.push(relatedEntityRelationIdMap);
    }); // now from all entities in the persisted entity find only those which aren't found in the db

    var removedJunctionEntityIds = databaseRelatedEntityIds.filter(function (existRelationId) {
      return !changedInverseEntityRelationIds.find(function (changedRelationId) {
        return _metadata_EntityMetadata__WEBPACK_IMPORTED_MODULE_2__["EntityMetadata"].compareIds(changedRelationId, existRelationId);
      });
    }); // finally create a new junction remove operations for missing related entities

    removedJunctionEntityIds.forEach(function (removedEntityRelationId) {
      var junctionSubject = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]({
        metadata: relation.junctionEntityMetadata,
        parentSubject: subject,
        mustBeRemoved: true,
        identifier: _this.buildJunctionIdentifier(subject, relation, removedEntityRelationId)
      });

      _this.subjects.push(junctionSubject);
    });
  };
  /**
   * Creates identifiers for junction table.
   * Example: { postId: 1, categoryId: 2 }
   */


  ManyToManySubjectBuilder.prototype.buildJunctionIdentifier = function (subject, relation, relationId) {
    var ownerEntityMap = relation.isOwning ? subject.entity : relationId;
    var inverseEntityMap = relation.isOwning ? relationId : subject.entity;
    var identifier = {};
    relation.junctionEntityMetadata.ownerColumns.forEach(function (column) {
      _util_OrmUtils__WEBPACK_IMPORTED_MODULE_1__["OrmUtils"].mergeDeep(identifier, column.createValueMap(column.referencedColumn.getEntityValue(ownerEntityMap)));
    });
    relation.junctionEntityMetadata.inverseColumns.forEach(function (column) {
      _util_OrmUtils__WEBPACK_IMPORTED_MODULE_1__["OrmUtils"].mergeDeep(identifier, column.createValueMap(column.referencedColumn.getEntityValue(inverseEntityMap)));
    });
    return identifier;
  };

  return ManyToManySubjectBuilder;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/persistence/subject-builder/OneToManySubjectBuilder.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/persistence/subject-builder/OneToManySubjectBuilder.js ***!
  \*********************************************************************************************/
/*! exports provided: OneToManySubjectBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneToManySubjectBuilder", function() { return OneToManySubjectBuilder; });
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subject */ "./node_modules/typeorm/browser/persistence/Subject.js");
/* harmony import */ var _util_OrmUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/OrmUtils */ "./node_modules/typeorm/browser/util/OrmUtils.js");
/* harmony import */ var _metadata_EntityMetadata__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../metadata/EntityMetadata */ "./node_modules/typeorm/browser/metadata/EntityMetadata.js");



/**
 * Builds operations needs to be executed for one-to-many relations of the given subjects.
 *
 * by example: post contains one-to-many relation with category in the property called "categories", e.g.
 *             @OneToMany(type => Category, category => category.post) categories: Category[]
 *             If user adds categories into the post and saves post we need to bind them.
 *             This operation requires updation of category table since its owner of the relation and contains a join column.
 *
 * note: this class shares lot of things with OneToOneInverseSideOperationBuilder, so when you change this class
 *       make sure to reflect changes there as well.
 */

var OneToManySubjectBuilder =
/** @class */
function () {
  // ---------------------------------------------------------------------
  // Constructor
  // ---------------------------------------------------------------------
  function OneToManySubjectBuilder(subjects) {
    this.subjects = subjects;
  } // ---------------------------------------------------------------------
  // Public Methods
  // ---------------------------------------------------------------------

  /**
   * Builds all required operations.
   */


  OneToManySubjectBuilder.prototype.build = function () {
    var _this = this;

    this.subjects.forEach(function (subject) {
      subject.metadata.oneToManyRelations.forEach(function (relation) {
        // skip relations for which persistence is disabled
        if (relation.persistenceEnabled === false) return;

        _this.buildForSubjectRelation(subject, relation);
      });
    });
  }; // ---------------------------------------------------------------------
  // Protected Methods
  // ---------------------------------------------------------------------

  /**
   * Builds operations for a given subject and relation.
   *
   * by example: subject is "post" entity we are saving here and relation is "categories" inside it here.
   */


  OneToManySubjectBuilder.prototype.buildForSubjectRelation = function (subject, relation) {
    var _this = this; // prepare objects (relation id maps) for the database entity
    // note: subject.databaseEntity contains relations with loaded relation ids only
    // by example: since subject is a post, we are expecting to get all post's categories saved in the database here,
    //             particularly their relation ids, e.g. category ids stored in the database


    var relatedEntityDatabaseRelationIds = [];

    if (subject.databaseEntity) {
      // related entities in the database can exist only if this entity (post) is saved
      relatedEntityDatabaseRelationIds = relation.getEntityValue(subject.databaseEntity);
    } // get related entities of persisted entity
    // by example: get categories from the passed to persist post entity


    var relatedEntities = relation.getEntityValue(subject.entity);
    if (relatedEntities === null) // we treat relations set to null as removed, so we don't skip it
      relatedEntities = [];
    if (relatedEntities === undefined) // if relation is undefined then nothing to update
      return; // extract only relation ids from the related entities, since we only need them for comparision
    // by example: extract from categories only relation ids (category id, or let's say category title, depend on join column options)

    var relatedPersistedEntityRelationIds = [];
    relatedEntities.forEach(function (relatedEntity) {
      var relationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity); // by example: relationIdMap is category.id map here, e.g. { id: ... }
      // try to find a subject of this related entity, maybe it was loaded or was marked for persistence

      var relatedEntitySubject = _this.subjects.find(function (subject) {
        return subject.entity === relatedEntity;
      }); // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved


      if (relatedEntitySubject) relationIdMap = relatedEntitySubject.identifier; // if relationIdMap is undefined then it means user binds object which is not saved in the database yet
      // by example: if post contains categories which does not have ids yet (because they are new)
      //             it means they are always newly inserted and relation update operation always must be created for them
      //             it does not make sense to perform difference operation for them for both add and remove actions

      if (!relationIdMap) {
        // we decided to remove this error because it brings complications when saving object with non-saved entities
        // if (!relatedEntitySubject)
        //     throw new Error(`One-to-many relation "${relation.entityMetadata.name}.${relation.propertyPath}" contains ` +
        //         `entities which do not exist in the database yet, thus they cannot be bind in the database. ` +
        //         `Please setup cascade insertion or save entities before binding it.`);
        if (!relatedEntitySubject) return; // okay, so related subject exist and its marked for insertion, then add a new change map
        // by example: this will tell category to insert into its post relation our post we are working with
        //             relatedEntitySubject is newly inserted CategorySubject
        //             relation.inverseRelation is ManyToOne relation inside Category
        //             subject is Post needs to be inserted into Category

        relatedEntitySubject.changeMaps.push({
          relation: relation.inverseRelation,
          value: subject
        });
        return;
      } // check if this binding really exist in the database
      // by example: find our category if its already bind in the database


      var relationIdInDatabaseSubjectRelation = relatedEntityDatabaseRelationIds.find(function (relatedDatabaseEntityRelationId) {
        return _util_OrmUtils__WEBPACK_IMPORTED_MODULE_1__["OrmUtils"].deepCompare(relationIdMap, relatedDatabaseEntityRelationId);
      }); // if relationIdMap DOES NOT exist in the subject's relation in the database it means its a new relation and we need to "bind" them
      // by example: this will tell category to insert into its post relation our post we are working with
      //             relatedEntitySubject is newly inserted CategorySubject
      //             relation.inverseRelation is ManyToOne relation inside Category
      //             subject is Post needs to be inserted into Category

      if (!relationIdInDatabaseSubjectRelation) {
        // if there is no relatedEntitySubject then it means "category" wasn't persisted,
        // but since we are going to update "category" table (since its an owning side of relation with join column)
        // we create a new subject here:
        if (!relatedEntitySubject) {
          relatedEntitySubject = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]({
            metadata: relation.inverseEntityMetadata,
            parentSubject: subject,
            canBeUpdated: true,
            identifier: relationIdMap
          });

          _this.subjects.push(relatedEntitySubject);
        }

        relatedEntitySubject.changeMaps.push({
          relation: relation.inverseRelation,
          value: subject
        });
      } // if related entity has relation id then we add it to the list of relation ids
      // this list will be used later to compare with database relation ids to find a difference
      // what exist in this array and does not exist in the database are newly inserted relations
      // what does not exist in this array, but exist in the database are removed relations
      // removed relations are set to null from inverse side of relation


      relatedPersistedEntityRelationIds.push(relationIdMap);
    }); // find what related entities were added and what were removed based on difference between what we save and what database has

    _metadata_EntityMetadata__WEBPACK_IMPORTED_MODULE_2__["EntityMetadata"].difference(relatedEntityDatabaseRelationIds, relatedPersistedEntityRelationIds).forEach(function (removedRelatedEntityRelationId) {
      // todo: probably we can improve this in the future by finding entity with column those values,
      // todo: maybe it was already in persistence process. This is possible due to unique requirements of join columns
      // we create a new subject which operations will be executed in subject operation executor
      var removedRelatedEntitySubject = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]({
        metadata: relation.inverseEntityMetadata,
        parentSubject: subject,
        canBeUpdated: true,
        identifier: removedRelatedEntityRelationId,
        changeMaps: [{
          relation: relation.inverseRelation,
          value: null
        }]
      });

      _this.subjects.push(removedRelatedEntitySubject);
    });
  };

  return OneToManySubjectBuilder;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js ***!
  \*******************************************************************************************************/
/*! exports provided: OneToOneInverseSideSubjectBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneToOneInverseSideSubjectBuilder", function() { return OneToOneInverseSideSubjectBuilder; });
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subject */ "./node_modules/typeorm/browser/persistence/Subject.js");
/* harmony import */ var _util_OrmUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/OrmUtils */ "./node_modules/typeorm/browser/util/OrmUtils.js");


/**
 * Builds operations needs to be executed for one-to-one non-owner relations of the given subjects.
 *
 * by example: post contains one-to-one non-owner relation with category in the property called "category", e.g.
 *             @OneToOne(type => Category, category => category.post) category: Category
 *             If user sets a category into the post and saves post we need to bind them.
 *             This operation requires updation of category table since its owner of the relation and contains a join column.
 *
 * note: this class shares lot of things with OneToManyUpdateBuilder, so when you change this class
 *       make sure to reflect changes there as well.
 */

var OneToOneInverseSideSubjectBuilder =
/** @class */
function () {
  // ---------------------------------------------------------------------
  // Constructor
  // ---------------------------------------------------------------------
  function OneToOneInverseSideSubjectBuilder(subjects) {
    this.subjects = subjects;
  } // ---------------------------------------------------------------------
  // Public Methods
  // ---------------------------------------------------------------------

  /**
   * Builds all required operations.
   */


  OneToOneInverseSideSubjectBuilder.prototype.build = function () {
    var _this = this;

    this.subjects.forEach(function (subject) {
      subject.metadata.oneToOneRelations.forEach(function (relation) {
        // we don't need owning relations, this operation is only for inverse side of one-to-one relations
        // skip relations for which persistence is disabled
        if (relation.isOwning || relation.persistenceEnabled === false) return;

        _this.buildForSubjectRelation(subject, relation);
      });
    });
  }; // ---------------------------------------------------------------------
  // Protected Methods
  // ---------------------------------------------------------------------

  /**
   * Builds operations for a given subject and relation.
   *
   * by example: subject is "post" entity we are saving here and relation is "category" inside it here.
   */


  OneToOneInverseSideSubjectBuilder.prototype.buildForSubjectRelation = function (subject, relation) {
    // prepare objects (relation id map) for the database entity
    // note: subject.databaseEntity contains relation with loaded relation id only (id map)
    // by example: since subject is a post, we are expecting to get post's category saved in the database here,
    //             particularly its relation id, e.g. category id stored in the database
    var relatedEntityDatabaseRelationId = undefined;
    if (subject.databaseEntity) // related entity in the database can exist only if this entity (post) is saved
      relatedEntityDatabaseRelationId = relation.getEntityValue(subject.databaseEntity); // get related entities of persisted entity
    // by example: get category from the passed to persist post entity

    var relatedEntity = relation.getEntityValue(subject.entity); // by example: relatedEntity is a category here

    if (relatedEntity === undefined) // if relation is undefined then nothing to update
      return; // if related entity is null then we need to check if there a bind in the database and unset it
    // if there is no bind in the entity then we don't need to do anything
    // by example: if post.category = null and category has this post in the database then we unset it

    if (relatedEntity === null) {
      // it makes sense to update database only there is a previously set value in the database
      if (relatedEntityDatabaseRelationId) {
        // todo: probably we can improve this in the future by finding entity with column those values,
        // todo: maybe it was already in persistence process. This is possible due to unique requirements of join columns
        // we create a new subject which operations will be executed in subject operation executor
        var removedRelatedEntitySubject = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]({
          metadata: relation.inverseEntityMetadata,
          parentSubject: subject,
          canBeUpdated: true,
          identifier: relatedEntityDatabaseRelationId,
          changeMaps: [{
            relation: relation.inverseRelation,
            value: null
          }]
        });
        this.subjects.push(removedRelatedEntitySubject);
      }

      return;
    } // else means entity is bind in the database
    // extract only relation id from the related entities, since we only need it for comparision
    // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)


    var relationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity); // by example: relationIdMap is category.id map here, e.g. { id: ... }
    // try to find a subject of this related entity, maybe it was loaded or was marked for persistence

    var relatedEntitySubject = this.subjects.find(function (operateSubject) {
      return !!operateSubject.entity && operateSubject.entity === relatedEntity;
    }); // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved

    if (relatedEntitySubject) relationIdMap = relatedEntitySubject.identifier; // if relationIdMap is undefined then it means user binds object which is not saved in the database yet
    // by example: if post contains category which does not have id(s) yet (because its a new category)
    //             it means its always newly inserted and relation update operation always must be created for it
    //             it does not make sense to perform difference operation for it for both add and remove actions

    if (!relationIdMap) {
      // we decided to remove this error because it brings complications when saving object with non-saved entities
      // if related entity does not have a subject then it means user tries to bind entity which wasn't saved
      // in this persistence because he didn't pass this entity for save or he did not set cascades
      // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here
      // if (!relatedEntitySubject)
      //     throw new Error(`One-to-one inverse relation "${relation.entityMetadata.name}.${relation.propertyPath}" contains ` +
      //         `entity which does not exist in the database yet, thus cannot be bind in the database. ` +
      //         `Please setup cascade insertion or save entity before binding it.`);
      if (!relatedEntitySubject) return; // okay, so related subject exist and its marked for insertion, then add a new change map
      // by example: this will tell category to insert into its post relation our post we are working with
      //             relatedEntitySubject is newly inserted CategorySubject
      //             relation.inverseRelation is OneToOne owner relation inside Category
      //             subject is Post needs to be inserted into Category

      relatedEntitySubject.changeMaps.push({
        relation: relation.inverseRelation,
        value: subject
      });
    } // check if this binding really exist in the database
    // by example: find our post if its already bind to category in the database and its not equal to what user tries to set


    var areRelatedIdEqualWithDatabase = relatedEntityDatabaseRelationId && _util_OrmUtils__WEBPACK_IMPORTED_MODULE_1__["OrmUtils"].deepCompare(relationIdMap, relatedEntityDatabaseRelationId); // if they aren't equal it means its a new relation and we need to "bind" them
    // by example: this will tell category to insert into its post relation our post we are working with
    //             relatedEntitySubject is newly inserted CategorySubject
    //             relation.inverseRelation is ManyToOne relation inside Category
    //             subject is Post needs to be inserted into Category

    if (!areRelatedIdEqualWithDatabase) {
      // if there is no relatedEntitySubject then it means "category" wasn't persisted,
      // but since we are going to update "category" table (since its an owning side of relation with join column)
      // we create a new subject here:
      if (!relatedEntitySubject) {
        relatedEntitySubject = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]({
          metadata: relation.inverseEntityMetadata,
          canBeUpdated: true,
          identifier: relationIdMap
        });
        this.subjects.push(relatedEntitySubject);
      }

      relatedEntitySubject.changeMaps.push({
        relation: relation.inverseRelation,
        value: subject
      });
    }
  };

  return OneToOneInverseSideSubjectBuilder;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/persistence/tree/ClosureSubjectExecutor.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/typeorm/browser/persistence/tree/ClosureSubjectExecutor.js ***!
  \*********************************************************************************/
/*! exports provided: ClosureSubjectExecutor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClosureSubjectExecutor", function() { return ClosureSubjectExecutor; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _error_CannotAttachTreeChildrenEntityError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error/CannotAttachTreeChildrenEntityError */ "./node_modules/typeorm/browser/error/CannotAttachTreeChildrenEntityError.js");


/**
 * Executes subject operations for closure entities.
 */

var ClosureSubjectExecutor =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function ClosureSubjectExecutor(queryRunner) {
    this.queryRunner = queryRunner;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Removes all children of the given subject's entity.
   async deleteChildrenOf(subject: Subject) {
      // const relationValue = subject.metadata.treeParentRelation.getEntityValue(subject.databaseEntity);
      // console.log("relationValue: ", relationValue);
      // this.queryRunner.manager
      //     .createQueryBuilder()
      //     .from(subject.metadata.closureJunctionTable.target, "tree")
      //     .where("tree.");
  }*/

  /**
   * Executes operations when subject is being inserted.
   */


  ClosureSubjectExecutor.prototype.insert = function (subject) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var closureJunctionInsertMap, parent, escape_1, tableName, ancestorColumnNames, descendantColumnNames, firstQueryParameters_1, childEntityIdValues_1, childEntityIds1, whereCondition;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            closureJunctionInsertMap = {};
            subject.metadata.closureJunctionTable.ancestorColumns.forEach(function (column) {
              closureJunctionInsertMap[column.databaseName] = subject.identifier;
            });
            subject.metadata.closureJunctionTable.descendantColumns.forEach(function (column) {
              closureJunctionInsertMap[column.databaseName] = subject.identifier;
            }); // insert values into the closure junction table

            return [4
            /*yield*/
            , this.queryRunner.manager.createQueryBuilder().insert().into(subject.metadata.closureJunctionTable.tablePath).values(closureJunctionInsertMap).updateEntity(false).callListeners(false).execute()];

          case 1:
            // insert values into the closure junction table
            _a.sent();

            parent = subject.metadata.treeParentRelation.getEntityValue(subject.entity);
            if (!parent && subject.parentSubject && subject.parentSubject.entity) // if entity was attached via children
              parent = subject.parentSubject.insertedValueSet ? subject.parentSubject.insertedValueSet : subject.parentSubject.entity;
            if (!parent) return [3
            /*break*/
            , 3];

            escape_1 = function escape_1(alias) {
              return _this.queryRunner.connection.driver.escape(alias);
            };

            tableName = this.getTableName(subject.metadata.closureJunctionTable.tablePath);
            ancestorColumnNames = subject.metadata.closureJunctionTable.ancestorColumns.map(function (column) {
              return escape_1(column.databaseName);
            });
            descendantColumnNames = subject.metadata.closureJunctionTable.descendantColumns.map(function (column) {
              return escape_1(column.databaseName);
            });
            firstQueryParameters_1 = [];
            childEntityIdValues_1 = subject.metadata.primaryColumns.map(function (column) {
              return column.getEntityValue(subject.insertedValueSet);
            });
            childEntityIds1 = subject.metadata.primaryColumns.map(function (column, index) {
              firstQueryParameters_1.push(childEntityIdValues_1[index]);
              return _this.queryRunner.connection.driver.createParameter("child_entity_" + column.databaseName, firstQueryParameters_1.length - 1);
            });
            whereCondition = subject.metadata.primaryColumns.map(function (column) {
              var columnName = escape_1(column.databaseName + "_descendant");
              var parentId = column.getEntityValue(parent);
              if (!parentId) throw new _error_CannotAttachTreeChildrenEntityError__WEBPACK_IMPORTED_MODULE_1__["CannotAttachTreeChildrenEntityError"](subject.metadata.name);
              firstQueryParameters_1.push(parentId);

              var parameterName = _this.queryRunner.connection.driver.createParameter("parent_entity_" + column.databaseName, firstQueryParameters_1.length - 1);

              return columnName + " = " + parameterName;
            }).join(", ");
            return [4
            /*yield*/
            , this.queryRunner.query("INSERT INTO " + tableName + " (" + tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](ancestorColumnNames, descendantColumnNames).join(", ") + ") " + ("SELECT " + ancestorColumnNames.join(", ") + ", " + childEntityIds1.join(", ") + " FROM " + tableName + " WHERE " + whereCondition), firstQueryParameters_1)];

          case 2:
            _a.sent();

            _a.label = 3;

          case 3:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Gets escaped table name with schema name if SqlServer or Postgres driver used with custom
   * schema name, otherwise returns escaped table name.
   */


  ClosureSubjectExecutor.prototype.getTableName = function (tablePath) {
    var _this = this;

    return tablePath.split(".").map(function (i) {
      // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string
      if (i === "") return i;
      return _this.queryRunner.connection.driver.escape(i);
    }).join(".");
  };

  return ClosureSubjectExecutor;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/persistence/tree/MaterializedPathSubjectExecutor.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/persistence/tree/MaterializedPathSubjectExecutor.js ***!
  \******************************************************************************************/
/*! exports provided: MaterializedPathSubjectExecutor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaterializedPathSubjectExecutor", function() { return MaterializedPathSubjectExecutor; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Executes subject operations for materialized-path tree entities.
 */

var MaterializedPathSubjectExecutor =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function MaterializedPathSubjectExecutor(queryRunner) {
    this.queryRunner = queryRunner;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Executes operations when subject is being inserted.
   */


  MaterializedPathSubjectExecutor.prototype.insert = function (subject) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _a, parent, parentId, parentPath, insertedEntityId;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            parent = subject.metadata.treeParentRelation.getEntityValue(subject.entity);
            if (!parent && subject.parentSubject && subject.parentSubject.entity) // if entity was attached via children
              parent = subject.parentSubject.insertedValueSet ? subject.parentSubject.insertedValueSet : subject.parentSubject.entity;
            parentId = subject.metadata.getEntityIdMap(parent);
            parentPath = "";
            if (!parentId) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , this.queryRunner.manager.createQueryBuilder().select(subject.metadata.targetName + "." + subject.metadata.materializedPathColumn.propertyPath, "path").from(subject.metadata.target, subject.metadata.targetName).whereInIds(parentId).getRawOne().then(function (result) {
              return result ? result["path"] : undefined;
            })];

          case 1:
            parentPath = _b.sent();
            _b.label = 2;

          case 2:
            insertedEntityId = subject.metadata.treeParentRelation.joinColumns.map(function (joinColumn) {
              return joinColumn.referencedColumn.getEntityValue(subject.insertedValueSet);
            }).join("_");
            return [4
            /*yield*/
            , this.queryRunner.manager.createQueryBuilder().update(subject.metadata.target).set((_a = {}, _a[subject.metadata.materializedPathColumn.propertyPath] = parentPath + insertedEntityId + ".", _a)).where(subject.identifier).execute()];

          case 3:
            _b.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  return MaterializedPathSubjectExecutor;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/persistence/tree/NestedSetSubjectExecutor.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/typeorm/browser/persistence/tree/NestedSetSubjectExecutor.js ***!
  \***********************************************************************************/
/*! exports provided: NestedSetSubjectExecutor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NestedSetSubjectExecutor", function() { return NestedSetSubjectExecutor; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_OrmUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/OrmUtils */ "./node_modules/typeorm/browser/util/OrmUtils.js");


/**
 * Executes subject operations for nested set tree entities.
 */

var NestedSetSubjectExecutor =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function NestedSetSubjectExecutor(queryRunner) {
    this.queryRunner = queryRunner;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Executes operations when subject is being inserted.
   */


  NestedSetSubjectExecutor.prototype.insert = function (subject) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var escape, tableName, leftColumnName, rightColumnName, parent, parentId, parentNsRight;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            escape = function escape(alias) {
              return _this.queryRunner.connection.driver.escape(alias);
            };

            tableName = this.getTableName(subject.metadata.tablePath);
            leftColumnName = escape(subject.metadata.nestedSetLeftColumn.databaseName);
            rightColumnName = escape(subject.metadata.nestedSetRightColumn.databaseName);
            parent = subject.metadata.treeParentRelation.getEntityValue(subject.entity);
            if (!parent && subject.parentSubject && subject.parentSubject.entity) // if entity was attached via children
              parent = subject.parentSubject.insertedValueSet ? subject.parentSubject.insertedValueSet : subject.parentSubject.entity;
            parentId = subject.metadata.getEntityIdMap(parent);
            parentNsRight = undefined;
            if (!parentId) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , this.queryRunner.manager.createQueryBuilder().select(subject.metadata.targetName + "." + subject.metadata.nestedSetRightColumn.propertyPath, "right").from(subject.metadata.target, subject.metadata.targetName).whereInIds(parentId).getRawOne().then(function (result) {
              var value = result ? result["right"] : undefined; // CockroachDB returns numeric types as string

              return typeof value === "string" ? parseInt(value) : value;
            })];

          case 1:
            parentNsRight = _a.sent();
            _a.label = 2;

          case 2:
            if (!(parentNsRight !== undefined)) return [3
            /*break*/
            , 4];
            return [4
            /*yield*/
            , this.queryRunner.query("UPDATE " + tableName + " SET " + (leftColumnName + " = CASE WHEN " + leftColumnName + " > " + parentNsRight + " THEN " + leftColumnName + " + 2 ELSE " + leftColumnName + " END,") + (rightColumnName + " = " + rightColumnName + " + 2 ") + ("WHERE " + rightColumnName + " >= " + parentNsRight))];

          case 3:
            _a.sent();

            _util_OrmUtils__WEBPACK_IMPORTED_MODULE_1__["OrmUtils"].mergeDeep(subject.insertedValueSet, subject.metadata.nestedSetLeftColumn.createValueMap(parentNsRight), subject.metadata.nestedSetRightColumn.createValueMap(parentNsRight + 1));
            return [3
            /*break*/
            , 5];

          case 4:
            _util_OrmUtils__WEBPACK_IMPORTED_MODULE_1__["OrmUtils"].mergeDeep(subject.insertedValueSet, subject.metadata.nestedSetLeftColumn.createValueMap(1), subject.metadata.nestedSetRightColumn.createValueMap(2));
            _a.label = 5;

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Gets escaped table name with schema name if SqlServer or Postgres driver used with custom
   * schema name, otherwise returns escaped table name.
   */


  NestedSetSubjectExecutor.prototype.getTableName = function (tablePath) {
    var _this = this;

    return tablePath.split(".").map(function (i) {
      // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string
      if (i === "") return i;
      return _this.queryRunner.connection.driver.escape(i);
    }).join(".");
  };

  return NestedSetSubjectExecutor;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js":
/*!******************************************************************************!*\
  !*** ./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js ***!
  \******************************************************************************/
/*! exports provided: MongoDriver, MongoQueryRunner, MongoEntityManager, MongoRepository, PostgresDriver, SqlServerDriver, SapDriver, MysqlDriver, OracleDriver */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MongoDriver", function() { return MongoDriver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MongoQueryRunner", function() { return MongoQueryRunner; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MongoEntityManager", function() { return MongoEntityManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MongoRepository", function() { return MongoRepository; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PostgresDriver", function() { return PostgresDriver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SqlServerDriver", function() { return SqlServerDriver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SapDriver", function() { return SapDriver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MysqlDriver", function() { return MysqlDriver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OracleDriver", function() { return OracleDriver; });
/**
 * Dummy driver classes for replacement via `package.json` in browser builds.
 * Using those classes reduces the build size by one third.
 *
 * If we don't include those dummy classes (and just disable the driver import
 * with `false` in `package.json`) typeorm will throw an error on runtime,
 * even if those driver are not used.
 */

/**
 * DO NOT IMPORT THIS CLASS -
 * This is a dummy class for replacement via `package.json` in browser builds
 */
var MongoDriver =
/** @class */
function () {
  function MongoDriver() {}

  return MongoDriver;
}();


/**
 * DO NOT IMPORT THIS CLASS -
 * This is a dummy class for replacement via `package.json` in browser builds
 */

var MongoQueryRunner =
/** @class */
function () {
  function MongoQueryRunner() {}

  return MongoQueryRunner;
}();


/**
 * DO NOT IMPORT THIS CLASS -
 * This is a dummy class for replacement via `package.json` in browser builds
 */

var MongoEntityManager =
/** @class */
function () {
  function MongoEntityManager() {}

  return MongoEntityManager;
}();


/**
 * DO NOT IMPORT THIS CLASS -
 * This is a dummy class for replacement via `package.json` in browser builds
 */

var MongoRepository =
/** @class */
function () {
  function MongoRepository() {}

  return MongoRepository;
}();


/**
 * DO NOT IMPORT THIS CLASS -
 * This is a dummy class for replacement via `package.json` in browser builds
 */

var PostgresDriver =
/** @class */
function () {
  function PostgresDriver() {}

  return PostgresDriver;
}();


/**
 * DO NOT IMPORT THIS CLASS -
 * This is a dummy class for replacement via `package.json` in browser builds
 */

var SqlServerDriver =
/** @class */
function () {
  function SqlServerDriver() {}

  return SqlServerDriver;
}();


/**
 * DO NOT IMPORT THIS CLASS -
 * This is a dummy class for replacement via `package.json` in browser builds
 */

var SapDriver =
/** @class */
function () {
  function SapDriver() {}

  return SapDriver;
}();


/**
 * DO NOT IMPORT THIS CLASS -
 * This is a dummy class for replacement via `package.json` in browser builds
 */

var MysqlDriver =
/** @class */
function () {
  function MysqlDriver() {}

  return MysqlDriver;
}();


/**
 * DO NOT IMPORT THIS CLASS -
 * This is a dummy class for replacement via `package.json` in browser builds
 */

var OracleDriver =
/** @class */
function () {
  function OracleDriver() {}

  return OracleDriver;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/platform/PlatformTools.js":
/*!****************************************************************!*\
  !*** ./node_modules/typeorm/browser/platform/PlatformTools.js ***!
  \****************************************************************/
/*! exports provided: PlatformTools, EventEmitter, Readable, Writable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlatformTools", function() { return PlatformTools; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventEmitter", function() { return EventEmitter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Readable", function() { return Readable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Writable", function() { return Writable; });
/**
 * Browser's implementation of the platform-specific tools.
 *
 * This file gonna replace PlatformTools for browser environment.
 * For node.js environment this class is not getting packaged.
 * Don't use methods of this class in the code, use PlatformTools methods instead.
 */
var PlatformTools =
/** @class */
function () {
  function PlatformTools() {}
  /**
   * Gets global variable where global stuff can be stored.
   */


  PlatformTools.getGlobalVariable = function () {
    if (true) {
      return window;
    } else {}
  };
  /**
   * Loads ("require"-s) given file or package.
   * This operation only supports on node platform
   */


  PlatformTools.load = function (name) {
    if (this.type === "browser") throw new Error("This option/function is not supported in the browser environment. Failed operation: require(\"" + name + "\").");
    return "";
  };
  /**
   * Normalizes given path. Does "path.normalize".
   */


  PlatformTools.pathNormalize = function (pathStr) {
    if (this.type === "browser") throw new Error("This option/function is not supported in the browser environment. Failed operation: path.normalize(\"" + pathStr + "\").");
    return "";
  };
  /**
   * Gets file extension. Does "path.extname".
   */


  PlatformTools.pathExtname = function (pathStr) {
    if (this.type === "browser") throw new Error("This option/function is not supported in the browser environment. Failed operation: path.extname(\"" + pathStr + "\").");
    return "";
  };
  /**
   * Resolved given path. Does "path.resolve".
   */


  PlatformTools.pathResolve = function (pathStr) {
    if (this.type === "browser") throw new Error("This option/function is not supported in the browser environment. Failed operation: path.resolve(\"" + pathStr + "\").");
    return "";
  };
  /**
   * Synchronously checks if file exist. Does "fs.existsSync".
   */


  PlatformTools.fileExist = function (pathStr) {
    if (this.type === "browser") throw new Error("This option/function is not supported in the browser environment. Failed operation: fs.existsSync(\"" + pathStr + "\").");
    return false;
  };
  /**
   * Gets environment variable.
   */


  PlatformTools.getEnvVariable = function (name) {
    // if (this.type === "browser")
    //     throw new Error(`This option/function is not supported in the browser environment. Failed operation: process.env["${name}"].`);
    return undefined;
  };

  PlatformTools.readFileSync = function (filename) {
    if (this.type === "browser") throw new Error("This option/function is not supported in the browser environment. Failed operation: fs.readFileSync(\"" + filename + "\").");
    return null;
  };

  PlatformTools.appendFileSync = function (filename, data) {
    if (this.type === "browser") throw new Error("This option/function is not supported in the browser environment. Failed operation: fs.appendFileSync(\"" + filename + "\").");
  };

  PlatformTools.writeFile = function (path, data) {
    if (this.type === "browser") throw new Error("This option/function is not supported in the browser environment. Failed operation: fs.writeFile(\"" + path + "\").");
    return Promise.reject(null);
  };
  /**
   * Highlights sql string to be print in the console.
   */


  PlatformTools.highlightSql = function (sql) {
    return sql;
  };
  /**
   * Highlights json string to be print in the console.
   */


  PlatformTools.highlightJson = function (json) {
    return json;
  };
  /**
   * Logging functions needed by AdvancedConsoleLogger (but here without chalk)
   */


  PlatformTools.logInfo = function (prefix, info) {
    console.info(prefix + " ", info);
  };

  PlatformTools.logError = function (prefix, error) {
    console.error(prefix + " ", error);
  };

  PlatformTools.logWarn = function (prefix, warning) {
    console.warn(prefix + " ", warning);
  };

  PlatformTools.log = function (message) {
    console.log(message);
  };

  PlatformTools.warn = function (message) {
    return message;
  };
  /**
   * Type of the currently running platform.
   */


  PlatformTools.type = "browser";
  return PlatformTools;
}();


/**
 * These classes are needed for stream operations or
 * in the mongodb driver. Both aren't supported in the browser.
 */

var EventEmitter =
/** @class */
function () {
  function EventEmitter() {}

  return EventEmitter;
}();



var Readable =
/** @class */
function () {
  function Readable() {}

  return Readable;
}();



var Writable =
/** @class */
function () {
  function Writable() {}

  return Writable;
}();



if (true) {
  window.Buffer = __webpack_require__(/*! buffer/ */ "./node_modules/buffer/index.js").Buffer;
} // NativeScript uses global, not window


if (typeof global !== "undefined") {
  global.Buffer = __webpack_require__(/*! buffer/ */ "./node_modules/buffer/index.js").Buffer;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../next/node_modules/webpack/buildin/global.js */ "./node_modules/next/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/Alias.js":
/*!*************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/Alias.js ***!
  \*************************************************************/
/*! exports provided: Alias */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Alias", function() { return Alias; });
/* harmony import */ var _util_ObjectUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/ObjectUtils */ "./node_modules/typeorm/browser/util/ObjectUtils.js");

/**
 */

var Alias =
/** @class */
function () {
  function Alias(alias) {
    _util_ObjectUtils__WEBPACK_IMPORTED_MODULE_0__["ObjectUtils"].assign(this, alias || {});
  }

  Object.defineProperty(Alias.prototype, "target", {
    get: function get() {
      return this.metadata.target;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Alias.prototype, "hasMetadata", {
    get: function get() {
      return !!this._metadata;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Alias.prototype, "metadata", {
    get: function get() {
      if (!this._metadata) throw new Error("Cannot get entity metadata for the given alias \"" + this.name + "\"");
      return this._metadata;
    },
    set: function set(metadata) {
      this._metadata = metadata;
    },
    enumerable: true,
    configurable: true
  });
  return Alias;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/Brackets.js":
/*!****************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/Brackets.js ***!
  \****************************************************************/
/*! exports provided: Brackets */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Brackets", function() { return Brackets; });
/**
 * Syntax sugar.
 * Allows to use brackets in WHERE expressions for better syntax.
 */
var Brackets =
/** @class */
function () {
  /**
   * Given WHERE query builder that will build a WHERE expression that will be taken into brackets.
   */
  function Brackets(whereFactory) {
    this.whereFactory = whereFactory;
  }

  return Brackets;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/DeleteQueryBuilder.js":
/*!**************************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/DeleteQueryBuilder.js ***!
  \**************************************************************************/
/*! exports provided: DeleteQueryBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeleteQueryBuilder", function() { return DeleteQueryBuilder; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _driver_cockroachdb_CockroachDriver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../driver/cockroachdb/CockroachDriver */ "./node_modules/typeorm/browser/driver/cockroachdb/CockroachDriver.js");
/* harmony import */ var _driver_oracle_OracleDriver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../driver/oracle/OracleDriver */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");
/* harmony import */ var _QueryBuilder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./QueryBuilder */ "./node_modules/typeorm/browser/query-builder/QueryBuilder.js");
/* harmony import */ var _result_DeleteResult__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./result/DeleteResult */ "./node_modules/typeorm/browser/query-builder/result/DeleteResult.js");
/* harmony import */ var _error_ReturningStatementNotSupportedError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/ReturningStatementNotSupportedError */ "./node_modules/typeorm/browser/error/ReturningStatementNotSupportedError.js");
/* harmony import */ var _driver_sqljs_SqljsDriver__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../driver/sqljs/SqljsDriver */ "./node_modules/typeorm/browser/driver/sqljs/SqljsDriver.js");
/* harmony import */ var _subscriber_BroadcasterResult__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../subscriber/BroadcasterResult */ "./node_modules/typeorm/browser/subscriber/BroadcasterResult.js");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../index */ "./node_modules/typeorm/browser/index.js");
/* harmony import */ var _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../driver/aurora-data-api/AuroraDataApiDriver */ "./node_modules/typeorm/browser/driver/aurora-data-api/AuroraDataApiDriver.js");













/**
 * Allows to build complex sql queries in a fashion way and execute those queries.
 */

var DeleteQueryBuilder =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](DeleteQueryBuilder, _super); // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------


  function DeleteQueryBuilder(connectionOrQueryBuilder, queryRunner) {
    var _this = _super.call(this, connectionOrQueryBuilder, queryRunner) || this;

    _this.expressionMap.aliasNamePrefixingEnabled = false;
    return _this;
  } // -------------------------------------------------------------------------
  // Public Implemented Methods
  // -------------------------------------------------------------------------

  /**
   * Gets generated sql query without parameters being replaced.
   */


  DeleteQueryBuilder.prototype.getQuery = function () {
    var sql = this.createDeleteExpression();
    return sql.trim();
  };
  /**
   * Executes sql generated by query builder and returns raw database results.
   */


  DeleteQueryBuilder.prototype.execute = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _a, sql, parameters, queryRunner, transactionStartedByUs, broadcastResult, deleteResult, result, driver, broadcastResult, error_1, rollbackError_1;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](this.getQueryAndParameters(), 2), sql = _a[0], parameters = _a[1];
            queryRunner = this.obtainQueryRunner();
            transactionStartedByUs = false;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 11, 16, 21]);

            if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , queryRunner.startTransaction()];

          case 2:
            _b.sent();

            transactionStartedByUs = true;
            _b.label = 3;

          case 3:
            if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3
            /*break*/
            , 5];
            broadcastResult = new _subscriber_BroadcasterResult__WEBPACK_IMPORTED_MODULE_7__["BroadcasterResult"]();
            queryRunner.broadcaster.broadcastBeforeRemoveEvent(broadcastResult, this.expressionMap.mainAlias.metadata);
            if (!(broadcastResult.promises.length > 0)) return [3
            /*break*/
            , 5];
            return [4
            /*yield*/
            , Promise.all(broadcastResult.promises)];

          case 4:
            _b.sent();

            _b.label = 5;

          case 5:
            deleteResult = new _result_DeleteResult__WEBPACK_IMPORTED_MODULE_4__["DeleteResult"]();
            return [4
            /*yield*/
            , queryRunner.query(sql, parameters)];

          case 6:
            result = _b.sent();
            driver = queryRunner.connection.driver;

            if (driver instanceof _driver_oracle_OracleDriver__WEBPACK_IMPORTED_MODULE_2__["MysqlDriver"] || driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_9__["AuroraDataApiDriver"]) {
              deleteResult.raw = result;
              deleteResult.affected = result.affectedRows;
            } else if (driver instanceof _driver_oracle_OracleDriver__WEBPACK_IMPORTED_MODULE_2__["SqlServerDriver"] || driver instanceof _driver_oracle_OracleDriver__WEBPACK_IMPORTED_MODULE_2__["PostgresDriver"] || driver instanceof _driver_cockroachdb_CockroachDriver__WEBPACK_IMPORTED_MODULE_1__["CockroachDriver"]) {
              deleteResult.raw = result[0] ? result[0] : null; // don't return 0 because it could confuse. null means that we did not receive this value

              deleteResult.affected = typeof result[1] === "number" ? result[1] : null;
            } else if (driver instanceof _driver_oracle_OracleDriver__WEBPACK_IMPORTED_MODULE_2__["OracleDriver"]) {
              deleteResult.affected = result;
            } else {
              deleteResult.raw = result;
            }

            if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3
            /*break*/
            , 8];
            broadcastResult = new _subscriber_BroadcasterResult__WEBPACK_IMPORTED_MODULE_7__["BroadcasterResult"]();
            queryRunner.broadcaster.broadcastAfterRemoveEvent(broadcastResult, this.expressionMap.mainAlias.metadata);
            if (!(broadcastResult.promises.length > 0)) return [3
            /*break*/
            , 8];
            return [4
            /*yield*/
            , Promise.all(broadcastResult.promises)];

          case 7:
            _b.sent();

            _b.label = 8;

          case 8:
            if (!transactionStartedByUs) return [3
            /*break*/
            , 10];
            return [4
            /*yield*/
            , queryRunner.commitTransaction()];

          case 9:
            _b.sent();

            _b.label = 10;

          case 10:
            return [2
            /*return*/
            , deleteResult];

          case 11:
            error_1 = _b.sent();
            if (!transactionStartedByUs) return [3
            /*break*/
            , 15];
            _b.label = 12;

          case 12:
            _b.trys.push([12, 14,, 15]);

            return [4
            /*yield*/
            , queryRunner.rollbackTransaction()];

          case 13:
            _b.sent();

            return [3
            /*break*/
            , 15];

          case 14:
            rollbackError_1 = _b.sent();
            return [3
            /*break*/
            , 15];

          case 15:
            throw error_1;

          case 16:
            if (!(queryRunner !== this.queryRunner)) return [3
            /*break*/
            , 18];
            return [4
            /*yield*/
            , queryRunner.release()];

          case 17:
            _b.sent();

            _b.label = 18;

          case 18:
            if (!(this.connection.driver instanceof _driver_sqljs_SqljsDriver__WEBPACK_IMPORTED_MODULE_6__["SqljsDriver"] && !queryRunner.isTransactionActive)) return [3
            /*break*/
            , 20];
            return [4
            /*yield*/
            , this.connection.driver.autoSave()];

          case 19:
            _b.sent();

            _b.label = 20;

          case 20:
            return [7
            /*endfinally*/
            ];

          case 21:
            return [2
            /*return*/
            ];
        }
      });
    });
  }; // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Specifies FROM which entity's table select/update/delete will be executed.
   * Also sets a main string alias of the selection data.
   */


  DeleteQueryBuilder.prototype.from = function (entityTarget, aliasName) {
    entityTarget = entityTarget instanceof _index__WEBPACK_IMPORTED_MODULE_8__["EntitySchema"] ? entityTarget.options.name : entityTarget;
    var mainAlias = this.createFromAlias(entityTarget, aliasName);
    this.expressionMap.setMainAlias(mainAlias);
    return this;
  };
  /**
   * Sets WHERE condition in the query builder.
   * If you had previously WHERE expression defined,
   * calling this function will override previously set WHERE conditions.
   * Additionally you can add parameters used in where expression.
   */


  DeleteQueryBuilder.prototype.where = function (where, parameters) {
    this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions

    var condition = this.computeWhereParameter(where);
    if (condition) this.expressionMap.wheres = [{
      type: "simple",
      condition: condition
    }];
    if (parameters) this.setParameters(parameters);
    return this;
  };
  /**
   * Adds new AND WHERE condition in the query builder.
   * Additionally you can add parameters used in where expression.
   */


  DeleteQueryBuilder.prototype.andWhere = function (where, parameters) {
    this.expressionMap.wheres.push({
      type: "and",
      condition: this.computeWhereParameter(where)
    });
    if (parameters) this.setParameters(parameters);
    return this;
  };
  /**
   * Adds new OR WHERE condition in the query builder.
   * Additionally you can add parameters used in where expression.
   */


  DeleteQueryBuilder.prototype.orWhere = function (where, parameters) {
    this.expressionMap.wheres.push({
      type: "or",
      condition: this.computeWhereParameter(where)
    });
    if (parameters) this.setParameters(parameters);
    return this;
  };
  /**
   * Adds new AND WHERE with conditions for the given ids.
   */


  DeleteQueryBuilder.prototype.whereInIds = function (ids) {
    return this.where(this.createWhereIdsExpression(ids));
  };
  /**
   * Adds new AND WHERE with conditions for the given ids.
   */


  DeleteQueryBuilder.prototype.andWhereInIds = function (ids) {
    return this.andWhere(this.createWhereIdsExpression(ids));
  };
  /**
   * Adds new OR WHERE with conditions for the given ids.
   */


  DeleteQueryBuilder.prototype.orWhereInIds = function (ids) {
    return this.orWhere(this.createWhereIdsExpression(ids));
  };
  /**
   * Optional returning/output clause.
   */


  DeleteQueryBuilder.prototype.output = function (output) {
    return this.returning(output);
  };
  /**
   * Optional returning/output clause.
   */


  DeleteQueryBuilder.prototype.returning = function (returning) {
    // not all databases support returning/output cause
    if (!this.connection.driver.isReturningSqlSupported()) throw new _error_ReturningStatementNotSupportedError__WEBPACK_IMPORTED_MODULE_5__["ReturningStatementNotSupportedError"]();
    this.expressionMap.returning = returning;
    return this;
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Creates DELETE express used to perform query.
   */


  DeleteQueryBuilder.prototype.createDeleteExpression = function () {
    var tableName = this.getTableName(this.getMainTableName());
    var whereExpression = this.createWhereExpression();
    var returningExpression = this.createReturningExpression();

    if (returningExpression && (this.connection.driver instanceof _driver_oracle_OracleDriver__WEBPACK_IMPORTED_MODULE_2__["PostgresDriver"] || this.connection.driver instanceof _driver_cockroachdb_CockroachDriver__WEBPACK_IMPORTED_MODULE_1__["CockroachDriver"])) {
      return "DELETE FROM " + tableName + whereExpression + " RETURNING " + returningExpression;
    } else if (returningExpression !== "" && this.connection.driver instanceof _driver_oracle_OracleDriver__WEBPACK_IMPORTED_MODULE_2__["SqlServerDriver"]) {
      return "DELETE FROM " + tableName + " OUTPUT " + returningExpression + whereExpression;
    } else {
      return "DELETE FROM " + tableName + whereExpression;
    }
  };

  return DeleteQueryBuilder;
}(_QueryBuilder__WEBPACK_IMPORTED_MODULE_3__["QueryBuilder"]);



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/InsertQueryBuilder.js":
/*!**************************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/InsertQueryBuilder.js ***!
  \**************************************************************************/
/*! exports provided: InsertQueryBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InsertQueryBuilder", function() { return InsertQueryBuilder; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _driver_cockroachdb_CockroachDriver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../driver/cockroachdb/CockroachDriver */ "./node_modules/typeorm/browser/driver/cockroachdb/CockroachDriver.js");
/* harmony import */ var _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../driver/sap/SapDriver */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");
/* harmony import */ var _QueryBuilder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./QueryBuilder */ "./node_modules/typeorm/browser/query-builder/QueryBuilder.js");
/* harmony import */ var _util_RandomGenerator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/RandomGenerator */ "./node_modules/typeorm/browser/util/RandomGenerator.js");
/* harmony import */ var _result_InsertResult__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./result/InsertResult */ "./node_modules/typeorm/browser/query-builder/result/InsertResult.js");
/* harmony import */ var _error_ReturningStatementNotSupportedError__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../error/ReturningStatementNotSupportedError */ "./node_modules/typeorm/browser/error/ReturningStatementNotSupportedError.js");
/* harmony import */ var _error_InsertValuesMissingError__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../error/InsertValuesMissingError */ "./node_modules/typeorm/browser/error/InsertValuesMissingError.js");
/* harmony import */ var _ReturningResultsEntityUpdator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ReturningResultsEntityUpdator */ "./node_modules/typeorm/browser/query-builder/ReturningResultsEntityUpdator.js");
/* harmony import */ var _driver_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../driver/sqlite-abstract/AbstractSqliteDriver */ "./node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteDriver.js");
/* harmony import */ var _driver_sqljs_SqljsDriver__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../driver/sqljs/SqljsDriver */ "./node_modules/typeorm/browser/driver/sqljs/SqljsDriver.js");
/* harmony import */ var _subscriber_BroadcasterResult__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../subscriber/BroadcasterResult */ "./node_modules/typeorm/browser/subscriber/BroadcasterResult.js");
/* harmony import */ var _entity_schema_EntitySchema__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../entity-schema/EntitySchema */ "./node_modules/typeorm/browser/entity-schema/EntitySchema.js");
/* harmony import */ var _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../driver/aurora-data-api/AuroraDataApiDriver */ "./node_modules/typeorm/browser/driver/aurora-data-api/AuroraDataApiDriver.js");


















/**
 * Allows to build complex sql queries in a fashion way and execute those queries.
 */

var InsertQueryBuilder =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](InsertQueryBuilder, _super);

  function InsertQueryBuilder() {
    return _super !== null && _super.apply(this, arguments) || this;
  } // -------------------------------------------------------------------------
  // Public Implemented Methods
  // -------------------------------------------------------------------------

  /**
   * Gets generated sql query without parameters being replaced.
   */


  InsertQueryBuilder.prototype.getQuery = function () {
    var sql = this.createInsertExpression();
    return sql.trim();
  };
  /**
   * Executes sql generated by query builder and returns raw database results.
   */


  InsertQueryBuilder.prototype.execute = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var queryRunner, transactionStartedByUs, valueSets, broadcastResult_1, declareSql, selectOutputSql, returningResultsEntityUpdator, _a, insertSql, parameters, insertResult, statements, _b, broadcastResult_2, error_1, rollbackError_1;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_c) {
        switch (_c.label) {
          case 0:
            queryRunner = this.obtainQueryRunner();
            transactionStartedByUs = false;
            _c.label = 1;

          case 1:
            _c.trys.push([1, 13, 18, 23]);

            if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , queryRunner.startTransaction()];

          case 2:
            _c.sent();

            transactionStartedByUs = true;
            _c.label = 3;

          case 3:
            valueSets = this.getValueSets();
            if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3
            /*break*/
            , 5];
            broadcastResult_1 = new _subscriber_BroadcasterResult__WEBPACK_IMPORTED_MODULE_11__["BroadcasterResult"]();
            valueSets.forEach(function (valueSet) {
              queryRunner.broadcaster.broadcastBeforeInsertEvent(broadcastResult_1, _this.expressionMap.mainAlias.metadata, valueSet);
            });
            if (!(broadcastResult_1.promises.length > 0)) return [3
            /*break*/
            , 5];
            return [4
            /*yield*/
            , Promise.all(broadcastResult_1.promises)];

          case 4:
            _c.sent();

            _c.label = 5;

          case 5:
            declareSql = null;
            selectOutputSql = null;
            returningResultsEntityUpdator = new _ReturningResultsEntityUpdator__WEBPACK_IMPORTED_MODULE_8__["ReturningResultsEntityUpdator"](queryRunner, this.expressionMap);

            if (this.expressionMap.updateEntity === true && this.expressionMap.mainAlias.hasMetadata) {
              this.expressionMap.extraReturningColumns = returningResultsEntityUpdator.getInsertionReturningColumns();

              if (this.expressionMap.extraReturningColumns.length > 0 && this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["SqlServerDriver"]) {
                declareSql = this.connection.driver.buildTableVariableDeclaration("@OutputTable", this.expressionMap.extraReturningColumns);
                selectOutputSql = "SELECT * FROM @OutputTable";
              }
            }

            _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](this.getQueryAndParameters(), 2), insertSql = _a[0], parameters = _a[1];
            insertResult = new _result_InsertResult__WEBPACK_IMPORTED_MODULE_5__["InsertResult"]();
            statements = [declareSql, insertSql, selectOutputSql];
            _b = insertResult;
            return [4
            /*yield*/
            , queryRunner.query(statements.filter(function (sql) {
              return sql != null;
            }).join(";\n\n"), parameters)];

          case 6:
            _b.raw = _c.sent();
            if (!(this.expressionMap.updateEntity === true && this.expressionMap.mainAlias.hasMetadata)) return [3
            /*break*/
            , 8]; // console.time(".updating entity");

            return [4
            /*yield*/
            , returningResultsEntityUpdator.insert(insertResult, valueSets)];

          case 7:
            // console.time(".updating entity");
            _c.sent();

            _c.label = 8;

          case 8:
            if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3
            /*break*/
            , 10];
            broadcastResult_2 = new _subscriber_BroadcasterResult__WEBPACK_IMPORTED_MODULE_11__["BroadcasterResult"]();
            valueSets.forEach(function (valueSet) {
              queryRunner.broadcaster.broadcastAfterInsertEvent(broadcastResult_2, _this.expressionMap.mainAlias.metadata, valueSet);
            });
            if (!(broadcastResult_2.promises.length > 0)) return [3
            /*break*/
            , 10];
            return [4
            /*yield*/
            , Promise.all(broadcastResult_2.promises)];

          case 9:
            _c.sent();

            _c.label = 10;

          case 10:
            if (!transactionStartedByUs) return [3
            /*break*/
            , 12];
            return [4
            /*yield*/
            , queryRunner.commitTransaction()];

          case 11:
            _c.sent();

            _c.label = 12;

          case 12:
            // console.timeEnd(".commit");
            return [2
            /*return*/
            , insertResult];

          case 13:
            error_1 = _c.sent();
            if (!transactionStartedByUs) return [3
            /*break*/
            , 17];
            _c.label = 14;

          case 14:
            _c.trys.push([14, 16,, 17]);

            return [4
            /*yield*/
            , queryRunner.rollbackTransaction()];

          case 15:
            _c.sent();

            return [3
            /*break*/
            , 17];

          case 16:
            rollbackError_1 = _c.sent();
            return [3
            /*break*/
            , 17];

          case 17:
            throw error_1;

          case 18:
            if (!(queryRunner !== this.queryRunner)) return [3
            /*break*/
            , 20];
            return [4
            /*yield*/
            , queryRunner.release()];

          case 19:
            _c.sent();

            _c.label = 20;

          case 20:
            if (!(this.connection.driver instanceof _driver_sqljs_SqljsDriver__WEBPACK_IMPORTED_MODULE_10__["SqljsDriver"] && !queryRunner.isTransactionActive)) return [3
            /*break*/
            , 22];
            return [4
            /*yield*/
            , this.connection.driver.autoSave()];

          case 21:
            _c.sent();

            _c.label = 22;

          case 22:
            return [7
            /*endfinally*/
            ];

          case 23:
            return [2
            /*return*/
            ];
        }
      });
    });
  }; // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Specifies INTO which entity's table insertion will be executed.
   */


  InsertQueryBuilder.prototype.into = function (entityTarget, columns) {
    entityTarget = entityTarget instanceof _entity_schema_EntitySchema__WEBPACK_IMPORTED_MODULE_12__["EntitySchema"] ? entityTarget.options.name : entityTarget;
    var mainAlias = this.createFromAlias(entityTarget);
    this.expressionMap.setMainAlias(mainAlias);
    this.expressionMap.insertColumns = columns || [];
    return this;
  };
  /**
   * Values needs to be inserted into table.
   */


  InsertQueryBuilder.prototype.values = function (values) {
    this.expressionMap.valuesSet = values;
    return this;
  };
  /**
   * Optional returning/output clause.
   */


  InsertQueryBuilder.prototype.output = function (output) {
    return this.returning(output);
  };
  /**
   * Optional returning/output clause.
   */


  InsertQueryBuilder.prototype.returning = function (returning) {
    // not all databases support returning/output cause
    if (!this.connection.driver.isReturningSqlSupported()) throw new _error_ReturningStatementNotSupportedError__WEBPACK_IMPORTED_MODULE_6__["ReturningStatementNotSupportedError"]();
    this.expressionMap.returning = returning;
    return this;
  };
  /**
   * Indicates if entity must be updated after insertion operations.
   * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).
   * Enabled by default.
   */


  InsertQueryBuilder.prototype.updateEntity = function (enabled) {
    this.expressionMap.updateEntity = enabled;
    return this;
  };
  /**
   * Adds additional ON CONFLICT statement supported in postgres and cockroach.
   */


  InsertQueryBuilder.prototype.onConflict = function (statement) {
    this.expressionMap.onConflict = statement;
    return this;
  };
  /**
   * Adds additional ignore statement supported in databases.
   */


  InsertQueryBuilder.prototype.orIgnore = function (statement) {
    if (statement === void 0) {
      statement = true;
    }

    this.expressionMap.onIgnore = statement;
    return this;
  };
  /**
   * Adds additional update statement supported in databases.
   */


  InsertQueryBuilder.prototype.orUpdate = function (statement) {
    this.expressionMap.onUpdate = {};
    if (statement && Array.isArray(statement.conflict_target)) this.expressionMap.onUpdate.conflict = " ( " + statement.conflict_target.join(", ") + " ) ";
    if (statement && typeof statement.conflict_target === "string") this.expressionMap.onUpdate.conflict = " ON CONSTRAINT " + statement.conflict_target + " ";
    if (statement && Array.isArray(statement.columns)) this.expressionMap.onUpdate.columns = statement.columns.map(function (column) {
      return column + " = :" + column;
    }).join(", ");

    if (statement && Array.isArray(statement.overwrite)) {
      if (this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["MysqlDriver"] || this.connection.driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_13__["AuroraDataApiDriver"]) {
        this.expressionMap.onUpdate.overwrite = statement.overwrite.map(function (column) {
          return column + " = VALUES(" + column + ")";
        }).join(", ");
      } else if (this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["PostgresDriver"] || this.connection.driver instanceof _driver_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_9__["AbstractSqliteDriver"] || this.connection.driver instanceof _driver_cockroachdb_CockroachDriver__WEBPACK_IMPORTED_MODULE_1__["CockroachDriver"]) {
        this.expressionMap.onUpdate.overwrite = statement.overwrite.map(function (column) {
          return column + " = EXCLUDED." + column;
        }).join(", ");
      }
    }

    return this;
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Creates INSERT express used to perform insert query.
   */


  InsertQueryBuilder.prototype.createInsertExpression = function () {
    var tableName = this.getTableName(this.getMainTableName());
    var valuesExpression = this.createValuesExpression(); // its important to get values before returning expression because oracle rely on native parameters and ordering of them is important

    var returningExpression = this.createReturningExpression();
    var columnsExpression = this.createColumnNamesExpression();
    var query = "INSERT ";

    if (this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["MysqlDriver"] || this.connection.driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_13__["AuroraDataApiDriver"]) {
      query += "" + (this.expressionMap.onIgnore ? " IGNORE " : "");
    }

    query += "INTO " + tableName; // add columns expression

    if (columnsExpression) {
      query += "(" + columnsExpression + ")";
    } else {
      if (!valuesExpression && (this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["MysqlDriver"] || this.connection.driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_13__["AuroraDataApiDriver"])) // special syntax for mysql DEFAULT VALUES insertion
        query += "()";
    } // add OUTPUT expression


    if (returningExpression && this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["SqlServerDriver"]) {
      query += " OUTPUT " + returningExpression;
    } // add VALUES expression


    if (valuesExpression) {
      query += " VALUES " + valuesExpression;
    } else {
      if (this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["MysqlDriver"] || this.connection.driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_13__["AuroraDataApiDriver"]) {
        // special syntax for mysql DEFAULT VALUES insertion
        query += " VALUES ()";
      } else {
        query += " DEFAULT VALUES";
      }
    }

    if (this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["PostgresDriver"] || this.connection.driver instanceof _driver_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_9__["AbstractSqliteDriver"] || this.connection.driver instanceof _driver_cockroachdb_CockroachDriver__WEBPACK_IMPORTED_MODULE_1__["CockroachDriver"]) {
      query += "" + (this.expressionMap.onIgnore ? " ON CONFLICT DO NOTHING " : "");
      query += "" + (this.expressionMap.onConflict ? " ON CONFLICT " + this.expressionMap.onConflict : "");

      if (this.expressionMap.onUpdate) {
        var _a = this.expressionMap.onUpdate,
            overwrite = _a.overwrite,
            columns = _a.columns,
            conflict = _a.conflict;
        query += "" + (columns ? " ON CONFLICT " + conflict + " DO UPDATE SET " + columns : "");
        query += "" + (overwrite ? " ON CONFLICT " + conflict + " DO UPDATE SET " + overwrite : "");
      }
    } else if (this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["MysqlDriver"] || this.connection.driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_13__["AuroraDataApiDriver"]) {
      if (this.expressionMap.onUpdate) {
        var _b = this.expressionMap.onUpdate,
            overwrite = _b.overwrite,
            columns = _b.columns;
        query += "" + (columns ? " ON DUPLICATE KEY UPDATE " + columns : "");
        query += "" + (overwrite ? " ON DUPLICATE KEY UPDATE " + overwrite : "");
      }
    } // add RETURNING expression


    if (returningExpression && (this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["PostgresDriver"] || this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["OracleDriver"] || this.connection.driver instanceof _driver_cockroachdb_CockroachDriver__WEBPACK_IMPORTED_MODULE_1__["CockroachDriver"])) {
      query += " RETURNING " + returningExpression;
    }

    return query;
  };
  /**
   * Gets list of columns where values must be inserted to.
   */


  InsertQueryBuilder.prototype.getInsertedColumns = function () {
    var _this = this;

    if (!this.expressionMap.mainAlias.hasMetadata) return [];
    return this.expressionMap.mainAlias.metadata.columns.filter(function (column) {
      // if user specified list of columns he wants to insert to, then we filter only them
      if (_this.expressionMap.insertColumns.length) return _this.expressionMap.insertColumns.indexOf(column.propertyPath) !== -1; // skip columns the user doesn't want included by default

      if (!column.isInsert) {
        return false;
      } // if user did not specified such list then return all columns except auto-increment one
      // for Oracle we return auto-increment column as well because Oracle does not support DEFAULT VALUES expression


      if (column.isGenerated && column.generationStrategy === "increment" && !(_this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["OracleDriver"]) && !(_this.connection.driver instanceof _driver_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_9__["AbstractSqliteDriver"]) && !(_this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["MysqlDriver"]) && !(_this.connection.driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_13__["AuroraDataApiDriver"])) return false;
      return true;
    });
  };
  /**
   * Creates a columns string where values must be inserted to for INSERT INTO expression.
   */


  InsertQueryBuilder.prototype.createColumnNamesExpression = function () {
    var _this = this;

    var columns = this.getInsertedColumns();
    if (columns.length > 0) return columns.map(function (column) {
      return _this.escape(column.databaseName);
    }).join(", "); // in the case if there are no insert columns specified and table without metadata used
    // we get columns from the inserted value map, in the case if only one inserted map is specified

    if (!this.expressionMap.mainAlias.hasMetadata && !this.expressionMap.insertColumns.length) {
      var valueSets = this.getValueSets();
      if (valueSets.length === 1) return Object.keys(valueSets[0]).map(function (columnName) {
        return _this.escape(columnName);
      }).join(", ");
    } // get a table name and all column database names


    return this.expressionMap.insertColumns.map(function (columnName) {
      return _this.escape(columnName);
    }).join(", ");
  };
  /**
   * Creates list of values needs to be inserted in the VALUES expression.
   */


  InsertQueryBuilder.prototype.createValuesExpression = function () {
    var _this = this;

    var valueSets = this.getValueSets();
    var columns = this.getInsertedColumns(); // if column metadatas are given then apply all necessary operations with values

    if (columns.length > 0) {
      var expression_1 = "";
      var parametersCount_1 = Object.keys(this.expressionMap.nativeParameters).length;
      valueSets.forEach(function (valueSet, valueSetIndex) {
        columns.forEach(function (column, columnIndex) {
          if (columnIndex === 0) {
            expression_1 += "(";
          }

          var paramName = "i" + valueSetIndex + "_" + column.databaseName; // extract real value from the entity

          var value = column.getEntityValue(valueSet); // if column is relational and value is an object then get real referenced column value from this object
          // for example column value is { question: { id: 1 } }, value will be equal to { id: 1 }
          // and we extract "1" from this object

          /*if (column.referencedColumn && value instanceof Object && !(value instanceof Function)) { // todo: check if we still need it since getEntityValue already has similar code
              value = column.referencedColumn.getEntityValue(value);
          }*/

          if (!(value instanceof Function)) {
            // make sure our value is normalized by a driver
            value = _this.connection.driver.preparePersistentValue(value, column);
          } // newly inserted entities always have a version equal to 1 (first version)


          if (column.isVersion) {
            expression_1 += "1"; // } else if (column.isNestedSetLeft) {
            //     const tableName = this.connection.driver.escape(column.entityMetadata.tablePath);
            //     const rightColumnName = this.connection.driver.escape(column.entityMetadata.nestedSetRightColumn!.databaseName);
            //     const subQuery = `(SELECT c.max + 1 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;
            //     expression += subQuery;
            //
            // } else if (column.isNestedSetRight) {
            //     const tableName = this.connection.driver.escape(column.entityMetadata.tablePath);
            //     const rightColumnName = this.connection.driver.escape(column.entityMetadata.nestedSetRightColumn!.databaseName);
            //     const subQuery = `(SELECT c.max + 2 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;
            //     expression += subQuery;
          } else if (column.isDiscriminator) {
            _this.expressionMap.nativeParameters["discriminator_value_" + parametersCount_1] = _this.expressionMap.mainAlias.metadata.discriminatorValue;
            expression_1 += _this.connection.driver.createParameter("discriminator_value_" + parametersCount_1, parametersCount_1);
            parametersCount_1++; // return "1";
            // for create and update dates we insert current date
            // no, we don't do it because this constant is already in "default" value of the column
            // with extended timestamp functionality, like CURRENT_TIMESTAMP(6) for example
            // } else if (column.isCreateDate || column.isUpdateDate) {
            //     return "CURRENT_TIMESTAMP";
            // if column is generated uuid and database does not support its generation and custom generated value was not provided by a user - we generate a new uuid value for insertion
          } else if (column.isGenerated && column.generationStrategy === "uuid" && !_this.connection.driver.isUUIDGenerationSupported() && value === undefined) {
            var paramName_1 = "uuid_" + column.databaseName + valueSetIndex;
            value = _util_RandomGenerator__WEBPACK_IMPORTED_MODULE_4__["RandomGenerator"].uuid4();
            _this.expressionMap.nativeParameters[paramName_1] = value;
            expression_1 += _this.connection.driver.createParameter(paramName_1, parametersCount_1);
            parametersCount_1++; // if value for this column was not provided then insert default value
          } else if (value === undefined) {
            if (_this.connection.driver instanceof _driver_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_9__["AbstractSqliteDriver"] || _this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["SapDriver"]) {
              // unfortunately sqlite does not support DEFAULT expression in INSERT queries
              if (column["default"] !== undefined) {
                // try to use default defined in the column
                expression_1 += _this.connection.driver.normalizeDefault(column);
              } else {
                expression_1 += "NULL"; // otherwise simply use NULL and pray if column is nullable
              }
            } else {
              expression_1 += "DEFAULT";
            } // support for SQL expressions in queries

          } else if (value instanceof Function) {
            expression_1 += value(); // just any other regular value
          } else {
            if (_this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["SqlServerDriver"]) value = _this.connection.driver.parametrizeValue(column, value); // we need to store array values in a special class to make sure parameter replacement will work correctly
            // if (value instanceof Array)
            //     value = new ArrayParameter(value);

            _this.expressionMap.nativeParameters[paramName] = value;

            if ((_this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["MysqlDriver"] || _this.connection.driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_13__["AuroraDataApiDriver"]) && _this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {
              var useLegacy = _this.connection.driver.options.legacySpatialSupport;
              var geomFromText = useLegacy ? "GeomFromText" : "ST_GeomFromText";

              if (column.srid != null) {
                expression_1 += geomFromText + "(" + _this.connection.driver.createParameter(paramName, parametersCount_1) + ", " + column.srid + ")";
              } else {
                expression_1 += geomFromText + "(" + _this.connection.driver.createParameter(paramName, parametersCount_1) + ")";
              }
            } else if (_this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["PostgresDriver"] && _this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {
              if (column.srid != null) {
                expression_1 += "ST_SetSRID(ST_GeomFromGeoJSON(" + _this.connection.driver.createParameter(paramName, parametersCount_1) + "), " + column.srid + ")::" + column.type;
              } else {
                expression_1 += "ST_GeomFromGeoJSON(" + _this.connection.driver.createParameter(paramName, parametersCount_1) + ")::" + column.type;
              }
            } else {
              expression_1 += _this.connection.driver.createParameter(paramName, parametersCount_1);
            }

            parametersCount_1++;
          }

          if (columnIndex === columns.length - 1) {
            if (valueSetIndex === valueSets.length - 1) {
              expression_1 += ")";
            } else {
              expression_1 += "), ";
            }
          } else {
            expression_1 += ", ";
          }
        });
      });
      if (expression_1 === "()") return "";
      return expression_1;
    } else {
      // for tables without metadata
      // get values needs to be inserted
      var expression_2 = "";
      var parametersCount_2 = Object.keys(this.expressionMap.nativeParameters).length;
      valueSets.forEach(function (valueSet, insertionIndex) {
        var columns = Object.keys(valueSet);
        columns.forEach(function (columnName, columnIndex) {
          if (columnIndex === 0) {
            expression_2 += "(";
          }

          var paramName = "i" + insertionIndex + "_" + columnName;
          var value = valueSet[columnName]; // support for SQL expressions in queries

          if (value instanceof Function) {
            expression_2 += value(); // if value for this column was not provided then insert default value
          } else if (value === undefined) {
            if (_this.connection.driver instanceof _driver_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_9__["AbstractSqliteDriver"] || _this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["SapDriver"]) {
              expression_2 += "NULL";
            } else {
              expression_2 += "DEFAULT";
            } // just any other regular value

          } else {
            _this.expressionMap.nativeParameters[paramName] = value;
            expression_2 += _this.connection.driver.createParameter(paramName, parametersCount_2);
            parametersCount_2++;
          }

          if (columnIndex === Object.keys(valueSet).length - 1) {
            if (insertionIndex === valueSets.length - 1) {
              expression_2 += ")";
            } else {
              expression_2 += "), ";
            }
          } else {
            expression_2 += ", ";
          }
        });
      });
      if (expression_2 === "()") return "";
      return expression_2;
    }
  };
  /**
   * Gets array of values need to be inserted into the target table.
   */


  InsertQueryBuilder.prototype.getValueSets = function () {
    if (Array.isArray(this.expressionMap.valuesSet) && this.expressionMap.valuesSet.length > 0) return this.expressionMap.valuesSet;
    if (this.expressionMap.valuesSet instanceof Object) return [this.expressionMap.valuesSet];
    throw new _error_InsertValuesMissingError__WEBPACK_IMPORTED_MODULE_7__["InsertValuesMissingError"]();
  };

  return InsertQueryBuilder;
}(_QueryBuilder__WEBPACK_IMPORTED_MODULE_3__["QueryBuilder"]);



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/JoinAttribute.js":
/*!*********************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/JoinAttribute.js ***!
  \*********************************************************************/
/*! exports provided: JoinAttribute */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JoinAttribute", function() { return JoinAttribute; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _QueryBuilderUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./QueryBuilderUtils */ "./node_modules/typeorm/browser/query-builder/QueryBuilderUtils.js");
/* harmony import */ var _util_ObjectUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/ObjectUtils */ "./node_modules/typeorm/browser/util/ObjectUtils.js");



/**
 * Stores all join attributes which will be used to build a JOIN query.
 */

var JoinAttribute =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function JoinAttribute(connection, queryExpressionMap, joinAttribute) {
    this.connection = connection;
    this.queryExpressionMap = queryExpressionMap;
    this.isSelectedEvaluated = false;
    this.relationEvaluated = false;
    _util_ObjectUtils__WEBPACK_IMPORTED_MODULE_2__["ObjectUtils"].assign(this, joinAttribute || {});
  }

  Object.defineProperty(JoinAttribute.prototype, "isMany", {
    // -------------------------------------------------------------------------
    // Public Methods
    // -------------------------------------------------------------------------
    get: function get() {
      if (this.isMappingMany !== undefined) return this.isMappingMany;
      if (this.relation) return this.relation.isManyToMany || this.relation.isOneToMany;
      return false;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(JoinAttribute.prototype, "isSelected", {
    /**
     * Indicates if this join is selected.
     */
    get: function get() {
      var _this = this;

      if (!this.isSelectedEvaluated) {
        var getValue = function getValue() {
          var e_1, _a;

          var _loop_1 = function _loop_1(select) {
            if (select.selection === _this.alias.name) return {
              value: true
            };
            if (_this.metadata && !!_this.metadata.columns.find(function (column) {
              return select.selection === _this.alias.name + "." + column.propertyPath;
            })) return {
              value: true
            };
          };

          try {
            for (var _b = tslib__WEBPACK_IMPORTED_MODULE_0__["__values"](_this.queryExpressionMap.selects), _c = _b.next(); !_c.done; _c = _b.next()) {
              var select = _c.value;

              var state_1 = _loop_1(select);

              if (typeof state_1 === "object") return state_1.value;
            }
          } catch (e_1_1) {
            e_1 = {
              error: e_1_1
            };
          } finally {
            try {
              if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            } finally {
              if (e_1) throw e_1.error;
            }
          }

          return false;
        };

        this.isSelectedCache = getValue();
        this.isSelectedEvaluated = true;
      }

      return this.isSelectedCache;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(JoinAttribute.prototype, "tablePath", {
    /**
     * Name of the table which we should join.
     */
    get: function get() {
      return this.metadata ? this.metadata.tablePath : this.entityOrProperty;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(JoinAttribute.prototype, "parentAlias", {
    /**
     * Alias of the parent of this join.
     * For example, if we join ("post.category", "categoryAlias") then "post" is a parent alias.
     * This value is extracted from entityOrProperty value.
     * This is available when join was made using "post.category" syntax.
     */
    get: function get() {
      if (!_QueryBuilderUtils__WEBPACK_IMPORTED_MODULE_1__["QueryBuilderUtils"].isAliasProperty(this.entityOrProperty)) return undefined;
      return this.entityOrProperty.substr(0, this.entityOrProperty.indexOf("."));
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(JoinAttribute.prototype, "relationPropertyPath", {
    /**
     * Relation property name of the parent.
     * This is used to understand what is joined.
     * For example, if we join ("post.category", "categoryAlias") then "category" is a relation property.
     * This value is extracted from entityOrProperty value.
     * This is available when join was made using "post.category" syntax.
     */
    get: function get() {
      if (!_QueryBuilderUtils__WEBPACK_IMPORTED_MODULE_1__["QueryBuilderUtils"].isAliasProperty(this.entityOrProperty)) return undefined;
      return this.entityOrProperty.substr(this.entityOrProperty.indexOf(".") + 1);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(JoinAttribute.prototype, "relation", {
    /**
     * Relation of the parent.
     * This is used to understand what is joined.
     * This is available when join was made using "post.category" syntax.
     * Relation can be undefined if entityOrProperty is regular entity or custom table.
     */
    get: function get() {
      var _this = this;

      if (!this.relationEvaluated) {
        var getValue = function getValue() {
          if (!_QueryBuilderUtils__WEBPACK_IMPORTED_MODULE_1__["QueryBuilderUtils"].isAliasProperty(_this.entityOrProperty)) return undefined;

          var relationOwnerSelection = _this.queryExpressionMap.findAliasByName(_this.parentAlias);

          var relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(_this.relationPropertyPath);

          if (relation) {
            return relation;
          }

          if (relationOwnerSelection.metadata.parentEntityMetadata) {
            relation = relationOwnerSelection.metadata.parentEntityMetadata.findRelationWithPropertyPath(_this.relationPropertyPath);

            if (relation) {
              return relation;
            }
          }

          throw new Error("Relation with property path " + _this.relationPropertyPath + " in entity was not found.");
        };

        this.relationCache = getValue.bind(this)();
        this.relationEvaluated = true;
      }

      return this.relationCache;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(JoinAttribute.prototype, "metadata", {
    /**
     * Metadata of the joined entity.
     * If table without entity was joined, then it will return undefined.
     */
    get: function get() {
      // entityOrProperty is relation, e.g. "post.category"
      if (this.relation) return this.relation.inverseEntityMetadata; // entityOrProperty is Entity class

      if (this.connection.hasMetadata(this.entityOrProperty)) return this.connection.getMetadata(this.entityOrProperty);
      return undefined;
      /*if (typeof this.entityOrProperty === "string") { // entityOrProperty is a custom table
               // first try to find entity with such name, this is needed when entity does not have a target class,
          // and its target is a string name (scenario when plain old javascript is used or entity schema is loaded from files)
          const metadata = this.connection.entityMetadatas.find(metadata => metadata.name === this.entityOrProperty);
          if (metadata)
              return metadata;
               // check if we have entity with such table name, and use its metadata if found
          return this.connection.entityMetadatas.find(metadata => metadata.tableName === this.entityOrProperty);
      }*/
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(JoinAttribute.prototype, "junctionAlias", {
    /**
     * Generates alias of junction table, whose ids we get.
     */
    get: function get() {
      if (!this.relation) throw new Error("Cannot get junction table for join without relation.");
      return this.relation.isOwning ? this.parentAlias + "_" + this.alias.name : this.alias.name + "_" + this.parentAlias;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(JoinAttribute.prototype, "mapToPropertyParentAlias", {
    get: function get() {
      if (!this.mapToProperty) return undefined;
      return this.mapToProperty.split(".")[0];
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(JoinAttribute.prototype, "mapToPropertyPropertyName", {
    get: function get() {
      if (!this.mapToProperty) return undefined;
      return this.mapToProperty.split(".")[1];
    },
    enumerable: true,
    configurable: true
  });
  return JoinAttribute;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/QueryBuilder.js":
/*!********************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/QueryBuilder.js ***!
  \********************************************************************/
/*! exports provided: QueryBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueryBuilder", function() { return QueryBuilder; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _QueryExpressionMap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./QueryExpressionMap */ "./node_modules/typeorm/browser/query-builder/QueryExpressionMap.js");
/* harmony import */ var _Brackets__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Brackets */ "./node_modules/typeorm/browser/query-builder/Brackets.js");
/* harmony import */ var _metadata_EntityMetadata__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../metadata/EntityMetadata */ "./node_modules/typeorm/browser/metadata/EntityMetadata.js");
/* harmony import */ var _driver_sqljs_SqljsDriver__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../driver/sqljs/SqljsDriver */ "./node_modules/typeorm/browser/driver/sqljs/SqljsDriver.js");
/* harmony import */ var _driver_sqlserver_SqlServerDriver__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../driver/sqlserver/SqlServerDriver */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ */ "./node_modules/typeorm/browser/index.js");
/* harmony import */ var _find_options_FindOperator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../find-options/FindOperator */ "./node_modules/typeorm/browser/find-options/FindOperator.js");
/* harmony import */ var _find_options_operator_In__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../find-options/operator/In */ "./node_modules/typeorm/browser/find-options/operator/In.js");









 // todo: completely cover query builder with tests
// todo: entityOrProperty can be target name. implement proper behaviour if it is.
// todo: check in persistment if id exist on object and throw exception (can be in partial selection?)
// todo: fix problem with long aliases eg getMaxIdentifierLength
// todo: fix replacing in .select("COUNT(post.id) AS cnt") statement
// todo: implement joinAlways in relations and relationId
// todo: finish partial selection
// todo: sugar methods like: .addCount and .selectCount, selectCountAndMap, selectSum, selectSumAndMap, ...
// todo: implement @Select decorator
// todo: add select and map functions
// todo: implement relation/entity loading and setting them into properties within a separate query
// .loadAndMap("post.categories", "post.categories", qb => ...)
// .loadAndMap("post.categories", Category, qb => ...)

/**
 * Allows to build complex sql queries in a fashion way and execute those queries.
 */

var QueryBuilder =
/** @class */
function () {
  /**
   * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.
   */
  function QueryBuilder(connectionOrQueryBuilder, queryRunner) {
    if (connectionOrQueryBuilder instanceof QueryBuilder) {
      this.connection = connectionOrQueryBuilder.connection;
      this.queryRunner = connectionOrQueryBuilder.queryRunner;
      this.expressionMap = connectionOrQueryBuilder.expressionMap.clone();
    } else {
      this.connection = connectionOrQueryBuilder;
      this.queryRunner = queryRunner;
      this.expressionMap = new _QueryExpressionMap__WEBPACK_IMPORTED_MODULE_1__["QueryExpressionMap"](this.connection);
    }
  }

  Object.defineProperty(QueryBuilder.prototype, "alias", {
    // -------------------------------------------------------------------------
    // Accessors
    // -------------------------------------------------------------------------

    /**
     * Gets the main alias string used in this query builder.
     */
    get: function get() {
      if (!this.expressionMap.mainAlias) throw new Error("Main alias is not set"); // todo: better exception

      return this.expressionMap.mainAlias.name;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Creates SELECT query and selects given data.
   * Replaces all previous selections if they exist.
   */

  QueryBuilder.prototype.select = function (selection, selectionAliasName) {
    this.expressionMap.queryType = "select";

    if (Array.isArray(selection)) {
      this.expressionMap.selects = selection.map(function (selection) {
        return {
          selection: selection
        };
      });
    } else if (selection) {
      this.expressionMap.selects = [{
        selection: selection,
        aliasName: selectionAliasName
      }];
    } // loading it dynamically because of circular issue


    var SelectQueryBuilderCls = __webpack_require__(/*! ./SelectQueryBuilder */ "./node_modules/typeorm/browser/query-builder/SelectQueryBuilder.js").SelectQueryBuilder;

    if (this instanceof SelectQueryBuilderCls) return this;
    return new SelectQueryBuilderCls(this);
  };
  /**
   * Creates INSERT query.
   */


  QueryBuilder.prototype.insert = function () {
    this.expressionMap.queryType = "insert"; // loading it dynamically because of circular issue

    var InsertQueryBuilderCls = __webpack_require__(/*! ./InsertQueryBuilder */ "./node_modules/typeorm/browser/query-builder/InsertQueryBuilder.js").InsertQueryBuilder;

    if (this instanceof InsertQueryBuilderCls) return this;
    return new InsertQueryBuilderCls(this);
  };
  /**
   * Creates UPDATE query and applies given update values.
   */


  QueryBuilder.prototype.update = function (entityOrTableNameUpdateSet, maybeUpdateSet) {
    var updateSet = maybeUpdateSet ? maybeUpdateSet : entityOrTableNameUpdateSet;
    entityOrTableNameUpdateSet = entityOrTableNameUpdateSet instanceof ___WEBPACK_IMPORTED_MODULE_6__["EntitySchema"] ? entityOrTableNameUpdateSet.options.name : entityOrTableNameUpdateSet;

    if (entityOrTableNameUpdateSet instanceof Function || typeof entityOrTableNameUpdateSet === "string") {
      var mainAlias = this.createFromAlias(entityOrTableNameUpdateSet);
      this.expressionMap.setMainAlias(mainAlias);
    }

    this.expressionMap.queryType = "update";
    this.expressionMap.valuesSet = updateSet; // loading it dynamically because of circular issue

    var UpdateQueryBuilderCls = __webpack_require__(/*! ./UpdateQueryBuilder */ "./node_modules/typeorm/browser/query-builder/UpdateQueryBuilder.js").UpdateQueryBuilder;

    if (this instanceof UpdateQueryBuilderCls) return this;
    return new UpdateQueryBuilderCls(this);
  };
  /**
   * Creates DELETE query.
   */


  QueryBuilder.prototype["delete"] = function () {
    this.expressionMap.queryType = "delete"; // loading it dynamically because of circular issue

    var DeleteQueryBuilderCls = __webpack_require__(/*! ./DeleteQueryBuilder */ "./node_modules/typeorm/browser/query-builder/DeleteQueryBuilder.js").DeleteQueryBuilder;

    if (this instanceof DeleteQueryBuilderCls) return this;
    return new DeleteQueryBuilderCls(this);
  };

  QueryBuilder.prototype.softDelete = function () {
    this.expressionMap.queryType = "soft-delete"; // loading it dynamically because of circular issue

    var SoftDeleteQueryBuilderCls = __webpack_require__(/*! ./SoftDeleteQueryBuilder */ "./node_modules/typeorm/browser/query-builder/SoftDeleteQueryBuilder.js").SoftDeleteQueryBuilder;

    if (this instanceof SoftDeleteQueryBuilderCls) return this;
    return new SoftDeleteQueryBuilderCls(this);
  };

  QueryBuilder.prototype.restore = function () {
    this.expressionMap.queryType = "restore"; // loading it dynamically because of circular issue

    var SoftDeleteQueryBuilderCls = __webpack_require__(/*! ./SoftDeleteQueryBuilder */ "./node_modules/typeorm/browser/query-builder/SoftDeleteQueryBuilder.js").SoftDeleteQueryBuilder;

    if (this instanceof SoftDeleteQueryBuilderCls) return this;
    return new SoftDeleteQueryBuilderCls(this);
  };
  /**
   * Sets entity's relation with which this query builder gonna work.
   */


  QueryBuilder.prototype.relation = function (entityTargetOrPropertyPath, maybePropertyPath) {
    var entityTarget = arguments.length === 2 ? entityTargetOrPropertyPath : undefined;
    var propertyPath = arguments.length === 2 ? maybePropertyPath : entityTargetOrPropertyPath;
    this.expressionMap.queryType = "relation";
    this.expressionMap.relationPropertyPath = propertyPath;

    if (entityTarget) {
      var mainAlias = this.createFromAlias(entityTarget);
      this.expressionMap.setMainAlias(mainAlias);
    } // loading it dynamically because of circular issue


    var RelationQueryBuilderCls = __webpack_require__(/*! ./RelationQueryBuilder */ "./node_modules/typeorm/browser/query-builder/RelationQueryBuilder.js").RelationQueryBuilder;

    if (this instanceof RelationQueryBuilderCls) return this;
    return new RelationQueryBuilderCls(this);
  };
  /**
   * Checks if given relation or relations exist in the entity.
   * Returns true if relation exists, false otherwise.
   *
   * todo: move this method to manager? or create a shortcut?
   */


  QueryBuilder.prototype.hasRelation = function (target, relation) {
    var entityMetadata = this.connection.getMetadata(target);
    var relations = Array.isArray(relation) ? relation : [relation];
    return relations.every(function (relation) {
      return !!entityMetadata.findRelationWithPropertyPath(relation);
    });
  };
  /**
   * Sets parameter name and its value.
   */


  QueryBuilder.prototype.setParameter = function (key, value) {
    this.expressionMap.parameters[key] = value;
    return this;
  };
  /**
   * Adds all parameters from the given object.
   */


  QueryBuilder.prototype.setParameters = function (parameters) {
    var _this = this; // remove function parameters


    Object.keys(parameters).forEach(function (key) {
      if (parameters[key] instanceof Function) {
        throw new Error("Function parameter isn't supported in the parameters. Please check \"" + key + "\" parameter.");
      }
    }); // set parent query builder parameters as well in sub-query mode

    if (this.expressionMap.parentQueryBuilder) this.expressionMap.parentQueryBuilder.setParameters(parameters);
    Object.keys(parameters).forEach(function (key) {
      return _this.setParameter(key, parameters[key]);
    });
    return this;
  };
  /**
   * Adds native parameters from the given object.
   */


  QueryBuilder.prototype.setNativeParameters = function (parameters) {
    var _this = this; // set parent query builder parameters as well in sub-query mode


    if (this.expressionMap.parentQueryBuilder) this.expressionMap.parentQueryBuilder.setNativeParameters(parameters);
    Object.keys(parameters).forEach(function (key) {
      _this.expressionMap.nativeParameters[key] = parameters[key];
    });
    return this;
  };
  /**
   * Gets all parameters.
   */


  QueryBuilder.prototype.getParameters = function () {
    var parameters = Object.assign({}, this.expressionMap.parameters); // add discriminator column parameter if it exist

    if (this.expressionMap.mainAlias && this.expressionMap.mainAlias.hasMetadata) {
      var metadata = this.expressionMap.mainAlias.metadata;

      if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {
        var values = metadata.childEntityMetadatas.filter(function (childMetadata) {
          return childMetadata.discriminatorColumn;
        }).map(function (childMetadata) {
          return childMetadata.discriminatorValue;
        });
        values.push(metadata.discriminatorValue);
        parameters["discriminatorColumnValues"] = values;
      }
    }

    return parameters;
  };
  /**
   * Prints sql to stdout using console.log.
   */


  QueryBuilder.prototype.printSql = function () {
    var _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](this.getQueryAndParameters(), 2),
        query = _a[0],
        parameters = _a[1];

    this.connection.logger.logQuery(query, parameters);
    return this;
  };
  /**
   * Gets generated sql that will be executed.
   * Parameters in the query are escaped for the currently used driver.
   */


  QueryBuilder.prototype.getSql = function () {
    return this.getQueryAndParameters()[0];
  };
  /**
   * Gets query to be executed with all parameters used in it.
   */


  QueryBuilder.prototype.getQueryAndParameters = function () {
    // this execution order is important because getQuery method generates this.expressionMap.nativeParameters values
    var query = this.getQuery();
    var parameters = this.getParameters();
    return this.connection.driver.escapeQueryWithParameters(query, parameters, this.expressionMap.nativeParameters);
  };
  /**
   * Executes sql generated by query builder and returns raw database results.
   */


  QueryBuilder.prototype.execute = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _a, sql, parameters, queryRunner;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](this.getQueryAndParameters(), 2), sql = _a[0], parameters = _a[1];
            queryRunner = this.obtainQueryRunner();
            _b.label = 1;

          case 1:
            _b.trys.push([1,, 3, 8]);

            return [4
            /*yield*/
            , queryRunner.query(sql, parameters)];

          case 2:
            return [2
            /*return*/
            , _b.sent()];
          // await is needed here because we are using finally

          case 3:
            if (!(queryRunner !== this.queryRunner)) return [3
            /*break*/
            , 5];
            return [4
            /*yield*/
            , queryRunner.release()];

          case 4:
            _b.sent();

            _b.label = 5;

          case 5:
            if (!(this.connection.driver instanceof _driver_sqljs_SqljsDriver__WEBPACK_IMPORTED_MODULE_4__["SqljsDriver"])) return [3
            /*break*/
            , 7];
            return [4
            /*yield*/
            , this.connection.driver.autoSave()];

          case 6:
            _b.sent();

            _b.label = 7;

          case 7:
            return [7
            /*endfinally*/
            ];

          case 8:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a completely new query builder.
   * Uses same query runner as current QueryBuilder.
   */


  QueryBuilder.prototype.createQueryBuilder = function () {
    return new this.constructor(this.connection, this.queryRunner);
  };
  /**
   * Clones query builder as it is.
   * Note: it uses new query runner, if you want query builder that uses exactly same query runner,
   * you can create query builder using its constructor, for example new SelectQueryBuilder(queryBuilder)
   * where queryBuilder is cloned QueryBuilder.
   */


  QueryBuilder.prototype.clone = function () {
    return new this.constructor(this);
  };
  /**
   * Disables escaping.
   */


  QueryBuilder.prototype.disableEscaping = function () {
    this.expressionMap.disableEscaping = false;
    return this;
  };
  /**
   * Escapes table name, column name or alias name using current database's escaping character.
   */


  QueryBuilder.prototype.escape = function (name) {
    if (!this.expressionMap.disableEscaping) return name;
    return this.connection.driver.escape(name);
  };
  /**
   * Sets or overrides query builder's QueryRunner.
   */


  QueryBuilder.prototype.setQueryRunner = function (queryRunner) {
    this.queryRunner = queryRunner;
    return this;
  };
  /**
   * Indicates if listeners and subscribers must be called before and after query execution.
   * Enabled by default.
   */


  QueryBuilder.prototype.callListeners = function (enabled) {
    this.expressionMap.callListeners = enabled;
    return this;
  };
  /**
   * If set to true the query will be wrapped into a transaction.
   */


  QueryBuilder.prototype.useTransaction = function (enabled) {
    this.expressionMap.useTransaction = enabled;
    return this;
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Gets escaped table name with schema name if SqlServer driver used with custom
   * schema name, otherwise returns escaped table name.
   */


  QueryBuilder.prototype.getTableName = function (tablePath) {
    var _this = this;

    return tablePath.split(".").map(function (i) {
      // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string
      if (i === "") return i;
      return _this.escape(i);
    }).join(".");
  };
  /**
   * Gets name of the table where insert should be performed.
   */


  QueryBuilder.prototype.getMainTableName = function () {
    if (!this.expressionMap.mainAlias) throw new Error("Entity where values should be inserted is not specified. Call \"qb.into(entity)\" method to specify it.");
    if (this.expressionMap.mainAlias.hasMetadata) return this.expressionMap.mainAlias.metadata.tablePath;
    return this.expressionMap.mainAlias.tablePath;
  };
  /**
   * Specifies FROM which entity's table select/update/delete will be executed.
   * Also sets a main string alias of the selection data.
   */


  QueryBuilder.prototype.createFromAlias = function (entityTarget, aliasName) {
    // if table has a metadata then find it to properly escape its properties
    // const metadata = this.connection.entityMetadatas.find(metadata => metadata.tableName === tableName);
    if (this.connection.hasMetadata(entityTarget)) {
      var metadata = this.connection.getMetadata(entityTarget);
      return this.expressionMap.createAlias({
        type: "from",
        name: aliasName,
        metadata: this.connection.getMetadata(entityTarget),
        tablePath: metadata.tablePath
      });
    } else {
      var subQuery = "";

      if (entityTarget instanceof Function) {
        var subQueryBuilder = entityTarget(this.subQuery());
        this.setParameters(subQueryBuilder.getParameters());
        subQuery = subQueryBuilder.getQuery();
      } else {
        subQuery = entityTarget;
      }

      var isSubQuery = entityTarget instanceof Function || entityTarget.substr(0, 1) === "(" && entityTarget.substr(-1) === ")";
      return this.expressionMap.createAlias({
        type: "from",
        name: aliasName,
        tablePath: isSubQuery === false ? entityTarget : undefined,
        subQuery: isSubQuery === true ? subQuery : undefined
      });
    }
  };
  /**
   * Replaces all entity's propertyName to name in the given statement.
   */


  QueryBuilder.prototype.replacePropertyNames = function (statement) {
    var _this = this;

    this.expressionMap.aliases.forEach(function (alias) {
      if (!alias.hasMetadata) return;
      var replaceAliasNamePrefix = _this.expressionMap.aliasNamePrefixingEnabled ? alias.name + "\\." : "";
      var replacementAliasNamePrefix = _this.expressionMap.aliasNamePrefixingEnabled ? _this.escape(alias.name) + "." : "";
      alias.metadata.columns.forEach(function (column) {
        var expression = "([ =\(]|^.{0})" + replaceAliasNamePrefix + column.propertyPath + "([ =\)\,]|.{0}$)";
        statement = statement.replace(new RegExp(expression, "gm"), "$1" + replacementAliasNamePrefix + _this.escape(column.databaseName) + "$2");
        var expression2 = "([ =\(]|^.{0})" + replaceAliasNamePrefix + column.propertyName + "([ =\)\,]|.{0}$)";
        statement = statement.replace(new RegExp(expression2, "gm"), "$1" + replacementAliasNamePrefix + _this.escape(column.databaseName) + "$2");
      });
      alias.metadata.relations.forEach(function (relation) {
        tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](relation.joinColumns, relation.inverseJoinColumns).forEach(function (joinColumn) {
          var expression = "([ =\(]|^.{0})" + replaceAliasNamePrefix + relation.propertyPath + "\\." + joinColumn.referencedColumn.propertyPath + "([ =\)\,]|.{0}$)";
          statement = statement.replace(new RegExp(expression, "gm"), "$1" + replacementAliasNamePrefix + _this.escape(joinColumn.databaseName) + "$2"); // todo: fix relation.joinColumns[0], what if multiple columns
        });

        if (relation.joinColumns.length > 0) {
          var expression = "([ =\(]|^.{0})" + replaceAliasNamePrefix + relation.propertyPath + "([ =\)\,]|.{0}$)";
          statement = statement.replace(new RegExp(expression, "gm"), "$1" + replacementAliasNamePrefix + _this.escape(relation.joinColumns[0].databaseName) + "$2"); // todo: fix relation.joinColumns[0], what if multiple columns
        }
      });
    });
    return statement;
  };
  /**
   * Creates "WHERE" expression.
   */


  QueryBuilder.prototype.createWhereExpression = function () {
    var conditions = this.createWhereExpressionString();

    if (this.expressionMap.mainAlias.hasMetadata) {
      var metadata = this.expressionMap.mainAlias.metadata; // Adds the global condition of "non-deleted" for the entity with delete date columns in select query.

      if (this.expressionMap.queryType === "select" && !this.expressionMap.withDeleted && metadata.deleteDateColumn) {
        var column = this.expressionMap.aliasNamePrefixingEnabled ? this.expressionMap.mainAlias.name + "." + metadata.deleteDateColumn.propertyName : metadata.deleteDateColumn.propertyName;
        var condition = this.replacePropertyNames(column) + " IS NULL";
        conditions = (conditions.length ? "(" + conditions + ") AND" : "") + " " + condition;
      }

      if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {
        var column = this.expressionMap.aliasNamePrefixingEnabled ? this.expressionMap.mainAlias.name + "." + metadata.discriminatorColumn.databaseName : metadata.discriminatorColumn.databaseName;
        var condition = this.replacePropertyNames(column) + " IN (:...discriminatorColumnValues)";
        return " WHERE " + (conditions.length ? "(" + conditions + ") AND" : "") + " " + condition;
      }
    }

    if (!conditions.length) // TODO copy in to discriminator condition
      return this.expressionMap.extraAppendedAndWhereCondition ? " WHERE " + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition) : "";
    if (this.expressionMap.extraAppendedAndWhereCondition) return " WHERE (" + conditions + ") AND " + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition);
    return " WHERE " + conditions;
  };
  /**
   * Creates "RETURNING" / "OUTPUT" expression.
   */


  QueryBuilder.prototype.createReturningExpression = function () {
    var _this = this;

    var columns = this.getReturningColumns();
    var driver = this.connection.driver; // also add columns we must auto-return to perform entity updation
    // if user gave his own returning

    if (typeof this.expressionMap.returning !== "string" && this.expressionMap.extraReturningColumns.length > 0 && driver.isReturningSqlSupported()) {
      columns.push.apply(columns, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](this.expressionMap.extraReturningColumns.filter(function (column) {
        return columns.indexOf(column) === -1;
      })));
    }

    if (columns.length) {
      var columnsExpression = columns.map(function (column) {
        var name = _this.escape(column.databaseName);

        if (driver instanceof _driver_sqlserver_SqlServerDriver__WEBPACK_IMPORTED_MODULE_5__["SqlServerDriver"]) {
          if (_this.expressionMap.queryType === "insert" || _this.expressionMap.queryType === "update" || _this.expressionMap.queryType === "soft-delete" || _this.expressionMap.queryType === "restore") {
            return "INSERTED." + name;
          } else {
            return _this.escape(_this.getMainTableName()) + "." + name;
          }
        } else {
          return name;
        }
      }).join(", ");

      if (driver instanceof _driver_sqlserver_SqlServerDriver__WEBPACK_IMPORTED_MODULE_5__["OracleDriver"]) {
        columnsExpression += " INTO " + columns.map(function (column) {
          var parameterName = "output_" + column.databaseName;
          _this.expressionMap.nativeParameters[parameterName] = {
            type: driver.columnTypeToNativeParameter(column.type),
            dir: driver.oracle.BIND_OUT
          };
          return _this.connection.driver.createParameter(parameterName, Object.keys(_this.expressionMap.nativeParameters).length);
        }).join(", ");
      }

      if (driver instanceof _driver_sqlserver_SqlServerDriver__WEBPACK_IMPORTED_MODULE_5__["SqlServerDriver"]) {
        if (this.expressionMap.queryType === "insert" || this.expressionMap.queryType === "update") {
          columnsExpression += " INTO @OutputTable";
        }
      }

      return columnsExpression;
    } else if (typeof this.expressionMap.returning === "string") {
      return this.expressionMap.returning;
    }

    return "";
  };
  /**
   * If returning / output cause is set to array of column names,
   * then this method will return all column metadatas of those column names.
   */


  QueryBuilder.prototype.getReturningColumns = function () {
    var _this = this;

    var columns = [];

    if (Array.isArray(this.expressionMap.returning)) {
      this.expressionMap.returning.forEach(function (columnName) {
        if (_this.expressionMap.mainAlias.hasMetadata) {
          columns.push.apply(columns, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](_this.expressionMap.mainAlias.metadata.findColumnsWithPropertyPath(columnName)));
        }
      });
    }

    return columns;
  };
  /**
   * Concatenates all added where expressions into one string.
   */


  QueryBuilder.prototype.createWhereExpressionString = function () {
    var _this = this;

    return this.expressionMap.wheres.map(function (where, index) {
      switch (where.type) {
        case "and":
          return (index > 0 ? "AND " : "") + _this.replacePropertyNames(where.condition);

        case "or":
          return (index > 0 ? "OR " : "") + _this.replacePropertyNames(where.condition);

        default:
          return _this.replacePropertyNames(where.condition);
      }
    }).join(" ");
  };
  /**
   * Creates "WHERE" expression and variables for the given "ids".
   */


  QueryBuilder.prototype.createWhereIdsExpression = function (ids) {
    var _this = this;

    var _a;

    var metadata = this.expressionMap.mainAlias.metadata;
    var normalized = (Array.isArray(ids) ? ids : [ids]).map(function (id) {
      return metadata.ensureEntityIdMap(id);
    }); // using in(...ids) for single primary key entities

    if (!metadata.hasMultiplePrimaryKeys && metadata.embeddeds.length === 0) {
      var primaryColumn_1 = metadata.primaryColumns[0]; // getEntityValue will try to transform `In`, it is a bug
      // todo: remove this transformer check after #2390 is fixed

      if (!primaryColumn_1.transformer) {
        return this.computeWhereParameter((_a = {}, _a[primaryColumn_1.propertyName] = Object(_find_options_operator_In__WEBPACK_IMPORTED_MODULE_8__["In"])(normalized.map(function (id) {
          return primaryColumn_1.getEntityValue(id, false);
        })), _a));
      }
    } // create shortcuts for better readability


    var alias = this.expressionMap.aliasNamePrefixingEnabled ? this.escape(this.expressionMap.mainAlias.name) + "." : "";
    var parameterIndex = Object.keys(this.expressionMap.nativeParameters).length;
    var whereStrings = normalized.map(function (id, index) {
      var whereSubStrings = [];
      metadata.primaryColumns.forEach(function (primaryColumn, secondIndex) {
        var parameterName = "id_" + index + "_" + secondIndex; // whereSubStrings.push(alias + this.escape(primaryColumn.databaseName) + "=:id_" + index + "_" + secondIndex);

        whereSubStrings.push(alias + _this.escape(primaryColumn.databaseName) + " = " + _this.connection.driver.createParameter(parameterName, parameterIndex));
        _this.expressionMap.nativeParameters[parameterName] = primaryColumn.getEntityValue(id, true);
        parameterIndex++;
      });
      return whereSubStrings.join(" AND ");
    });
    return whereStrings.length > 1 ? "(" + whereStrings.map(function (whereString) {
      return "(" + whereString + ")";
    }).join(" OR ") + ")" : whereStrings[0];
  };
  /**
   * Computes given where argument - transforms to a where string all forms it can take.
   */


  QueryBuilder.prototype.computeWhereParameter = function (where) {
    var _this = this;

    if (typeof where === "string") return where;

    if (where instanceof _Brackets__WEBPACK_IMPORTED_MODULE_2__["Brackets"]) {
      var whereQueryBuilder = this.createQueryBuilder();
      where.whereFactory(whereQueryBuilder);
      var whereString = whereQueryBuilder.createWhereExpressionString();
      this.setParameters(whereQueryBuilder.getParameters());
      return whereString ? "(" + whereString + ")" : "";
    } else if (where instanceof Function) {
      return where(this);
    } else if (where instanceof Object) {
      var wheres = where instanceof Array ? where : [where];
      var andConditions = void 0;
      var parameterIndex_1 = Object.keys(this.expressionMap.nativeParameters).length;

      if (this.expressionMap.mainAlias.hasMetadata) {
        andConditions = wheres.map(function (where, whereIndex) {
          var propertyPaths = _metadata_EntityMetadata__WEBPACK_IMPORTED_MODULE_3__["EntityMetadata"].createPropertyPath(_this.expressionMap.mainAlias.metadata, where);
          return propertyPaths.map(function (propertyPath, propertyIndex) {
            var columns = _this.expressionMap.mainAlias.metadata.findColumnsWithPropertyPath(propertyPath);

            return columns.map(function (column, columnIndex) {
              var aliasPath = _this.expressionMap.aliasNamePrefixingEnabled ? _this.alias + "." + propertyPath : column.propertyPath;
              var parameterValue = column.getEntityValue(where, true);
              var parameterName = "where_" + whereIndex + "_" + propertyIndex + "_" + columnIndex;
              var parameterBaseCount = Object.keys(_this.expressionMap.nativeParameters).filter(function (x) {
                return x.startsWith(parameterName);
              }).length;

              if (parameterValue === null) {
                return aliasPath + " IS NULL";
              } else if (parameterValue instanceof _find_options_FindOperator__WEBPACK_IMPORTED_MODULE_7__["FindOperator"]) {
                var parameters_1 = [];

                if (parameterValue.useParameter) {
                  var realParameterValues = parameterValue.multipleParameters ? parameterValue.value : [parameterValue.value];
                  realParameterValues.forEach(function (realParameterValue, realParameterValueIndex) {
                    _this.expressionMap.nativeParameters[parameterName + (parameterBaseCount + realParameterValueIndex)] = realParameterValue;
                    parameterIndex_1++;
                    parameters_1.push(_this.connection.driver.createParameter(parameterName + (parameterBaseCount + realParameterValueIndex), parameterIndex_1 - 1));
                  });
                }

                return parameterValue.toSql(_this.connection, aliasPath, parameters_1);
              } else {
                _this.expressionMap.nativeParameters[parameterName] = parameterValue;
                parameterIndex_1++;

                var parameter = _this.connection.driver.createParameter(parameterName, parameterIndex_1 - 1);

                return aliasPath + " = " + parameter;
              }
            }).filter(function (expression) {
              return !!expression;
            }).join(" AND ");
          }).filter(function (expression) {
            return !!expression;
          }).join(" AND ");
        });
      } else {
        andConditions = wheres.map(function (where, whereIndex) {
          return Object.keys(where).map(function (key, parameterIndex) {
            var parameterValue = where[key];
            var aliasPath = _this.expressionMap.aliasNamePrefixingEnabled ? _this.alias + "." + key : key;

            if (parameterValue === null) {
              return aliasPath + " IS NULL";
            } else {
              var parameterName = "where_" + whereIndex + "_" + parameterIndex;
              _this.expressionMap.nativeParameters[parameterName] = parameterValue;
              parameterIndex++;
              return aliasPath + " = " + _this.connection.driver.createParameter(parameterName, parameterIndex - 1);
            }
          }).join(" AND ");
        });
      }

      if (andConditions.length > 1) return andConditions.map(function (where) {
        return "(" + where + ")";
      }).join(" OR ");
      return andConditions.join("");
    }

    return "";
  };
  /**
   * Creates a query builder used to execute sql queries inside this query builder.
   */


  QueryBuilder.prototype.obtainQueryRunner = function () {
    return this.queryRunner || this.connection.createQueryRunner("master");
  };

  return QueryBuilder;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/QueryBuilderUtils.js":
/*!*************************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/QueryBuilderUtils.js ***!
  \*************************************************************************/
/*! exports provided: QueryBuilderUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueryBuilderUtils", function() { return QueryBuilderUtils; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Helper utility functions for QueryBuilder.
 */

var QueryBuilderUtils =
/** @class */
function () {
  function QueryBuilderUtils() {}
  /**
   * Checks if given value is a string representation of alias property,
   * e.g. "post.category" or "post.id".
   */


  QueryBuilderUtils.isAliasProperty = function (str) {
    // alias property must be a string and must have a dot separator
    if (typeof str !== "string" || str.indexOf(".") === -1) return false; // extra alias and its property relation

    var _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](str.split("."), 2),
        aliasName = _a[0],
        propertyName = _a[1]; // todo: what about relations in embedded?


    if (!aliasName || !propertyName) return false; // alias and property must be represented in a special format
    // const aliasNameRegexp = /^[a-zA-Z0-9_-]+$/;
    // if (!aliasNameRegexp.test(aliasName) || !aliasNameRegexp.test(propertyName))
    //     return false;
    // make sure string is not a subquery

    if (str.indexOf("(") !== -1 || str.indexOf(")") !== -1) return false;
    return true;
  };

  return QueryBuilderUtils;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/QueryExpressionMap.js":
/*!**************************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/QueryExpressionMap.js ***!
  \**************************************************************************/
/*! exports provided: QueryExpressionMap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueryExpressionMap", function() { return QueryExpressionMap; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Alias__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Alias */ "./node_modules/typeorm/browser/query-builder/Alias.js");
/* harmony import */ var _JoinAttribute__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./JoinAttribute */ "./node_modules/typeorm/browser/query-builder/JoinAttribute.js");
/* harmony import */ var _relation_id_RelationIdAttribute__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./relation-id/RelationIdAttribute */ "./node_modules/typeorm/browser/query-builder/relation-id/RelationIdAttribute.js");
/* harmony import */ var _relation_count_RelationCountAttribute__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./relation-count/RelationCountAttribute */ "./node_modules/typeorm/browser/query-builder/relation-count/RelationCountAttribute.js");





/**
 * Contains all properties of the QueryBuilder that needs to be build a final query.
 */

var QueryExpressionMap =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function QueryExpressionMap(connection) {
    this.connection = connection; // -------------------------------------------------------------------------
    // Public Properties
    // -------------------------------------------------------------------------

    /**
     * Indicates if QueryBuilder used to select entities and not a raw results.
     */

    this.queryEntity = false;
    /**
     * All aliases (including main alias) used in the query.
     */

    this.aliases = [];
    /**
     * Represents query type. QueryBuilder is able to build SELECT, UPDATE and DELETE queries.
     */

    this.queryType = "select";
    /**
     * Data needs to be SELECT-ed.
     */

    this.selects = [];
    /**
     * Whether SELECT is DISTINCT.
     */

    this.selectDistinct = false;
    /**
     * SELECT DISTINCT ON query (postgres).
     */

    this.selectDistinctOn = [];
    /**
     * Extra returning columns to be added to the returning statement if driver supports it.
     */

    this.extraReturningColumns = [];
    /**
     * Optional on conflict statement used in insertion query in postgres.
     */

    this.onConflict = "";
    /**
     * Optional on ignore statement used in insertion query in databases.
     */

    this.onIgnore = false;
    /**
     * JOIN queries.
     */

    this.joinAttributes = [];
    /**
     * RelationId queries.
     */

    this.relationIdAttributes = [];
    /**
     * Relation count queries.
     */

    this.relationCountAttributes = [];
    /**
     * WHERE queries.
     */

    this.wheres = [];
    /**
     * HAVING queries.
     */

    this.havings = [];
    /**
     * ORDER BY queries.
     */

    this.orderBys = {};
    /**
     * GROUP BY queries.
     */

    this.groupBys = [];
    /**
     * Indicates if soft-deleted rows should be included in entity result.
     * By default the soft-deleted rows are not included.
     */

    this.withDeleted = false;
    /**
     * Parameters used to be escaped in final query.
     */

    this.parameters = {};
    /**
     * Indicates if alias, table names and column names will be ecaped by driver, or not.
     *
     * todo: rename to isQuotingDisabled, also think if it should be named "escaping"
     */

    this.disableEscaping = true;
    /**
     * Indicates if virtual columns should be included in entity result.
     *
     * todo: what to do with it? is it properly used? what about persistence?
     */

    this.enableRelationIdValues = false;
    /**
     * Extra where condition appended to the end of original where conditions with AND keyword.
     * Original condition will be wrapped into brackets.
     */

    this.extraAppendedAndWhereCondition = "";
    /**
     * Indicates if query builder creates a subquery.
     */

    this.subQuery = false;
    /**
     * Indicates if property names are prefixed with alias names during property replacement.
     * By default this is enabled, however we need this because aliases are not supported in UPDATE and DELETE queries,
     * but user can use them in WHERE expressions.
     */

    this.aliasNamePrefixingEnabled = true;
    /**
     * Indicates if query result cache is enabled or not.
     */

    this.cache = false;
    /**
     * Options that define QueryBuilder behaviour.
     */

    this.options = [];
    /**
     * List of columns where data should be inserted.
     * Used in INSERT query.
     */

    this.insertColumns = [];
    /**
     * Used if user wants to update or delete a specific entities.
     */

    this.whereEntities = [];
    /**
     * Indicates if entity must be updated after insertion / updation.
     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).
     */

    this.updateEntity = true;
    /**
     * Indicates if listeners and subscribers must be called before and after query execution.
     */

    this.callListeners = true;
    /**
     * Indicates if query must be wrapped into transaction.
     */

    this.useTransaction = false;
    /**
     * Extra parameters.
     * Used in InsertQueryBuilder to avoid default parameters mechanizm and execute high performance insertions.
     */

    this.nativeParameters = {};
  }

  Object.defineProperty(QueryExpressionMap.prototype, "allOrderBys", {
    // -------------------------------------------------------------------------
    // Accessors
    // -------------------------------------------------------------------------

    /**
     * Get all ORDER BY queries - if order by is specified by user then it uses them,
     * otherwise it uses default entity order by if it was set.
     */
    get: function get() {
      var _this = this;

      if (!Object.keys(this.orderBys).length && this.mainAlias.hasMetadata && this.options.indexOf("disable-global-order") === -1) {
        var entityOrderBy_1 = this.mainAlias.metadata.orderBy || {};
        return Object.keys(entityOrderBy_1).reduce(function (orderBy, key) {
          orderBy[_this.mainAlias.name + "." + key] = entityOrderBy_1[key];
          return orderBy;
        }, {});
      }

      return this.orderBys;
    },
    enumerable: true,
    configurable: true
  }); // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Creates a main alias and adds it to the current expression map.
   */

  QueryExpressionMap.prototype.setMainAlias = function (alias) {
    // if main alias is already set then remove it from the array
    // if (this.mainAlias)
    //     this.aliases.splice(this.aliases.indexOf(this.mainAlias));
    // set new main alias
    this.mainAlias = alias;
    return alias;
  };
  /**
   * Creates a new alias and adds it to the current expression map.
   */


  QueryExpressionMap.prototype.createAlias = function (options) {
    var aliasName = options.name;
    if (!aliasName && options.tablePath) aliasName = options.tablePath;
    if (!aliasName && options.target instanceof Function) aliasName = options.target.name;
    if (!aliasName && typeof options.target === "string") aliasName = options.target;
    var alias = new _Alias__WEBPACK_IMPORTED_MODULE_1__["Alias"]();
    alias.type = options.type;
    if (aliasName) alias.name = aliasName;
    if (options.metadata) alias.metadata = options.metadata;
    if (options.target && !alias.hasMetadata) alias.metadata = this.connection.getMetadata(options.target);
    if (options.tablePath) alias.tablePath = options.tablePath;
    if (options.subQuery) alias.subQuery = options.subQuery;
    this.aliases.push(alias);
    return alias;
  };
  /**
   * Finds alias with the given name.
   * If alias was not found it throw an exception.
   */


  QueryExpressionMap.prototype.findAliasByName = function (aliasName) {
    var alias = this.aliases.find(function (alias) {
      return alias.name === aliasName;
    });
    if (!alias) throw new Error("\"" + aliasName + "\" alias was not found. Maybe you forgot to join it?");
    return alias;
  };

  QueryExpressionMap.prototype.findColumnByAliasExpression = function (aliasExpression) {
    var _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](aliasExpression.split("."), 2),
        aliasName = _a[0],
        propertyPath = _a[1];

    var alias = this.findAliasByName(aliasName);
    return alias.metadata.findColumnWithPropertyName(propertyPath);
  };

  Object.defineProperty(QueryExpressionMap.prototype, "relationMetadata", {
    /**
     * Gets relation metadata of the relation this query builder works with.
     *
     * todo: add proper exceptions
     */
    get: function get() {
      if (!this.mainAlias) throw new Error("Entity to work with is not specified!"); // todo: better message

      var relationMetadata = this.mainAlias.metadata.findRelationWithPropertyPath(this.relationPropertyPath);
      if (!relationMetadata) throw new Error("Relation " + this.relationPropertyPath + " was not found in entity " + this.mainAlias.name); // todo: better message

      return relationMetadata;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Copies all properties of the current QueryExpressionMap into a new one.
   * Useful when QueryBuilder needs to create a copy of itself.
   */

  QueryExpressionMap.prototype.clone = function () {
    var _this = this;

    var map = new QueryExpressionMap(this.connection);
    map.queryType = this.queryType;
    map.selects = this.selects.map(function (select) {
      return select;
    });
    map.selectDistinct = this.selectDistinct;
    map.selectDistinctOn = this.selectDistinctOn;
    this.aliases.forEach(function (alias) {
      return map.aliases.push(new _Alias__WEBPACK_IMPORTED_MODULE_1__["Alias"](alias));
    });
    map.mainAlias = this.mainAlias;
    map.valuesSet = this.valuesSet;
    map.returning = this.returning;
    map.onConflict = this.onConflict;
    map.onIgnore = this.onIgnore;
    map.onUpdate = this.onUpdate;
    map.joinAttributes = this.joinAttributes.map(function (join) {
      return new _JoinAttribute__WEBPACK_IMPORTED_MODULE_2__["JoinAttribute"](_this.connection, _this, join);
    });
    map.relationIdAttributes = this.relationIdAttributes.map(function (relationId) {
      return new _relation_id_RelationIdAttribute__WEBPACK_IMPORTED_MODULE_3__["RelationIdAttribute"](_this, relationId);
    });
    map.relationCountAttributes = this.relationCountAttributes.map(function (relationCount) {
      return new _relation_count_RelationCountAttribute__WEBPACK_IMPORTED_MODULE_4__["RelationCountAttribute"](_this, relationCount);
    });
    map.wheres = this.wheres.map(function (where) {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, where);
    });
    map.havings = this.havings.map(function (having) {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, having);
    });
    map.orderBys = Object.assign({}, this.orderBys);
    map.groupBys = this.groupBys.map(function (groupBy) {
      return groupBy;
    });
    map.limit = this.limit;
    map.offset = this.offset;
    map.skip = this.skip;
    map.take = this.take;
    map.lockMode = this.lockMode;
    map.lockVersion = this.lockVersion;
    map.withDeleted = this.withDeleted;
    map.parameters = Object.assign({}, this.parameters);
    map.disableEscaping = this.disableEscaping;
    map.enableRelationIdValues = this.enableRelationIdValues;
    map.extraAppendedAndWhereCondition = this.extraAppendedAndWhereCondition;
    map.subQuery = this.subQuery;
    map.aliasNamePrefixingEnabled = this.aliasNamePrefixingEnabled;
    map.cache = this.cache;
    map.cacheId = this.cacheId;
    map.cacheDuration = this.cacheDuration;
    map.relationPropertyPath = this.relationPropertyPath;
    map.of = this.of;
    map.insertColumns = this.insertColumns;
    map.whereEntities = this.whereEntities;
    map.updateEntity = this.updateEntity;
    map.callListeners = this.callListeners;
    map.useTransaction = this.useTransaction;
    map.nativeParameters = Object.assign({}, this.nativeParameters);
    return map;
  };

  return QueryExpressionMap;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/RelationIdLoader.js":
/*!************************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/RelationIdLoader.js ***!
  \************************************************************************/
/*! exports provided: RelationIdLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RelationIdLoader", function() { return RelationIdLoader; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _metadata_RelationMetadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../metadata/RelationMetadata */ "./node_modules/typeorm/browser/metadata/RelationMetadata.js");


/**
 * Loads relation ids for the given entities.
 */

var RelationIdLoader =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function RelationIdLoader(connection) {
    this.connection = connection;
  }
  /**
   * Loads relation ids of the given entity or entities.
   */


  RelationIdLoader.prototype.load = function (relationOrTarget, relationNameOrEntities, entitiesOrRelatedEntities, maybeRelatedEntities) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var relation, entities, relatedEntities, entityMetadata;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        if (relationOrTarget instanceof _metadata_RelationMetadata__WEBPACK_IMPORTED_MODULE_1__["RelationMetadata"]) {
          relation = relationOrTarget;
          entities = Array.isArray(relationNameOrEntities) ? relationNameOrEntities : [relationNameOrEntities];
          relatedEntities = Array.isArray(entitiesOrRelatedEntities) ? entitiesOrRelatedEntities : entitiesOrRelatedEntities ? [entitiesOrRelatedEntities] : undefined;
        } else {
          entityMetadata = this.connection.getMetadata(relationOrTarget);
          relation = entityMetadata.findRelationWithPropertyPath(relationNameOrEntities);
          if (!relation) throw new Error("Relation \"" + relation + "\" was not found in \"" + entityMetadata.name + "\".");
          entities = Array.isArray(entitiesOrRelatedEntities) ? entitiesOrRelatedEntities : [entitiesOrRelatedEntities];
          relatedEntities = Array.isArray(maybeRelatedEntities) ? maybeRelatedEntities : maybeRelatedEntities ? [maybeRelatedEntities] : undefined;
        } // load relation ids depend of relation type


        if (relation.isManyToMany) {
          return [2
          /*return*/
          , this.loadForManyToMany(relation, entities, relatedEntities)];
        } else if (relation.isManyToOne || relation.isOneToOneOwner) {
          return [2
          /*return*/
          , this.loadForManyToOneAndOneToOneOwner(relation, entities, relatedEntities)];
        } else {
          // if (relation.isOneToMany || relation.isOneToOneNotOwner) {
          return [2
          /*return*/
          , this.loadForOneToManyAndOneToOneNotOwner(relation, entities, relatedEntities)];
        }

        return [2
        /*return*/
        ];
      });
    });
  };
  /**
   * Loads relation ids of the given entities and groups them into the object with parent and children.
   *
   * todo: extract this method?
   */


  RelationIdLoader.prototype.loadManyToManyRelationIdsAndGroup = function (relation, entitiesOrEntities, relatedEntityOrEntities) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var isMany, entities, relationIds, relatedEntities, columns, inverseColumns;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            isMany = relation.isManyToMany || relation.isOneToMany;
            entities = Array.isArray(entitiesOrEntities) ? entitiesOrEntities : [entitiesOrEntities];
            if (!!relatedEntityOrEntities) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , this.connection.relationLoader.load(relation, entitiesOrEntities)];

          case 1:
            relatedEntityOrEntities = _a.sent();
            if (!relatedEntityOrEntities.length) return [2
            /*return*/
            , entities.map(function (entity) {
              return {
                entity: entity,
                related: isMany ? [] : undefined
              };
            })];
            _a.label = 2;

          case 2:
            return [4
            /*yield*/
            , this.load(relation, entitiesOrEntities, relatedEntityOrEntities)];

          case 3:
            relationIds = _a.sent();
            relatedEntities = Array.isArray(relatedEntityOrEntities) ? relatedEntityOrEntities : [relatedEntityOrEntities];

            if (relation.isManyToManyOwner) {
              columns = relation.junctionEntityMetadata.inverseColumns.map(function (column) {
                return column.referencedColumn;
              });
              inverseColumns = relation.junctionEntityMetadata.ownerColumns.map(function (column) {
                return column.referencedColumn;
              });
            } else if (relation.isManyToManyNotOwner) {
              columns = relation.junctionEntityMetadata.ownerColumns.map(function (column) {
                return column.referencedColumn;
              });
              inverseColumns = relation.junctionEntityMetadata.inverseColumns.map(function (column) {
                return column.referencedColumn;
              });
            } else if (relation.isManyToOne || relation.isOneToOneOwner) {
              columns = relation.joinColumns.map(function (column) {
                return column.referencedColumn;
              });
              inverseColumns = relation.entityMetadata.primaryColumns;
            } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {
              columns = relation.inverseRelation.entityMetadata.primaryColumns;
              inverseColumns = relation.inverseRelation.joinColumns.map(function (column) {
                return column.referencedColumn;
              });
            } else {}

            return [2
            /*return*/
            , entities.map(function (entity) {
              var group = {
                entity: entity,
                related: isMany ? [] : undefined
              };
              relationIds.forEach(function (relationId) {
                var entityMatched = inverseColumns.every(function (column) {
                  return column.getEntityValue(entity) === relationId[column.entityMetadata.name + "_" + column.propertyPath.replace(".", "_")];
                });

                if (entityMatched) {
                  relatedEntities.forEach(function (relatedEntity) {
                    var relatedEntityMatched = columns.every(function (column) {
                      return column.getEntityValue(relatedEntity) === relationId[column.entityMetadata.name + "_" + relation.propertyPath.replace(".", "_") + "_" + column.propertyPath.replace(".", "_")];
                    });

                    if (relatedEntityMatched) {
                      if (isMany) {
                        group.related.push(relatedEntity);
                      } else {
                        group.related = relatedEntity;
                      }
                    }
                  });
                }
              });
              return group;
            })];
        }
      });
    });
  };
  /**
   * Loads relation ids of the given entities and maps them into the given entity property.
   async loadManyToManyRelationIdsAndMap(
      relation: RelationMetadata,
      entityOrEntities: ObjectLiteral|ObjectLiteral[],
      mapToEntityOrEntities: ObjectLiteral|ObjectLiteral[],
      propertyName: string
  ): Promise<void> {
       const relationIds = await this.loadManyToManyRelationIds(relation, entityOrEntities, mapToEntityOrEntities);
      const mapToEntities = mapToEntityOrEntities instanceof Array ? mapToEntityOrEntities : [mapToEntityOrEntities];
      const junctionMetadata = relation.junctionEntityMetadata!;
      const mainAlias = junctionMetadata.name;
      const columns = relation.isOwning ? junctionMetadata.inverseColumns : junctionMetadata.ownerColumns;
      const inverseColumns = relation.isOwning ? junctionMetadata.ownerColumns : junctionMetadata.inverseColumns;
       mapToEntities.forEach(mapToEntity => {
          mapToEntity[propertyName] = [];
          relationIds.forEach(relationId => {
              const match = inverseColumns.every(column => {
                  return column.referencedColumn!.getEntityValue(mapToEntity) === relationId[mainAlias + "_" + column.propertyName];
              });
              if (match) {
                  if (columns.length === 1) {
                      mapToEntity[propertyName].push(relationId[mainAlias + "_" + columns[0].propertyName]);
                   } else {
                      const value = {};
                      columns.forEach(column => {
                          column.referencedColumn!.setEntityValue(value, relationId[mainAlias + "_" + column.propertyName]);
                      });
                      mapToEntity[propertyName].push(value);
                  }
              }
          });
      });
  }*/
  // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Loads relation ids for the many-to-many relation.
   */


  RelationIdLoader.prototype.loadForManyToMany = function (relation, entities, relatedEntities) {
    var junctionMetadata = relation.junctionEntityMetadata;
    var mainAlias = junctionMetadata.name;
    var columns = relation.isOwning ? junctionMetadata.ownerColumns : junctionMetadata.inverseColumns;
    var inverseColumns = relation.isOwning ? junctionMetadata.inverseColumns : junctionMetadata.ownerColumns;
    var qb = this.connection.createQueryBuilder(); // select all columns from junction table

    junctionMetadata.ownerColumns.forEach(function (column) {
      var columnName = column.referencedColumn.entityMetadata.name + "_" + column.referencedColumn.propertyPath.replace(".", "_");
      qb.addSelect(mainAlias + "." + column.propertyPath, columnName);
    });
    junctionMetadata.inverseColumns.forEach(function (column) {
      var columnName = column.referencedColumn.entityMetadata.name + "_" + relation.propertyPath.replace(".", "_") + "_" + column.referencedColumn.propertyPath.replace(".", "_");
      qb.addSelect(mainAlias + "." + column.propertyPath, columnName);
    }); // add conditions for the given entities

    var condition1 = "";

    if (columns.length === 1) {
      qb.setParameter("values1", entities.map(function (entity) {
        return columns[0].referencedColumn.getEntityValue(entity);
      }));
      condition1 = mainAlias + "." + columns[0].propertyPath + " IN (:...values1)"; // todo: use ANY for postgres
    } else {
      condition1 = "(" + entities.map(function (entity, entityIndex) {
        return columns.map(function (column) {
          var paramName = "entity1_" + entityIndex + "_" + column.propertyName;
          qb.setParameter(paramName, column.referencedColumn.getEntityValue(entity));
          return mainAlias + "." + column.propertyPath + " = :" + paramName;
        }).join(" AND ");
      }).map(function (condition) {
        return "(" + condition + ")";
      }).join(" OR ") + ")";
    } // add conditions for the given inverse entities


    var condition2 = "";

    if (relatedEntities) {
      if (inverseColumns.length === 1) {
        qb.setParameter("values2", relatedEntities.map(function (entity) {
          return inverseColumns[0].referencedColumn.getEntityValue(entity);
        }));
        condition2 = mainAlias + "." + inverseColumns[0].propertyPath + " IN (:...values2)"; // todo: use ANY for postgres
      } else {
        condition2 = "(" + relatedEntities.map(function (entity, entityIndex) {
          return inverseColumns.map(function (column) {
            var paramName = "entity2_" + entityIndex + "_" + column.propertyName;
            qb.setParameter(paramName, column.referencedColumn.getEntityValue(entity));
            return mainAlias + "." + column.propertyPath + " = :" + paramName;
          }).join(" AND ");
        }).map(function (condition) {
          return "(" + condition + ")";
        }).join(" OR ") + ")";
      }
    } // execute query


    return qb.from(junctionMetadata.target, mainAlias).where(condition1 + (condition2 ? " AND " + condition2 : "")).getRawMany();
  };
  /**
   * Loads relation ids for the many-to-one and one-to-one owner relations.
   */


  RelationIdLoader.prototype.loadForManyToOneAndOneToOneOwner = function (relation, entities, relatedEntities) {
    var mainAlias = relation.entityMetadata.targetName; // select all columns we need

    var qb = this.connection.createQueryBuilder();
    relation.entityMetadata.primaryColumns.forEach(function (primaryColumn) {
      var columnName = primaryColumn.entityMetadata.name + "_" + primaryColumn.propertyPath.replace(".", "_");
      qb.addSelect(mainAlias + "." + primaryColumn.propertyPath, columnName);
    });
    relation.joinColumns.forEach(function (column) {
      var columnName = column.referencedColumn.entityMetadata.name + "_" + relation.propertyPath.replace(".", "_") + "_" + column.referencedColumn.propertyPath.replace(".", "_");
      qb.addSelect(mainAlias + "." + column.propertyPath, columnName);
    }); // add condition for entities

    var condition = "";

    if (relation.entityMetadata.primaryColumns.length === 1) {
      qb.setParameter("values", entities.map(function (entity) {
        return relation.entityMetadata.primaryColumns[0].getEntityValue(entity);
      }));
      condition = mainAlias + "." + relation.entityMetadata.primaryColumns[0].propertyPath + " IN (:...values)";
    } else {
      condition = entities.map(function (entity, entityIndex) {
        return relation.entityMetadata.primaryColumns.map(function (column, columnIndex) {
          var paramName = "entity" + entityIndex + "_" + columnIndex;
          qb.setParameter(paramName, column.getEntityValue(entity));
          return mainAlias + "." + column.propertyPath + " = :" + paramName;
        }).join(" AND ");
      }).map(function (condition) {
        return "(" + condition + ")";
      }).join(" OR ");
    } // execute query


    return qb.from(relation.entityMetadata.target, mainAlias).where(condition).getRawMany();
  };
  /**
   * Loads relation ids for the one-to-many and one-to-one not owner relations.
   */


  RelationIdLoader.prototype.loadForOneToManyAndOneToOneNotOwner = function (relation, entities, relatedEntities) {
    relation = relation.inverseRelation;
    var mainAlias = relation.entityMetadata.targetName; // select all columns we need

    var qb = this.connection.createQueryBuilder();
    relation.entityMetadata.primaryColumns.forEach(function (primaryColumn) {
      var columnName = primaryColumn.entityMetadata.name + "_" + relation.inverseRelation.propertyPath.replace(".", "_") + "_" + primaryColumn.propertyPath.replace(".", "_");
      qb.addSelect(mainAlias + "." + primaryColumn.propertyPath, columnName);
    });
    relation.joinColumns.forEach(function (column) {
      var columnName = column.referencedColumn.entityMetadata.name + "_" + column.referencedColumn.propertyPath.replace(".", "_");
      qb.addSelect(mainAlias + "." + column.propertyPath, columnName);
    }); // add condition for entities

    var condition = "";

    if (relation.joinColumns.length === 1) {
      qb.setParameter("values", entities.map(function (entity) {
        return relation.joinColumns[0].referencedColumn.getEntityValue(entity);
      }));
      condition = mainAlias + "." + relation.joinColumns[0].propertyPath + " IN (:...values)";
    } else {
      condition = entities.map(function (entity, entityIndex) {
        return relation.joinColumns.map(function (joinColumn, joinColumnIndex) {
          var paramName = "entity" + entityIndex + "_" + joinColumnIndex;
          qb.setParameter(paramName, joinColumn.referencedColumn.getEntityValue(entity));
          return mainAlias + "." + joinColumn.propertyPath + " = :" + paramName;
        }).join(" AND ");
      }).map(function (condition) {
        return "(" + condition + ")";
      }).join(" OR ");
    } // execute query


    return qb.from(relation.entityMetadata.target, mainAlias).where(condition).getRawMany();
  };

  return RelationIdLoader;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/RelationLoader.js":
/*!**********************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/RelationLoader.js ***!
  \**********************************************************************/
/*! exports provided: RelationLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RelationLoader", function() { return RelationLoader; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Wraps entities and creates getters/setters for their relations
 * to be able to lazily load relations when accessing these relations.
 */

var RelationLoader =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function RelationLoader(connection) {
    this.connection = connection;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Loads relation data for the given entity and its relation.
   */


  RelationLoader.prototype.load = function (relation, entityOrEntities, queryRunner) {
    if (queryRunner && queryRunner.isReleased) queryRunner = undefined; // get new one if already closed

    if (relation.isManyToOne || relation.isOneToOneOwner) {
      return this.loadManyToOneOrOneToOneOwner(relation, entityOrEntities, queryRunner);
    } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {
      return this.loadOneToManyOrOneToOneNotOwner(relation, entityOrEntities, queryRunner);
    } else if (relation.isManyToManyOwner) {
      return this.loadManyToManyOwner(relation, entityOrEntities, queryRunner);
    } else {
      // many-to-many non owner
      return this.loadManyToManyNotOwner(relation, entityOrEntities, queryRunner);
    }
  };
  /**
   * Loads data for many-to-one and one-to-one owner relations.
   *
   * (ow) post.category<=>category.post
   * loaded: category from post
   * example: SELECT category.id AS category_id, category.name AS category_name FROM category category
   *              INNER JOIN post Post ON Post.category=category.id WHERE Post.id=1
   */


  RelationLoader.prototype.loadManyToOneOrOneToOneOwner = function (relation, entityOrEntities, queryRunner) {
    var entities = Array.isArray(entityOrEntities) ? entityOrEntities : [entityOrEntities];
    var columns = relation.entityMetadata.primaryColumns;
    var joinColumns = relation.isOwning ? relation.joinColumns : relation.inverseRelation.joinColumns;
    var conditions = joinColumns.map(function (joinColumn) {
      return relation.entityMetadata.name + "." + joinColumn.propertyName + " = " + relation.propertyName + "." + joinColumn.referencedColumn.propertyName;
    }).join(" AND ");
    var joinAliasName = relation.entityMetadata.name;
    var qb = this.connection.createQueryBuilder(queryRunner).select(relation.propertyName) // category
    .from(relation.type, relation.propertyName) // Category, category
    .innerJoin(relation.entityMetadata.target, joinAliasName, conditions);

    if (columns.length === 1) {
      qb.where(joinAliasName + "." + columns[0].propertyPath + " IN (:..." + (joinAliasName + "_" + columns[0].propertyName) + ")");
      qb.setParameter(joinAliasName + "_" + columns[0].propertyName, entities.map(function (entity) {
        return columns[0].getEntityValue(entity);
      }));
    } else {
      var condition = entities.map(function (entity, entityIndex) {
        return columns.map(function (column, columnIndex) {
          var paramName = joinAliasName + "_entity_" + entityIndex + "_" + columnIndex;
          qb.setParameter(paramName, column.getEntityValue(entity));
          return joinAliasName + "." + column.propertyPath + " = :" + paramName;
        }).join(" AND ");
      }).map(function (condition) {
        return "(" + condition + ")";
      }).join(" OR ");
      qb.where(condition);
    }

    return qb.getMany(); // return qb.getOne(); todo: fix all usages
  };
  /**
   * Loads data for one-to-many and one-to-one not owner relations.
   *
   * SELECT post
   * FROM post post
   * WHERE post.[joinColumn.name] = entity[joinColumn.referencedColumn]
   */


  RelationLoader.prototype.loadOneToManyOrOneToOneNotOwner = function (relation, entityOrEntities, queryRunner) {
    var entities = Array.isArray(entityOrEntities) ? entityOrEntities : [entityOrEntities];
    var aliasName = relation.propertyName;
    var columns = relation.inverseRelation.joinColumns;
    var qb = this.connection.createQueryBuilder(queryRunner).select(aliasName).from(relation.inverseRelation.entityMetadata.target, aliasName);

    if (columns.length === 1) {
      qb.where(aliasName + "." + columns[0].propertyPath + " IN (:..." + (aliasName + "_" + columns[0].propertyName) + ")");
      qb.setParameter(aliasName + "_" + columns[0].propertyName, entities.map(function (entity) {
        return columns[0].referencedColumn.getEntityValue(entity);
      }));
    } else {
      var condition = entities.map(function (entity, entityIndex) {
        return columns.map(function (column, columnIndex) {
          var paramName = aliasName + "_entity_" + entityIndex + "_" + columnIndex;
          qb.setParameter(paramName, column.referencedColumn.getEntityValue(entity));
          return aliasName + "." + column.propertyPath + " = :" + paramName;
        }).join(" AND ");
      }).map(function (condition) {
        return "(" + condition + ")";
      }).join(" OR ");
      qb.where(condition);
    }

    return qb.getMany(); // return relation.isOneToMany ? qb.getMany() : qb.getOne(); todo: fix all usages
  };
  /**
   * Loads data for many-to-many owner relations.
   *
   * SELECT category
   * FROM category category
   * INNER JOIN post_categories post_categories
   * ON post_categories.postId = :postId
   * AND post_categories.categoryId = category.id
   */


  RelationLoader.prototype.loadManyToManyOwner = function (relation, entityOrEntities, queryRunner) {
    var entities = Array.isArray(entityOrEntities) ? entityOrEntities : [entityOrEntities];
    var mainAlias = relation.propertyName;
    var joinAlias = relation.junctionEntityMetadata.tableName;
    var joinColumnConditions = relation.joinColumns.map(function (joinColumn) {
      return joinAlias + "." + joinColumn.propertyName + " IN (:..." + joinColumn.propertyName + ")";
    });
    var inverseJoinColumnConditions = relation.inverseJoinColumns.map(function (inverseJoinColumn) {
      return joinAlias + "." + inverseJoinColumn.propertyName + "=" + mainAlias + "." + inverseJoinColumn.referencedColumn.propertyName;
    });
    var parameters = relation.joinColumns.reduce(function (parameters, joinColumn) {
      parameters[joinColumn.propertyName] = entities.map(function (entity) {
        return joinColumn.referencedColumn.getEntityValue(entity);
      });
      return parameters;
    }, {});
    return this.connection.createQueryBuilder(queryRunner).select(mainAlias).from(relation.type, mainAlias).innerJoin(joinAlias, joinAlias, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](joinColumnConditions, inverseJoinColumnConditions).join(" AND ")).setParameters(parameters).getMany();
  };
  /**
   * Loads data for many-to-many not owner relations.
   *
   * SELECT post
   * FROM post post
   * INNER JOIN post_categories post_categories
   * ON post_categories.postId = post.id
   * AND post_categories.categoryId = post_categories.categoryId
   */


  RelationLoader.prototype.loadManyToManyNotOwner = function (relation, entityOrEntities, queryRunner) {
    var entities = Array.isArray(entityOrEntities) ? entityOrEntities : [entityOrEntities];
    var mainAlias = relation.propertyName;
    var joinAlias = relation.junctionEntityMetadata.tableName;
    var joinColumnConditions = relation.inverseRelation.joinColumns.map(function (joinColumn) {
      return joinAlias + "." + joinColumn.propertyName + " = " + mainAlias + "." + joinColumn.referencedColumn.propertyName;
    });
    var inverseJoinColumnConditions = relation.inverseRelation.inverseJoinColumns.map(function (inverseJoinColumn) {
      return joinAlias + "." + inverseJoinColumn.propertyName + " IN (:..." + inverseJoinColumn.propertyName + ")";
    });
    var parameters = relation.inverseRelation.inverseJoinColumns.reduce(function (parameters, joinColumn) {
      parameters[joinColumn.propertyName] = entities.map(function (entity) {
        return joinColumn.referencedColumn.getEntityValue(entity);
      });
      return parameters;
    }, {});
    return this.connection.createQueryBuilder(queryRunner).select(mainAlias).from(relation.type, mainAlias).innerJoin(joinAlias, joinAlias, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](joinColumnConditions, inverseJoinColumnConditions).join(" AND ")).setParameters(parameters).getMany();
  };
  /**
   * Wraps given entity and creates getters/setters for its given relation
   * to be able to lazily load data when accessing this relation.
   */


  RelationLoader.prototype.enableLazyLoad = function (relation, entity, queryRunner) {
    var relationLoader = this;
    var dataIndex = "__" + relation.propertyName + "__"; // in what property of the entity loaded data will be stored

    var promiseIndex = "__promise_" + relation.propertyName + "__"; // in what property of the entity loading promise will be stored

    var resolveIndex = "__has_" + relation.propertyName + "__"; // indicates if relation data already was loaded or not, we need this flag if loaded data is empty

    var setData = function setData(entity, value) {
      entity[dataIndex] = value;
      entity[resolveIndex] = true;
      delete entity[promiseIndex];
      return value;
    };

    var setPromise = function setPromise(entity, value) {
      delete entity[resolveIndex];
      delete entity[dataIndex];
      entity[promiseIndex] = value;
      value.then( // ensure different value is not assigned yet
      function (result) {
        return entity[promiseIndex] === value ? setData(entity, result) : result;
      });
      return value;
    };

    Object.defineProperty(entity, relation.propertyName, {
      get: function get() {
        if (this[resolveIndex] === true || this[dataIndex] !== undefined) // if related data already was loaded then simply return it
          return Promise.resolve(this[dataIndex]);
        if (this[promiseIndex]) // if related data is loading then return a promise relationLoader loads it
          return this[promiseIndex]; // nothing is loaded yet, load relation data and save it in the model once they are loaded

        var loader = relationLoader.load(relation, this, queryRunner).then(function (result) {
          return relation.isOneToOne || relation.isManyToOne ? result[0] : result;
        });
        return setPromise(this, loader);
      },
      set: function set(value) {
        if (value instanceof Promise) {
          // if set data is a promise then wait for its resolve and save in the object
          setPromise(this, value);
        } else {
          // if its direct data set (non promise, probably not safe-typed)
          setData(this, value);
        }
      },
      configurable: true
    });
  };

  return RelationLoader;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/RelationQueryBuilder.js":
/*!****************************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/RelationQueryBuilder.js ***!
  \****************************************************************************/
/*! exports provided: RelationQueryBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RelationQueryBuilder", function() { return RelationQueryBuilder; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _QueryBuilder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./QueryBuilder */ "./node_modules/typeorm/browser/query-builder/QueryBuilder.js");
/* harmony import */ var _RelationUpdater__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RelationUpdater */ "./node_modules/typeorm/browser/query-builder/RelationUpdater.js");
/* harmony import */ var _RelationRemover__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RelationRemover */ "./node_modules/typeorm/browser/query-builder/RelationRemover.js");




/**
 * Allows to work with entity relations and perform specific operations with those relations.
 *
 * todo: add transactions everywhere
 */

var RelationQueryBuilder =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](RelationQueryBuilder, _super);

  function RelationQueryBuilder() {
    return _super !== null && _super.apply(this, arguments) || this;
  } // -------------------------------------------------------------------------
  // Public Implemented Methods
  // -------------------------------------------------------------------------

  /**
   * Gets generated sql query without parameters being replaced.
   */


  RelationQueryBuilder.prototype.getQuery = function () {
    return "";
  }; // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Sets entity (target) which relations will be updated.
   */


  RelationQueryBuilder.prototype.of = function (entity) {
    this.expressionMap.of = entity;
    return this;
  };
  /**
   * Sets entity relation's value.
   * Value can be entity, entity id or entity id map (if entity has composite ids).
   * Works only for many-to-one and one-to-one relations.
   * For many-to-many and one-to-many relations use #add and #remove methods instead.
   */


  RelationQueryBuilder.prototype.set = function (value) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var relation, updater;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        relation = this.expressionMap.relationMetadata;
        if (!this.expressionMap.of) // todo: move this check before relation query builder creation?
          throw new Error("Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.");
        if (relation.isManyToMany || relation.isOneToMany) throw new Error("Set operation is only supported for many-to-one and one-to-one relations. " + ("However given \"" + relation.propertyPath + "\" has " + relation.relationType + " relation. ") + "Use .add() method instead."); // if there are multiple join columns then user must send id map as "value" argument. check if he really did it

        if (relation.joinColumns && relation.joinColumns.length > 1 && (!(value instanceof Object) || Object.keys(value).length < relation.joinColumns.length)) throw new Error("Value to be set into the relation must be a map of relation ids, for example: .set({ firstName: \"...\", lastName: \"...\" })");
        updater = new _RelationUpdater__WEBPACK_IMPORTED_MODULE_2__["RelationUpdater"](this, this.expressionMap);
        return [2
        /*return*/
        , updater.update(value)];
      });
    });
  };
  /**
   * Adds (binds) given value to entity relation.
   * Value can be entity, entity id or entity id map (if entity has composite ids).
   * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).
   * Works only for many-to-many and one-to-many relations.
   * For many-to-one and one-to-one use #set method instead.
   */


  RelationQueryBuilder.prototype.add = function (value) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var relation, updater;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        if (Array.isArray(value) && value.length === 0) return [2
        /*return*/
        ];
        relation = this.expressionMap.relationMetadata;
        if (!this.expressionMap.of) // todo: move this check before relation query builder creation?
          throw new Error("Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.");
        if (relation.isManyToOne || relation.isOneToOne) throw new Error("Add operation is only supported for many-to-many and one-to-many relations. " + ("However given \"" + relation.propertyPath + "\" has " + relation.relationType + " relation. ") + "Use .set() method instead."); // if there are multiple join columns then user must send id map as "value" argument. check if he really did it

        if (relation.joinColumns && relation.joinColumns.length > 1 && (!(value instanceof Object) || Object.keys(value).length < relation.joinColumns.length)) throw new Error("Value to be set into the relation must be a map of relation ids, for example: .set({ firstName: \"...\", lastName: \"...\" })");
        updater = new _RelationUpdater__WEBPACK_IMPORTED_MODULE_2__["RelationUpdater"](this, this.expressionMap);
        return [2
        /*return*/
        , updater.update(value)];
      });
    });
  };
  /**
   * Removes (unbinds) given value from entity relation.
   * Value can be entity, entity id or entity id map (if entity has composite ids).
   * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).
   * Works only for many-to-many and one-to-many relations.
   * For many-to-one and one-to-one use #set method instead.
   */


  RelationQueryBuilder.prototype.remove = function (value) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var relation, remover;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        if (Array.isArray(value) && value.length === 0) return [2
        /*return*/
        ];
        relation = this.expressionMap.relationMetadata;
        if (!this.expressionMap.of) // todo: move this check before relation query builder creation?
          throw new Error("Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.");
        if (relation.isManyToOne || relation.isOneToOne) throw new Error("Add operation is only supported for many-to-many and one-to-many relations. " + ("However given \"" + relation.propertyPath + "\" has " + relation.relationType + " relation. ") + "Use .set(null) method instead.");
        remover = new _RelationRemover__WEBPACK_IMPORTED_MODULE_3__["RelationRemover"](this, this.expressionMap);
        return [2
        /*return*/
        , remover.remove(value)];
      });
    });
  };
  /**
   * Adds (binds) and removes (unbinds) given values to/from entity relation.
   * Value can be entity, entity id or entity id map (if entity has composite ids).
   * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).
   * Works only for many-to-many and one-to-many relations.
   * For many-to-one and one-to-one use #set method instead.
   */


  RelationQueryBuilder.prototype.addAndRemove = function (added, removed) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.remove(removed)];

          case 1:
            _a.sent();

            return [4
            /*yield*/
            , this.add(added)];

          case 2:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Gets entity's relation id.
  async getId(): Promise<any> {
   }*/

  /**
   * Gets entity's relation ids.
  async getIds(): Promise<any[]> {
      return [];
  }*/

  /**
   * Loads a single entity (relational) from the relation.
   * You can also provide id of relational entity to filter by.
   */


  RelationQueryBuilder.prototype.loadOne = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        return [2
        /*return*/
        , this.loadMany().then(function (results) {
          return results[0];
        })];
      });
    });
  };
  /**
   * Loads many entities (relational) from the relation.
   * You can also provide ids of relational entities to filter by.
   */


  RelationQueryBuilder.prototype.loadMany = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var of, metadata;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        of = this.expressionMap.of;

        if (!(of instanceof Object)) {
          metadata = this.expressionMap.mainAlias.metadata;
          if (metadata.hasMultiplePrimaryKeys) throw new Error("Cannot load entity because only one primary key was specified, however entity contains multiple primary keys");
          of = metadata.primaryColumns[0].createValueMap(of);
        }

        return [2
        /*return*/
        , this.connection.relationLoader.load(this.expressionMap.relationMetadata, of)];
      });
    });
  };

  return RelationQueryBuilder;
}(_QueryBuilder__WEBPACK_IMPORTED_MODULE_1__["QueryBuilder"]);



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/RelationRemover.js":
/*!***********************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/RelationRemover.js ***!
  \***********************************************************************/
/*! exports provided: RelationRemover */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RelationRemover", function() { return RelationRemover; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Allows to work with entity relations and perform specific operations with those relations.
 *
 * todo: add transactions everywhere
 */

var RelationRemover =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function RelationRemover(queryBuilder, expressionMap) {
    this.queryBuilder = queryBuilder;
    this.expressionMap = expressionMap;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Performs remove operation on a relation.
   */


  RelationRemover.prototype.remove = function (value) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var relation, ofs, values_1, updateSet_1, parameters_1, conditions_1, condition, junctionMetadata_1, ofs, values, firstColumnValues, secondColumnValues_1, parameters_2, conditions_2, condition;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            relation = this.expressionMap.relationMetadata;
            if (!relation.isOneToMany) return [3
            /*break*/
            , 2];
            ofs = Array.isArray(this.expressionMap.of) ? this.expressionMap.of : [this.expressionMap.of];
            values_1 = Array.isArray(value) ? value : [value];
            updateSet_1 = {};
            relation.inverseRelation.joinColumns.forEach(function (column) {
              updateSet_1[column.propertyName] = null;
            });
            parameters_1 = {};
            conditions_1 = [];
            ofs.forEach(function (of, ofIndex) {
              conditions_1.push.apply(conditions_1, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](values_1.map(function (value, valueIndex) {
                return tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](relation.inverseRelation.joinColumns.map(function (column, columnIndex) {
                  var parameterName = "joinColumn_" + ofIndex + "_" + valueIndex + "_" + columnIndex;
                  parameters_1[parameterName] = of instanceof Object ? column.referencedColumn.getEntityValue(of) : of;
                  return column.propertyPath + " = :" + parameterName;
                }), relation.inverseRelation.entityMetadata.primaryColumns.map(function (column, columnIndex) {
                  var parameterName = "primaryColumn_" + valueIndex + "_" + valueIndex + "_" + columnIndex;
                  parameters_1[parameterName] = value instanceof Object ? column.getEntityValue(value) : value;
                  return column.propertyPath + " = :" + parameterName;
                })).join(" AND ");
              })));
            });
            condition = conditions_1.map(function (str) {
              return "(" + str + ")";
            }).join(" OR ");
            if (!condition) return [2
            /*return*/
            ];
            return [4
            /*yield*/
            , this.queryBuilder.createQueryBuilder().update(relation.inverseEntityMetadata.target).set(updateSet_1).where(condition).setParameters(parameters_1).execute()];

          case 1:
            _a.sent();

            return [3
            /*break*/
            , 4];

          case 2:
            junctionMetadata_1 = relation.junctionEntityMetadata;
            ofs = Array.isArray(this.expressionMap.of) ? this.expressionMap.of : [this.expressionMap.of];
            values = Array.isArray(value) ? value : [value];
            firstColumnValues = relation.isManyToManyOwner ? ofs : values;
            secondColumnValues_1 = relation.isManyToManyOwner ? values : ofs;
            parameters_2 = {};
            conditions_2 = [];
            firstColumnValues.forEach(function (firstColumnVal, firstColumnValIndex) {
              conditions_2.push.apply(conditions_2, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](secondColumnValues_1.map(function (secondColumnVal, secondColumnValIndex) {
                return tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](junctionMetadata_1.ownerColumns.map(function (column, columnIndex) {
                  var parameterName = "firstValue_" + firstColumnValIndex + "_" + secondColumnValIndex + "_" + columnIndex;
                  parameters_2[parameterName] = firstColumnVal instanceof Object ? column.referencedColumn.getEntityValue(firstColumnVal) : firstColumnVal;
                  return column.databaseName + " = :" + parameterName;
                }), junctionMetadata_1.inverseColumns.map(function (column, columnIndex) {
                  var parameterName = "secondValue_" + firstColumnValIndex + "_" + secondColumnValIndex + "_" + columnIndex;
                  parameters_2[parameterName] = secondColumnVal instanceof Object ? column.referencedColumn.getEntityValue(secondColumnVal) : secondColumnVal;
                  return column.databaseName + " = :" + parameterName;
                })).join(" AND ");
              })));
            });
            condition = conditions_2.map(function (str) {
              return "(" + str + ")";
            }).join(" OR ");
            return [4
            /*yield*/
            , this.queryBuilder.createQueryBuilder()["delete"]().from(junctionMetadata_1.tableName).where(condition).setParameters(parameters_2).execute()];

          case 3:
            _a.sent();

            _a.label = 4;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  return RelationRemover;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/RelationUpdater.js":
/*!***********************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/RelationUpdater.js ***!
  \***********************************************************************/
/*! exports provided: RelationUpdater */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RelationUpdater", function() { return RelationUpdater; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../driver/sap/SapDriver */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");



/**
 * Allows to work with entity relations and perform specific operations with those relations.
 *
 * todo: add transactions everywhere
 */

var RelationUpdater =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function RelationUpdater(queryBuilder, expressionMap) {
    this.queryBuilder = queryBuilder;
    this.expressionMap = expressionMap;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Performs set or add operation on a relation.
   */


  RelationUpdater.prototype.update = function (value) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var relation, updateSet, updateSet_1, ofs, parameters_1, conditions_1, condition, of_1, updateSet, junctionMetadata_1, ofs, values, firstColumnValues, secondColumnValues_1, bulkInserted_1;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            relation = this.expressionMap.relationMetadata;
            if (!(relation.isManyToOne || relation.isOneToOneOwner)) return [3
            /*break*/
            , 2];
            updateSet = relation.joinColumns.reduce(function (updateSet, joinColumn) {
              var relationValue = value instanceof Object ? joinColumn.referencedColumn.getEntityValue(value) : value;
              joinColumn.setEntityValue(updateSet, relationValue);
              return updateSet;
            }, {});
            if (!this.expressionMap.of || Array.isArray(this.expressionMap.of) && !this.expressionMap.of.length) return [2
            /*return*/
            ];
            return [4
            /*yield*/
            , this.queryBuilder.createQueryBuilder().update(relation.entityMetadata.target).set(updateSet).whereInIds(this.expressionMap.of).execute()];

          case 1:
            _a.sent();

            return [3
            /*break*/
            , 10];

          case 2:
            if (!((relation.isOneToOneNotOwner || relation.isOneToMany) && value === null)) return [3
            /*break*/
            , 4];
            updateSet_1 = {};
            relation.inverseRelation.joinColumns.forEach(function (column) {
              updateSet_1[column.propertyName] = null;
            });
            ofs = Array.isArray(this.expressionMap.of) ? this.expressionMap.of : [this.expressionMap.of];
            parameters_1 = {};
            conditions_1 = [];
            ofs.forEach(function (of, ofIndex) {
              relation.inverseRelation.joinColumns.map(function (column, columnIndex) {
                var parameterName = "joinColumn_" + ofIndex + "_" + columnIndex;
                parameters_1[parameterName] = of instanceof Object ? column.referencedColumn.getEntityValue(of) : of;
                conditions_1.push(column.propertyPath + " = :" + parameterName);
              });
            });
            condition = conditions_1.map(function (str) {
              return "(" + str + ")";
            }).join(" OR ");
            if (!condition) return [2
            /*return*/
            ];
            return [4
            /*yield*/
            , this.queryBuilder.createQueryBuilder().update(relation.inverseEntityMetadata.target).set(updateSet_1).where(condition).setParameters(parameters_1).execute()];

          case 3:
            _a.sent();

            return [3
            /*break*/
            , 10];

          case 4:
            if (!(relation.isOneToOneNotOwner || relation.isOneToMany)) return [3
            /*break*/
            , 6];
            if (Array.isArray(this.expressionMap.of)) throw new Error("You cannot update relations of multiple entities with the same related object. Provide a single entity into .of method.");
            of_1 = this.expressionMap.of;
            updateSet = relation.inverseRelation.joinColumns.reduce(function (updateSet, joinColumn) {
              var relationValue = of_1 instanceof Object ? joinColumn.referencedColumn.getEntityValue(of_1) : of_1;
              joinColumn.setEntityValue(updateSet, relationValue);
              return updateSet;
            }, {});
            if (!value || Array.isArray(value) && !value.length) return [2
            /*return*/
            ];
            return [4
            /*yield*/
            , this.queryBuilder.createQueryBuilder().update(relation.inverseEntityMetadata.target).set(updateSet).whereInIds(value).execute()];

          case 5:
            _a.sent();

            return [3
            /*break*/
            , 10];

          case 6:
            junctionMetadata_1 = relation.junctionEntityMetadata;
            ofs = Array.isArray(this.expressionMap.of) ? this.expressionMap.of : [this.expressionMap.of];
            values = Array.isArray(value) ? value : [value];
            firstColumnValues = relation.isManyToManyOwner ? ofs : values;
            secondColumnValues_1 = relation.isManyToManyOwner ? values : ofs;
            bulkInserted_1 = [];
            firstColumnValues.forEach(function (firstColumnVal) {
              secondColumnValues_1.forEach(function (secondColumnVal) {
                var inserted = {};
                junctionMetadata_1.ownerColumns.forEach(function (column) {
                  inserted[column.databaseName] = firstColumnVal instanceof Object ? column.referencedColumn.getEntityValue(firstColumnVal) : firstColumnVal;
                });
                junctionMetadata_1.inverseColumns.forEach(function (column) {
                  inserted[column.databaseName] = secondColumnVal instanceof Object ? column.referencedColumn.getEntityValue(secondColumnVal) : secondColumnVal;
                });
                bulkInserted_1.push(inserted);
              });
            });
            if (!bulkInserted_1.length) return [2
            /*return*/
            ];
            if (!(this.queryBuilder.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["OracleDriver"] || this.queryBuilder.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["SapDriver"])) return [3
            /*break*/
            , 8];
            return [4
            /*yield*/
            , Promise.all(bulkInserted_1.map(function (value) {
              return _this.queryBuilder.createQueryBuilder().insert().into(junctionMetadata_1.tableName).values(value).execute();
            }))];

          case 7:
            _a.sent();

            return [3
            /*break*/
            , 10];

          case 8:
            return [4
            /*yield*/
            , this.queryBuilder.createQueryBuilder().insert().into(junctionMetadata_1.tableName).values(bulkInserted_1).execute()];

          case 9:
            _a.sent();

            _a.label = 10;

          case 10:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  return RelationUpdater;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/ReturningResultsEntityUpdator.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/ReturningResultsEntityUpdator.js ***!
  \*************************************************************************************/
/*! exports provided: ReturningResultsEntityUpdator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReturningResultsEntityUpdator", function() { return ReturningResultsEntityUpdator; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_OrmUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/OrmUtils */ "./node_modules/typeorm/browser/util/OrmUtils.js");
/* harmony import */ var _driver_oracle_OracleDriver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../driver/oracle/OracleDriver */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");



/**
 * Updates entity with returning results in the entity insert and update operations.
 */

var ReturningResultsEntityUpdator =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function ReturningResultsEntityUpdator(queryRunner, expressionMap) {
    this.queryRunner = queryRunner;
    this.expressionMap = expressionMap;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Updates entities with a special columns after updation query execution.
   */


  ReturningResultsEntityUpdator.prototype.update = function (updateResult, entities) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var metadata;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            metadata = this.expressionMap.mainAlias.metadata;
            return [4
            /*yield*/
            , Promise.all(entities.map(function (entity, entityIndex) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var result, returningColumns, updationColumns, entityId, loadedReturningColumns;

                var _this = this;

                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      if (!this.queryRunner.connection.driver.isReturningSqlSupported()) return [3
                      /*break*/
                      , 1];

                      if (this.queryRunner.connection.driver instanceof _driver_oracle_OracleDriver__WEBPACK_IMPORTED_MODULE_2__["OracleDriver"] && Array.isArray(updateResult.raw) && this.expressionMap.extraReturningColumns.length > 0) {
                        updateResult.raw = updateResult.raw.reduce(function (newRaw, rawItem, rawItemIndex) {
                          newRaw[_this.expressionMap.extraReturningColumns[rawItemIndex].databaseName] = rawItem[0];
                          return newRaw;
                        }, {});
                      }

                      result = Array.isArray(updateResult.raw) ? updateResult.raw[entityIndex] : updateResult.raw;
                      returningColumns = this.queryRunner.connection.driver.createGeneratedMap(metadata, result);

                      if (returningColumns) {
                        this.queryRunner.manager.merge(metadata.target, entity, returningColumns);
                        updateResult.generatedMaps.push(returningColumns);
                      }

                      return [3
                      /*break*/
                      , 3];

                    case 1:
                      updationColumns = this.getUpdationReturningColumns();
                      if (!(updationColumns.length > 0)) return [3
                      /*break*/
                      , 3];
                      entityId = this.expressionMap.mainAlias.metadata.getEntityIdMap(entity);
                      if (!entityId) throw new Error("Cannot update entity because entity id is not set in the entity.");
                      return [4
                      /*yield*/
                      , this.queryRunner.manager.createQueryBuilder().select(metadata.primaryColumns.map(function (column) {
                        return metadata.targetName + "." + column.propertyPath;
                      })).addSelect(this.getUpdationReturningColumns().map(function (column) {
                        return metadata.targetName + "." + column.propertyPath;
                      })).from(metadata.target, metadata.targetName).where(entityId).setOption("create-pojo") // use POJO because created object can contain default values, e.g. property = null and those properties maight be overridden by merge process
                      .getOne()];

                    case 2:
                      loadedReturningColumns = _a.sent();

                      if (loadedReturningColumns) {
                        this.queryRunner.manager.merge(metadata.target, entity, loadedReturningColumns);
                        updateResult.generatedMaps.push(loadedReturningColumns);
                      }

                      _a.label = 3;

                    case 3:
                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            }))];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Updates entities with a special columns after insertion query execution.
   */


  ReturningResultsEntityUpdator.prototype.insert = function (insertResult, entities) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var metadata, insertionColumns, generatedMaps;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            metadata = this.expressionMap.mainAlias.metadata;
            insertionColumns = this.getInsertionReturningColumns();
            generatedMaps = entities.map(function (entity, entityIndex) {
              if (_this.queryRunner.connection.driver instanceof _driver_oracle_OracleDriver__WEBPACK_IMPORTED_MODULE_2__["OracleDriver"] && Array.isArray(insertResult.raw) && _this.expressionMap.extraReturningColumns.length > 0) {
                insertResult.raw = insertResult.raw.reduce(function (newRaw, rawItem, rawItemIndex) {
                  newRaw[_this.expressionMap.extraReturningColumns[rawItemIndex].databaseName] = rawItem[0];
                  return newRaw;
                }, {});
              } // get all values generated by a database for us


              var result = Array.isArray(insertResult.raw) ? insertResult.raw[entityIndex] : insertResult.raw;
              var generatedMap = _this.queryRunner.connection.driver.createGeneratedMap(metadata, result) || {}; // if database does not support uuid generation we need to get uuid values
              // generated by orm and set them to the generatedMap

              if (_this.queryRunner.connection.driver.isUUIDGenerationSupported() === false) {
                metadata.generatedColumns.forEach(function (generatedColumn) {
                  if (generatedColumn.generationStrategy === "uuid") {
                    // uuid can be defined by user in a model, that's why first we get it
                    var uuid = generatedColumn.getEntityValue(entity);
                    if (!uuid) // if it was not defined by a user then InsertQueryBuilder generates it by its own, get this generated uuid value
                      uuid = _this.expressionMap.nativeParameters["uuid_" + generatedColumn.databaseName + entityIndex];
                    _util_OrmUtils__WEBPACK_IMPORTED_MODULE_1__["OrmUtils"].mergeDeep(generatedMap, generatedColumn.createValueMap(uuid));
                  }
                });
              }

              _this.queryRunner.manager.merge(metadata.target, entity, generatedMap); // todo: this should not be here, but problem with below line


              return generatedMap;
            });
            if (!(this.queryRunner.connection.driver.isReturningSqlSupported() === false && insertionColumns.length > 0)) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , Promise.all(entities.map(function (entity, entityIndex) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var entityId, returningResult;
                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      entityId = metadata.getEntityIdMap(entity);
                      return [4
                      /*yield*/
                      , this.queryRunner.manager.createQueryBuilder().select(metadata.primaryColumns.map(function (column) {
                        return metadata.targetName + "." + column.propertyPath;
                      })).addSelect(insertionColumns.map(function (column) {
                        return metadata.targetName + "." + column.propertyPath;
                      })).from(metadata.target, metadata.targetName).where(entityId).setOption("create-pojo") // use POJO because created object can contain default values, e.g. property = null and those properties maight be overridden by merge process
                      .getOne()];

                    case 1:
                      returningResult = _a.sent();
                      this.queryRunner.manager.merge(metadata.target, generatedMaps[entityIndex], returningResult);
                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            }))];

          case 1:
            _a.sent();

            _a.label = 2;

          case 2:
            entities.forEach(function (entity, entityIndex) {
              var entityId = metadata.getEntityIdMap(entity);
              insertResult.identifiers.push(entityId);
              insertResult.generatedMaps.push(generatedMaps[entityIndex]);

              _this.queryRunner.manager.merge(_this.expressionMap.mainAlias.metadata.target, entity, generatedMaps[entityIndex], generatedMaps[entityIndex]); // todo: why twice?!

            });
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Columns we need to be returned from the database when we insert entity.
   */


  ReturningResultsEntityUpdator.prototype.getInsertionReturningColumns = function () {
    // for databases which support returning statement we need to return extra columns like id
    // for other databases we don't need to return id column since its returned by a driver already
    var needToCheckGenerated = this.queryRunner.connection.driver.isReturningSqlSupported(); // filter out the columns of which we need database inserted values to update our entity

    return this.expressionMap.mainAlias.metadata.columns.filter(function (column) {
      return column["default"] !== undefined || needToCheckGenerated && column.isGenerated || column.isCreateDate || column.isUpdateDate || column.isDeleteDate || column.isVersion;
    });
  };
  /**
   * Columns we need to be returned from the database when we update entity.
   */


  ReturningResultsEntityUpdator.prototype.getUpdationReturningColumns = function () {
    return this.expressionMap.mainAlias.metadata.columns.filter(function (column) {
      return column.isUpdateDate || column.isVersion;
    });
  };

  return ReturningResultsEntityUpdator;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/SelectQueryBuilder.js":
/*!**************************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/SelectQueryBuilder.js ***!
  \**************************************************************************/
/*! exports provided: SelectQueryBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectQueryBuilder", function() { return SelectQueryBuilder; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../driver/sap/SapDriver */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");
/* harmony import */ var _transformer_RawSqlResultsToEntityTransformer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transformer/RawSqlResultsToEntityTransformer */ "./node_modules/typeorm/browser/query-builder/transformer/RawSqlResultsToEntityTransformer.js");
/* harmony import */ var _error_PessimisticLockTransactionRequiredError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/PessimisticLockTransactionRequiredError */ "./node_modules/typeorm/browser/error/PessimisticLockTransactionRequiredError.js");
/* harmony import */ var _error_NoVersionOrUpdateDateColumnError__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/NoVersionOrUpdateDateColumnError */ "./node_modules/typeorm/browser/error/NoVersionOrUpdateDateColumnError.js");
/* harmony import */ var _error_OptimisticLockVersionMismatchError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/OptimisticLockVersionMismatchError */ "./node_modules/typeorm/browser/error/OptimisticLockVersionMismatchError.js");
/* harmony import */ var _error_OptimisticLockCanNotBeUsedError__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../error/OptimisticLockCanNotBeUsedError */ "./node_modules/typeorm/browser/error/OptimisticLockCanNotBeUsedError.js");
/* harmony import */ var _JoinAttribute__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./JoinAttribute */ "./node_modules/typeorm/browser/query-builder/JoinAttribute.js");
/* harmony import */ var _relation_id_RelationIdAttribute__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./relation-id/RelationIdAttribute */ "./node_modules/typeorm/browser/query-builder/relation-id/RelationIdAttribute.js");
/* harmony import */ var _relation_count_RelationCountAttribute__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./relation-count/RelationCountAttribute */ "./node_modules/typeorm/browser/query-builder/relation-count/RelationCountAttribute.js");
/* harmony import */ var _relation_id_RelationIdLoader__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./relation-id/RelationIdLoader */ "./node_modules/typeorm/browser/query-builder/relation-id/RelationIdLoader.js");
/* harmony import */ var _relation_id_RelationIdMetadataToAttributeTransformer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./relation-id/RelationIdMetadataToAttributeTransformer */ "./node_modules/typeorm/browser/query-builder/relation-id/RelationIdMetadataToAttributeTransformer.js");
/* harmony import */ var _relation_count_RelationCountLoader__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./relation-count/RelationCountLoader */ "./node_modules/typeorm/browser/query-builder/relation-count/RelationCountLoader.js");
/* harmony import */ var _relation_count_RelationCountMetadataToAttributeTransformer__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./relation-count/RelationCountMetadataToAttributeTransformer */ "./node_modules/typeorm/browser/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js");
/* harmony import */ var _QueryBuilder__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./QueryBuilder */ "./node_modules/typeorm/browser/query-builder/QueryBuilder.js");
/* harmony import */ var _error_LockNotSupportedOnGivenDriverError__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../error/LockNotSupportedOnGivenDriverError */ "./node_modules/typeorm/browser/error/LockNotSupportedOnGivenDriverError.js");
/* harmony import */ var _driver_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../driver/sqlite-abstract/AbstractSqliteDriver */ "./node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteDriver.js");
/* harmony import */ var _error_OffsetWithoutLimitNotSupportedError__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../error/OffsetWithoutLimitNotSupportedError */ "./node_modules/typeorm/browser/error/OffsetWithoutLimitNotSupportedError.js");
/* harmony import */ var _subscriber_BroadcasterResult__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../subscriber/BroadcasterResult */ "./node_modules/typeorm/browser/subscriber/BroadcasterResult.js");
/* harmony import */ var _util_ObjectUtils__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../util/ObjectUtils */ "./node_modules/typeorm/browser/util/ObjectUtils.js");
/* harmony import */ var _driver_DriverUtils__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../driver/DriverUtils */ "./node_modules/typeorm/browser/driver/DriverUtils.js");
/* harmony import */ var _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../driver/aurora-data-api/AuroraDataApiDriver */ "./node_modules/typeorm/browser/driver/aurora-data-api/AuroraDataApiDriver.js");


























/**
 * Allows to build complex sql queries in a fashion way and execute those queries.
 */

var SelectQueryBuilder =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](SelectQueryBuilder, _super);

  function SelectQueryBuilder() {
    return _super !== null && _super.apply(this, arguments) || this;
  } // -------------------------------------------------------------------------
  // Public Implemented Methods
  // -------------------------------------------------------------------------

  /**
   * Gets generated sql query without parameters being replaced.
   */


  SelectQueryBuilder.prototype.getQuery = function () {
    var sql = this.createSelectExpression();
    sql += this.createJoinExpression();
    sql += this.createWhereExpression();
    sql += this.createGroupByExpression();
    sql += this.createHavingExpression();
    sql += this.createOrderByExpression();
    sql += this.createLimitOffsetExpression();
    sql += this.createLockExpression();
    sql = sql.trim();
    if (this.expressionMap.subQuery) sql = "(" + sql + ")";
    return sql;
  }; // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Creates a subquery - query that can be used inside other queries.
   */


  SelectQueryBuilder.prototype.subQuery = function () {
    var qb = this.createQueryBuilder();
    qb.expressionMap.subQuery = true;
    qb.expressionMap.parentQueryBuilder = this;
    return qb;
  };
  /**
   * Creates SELECT query and selects given data.
   * Replaces all previous selections if they exist.
   */


  SelectQueryBuilder.prototype.select = function (selection, selectionAliasName) {
    this.expressionMap.queryType = "select";

    if (Array.isArray(selection)) {
      this.expressionMap.selects = selection.map(function (selection) {
        return {
          selection: selection
        };
      });
    } else if (selection instanceof Function) {
      var subQueryBuilder = selection(this.subQuery());
      this.setParameters(subQueryBuilder.getParameters());
      this.expressionMap.selects.push({
        selection: subQueryBuilder.getQuery(),
        aliasName: selectionAliasName
      });
    } else if (selection) {
      this.expressionMap.selects = [{
        selection: selection,
        aliasName: selectionAliasName
      }];
    }

    return this;
  };
  /**
   * Adds new selection to the SELECT query.
   */


  SelectQueryBuilder.prototype.addSelect = function (selection, selectionAliasName) {
    if (!selection) return this;

    if (Array.isArray(selection)) {
      this.expressionMap.selects = this.expressionMap.selects.concat(selection.map(function (selection) {
        return {
          selection: selection
        };
      }));
    } else if (selection instanceof Function) {
      var subQueryBuilder = selection(this.subQuery());
      this.setParameters(subQueryBuilder.getParameters());
      this.expressionMap.selects.push({
        selection: subQueryBuilder.getQuery(),
        aliasName: selectionAliasName
      });
    } else if (selection) {
      this.expressionMap.selects.push({
        selection: selection,
        aliasName: selectionAliasName
      });
    }

    return this;
  };
  /**
   * Sets whether the selection is DISTINCT.
   */


  SelectQueryBuilder.prototype.distinct = function (distinct) {
    if (distinct === void 0) {
      distinct = true;
    }

    this.expressionMap.selectDistinct = distinct;
    return this;
  };
  /**
   * Sets the distinct on clause for Postgres.
   */


  SelectQueryBuilder.prototype.distinctOn = function (distinctOn) {
    this.expressionMap.selectDistinctOn = distinctOn;
    return this;
  };
  /**
   * Specifies FROM which entity's table select/update/delete will be executed.
   * Also sets a main string alias of the selection data.
   * Removes all previously set from-s.
   */


  SelectQueryBuilder.prototype.from = function (entityTarget, aliasName) {
    var mainAlias = this.createFromAlias(entityTarget, aliasName);
    this.expressionMap.setMainAlias(mainAlias);
    return this;
  };
  /**
   * Specifies FROM which entity's table select/update/delete will be executed.
   * Also sets a main string alias of the selection data.
   */


  SelectQueryBuilder.prototype.addFrom = function (entityTarget, aliasName) {
    var alias = this.createFromAlias(entityTarget, aliasName);
    if (!this.expressionMap.mainAlias) this.expressionMap.setMainAlias(alias);
    return this;
  };
  /**
   * INNER JOINs (without selection).
   * You also need to specify an alias of the joined data.
   * Optionally, you can add condition and parameters used in condition.
   */


  SelectQueryBuilder.prototype.innerJoin = function (entityOrProperty, alias, condition, parameters) {
    if (condition === void 0) {
      condition = "";
    }

    this.join("INNER", entityOrProperty, alias, condition, parameters);
    return this;
  };
  /**
   * LEFT JOINs (without selection).
   * You also need to specify an alias of the joined data.
   * Optionally, you can add condition and parameters used in condition.
   */


  SelectQueryBuilder.prototype.leftJoin = function (entityOrProperty, alias, condition, parameters) {
    if (condition === void 0) {
      condition = "";
    }

    this.join("LEFT", entityOrProperty, alias, condition, parameters);
    return this;
  };
  /**
   * INNER JOINs and adds all selection properties to SELECT.
   * You also need to specify an alias of the joined data.
   * Optionally, you can add condition and parameters used in condition.
   */


  SelectQueryBuilder.prototype.innerJoinAndSelect = function (entityOrProperty, alias, condition, parameters) {
    if (condition === void 0) {
      condition = "";
    }

    this.addSelect(alias);
    this.innerJoin(entityOrProperty, alias, condition, parameters);
    return this;
  };
  /**
   * LEFT JOINs and adds all selection properties to SELECT.
   * You also need to specify an alias of the joined data.
   * Optionally, you can add condition and parameters used in condition.
   */


  SelectQueryBuilder.prototype.leftJoinAndSelect = function (entityOrProperty, alias, condition, parameters) {
    if (condition === void 0) {
      condition = "";
    }

    this.addSelect(alias);
    this.leftJoin(entityOrProperty, alias, condition, parameters);
    return this;
  };
  /**
   * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.
   * This is extremely useful when you want to select some data and map it to some virtual property.
   * It will assume that there are multiple rows of selecting data, and mapped result will be an array.
   * You also need to specify an alias of the joined data.
   * Optionally, you can add condition and parameters used in condition.
   */


  SelectQueryBuilder.prototype.innerJoinAndMapMany = function (mapToProperty, entityOrProperty, alias, condition, parameters) {
    if (condition === void 0) {
      condition = "";
    }

    this.addSelect(alias);
    this.join("INNER", entityOrProperty, alias, condition, parameters, mapToProperty, true);
    return this;
  };
  /**
   * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.
   * This is extremely useful when you want to select some data and map it to some virtual property.
   * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.
   * You also need to specify an alias of the joined data.
   * Optionally, you can add condition and parameters used in condition.
   */


  SelectQueryBuilder.prototype.innerJoinAndMapOne = function (mapToProperty, entityOrProperty, alias, condition, parameters) {
    if (condition === void 0) {
      condition = "";
    }

    this.addSelect(alias);
    this.join("INNER", entityOrProperty, alias, condition, parameters, mapToProperty, false);
    return this;
  };
  /**
   * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.
   * This is extremely useful when you want to select some data and map it to some virtual property.
   * It will assume that there are multiple rows of selecting data, and mapped result will be an array.
   * You also need to specify an alias of the joined data.
   * Optionally, you can add condition and parameters used in condition.
   */


  SelectQueryBuilder.prototype.leftJoinAndMapMany = function (mapToProperty, entityOrProperty, alias, condition, parameters) {
    if (condition === void 0) {
      condition = "";
    }

    this.addSelect(alias);
    this.join("LEFT", entityOrProperty, alias, condition, parameters, mapToProperty, true);
    return this;
  };
  /**
   * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.
   * This is extremely useful when you want to select some data and map it to some virtual property.
   * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.
   * You also need to specify an alias of the joined data.
   * Optionally, you can add condition and parameters used in condition.
   */


  SelectQueryBuilder.prototype.leftJoinAndMapOne = function (mapToProperty, entityOrProperty, alias, condition, parameters) {
    if (condition === void 0) {
      condition = "";
    }

    this.addSelect(alias);
    this.join("LEFT", entityOrProperty, alias, condition, parameters, mapToProperty, false);
    return this;
  };
  /**
   * LEFT JOINs relation id and maps it into some entity's property.
   * Optionally, you can add condition and parameters used in condition.
   */


  SelectQueryBuilder.prototype.loadRelationIdAndMap = function (mapToProperty, relationName, aliasNameOrOptions, queryBuilderFactory) {
    var relationIdAttribute = new _relation_id_RelationIdAttribute__WEBPACK_IMPORTED_MODULE_8__["RelationIdAttribute"](this.expressionMap);
    relationIdAttribute.mapToProperty = mapToProperty;
    relationIdAttribute.relationName = relationName;
    if (typeof aliasNameOrOptions === "string") relationIdAttribute.alias = aliasNameOrOptions;
    if (aliasNameOrOptions instanceof Object && aliasNameOrOptions.disableMixedMap) relationIdAttribute.disableMixedMap = true;
    relationIdAttribute.queryBuilderFactory = queryBuilderFactory;
    this.expressionMap.relationIdAttributes.push(relationIdAttribute);

    if (relationIdAttribute.relation.junctionEntityMetadata) {
      this.expressionMap.createAlias({
        type: "other",
        name: relationIdAttribute.junctionAlias,
        metadata: relationIdAttribute.relation.junctionEntityMetadata
      });
    }

    return this;
  };
  /**
   * Counts number of entities of entity's relation and maps the value into some entity's property.
   * Optionally, you can add condition and parameters used in condition.
   */


  SelectQueryBuilder.prototype.loadRelationCountAndMap = function (mapToProperty, relationName, aliasName, queryBuilderFactory) {
    var relationCountAttribute = new _relation_count_RelationCountAttribute__WEBPACK_IMPORTED_MODULE_9__["RelationCountAttribute"](this.expressionMap);
    relationCountAttribute.mapToProperty = mapToProperty;
    relationCountAttribute.relationName = relationName;
    relationCountAttribute.alias = aliasName;
    relationCountAttribute.queryBuilderFactory = queryBuilderFactory;
    this.expressionMap.relationCountAttributes.push(relationCountAttribute);
    this.expressionMap.createAlias({
      type: "other",
      name: relationCountAttribute.junctionAlias
    });

    if (relationCountAttribute.relation.junctionEntityMetadata) {
      this.expressionMap.createAlias({
        type: "other",
        name: relationCountAttribute.junctionAlias,
        metadata: relationCountAttribute.relation.junctionEntityMetadata
      });
    }

    return this;
  };
  /**
   * Loads all relation ids for all relations of the selected entity.
   * All relation ids will be mapped to relation property themself.
   * If array of strings is given then loads only relation ids of the given properties.
   */


  SelectQueryBuilder.prototype.loadAllRelationIds = function (options) {
    var _this = this;

    this.expressionMap.mainAlias.metadata.relations.forEach(function (relation) {
      if (options !== undefined && options.relations !== undefined && options.relations.indexOf(relation.propertyPath) === -1) return;

      _this.loadRelationIdAndMap(_this.expressionMap.mainAlias.name + "." + relation.propertyPath, _this.expressionMap.mainAlias.name + "." + relation.propertyPath, options);
    });
    return this;
  };
  /**
   * Sets WHERE condition in the query builder.
   * If you had previously WHERE expression defined,
   * calling this function will override previously set WHERE conditions.
   * Additionally you can add parameters used in where expression.
   */


  SelectQueryBuilder.prototype.where = function (where, parameters) {
    this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions

    var condition = this.computeWhereParameter(where);
    if (condition) this.expressionMap.wheres = [{
      type: "simple",
      condition: condition
    }];
    if (parameters) this.setParameters(parameters);
    return this;
  };
  /**
   * Adds new AND WHERE condition in the query builder.
   * Additionally you can add parameters used in where expression.
   */


  SelectQueryBuilder.prototype.andWhere = function (where, parameters) {
    this.expressionMap.wheres.push({
      type: "and",
      condition: this.computeWhereParameter(where)
    });
    if (parameters) this.setParameters(parameters);
    return this;
  };
  /**
   * Adds new OR WHERE condition in the query builder.
   * Additionally you can add parameters used in where expression.
   */


  SelectQueryBuilder.prototype.orWhere = function (where, parameters) {
    this.expressionMap.wheres.push({
      type: "or",
      condition: this.computeWhereParameter(where)
    });
    if (parameters) this.setParameters(parameters);
    return this;
  };
  /**
   * Adds new AND WHERE with conditions for the given ids.
   *
   * Ids are mixed.
   * It means if you have single primary key you can pass a simple id values, for example [1, 2, 3].
   * If you have multiple primary keys you need to pass object with property names and values specified,
   * for example [{ firstId: 1, secondId: 2 }, { firstId: 2, secondId: 3 }, ...]
   */


  SelectQueryBuilder.prototype.whereInIds = function (ids) {
    return this.where(this.createWhereIdsExpression(ids));
  };
  /**
   * Adds new AND WHERE with conditions for the given ids.
   *
   * Ids are mixed.
   * It means if you have single primary key you can pass a simple id values, for example [1, 2, 3].
   * If you have multiple primary keys you need to pass object with property names and values specified,
   * for example [{ firstId: 1, secondId: 2 }, { firstId: 2, secondId: 3 }, ...]
   */


  SelectQueryBuilder.prototype.andWhereInIds = function (ids) {
    return this.andWhere(this.createWhereIdsExpression(ids));
  };
  /**
   * Adds new OR WHERE with conditions for the given ids.
   *
   * Ids are mixed.
   * It means if you have single primary key you can pass a simple id values, for example [1, 2, 3].
   * If you have multiple primary keys you need to pass object with property names and values specified,
   * for example [{ firstId: 1, secondId: 2 }, { firstId: 2, secondId: 3 }, ...]
   */


  SelectQueryBuilder.prototype.orWhereInIds = function (ids) {
    return this.orWhere(this.createWhereIdsExpression(ids));
  };
  /**
   * Sets HAVING condition in the query builder.
   * If you had previously HAVING expression defined,
   * calling this function will override previously set HAVING conditions.
   * Additionally you can add parameters used in where expression.
   */


  SelectQueryBuilder.prototype.having = function (having, parameters) {
    this.expressionMap.havings.push({
      type: "simple",
      condition: having
    });
    if (parameters) this.setParameters(parameters);
    return this;
  };
  /**
   * Adds new AND HAVING condition in the query builder.
   * Additionally you can add parameters used in where expression.
   */


  SelectQueryBuilder.prototype.andHaving = function (having, parameters) {
    this.expressionMap.havings.push({
      type: "and",
      condition: having
    });
    if (parameters) this.setParameters(parameters);
    return this;
  };
  /**
   * Adds new OR HAVING condition in the query builder.
   * Additionally you can add parameters used in where expression.
   */


  SelectQueryBuilder.prototype.orHaving = function (having, parameters) {
    this.expressionMap.havings.push({
      type: "or",
      condition: having
    });
    if (parameters) this.setParameters(parameters);
    return this;
  };
  /**
   * Sets GROUP BY condition in the query builder.
   * If you had previously GROUP BY expression defined,
   * calling this function will override previously set GROUP BY conditions.
   */


  SelectQueryBuilder.prototype.groupBy = function (groupBy) {
    if (groupBy) {
      this.expressionMap.groupBys = [groupBy];
    } else {
      this.expressionMap.groupBys = [];
    }

    return this;
  };
  /**
   * Adds GROUP BY condition in the query builder.
   */


  SelectQueryBuilder.prototype.addGroupBy = function (groupBy) {
    this.expressionMap.groupBys.push(groupBy);
    return this;
  };
  /**
   * Sets ORDER BY condition in the query builder.
   * If you had previously ORDER BY expression defined,
   * calling this function will override previously set ORDER BY conditions.
   */


  SelectQueryBuilder.prototype.orderBy = function (sort, order, nulls) {
    if (order === void 0) {
      order = "ASC";
    }

    var _a, _b;

    if (order !== undefined && order !== "ASC" && order !== "DESC") throw new Error("SelectQueryBuilder.addOrderBy \"order\" can accept only \"ASC\" and \"DESC\" values.");
    if (nulls !== undefined && nulls !== "NULLS FIRST" && nulls !== "NULLS LAST") throw new Error("SelectQueryBuilder.addOrderBy \"nulls\" can accept only \"NULLS FIRST\" and \"NULLS LAST\" values.");

    if (sort) {
      if (sort instanceof Object) {
        this.expressionMap.orderBys = sort;
      } else {
        if (nulls) {
          this.expressionMap.orderBys = (_a = {}, _a[sort] = {
            order: order,
            nulls: nulls
          }, _a);
        } else {
          this.expressionMap.orderBys = (_b = {}, _b[sort] = order, _b);
        }
      }
    } else {
      this.expressionMap.orderBys = {};
    }

    return this;
  };
  /**
   * Adds ORDER BY condition in the query builder.
   */


  SelectQueryBuilder.prototype.addOrderBy = function (sort, order, nulls) {
    if (order === void 0) {
      order = "ASC";
    }

    if (order !== undefined && order !== "ASC" && order !== "DESC") throw new Error("SelectQueryBuilder.addOrderBy \"order\" can accept only \"ASC\" and \"DESC\" values.");
    if (nulls !== undefined && nulls !== "NULLS FIRST" && nulls !== "NULLS LAST") throw new Error("SelectQueryBuilder.addOrderBy \"nulls\" can accept only \"NULLS FIRST\" and \"NULLS LAST\" values.");

    if (nulls) {
      this.expressionMap.orderBys[sort] = {
        order: order,
        nulls: nulls
      };
    } else {
      this.expressionMap.orderBys[sort] = order;
    }

    return this;
  };
  /**
   * Set's LIMIT - maximum number of rows to be selected.
   * NOTE that it may not work as you expect if you are using joins.
   * If you want to implement pagination, and you are having join in your query,
   * then use instead take method instead.
   */


  SelectQueryBuilder.prototype.limit = function (limit) {
    this.expressionMap.limit = this.normalizeNumber(limit);
    if (this.expressionMap.limit !== undefined && isNaN(this.expressionMap.limit)) throw new Error("Provided \"limit\" value is not a number. Please provide a numeric value.");
    return this;
  };
  /**
   * Set's OFFSET - selection offset.
   * NOTE that it may not work as you expect if you are using joins.
   * If you want to implement pagination, and you are having join in your query,
   * then use instead skip method instead.
   */


  SelectQueryBuilder.prototype.offset = function (offset) {
    this.expressionMap.offset = this.normalizeNumber(offset);
    if (this.expressionMap.offset !== undefined && isNaN(this.expressionMap.offset)) throw new Error("Provided \"offset\" value is not a number. Please provide a numeric value.");
    return this;
  };
  /**
   * Sets maximal number of entities to take.
   */


  SelectQueryBuilder.prototype.take = function (take) {
    this.expressionMap.take = this.normalizeNumber(take);
    if (this.expressionMap.take !== undefined && isNaN(this.expressionMap.take)) throw new Error("Provided \"take\" value is not a number. Please provide a numeric value.");
    return this;
  };
  /**
   * Sets number of entities to skip.
   */


  SelectQueryBuilder.prototype.skip = function (skip) {
    this.expressionMap.skip = this.normalizeNumber(skip);
    if (this.expressionMap.skip !== undefined && isNaN(this.expressionMap.skip)) throw new Error("Provided \"skip\" value is not a number. Please provide a numeric value.");
    return this;
  };
  /**
   * Sets locking mode.
   */


  SelectQueryBuilder.prototype.setLock = function (lockMode, lockVersion) {
    this.expressionMap.lockMode = lockMode;
    this.expressionMap.lockVersion = lockVersion;
    return this;
  };
  /**
   * Disables the global condition of "non-deleted" for the entity with delete date columns.
   */


  SelectQueryBuilder.prototype.withDeleted = function () {
    this.expressionMap.withDeleted = true;
    return this;
  };
  /**
   * Gets first raw result returned by execution of generated query builder sql.
   */


  SelectQueryBuilder.prototype.getRawOne = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.getRawMany()];

          case 1:
            return [2
            /*return*/
            , _a.sent()[0]];
        }
      });
    });
  };
  /**
   * Gets all raw results returned by execution of generated query builder sql.
   */


  SelectQueryBuilder.prototype.getRawMany = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var queryRunner, transactionStartedByUs, results, error_1, rollbackError_1;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (this.expressionMap.lockMode === "optimistic") throw new _error_OptimisticLockCanNotBeUsedError__WEBPACK_IMPORTED_MODULE_6__["OptimisticLockCanNotBeUsedError"]();
            this.expressionMap.queryEntity = false;
            queryRunner = this.obtainQueryRunner();
            transactionStartedByUs = false;
            _a.label = 1;

          case 1:
            _a.trys.push([1, 7, 12, 15]);

            if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , queryRunner.startTransaction()];

          case 2:
            _a.sent();

            transactionStartedByUs = true;
            _a.label = 3;

          case 3:
            return [4
            /*yield*/
            , this.loadRawResults(queryRunner)];

          case 4:
            results = _a.sent();
            if (!transactionStartedByUs) return [3
            /*break*/
            , 6];
            return [4
            /*yield*/
            , queryRunner.commitTransaction()];

          case 5:
            _a.sent();

            _a.label = 6;

          case 6:
            return [2
            /*return*/
            , results];

          case 7:
            error_1 = _a.sent();
            if (!transactionStartedByUs) return [3
            /*break*/
            , 11];
            _a.label = 8;

          case 8:
            _a.trys.push([8, 10,, 11]);

            return [4
            /*yield*/
            , queryRunner.rollbackTransaction()];

          case 9:
            _a.sent();

            return [3
            /*break*/
            , 11];

          case 10:
            rollbackError_1 = _a.sent();
            return [3
            /*break*/
            , 11];

          case 11:
            throw error_1;

          case 12:
            if (!(queryRunner !== this.queryRunner)) return [3
            /*break*/
            , 14];
            return [4
            /*yield*/
            , queryRunner.release()];

          case 13:
            _a.sent();

            _a.label = 14;

          case 14:
            return [7
            /*endfinally*/
            ];

          case 15:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Executes sql generated by query builder and returns object with raw results and entities created from them.
   */


  SelectQueryBuilder.prototype.getRawAndEntities = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var queryRunner, transactionStartedByUs, results, error_2, rollbackError_2;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            queryRunner = this.obtainQueryRunner();
            transactionStartedByUs = false;
            _a.label = 1;

          case 1:
            _a.trys.push([1, 7, 12, 15]);

            if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , queryRunner.startTransaction()];

          case 2:
            _a.sent();

            transactionStartedByUs = true;
            _a.label = 3;

          case 3:
            this.expressionMap.queryEntity = true;
            return [4
            /*yield*/
            , this.executeEntitiesAndRawResults(queryRunner)];

          case 4:
            results = _a.sent();
            if (!transactionStartedByUs) return [3
            /*break*/
            , 6];
            return [4
            /*yield*/
            , queryRunner.commitTransaction()];

          case 5:
            _a.sent();

            _a.label = 6;

          case 6:
            return [2
            /*return*/
            , results];

          case 7:
            error_2 = _a.sent();
            if (!transactionStartedByUs) return [3
            /*break*/
            , 11];
            _a.label = 8;

          case 8:
            _a.trys.push([8, 10,, 11]);

            return [4
            /*yield*/
            , queryRunner.rollbackTransaction()];

          case 9:
            _a.sent();

            return [3
            /*break*/
            , 11];

          case 10:
            rollbackError_2 = _a.sent();
            return [3
            /*break*/
            , 11];

          case 11:
            throw error_2;

          case 12:
            if (!(queryRunner !== this.queryRunner)) return [3
            /*break*/
            , 14];
            return [4
            /*yield*/
            , queryRunner.release()];

          case 13:
            _a.sent();

            _a.label = 14;

          case 14:
            return [7
            /*endfinally*/
            ];

          case 15:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Gets single entity returned by execution of generated query builder sql.
   */


  SelectQueryBuilder.prototype.getOne = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var results, result, metadata, actualVersion, actualVersion;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.getRawAndEntities()];

          case 1:
            results = _a.sent();
            result = results.entities[0];

            if (result && this.expressionMap.lockMode === "optimistic" && this.expressionMap.lockVersion) {
              metadata = this.expressionMap.mainAlias.metadata;

              if (this.expressionMap.lockVersion instanceof Date) {
                actualVersion = metadata.updateDateColumn.getEntityValue(result);
                if (actualVersion.getTime() !== this.expressionMap.lockVersion.getTime()) throw new _error_OptimisticLockVersionMismatchError__WEBPACK_IMPORTED_MODULE_5__["OptimisticLockVersionMismatchError"](metadata.name, this.expressionMap.lockVersion, actualVersion);
              } else {
                actualVersion = metadata.versionColumn.getEntityValue(result);
                if (actualVersion !== this.expressionMap.lockVersion) throw new _error_OptimisticLockVersionMismatchError__WEBPACK_IMPORTED_MODULE_5__["OptimisticLockVersionMismatchError"](metadata.name, this.expressionMap.lockVersion, actualVersion);
              }
            }

            return [2
            /*return*/
            , result];
        }
      });
    });
  };
  /**
   * Gets entities returned by execution of generated query builder sql.
   */


  SelectQueryBuilder.prototype.getMany = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var results;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (this.expressionMap.lockMode === "optimistic") throw new _error_OptimisticLockCanNotBeUsedError__WEBPACK_IMPORTED_MODULE_6__["OptimisticLockCanNotBeUsedError"]();
            return [4
            /*yield*/
            , this.getRawAndEntities()];

          case 1:
            results = _a.sent();
            return [2
            /*return*/
            , results.entities];
        }
      });
    });
  };
  /**
   * Gets count - number of entities selected by sql generated by this query builder.
   * Count excludes all limitations set by setFirstResult and setMaxResults methods call.
   */


  SelectQueryBuilder.prototype.getCount = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var queryRunner, transactionStartedByUs, results, error_3, rollbackError_3;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (this.expressionMap.lockMode === "optimistic") throw new _error_OptimisticLockCanNotBeUsedError__WEBPACK_IMPORTED_MODULE_6__["OptimisticLockCanNotBeUsedError"]();
            queryRunner = this.obtainQueryRunner();
            transactionStartedByUs = false;
            _a.label = 1;

          case 1:
            _a.trys.push([1, 7, 12, 15]);

            if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , queryRunner.startTransaction()];

          case 2:
            _a.sent();

            transactionStartedByUs = true;
            _a.label = 3;

          case 3:
            this.expressionMap.queryEntity = false;
            return [4
            /*yield*/
            , this.executeCountQuery(queryRunner)];

          case 4:
            results = _a.sent();
            if (!transactionStartedByUs) return [3
            /*break*/
            , 6];
            return [4
            /*yield*/
            , queryRunner.commitTransaction()];

          case 5:
            _a.sent();

            _a.label = 6;

          case 6:
            return [2
            /*return*/
            , results];

          case 7:
            error_3 = _a.sent();
            if (!transactionStartedByUs) return [3
            /*break*/
            , 11];
            _a.label = 8;

          case 8:
            _a.trys.push([8, 10,, 11]);

            return [4
            /*yield*/
            , queryRunner.rollbackTransaction()];

          case 9:
            _a.sent();

            return [3
            /*break*/
            , 11];

          case 10:
            rollbackError_3 = _a.sent();
            return [3
            /*break*/
            , 11];

          case 11:
            throw error_3;

          case 12:
            if (!(queryRunner !== this.queryRunner)) return [3
            /*break*/
            , 14];
            return [4
            /*yield*/
            , queryRunner.release()];

          case 13:
            _a.sent();

            _a.label = 14;

          case 14:
            return [7
            /*endfinally*/
            ];

          case 15:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Executes built SQL query and returns entities and overall entities count (without limitation).
   * This method is useful to build pagination.
   */


  SelectQueryBuilder.prototype.getManyAndCount = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var queryRunner, transactionStartedByUs, entitiesAndRaw, count, results, error_4, rollbackError_4;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            if (this.expressionMap.lockMode === "optimistic") throw new _error_OptimisticLockCanNotBeUsedError__WEBPACK_IMPORTED_MODULE_6__["OptimisticLockCanNotBeUsedError"]();
            queryRunner = this.obtainQueryRunner();
            transactionStartedByUs = false;
            _a.label = 1;

          case 1:
            _a.trys.push([1, 8, 13, 16]);

            if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , queryRunner.startTransaction()];

          case 2:
            _a.sent();

            transactionStartedByUs = true;
            _a.label = 3;

          case 3:
            this.expressionMap.queryEntity = true;
            return [4
            /*yield*/
            , this.executeEntitiesAndRawResults(queryRunner)];

          case 4:
            entitiesAndRaw = _a.sent();
            this.expressionMap.queryEntity = false;
            return [4
            /*yield*/
            , this.executeCountQuery(queryRunner)];

          case 5:
            count = _a.sent();
            results = [entitiesAndRaw.entities, count];
            if (!transactionStartedByUs) return [3
            /*break*/
            , 7];
            return [4
            /*yield*/
            , queryRunner.commitTransaction()];

          case 6:
            _a.sent();

            _a.label = 7;

          case 7:
            return [2
            /*return*/
            , results];

          case 8:
            error_4 = _a.sent();
            if (!transactionStartedByUs) return [3
            /*break*/
            , 12];
            _a.label = 9;

          case 9:
            _a.trys.push([9, 11,, 12]);

            return [4
            /*yield*/
            , queryRunner.rollbackTransaction()];

          case 10:
            _a.sent();

            return [3
            /*break*/
            , 12];

          case 11:
            rollbackError_4 = _a.sent();
            return [3
            /*break*/
            , 12];

          case 12:
            throw error_4;

          case 13:
            if (!(queryRunner !== this.queryRunner)) return [3
            /*break*/
            , 15];
            return [4
            /*yield*/
            , queryRunner.release()];

          case 14:
            _a.sent();

            _a.label = 15;

          case 15:
            return [7
            /*endfinally*/
            ];

          case 16:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Executes built SQL query and returns raw data stream.
   */


  SelectQueryBuilder.prototype.stream = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _a, sql, parameters, queryRunner, transactionStartedByUs, releaseFn, results, error_5, rollbackError_5;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            this.expressionMap.queryEntity = false;
            _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](this.getQueryAndParameters(), 2), sql = _a[0], parameters = _a[1];
            queryRunner = this.obtainQueryRunner();
            transactionStartedByUs = false;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 6, 11, 14]);

            if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , queryRunner.startTransaction()];

          case 2:
            _b.sent();

            transactionStartedByUs = true;
            _b.label = 3;

          case 3:
            releaseFn = function releaseFn() {
              if (queryRunner !== _this.queryRunner) // means we created our own query runner
                return queryRunner.release();
              return;
            };

            results = queryRunner.stream(sql, parameters, releaseFn, releaseFn);
            if (!transactionStartedByUs) return [3
            /*break*/
            , 5];
            return [4
            /*yield*/
            , queryRunner.commitTransaction()];

          case 4:
            _b.sent();

            _b.label = 5;

          case 5:
            return [2
            /*return*/
            , results];

          case 6:
            error_5 = _b.sent();
            if (!transactionStartedByUs) return [3
            /*break*/
            , 10];
            _b.label = 7;

          case 7:
            _b.trys.push([7, 9,, 10]);

            return [4
            /*yield*/
            , queryRunner.rollbackTransaction()];

          case 8:
            _b.sent();

            return [3
            /*break*/
            , 10];

          case 9:
            rollbackError_5 = _b.sent();
            return [3
            /*break*/
            , 10];

          case 10:
            throw error_5;

          case 11:
            if (!(queryRunner !== this.queryRunner)) return [3
            /*break*/
            , 13];
            return [4
            /*yield*/
            , queryRunner.release()];

          case 12:
            _b.sent();

            _b.label = 13;

          case 13:
            return [7
            /*endfinally*/
            ];

          case 14:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Enables or disables query result caching.
   */


  SelectQueryBuilder.prototype.cache = function (enabledOrMillisecondsOrId, maybeMilliseconds) {
    if (typeof enabledOrMillisecondsOrId === "boolean") {
      this.expressionMap.cache = enabledOrMillisecondsOrId;
    } else if (typeof enabledOrMillisecondsOrId === "number") {
      this.expressionMap.cache = true;
      this.expressionMap.cacheDuration = enabledOrMillisecondsOrId;
    } else if (typeof enabledOrMillisecondsOrId === "string" || typeof enabledOrMillisecondsOrId === "number") {
      this.expressionMap.cache = true;
      this.expressionMap.cacheId = enabledOrMillisecondsOrId;
    }

    if (maybeMilliseconds) {
      this.expressionMap.cacheDuration = maybeMilliseconds;
    }

    return this;
  };
  /**
   * Sets extra options that can be used to configure how query builder works.
   */


  SelectQueryBuilder.prototype.setOption = function (option) {
    this.expressionMap.options.push(option);
    return this;
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------


  SelectQueryBuilder.prototype.join = function (direction, entityOrProperty, aliasName, condition, parameters, mapToProperty, isMappingMany) {
    this.setParameters(parameters || {});
    var joinAttribute = new _JoinAttribute__WEBPACK_IMPORTED_MODULE_7__["JoinAttribute"](this.connection, this.expressionMap);
    joinAttribute.direction = direction;
    joinAttribute.mapToProperty = mapToProperty;
    joinAttribute.isMappingMany = isMappingMany;
    joinAttribute.entityOrProperty = entityOrProperty; // relationName

    joinAttribute.condition = condition; // joinInverseSideCondition
    // joinAttribute.junctionAlias = joinAttribute.relation.isOwning ? parentAlias + "_" + destinationTableAlias : destinationTableAlias + "_" + parentAlias;

    this.expressionMap.joinAttributes.push(joinAttribute);

    if (joinAttribute.metadata) {
      // todo: find and set metadata right there?
      joinAttribute.alias = this.expressionMap.createAlias({
        type: "join",
        name: aliasName,
        metadata: joinAttribute.metadata
      });

      if (joinAttribute.relation && joinAttribute.relation.junctionEntityMetadata) {
        this.expressionMap.createAlias({
          type: "join",
          name: joinAttribute.junctionAlias,
          metadata: joinAttribute.relation.junctionEntityMetadata
        });
      }
    } else {
      var subQuery = "";

      if (entityOrProperty instanceof Function) {
        var subQueryBuilder = entityOrProperty(this.subQuery());
        this.setParameters(subQueryBuilder.getParameters());
        subQuery = subQueryBuilder.getQuery();
      } else {
        subQuery = entityOrProperty;
      }

      var isSubQuery = entityOrProperty instanceof Function || entityOrProperty.substr(0, 1) === "(" && entityOrProperty.substr(-1) === ")";
      joinAttribute.alias = this.expressionMap.createAlias({
        type: "join",
        name: aliasName,
        tablePath: isSubQuery === false ? entityOrProperty : undefined,
        subQuery: isSubQuery === true ? subQuery : undefined
      });
    }
  };
  /**
   * Creates "SELECT FROM" part of SQL query.
   */


  SelectQueryBuilder.prototype.createSelectExpression = function () {
    var _this = this;

    if (!this.expressionMap.mainAlias) throw new Error("Cannot build query because main alias is not set (call qb#from method)"); // todo throw exception if selects or from is missing

    var allSelects = [];
    var excludedSelects = [];

    if (this.expressionMap.mainAlias.hasMetadata) {
      var metadata = this.expressionMap.mainAlias.metadata;
      allSelects.push.apply(allSelects, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](this.buildEscapedEntityColumnSelects(this.expressionMap.mainAlias.name, metadata)));
      excludedSelects.push.apply(excludedSelects, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](this.findEntityColumnSelects(this.expressionMap.mainAlias.name, metadata)));
    } // add selects from joins


    this.expressionMap.joinAttributes.forEach(function (join) {
      if (join.metadata) {
        allSelects.push.apply(allSelects, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](_this.buildEscapedEntityColumnSelects(join.alias.name, join.metadata)));
        excludedSelects.push.apply(excludedSelects, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](_this.findEntityColumnSelects(join.alias.name, join.metadata)));
      } else {
        var hasMainAlias = _this.expressionMap.selects.some(function (select) {
          return select.selection === join.alias.name;
        });

        if (hasMainAlias) {
          allSelects.push({
            selection: _this.escape(join.alias.name) + ".*"
          });

          var excludedSelect = _this.expressionMap.selects.find(function (select) {
            return select.selection === join.alias.name;
          });

          excludedSelects.push(excludedSelect);
        }
      }
    }); // add all other selects

    this.expressionMap.selects.filter(function (select) {
      return excludedSelects.indexOf(select) === -1;
    }).forEach(function (select) {
      return allSelects.push({
        selection: _this.replacePropertyNames(select.selection),
        aliasName: select.aliasName
      });
    }); // if still selection is empty, then simply set it to all (*)

    if (allSelects.length === 0) allSelects.push({
      selection: "*"
    });
    var lock = "";

    if (this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["SqlServerDriver"]) {
      switch (this.expressionMap.lockMode) {
        case "pessimistic_read":
          lock = " WITH (HOLDLOCK, ROWLOCK)";
          break;

        case "pessimistic_write":
          lock = " WITH (UPDLOCK, ROWLOCK)";
          break;

        case "dirty_read":
          lock = " WITH (NOLOCK)";
          break;
      }
    } // create a selection query


    var froms = this.expressionMap.aliases.filter(function (alias) {
      return alias.type === "from" && (alias.tablePath || alias.subQuery);
    }).map(function (alias) {
      if (alias.subQuery) return alias.subQuery + " " + _this.escape(alias.name);
      return _this.getTableName(alias.tablePath) + " " + _this.escape(alias.name);
    });
    var select = this.createSelectDistinctExpression();
    var selection = allSelects.map(function (select) {
      return select.selection + (select.aliasName ? " AS " + _this.escape(select.aliasName) : "");
    }).join(", ");
    return select + selection + " FROM " + froms.join(", ") + lock;
  };
  /**
   * Creates select | select distinct part of SQL query.
   */


  SelectQueryBuilder.prototype.createSelectDistinctExpression = function () {
    var _this = this;

    var _a = this.expressionMap,
        selectDistinct = _a.selectDistinct,
        selectDistinctOn = _a.selectDistinctOn;
    var driver = this.connection.driver;
    var select = "SELECT ";

    if (driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["PostgresDriver"] && selectDistinctOn.length > 0) {
      var selectDistinctOnMap = selectDistinctOn.map(function (on) {
        return _this.replacePropertyNames(on);
      }).join(", ");
      select = "SELECT DISTINCT ON (" + selectDistinctOnMap + ") ";
    } else if (selectDistinct) {
      select = "SELECT DISTINCT ";
    }

    return select;
  };
  /**
   * Creates "JOIN" part of SQL query.
   */


  SelectQueryBuilder.prototype.createJoinExpression = function () {
    // examples:
    // select from owning side
    // qb.select("post")
    //     .leftJoinAndSelect("post.category", "category");
    // select from non-owning side
    // qb.select("category")
    //     .leftJoinAndSelect("category.post", "post");
    var _this = this;

    var joins = this.expressionMap.joinAttributes.map(function (joinAttr) {
      var relation = joinAttr.relation;
      var destinationTableName = joinAttr.tablePath;
      var destinationTableAlias = joinAttr.alias.name;
      var appendedCondition = joinAttr.condition ? " AND (" + joinAttr.condition + ")" : "";
      var parentAlias = joinAttr.parentAlias; // if join was build without relation (e.g. without "post.category") then it means that we have direct
      // table to join, without junction table involved. This means we simply join direct table.

      if (!parentAlias || !relation) {
        var destinationJoin = joinAttr.alias.subQuery ? joinAttr.alias.subQuery : _this.getTableName(destinationTableName);
        return " " + joinAttr.direction + " JOIN " + destinationJoin + " " + _this.escape(destinationTableAlias) + (joinAttr.condition ? " ON " + _this.replacePropertyNames(joinAttr.condition) : "");
      } // if real entity relation is involved


      if (relation.isManyToOne || relation.isOneToOneOwner) {
        // JOIN `category` `category` ON `category`.`id` = `post`.`categoryId`
        var condition = relation.joinColumns.map(function (joinColumn) {
          return destinationTableAlias + "." + joinColumn.referencedColumn.propertyPath + "=" + parentAlias + "." + relation.propertyPath + "." + joinColumn.referencedColumn.propertyPath;
        }).join(" AND ");
        return " " + joinAttr.direction + " JOIN " + _this.getTableName(destinationTableName) + " " + _this.escape(destinationTableAlias) + " ON " + _this.replacePropertyNames(condition + appendedCondition);
      } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {
        // JOIN `post` `post` ON `post`.`categoryId` = `category`.`id`
        var condition = relation.inverseRelation.joinColumns.map(function (joinColumn) {
          return destinationTableAlias + "." + relation.inverseRelation.propertyPath + "." + joinColumn.referencedColumn.propertyPath + "=" + parentAlias + "." + joinColumn.referencedColumn.propertyPath;
        }).join(" AND ");
        return " " + joinAttr.direction + " JOIN " + _this.getTableName(destinationTableName) + " " + _this.escape(destinationTableAlias) + " ON " + _this.replacePropertyNames(condition + appendedCondition);
      } else {
        // means many-to-many
        var junctionTableName = relation.junctionEntityMetadata.tablePath;
        var junctionAlias_1 = joinAttr.junctionAlias;
        var junctionCondition = "",
            destinationCondition = "";

        if (relation.isOwning) {
          junctionCondition = relation.joinColumns.map(function (joinColumn) {
            // `post_category`.`postId` = `post`.`id`
            return junctionAlias_1 + "." + joinColumn.propertyPath + "=" + parentAlias + "." + joinColumn.referencedColumn.propertyPath;
          }).join(" AND ");
          destinationCondition = relation.inverseJoinColumns.map(function (joinColumn) {
            // `category`.`id` = `post_category`.`categoryId`
            return destinationTableAlias + "." + joinColumn.referencedColumn.propertyPath + "=" + junctionAlias_1 + "." + joinColumn.propertyPath;
          }).join(" AND ");
        } else {
          junctionCondition = relation.inverseRelation.inverseJoinColumns.map(function (joinColumn) {
            // `post_category`.`categoryId` = `category`.`id`
            return junctionAlias_1 + "." + joinColumn.propertyPath + "=" + parentAlias + "." + joinColumn.referencedColumn.propertyPath;
          }).join(" AND ");
          destinationCondition = relation.inverseRelation.joinColumns.map(function (joinColumn) {
            // `post`.`id` = `post_category`.`postId`
            return destinationTableAlias + "." + joinColumn.referencedColumn.propertyPath + "=" + junctionAlias_1 + "." + joinColumn.propertyPath;
          }).join(" AND ");
        }

        return " " + joinAttr.direction + " JOIN " + _this.getTableName(junctionTableName) + " " + _this.escape(junctionAlias_1) + " ON " + _this.replacePropertyNames(junctionCondition) + " " + joinAttr.direction + " JOIN " + _this.getTableName(destinationTableName) + " " + _this.escape(destinationTableAlias) + " ON " + _this.replacePropertyNames(destinationCondition + appendedCondition);
      }
    });
    return joins.join(" ");
  };
  /**
   * Creates "GROUP BY" part of SQL query.
   */


  SelectQueryBuilder.prototype.createGroupByExpression = function () {
    if (!this.expressionMap.groupBys || !this.expressionMap.groupBys.length) return "";
    return " GROUP BY " + this.replacePropertyNames(this.expressionMap.groupBys.join(", "));
  };
  /**
   * Creates "ORDER BY" part of SQL query.
   */


  SelectQueryBuilder.prototype.createOrderByExpression = function () {
    var _this = this;

    var orderBys = this.expressionMap.allOrderBys;
    if (Object.keys(orderBys).length > 0) return " ORDER BY " + Object.keys(orderBys).map(function (columnName) {
      if (typeof orderBys[columnName] === "string") {
        return _this.replacePropertyNames(columnName) + " " + orderBys[columnName];
      } else {
        return _this.replacePropertyNames(columnName) + " " + orderBys[columnName].order + " " + orderBys[columnName].nulls;
      }
    }).join(", ");
    return "";
  };
  /**
   * Creates "LIMIT" and "OFFSET" parts of SQL query.
   */


  SelectQueryBuilder.prototype.createLimitOffsetExpression = function () {
    // in the case if nothing is joined in the query builder we don't need to make two requests to get paginated results
    // we can use regular limit / offset, that's why we add offset and limit construction here based on skip and take values
    var offset = this.expressionMap.offset,
        limit = this.expressionMap.limit;

    if (!offset && !limit && this.expressionMap.joinAttributes.length === 0) {
      offset = this.expressionMap.skip;
      limit = this.expressionMap.take;
    }

    if (this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["SqlServerDriver"]) {
      // Due to a limitation in SQL Server's parser implementation it does not support using
      // OFFSET or FETCH NEXT without an ORDER BY clause being provided. In cases where the
      // user does not request one we insert a dummy ORDER BY that does nothing and should
      // have no effect on the query planner or on the order of the results returned.
      // https://dba.stackexchange.com/a/193799
      var prefix = "";

      if ((limit || offset) && Object.keys(this.expressionMap.allOrderBys).length <= 0) {
        prefix = " ORDER BY (SELECT NULL)";
      }

      if (limit && offset) return prefix + " OFFSET " + offset + " ROWS FETCH NEXT " + limit + " ROWS ONLY";
      if (limit) return prefix + " OFFSET 0 ROWS FETCH NEXT " + limit + " ROWS ONLY";
      if (offset) return prefix + " OFFSET " + offset + " ROWS";
    } else if (this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["MysqlDriver"] || this.connection.driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_21__["AuroraDataApiDriver"] || this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["SapDriver"]) {
      if (limit && offset) return " LIMIT " + limit + " OFFSET " + offset;
      if (limit) return " LIMIT " + limit;
      if (offset) throw new _error_OffsetWithoutLimitNotSupportedError__WEBPACK_IMPORTED_MODULE_17__["OffsetWithoutLimitNotSupportedError"]();
    } else if (this.connection.driver instanceof _driver_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_16__["AbstractSqliteDriver"]) {
      if (limit && offset) return " LIMIT " + limit + " OFFSET " + offset;
      if (limit) return " LIMIT " + limit;
      if (offset) return " LIMIT -1 OFFSET " + offset;
    } else if (this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["OracleDriver"]) {
      if (limit && offset) return " OFFSET " + offset + " ROWS FETCH NEXT " + limit + " ROWS ONLY";
      if (limit) return " FETCH NEXT " + limit + " ROWS ONLY";
      if (offset) return " OFFSET " + offset + " ROWS";
    } else {
      if (limit && offset) return " LIMIT " + limit + " OFFSET " + offset;
      if (limit) return " LIMIT " + limit;
      if (offset) return " OFFSET " + offset;
    }

    return "";
  };
  /**
   * Creates "LOCK" part of SQL query.
   */


  SelectQueryBuilder.prototype.createLockExpression = function () {
    var driver = this.connection.driver;

    switch (this.expressionMap.lockMode) {
      case "pessimistic_read":
        if (driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["MysqlDriver"] || driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_21__["AuroraDataApiDriver"]) {
          return " LOCK IN SHARE MODE";
        } else if (driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["PostgresDriver"]) {
          return " FOR SHARE";
        } else if (driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["OracleDriver"]) {
          return " FOR UPDATE";
        } else if (driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["SqlServerDriver"]) {
          return "";
        } else {
          throw new _error_LockNotSupportedOnGivenDriverError__WEBPACK_IMPORTED_MODULE_15__["LockNotSupportedOnGivenDriverError"]();
        }

      case "pessimistic_write":
        if (driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["MysqlDriver"] || driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_21__["AuroraDataApiDriver"] || driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["PostgresDriver"] || driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["OracleDriver"]) {
          return " FOR UPDATE";
        } else if (driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["SqlServerDriver"]) {
          return "";
        } else {
          throw new _error_LockNotSupportedOnGivenDriverError__WEBPACK_IMPORTED_MODULE_15__["LockNotSupportedOnGivenDriverError"]();
        }

      default:
        return "";
    }
  };
  /**
   * Creates "HAVING" part of SQL query.
   */


  SelectQueryBuilder.prototype.createHavingExpression = function () {
    var _this = this;

    if (!this.expressionMap.havings || !this.expressionMap.havings.length) return "";
    var conditions = this.expressionMap.havings.map(function (having, index) {
      switch (having.type) {
        case "and":
          return (index > 0 ? "AND " : "") + _this.replacePropertyNames(having.condition);

        case "or":
          return (index > 0 ? "OR " : "") + _this.replacePropertyNames(having.condition);

        default:
          return _this.replacePropertyNames(having.condition);
      }
    }).join(" ");
    if (!conditions.length) return "";
    return " HAVING " + conditions;
  };

  SelectQueryBuilder.prototype.buildEscapedEntityColumnSelects = function (aliasName, metadata) {
    var _this = this;

    var hasMainAlias = this.expressionMap.selects.some(function (select) {
      return select.selection === aliasName;
    });
    var columns = [];

    if (hasMainAlias) {
      columns.push.apply(columns, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](metadata.columns.filter(function (column) {
        return column.isSelect === true;
      })));
    }

    columns.push.apply(columns, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](metadata.columns.filter(function (column) {
      return _this.expressionMap.selects.some(function (select) {
        return select.selection === aliasName + "." + column.propertyPath;
      });
    }))); // if user used partial selection and did not select some primary columns which are required to be selected
    // we select those primary columns and mark them as "virtual". Later virtual column values will be removed from final entity
    // to make entity contain exactly what user selected

    if (columns.length === 0) // however not in the case when nothing (even partial) was selected from this target (for example joins without selection)
      return [];
    var nonSelectedPrimaryColumns = this.expressionMap.queryEntity ? metadata.primaryColumns.filter(function (primaryColumn) {
      return columns.indexOf(primaryColumn) === -1;
    }) : [];

    var allColumns = tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](columns, nonSelectedPrimaryColumns);

    return allColumns.map(function (column) {
      var selection = _this.expressionMap.selects.find(function (select) {
        return select.selection === aliasName + "." + column.propertyPath;
      });

      var selectionPath = _this.escape(aliasName) + "." + _this.escape(column.databaseName);

      if (_this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {
        if (_this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["MysqlDriver"] || _this.connection.driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_21__["AuroraDataApiDriver"]) {
          var useLegacy = _this.connection.driver.options.legacySpatialSupport;
          var asText = useLegacy ? "AsText" : "ST_AsText";
          selectionPath = asText + "(" + selectionPath + ")";
        }

        if (_this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["PostgresDriver"]) // cast to JSON to trigger parsing in the driver
          selectionPath = "ST_AsGeoJSON(" + selectionPath + ")::json";
        if (_this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_1__["SqlServerDriver"]) selectionPath = selectionPath + ".ToString()";
      }

      return {
        selection: selectionPath,
        aliasName: selection && selection.aliasName ? selection.aliasName : _driver_DriverUtils__WEBPACK_IMPORTED_MODULE_20__["DriverUtils"].buildColumnAlias(_this.connection.driver, aliasName, column.databaseName),
        // todo: need to keep in mind that custom selection.aliasName breaks hydrator. fix it later!
        virtual: selection ? selection.virtual === true : hasMainAlias ? false : true
      };
    });
  };

  SelectQueryBuilder.prototype.findEntityColumnSelects = function (aliasName, metadata) {
    var mainSelect = this.expressionMap.selects.find(function (select) {
      return select.selection === aliasName;
    });
    if (mainSelect) return [mainSelect];
    return this.expressionMap.selects.filter(function (select) {
      return metadata.columns.some(function (column) {
        return select.selection === aliasName + "." + column.propertyPath;
      });
    });
  };

  SelectQueryBuilder.prototype.executeCountQuery = function (queryRunner) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var mainAlias, metadata, distinctAlias, countSql, results;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            mainAlias = this.expressionMap.mainAlias.name;
            metadata = this.expressionMap.mainAlias.metadata;
            distinctAlias = this.escape(mainAlias);
            countSql = "";

            if (metadata.hasMultiplePrimaryKeys) {
              if (this.connection.driver instanceof _driver_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_16__["AbstractSqliteDriver"]) {
                countSql = "COUNT(DISTINCT(" + metadata.primaryColumns.map(function (primaryColumn, index) {
                  var propertyName = _this.escape(primaryColumn.databaseName);

                  return distinctAlias + "." + propertyName;
                }).join(" || ") + ")) as \"cnt\"";
              } else {
                countSql = "COUNT(DISTINCT(CONCAT(" + metadata.primaryColumns.map(function (primaryColumn, index) {
                  var propertyName = _this.escape(primaryColumn.databaseName);

                  return distinctAlias + "." + propertyName;
                }).join(", ") + "))) as \"cnt\"";
              }
            } else {
              countSql = "COUNT(DISTINCT(" + metadata.primaryColumns.map(function (primaryColumn, index) {
                var propertyName = _this.escape(primaryColumn.databaseName);

                return distinctAlias + "." + propertyName;
              }).join(", ") + ")) as \"cnt\"";
            }

            return [4
            /*yield*/
            , this.clone().orderBy().groupBy().offset(undefined).limit(undefined).skip(undefined).take(undefined).select(countSql).setOption("disable-global-order").loadRawResults(queryRunner)];

          case 1:
            results = _a.sent();
            if (!results || !results[0] || !results[0]["cnt"]) return [2
            /*return*/
            , 0];
            return [2
            /*return*/
            , parseInt(results[0]["cnt"])];
        }
      });
    });
  };
  /**
   * Executes sql generated by query builder and returns object with raw results and entities created from them.
   */


  SelectQueryBuilder.prototype.executeEntitiesAndRawResults = function (queryRunner) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var metadata, relationIdLoader, relationCountLoader, relationIdMetadataTransformer, relationCountMetadataTransformer, rawResults, entities, _a, selects, orderBys_1, metadata_1, mainAliasName_1, querySelects, condition, parameters_1, ids, areAllNumbers, rawRelationIdResults, rawRelationCountResults, transformer, broadcastResult;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!this.expressionMap.mainAlias) throw new Error("Alias is not set. Use \"from\" method to set an alias.");
            if ((this.expressionMap.lockMode === "pessimistic_read" || this.expressionMap.lockMode === "pessimistic_write") && !queryRunner.isTransactionActive) throw new _error_PessimisticLockTransactionRequiredError__WEBPACK_IMPORTED_MODULE_3__["PessimisticLockTransactionRequiredError"]();

            if (this.expressionMap.lockMode === "optimistic") {
              metadata = this.expressionMap.mainAlias.metadata;
              if (!metadata.versionColumn && !metadata.updateDateColumn) throw new _error_NoVersionOrUpdateDateColumnError__WEBPACK_IMPORTED_MODULE_4__["NoVersionOrUpdateDateColumnError"](metadata.name);
            }

            relationIdLoader = new _relation_id_RelationIdLoader__WEBPACK_IMPORTED_MODULE_10__["RelationIdLoader"](this.connection, queryRunner, this.expressionMap.relationIdAttributes);
            relationCountLoader = new _relation_count_RelationCountLoader__WEBPACK_IMPORTED_MODULE_12__["RelationCountLoader"](this.connection, queryRunner, this.expressionMap.relationCountAttributes);
            relationIdMetadataTransformer = new _relation_id_RelationIdMetadataToAttributeTransformer__WEBPACK_IMPORTED_MODULE_11__["RelationIdMetadataToAttributeTransformer"](this.expressionMap);
            relationIdMetadataTransformer.transform();
            relationCountMetadataTransformer = new _relation_count_RelationCountMetadataToAttributeTransformer__WEBPACK_IMPORTED_MODULE_13__["RelationCountMetadataToAttributeTransformer"](this.expressionMap);
            relationCountMetadataTransformer.transform();
            rawResults = [], entities = [];
            if (!((this.expressionMap.skip || this.expressionMap.take) && this.expressionMap.joinAttributes.length > 0)) return [3
            /*break*/
            , 4];
            _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](this.createOrderByCombinedWithSelectExpression("distinctAlias"), 2), selects = _a[0], orderBys_1 = _a[1];
            metadata_1 = this.expressionMap.mainAlias.metadata;
            mainAliasName_1 = this.expressionMap.mainAlias.name;
            querySelects = metadata_1.primaryColumns.map(function (primaryColumn) {
              var distinctAlias = _this.escape("distinctAlias");

              var columnAlias = _this.escape(_driver_DriverUtils__WEBPACK_IMPORTED_MODULE_20__["DriverUtils"].buildColumnAlias(_this.connection.driver, mainAliasName_1, primaryColumn.databaseName));

              if (!orderBys_1[columnAlias]) // make sure we aren't overriding user-defined order in inverse direction
                orderBys_1[columnAlias] = "ASC";
              return distinctAlias + "." + columnAlias + " as \"ids_" + _driver_DriverUtils__WEBPACK_IMPORTED_MODULE_20__["DriverUtils"].buildColumnAlias(_this.connection.driver, mainAliasName_1, primaryColumn.databaseName) + "\"";
            });
            return [4
            /*yield*/
            , new SelectQueryBuilder(this.connection, queryRunner).select("DISTINCT " + querySelects.join(", ")).addSelect(selects).from("(" + this.clone().orderBy().getQuery() + ")", "distinctAlias").offset(this.expressionMap.skip).limit(this.expressionMap.take).orderBy(orderBys_1).cache(this.expressionMap.cache ? this.expressionMap.cache : this.expressionMap.cacheId, this.expressionMap.cacheDuration).setParameters(this.getParameters()).setNativeParameters(this.expressionMap.nativeParameters).getRawMany()];

          case 1:
            rawResults = _b.sent();
            if (!(rawResults.length > 0)) return [3
            /*break*/
            , 3];
            condition = "";
            parameters_1 = {};

            if (metadata_1.hasMultiplePrimaryKeys) {
              condition = rawResults.map(function (result, index) {
                return metadata_1.primaryColumns.map(function (primaryColumn) {
                  var paramKey = "orm_distinct_ids_" + index + "_" + primaryColumn.databaseName;
                  parameters_1[paramKey] = result["ids_" + mainAliasName_1 + "_" + primaryColumn.databaseName];
                  return mainAliasName_1 + "." + primaryColumn.propertyPath + "=:" + paramKey;
                }).join(" AND ");
              }).join(" OR ");
            } else {
              ids = rawResults.map(function (result) {
                return result["ids_" + _driver_DriverUtils__WEBPACK_IMPORTED_MODULE_20__["DriverUtils"].buildColumnAlias(_this.connection.driver, mainAliasName_1, metadata_1.primaryColumns[0].databaseName)];
              });
              areAllNumbers = ids.every(function (id) {
                return typeof id === "number";
              });

              if (areAllNumbers) {
                // fixes #190. if all numbers then its safe to perform query without parameter
                condition = mainAliasName_1 + "." + metadata_1.primaryColumns[0].propertyPath + " IN (" + ids.join(", ") + ")";
              } else {
                parameters_1["orm_distinct_ids"] = ids;
                condition = mainAliasName_1 + "." + metadata_1.primaryColumns[0].propertyPath + " IN (:...orm_distinct_ids)";
              }
            }

            return [4
            /*yield*/
            , this.clone().mergeExpressionMap({
              extraAppendedAndWhereCondition: condition
            }).setParameters(parameters_1).loadRawResults(queryRunner)];

          case 2:
            rawResults = _b.sent();
            _b.label = 3;

          case 3:
            return [3
            /*break*/
            , 6];

          case 4:
            return [4
            /*yield*/
            , this.loadRawResults(queryRunner)];

          case 5:
            rawResults = _b.sent();
            _b.label = 6;

          case 6:
            if (!(rawResults.length > 0)) return [3
            /*break*/
            , 10];
            return [4
            /*yield*/
            , relationIdLoader.load(rawResults)];

          case 7:
            rawRelationIdResults = _b.sent();
            return [4
            /*yield*/
            , relationCountLoader.load(rawResults)];

          case 8:
            rawRelationCountResults = _b.sent();
            transformer = new _transformer_RawSqlResultsToEntityTransformer__WEBPACK_IMPORTED_MODULE_2__["RawSqlResultsToEntityTransformer"](this.expressionMap, this.connection.driver, rawRelationIdResults, rawRelationCountResults, this.queryRunner);
            entities = transformer.transform(rawResults, this.expressionMap.mainAlias);
            if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3
            /*break*/
            , 10];
            broadcastResult = new _subscriber_BroadcasterResult__WEBPACK_IMPORTED_MODULE_18__["BroadcasterResult"]();
            queryRunner.broadcaster.broadcastLoadEventsForAll(broadcastResult, this.expressionMap.mainAlias.metadata, entities);
            if (!(broadcastResult.promises.length > 0)) return [3
            /*break*/
            , 10];
            return [4
            /*yield*/
            , Promise.all(broadcastResult.promises)];

          case 9:
            _b.sent();

            _b.label = 10;

          case 10:
            return [2
            /*return*/
            , {
              raw: rawResults,
              entities: entities
            }];
        }
      });
    });
  };

  SelectQueryBuilder.prototype.createOrderByCombinedWithSelectExpression = function (parentAlias) {
    var _this = this; // if table has a default order then apply it


    var orderBys = this.expressionMap.allOrderBys;
    var selectString = Object.keys(orderBys).map(function (orderCriteria) {
      if (orderCriteria.indexOf(".") !== -1) {
        var _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](orderCriteria.split("."), 2),
            aliasName = _a[0],
            propertyPath = _a[1];

        var alias = _this.expressionMap.findAliasByName(aliasName);

        var column = alias.metadata.findColumnWithPropertyName(propertyPath);
        return _this.escape(parentAlias) + "." + _this.escape(_driver_DriverUtils__WEBPACK_IMPORTED_MODULE_20__["DriverUtils"].buildColumnAlias(_this.connection.driver, aliasName, column.databaseName));
      } else {
        if (_this.expressionMap.selects.find(function (select) {
          return select.selection === orderCriteria || select.aliasName === orderCriteria;
        })) return _this.escape(parentAlias) + "." + orderCriteria;
        return "";
      }
    }).join(", ");
    var orderByObject = {};
    Object.keys(orderBys).forEach(function (orderCriteria) {
      if (orderCriteria.indexOf(".") !== -1) {
        var _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](orderCriteria.split("."), 2),
            aliasName = _a[0],
            propertyPath = _a[1];

        var alias = _this.expressionMap.findAliasByName(aliasName);

        var column = alias.metadata.findColumnWithPropertyName(propertyPath);
        orderByObject[_this.escape(parentAlias) + "." + _this.escape(_driver_DriverUtils__WEBPACK_IMPORTED_MODULE_20__["DriverUtils"].buildColumnAlias(_this.connection.driver, aliasName, column.databaseName))] = orderBys[orderCriteria];
      } else {
        if (_this.expressionMap.selects.find(function (select) {
          return select.selection === orderCriteria || select.aliasName === orderCriteria;
        })) {
          orderByObject[_this.escape(parentAlias) + "." + orderCriteria] = orderBys[orderCriteria];
        } else {
          orderByObject[orderCriteria] = orderBys[orderCriteria];
        }
      }
    });
    return [selectString, orderByObject];
  };
  /**
   * Loads raw results from the database.
   */


  SelectQueryBuilder.prototype.loadRawResults = function (queryRunner) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _a, sql, parameters, queryId, cacheOptions, savedQueryResultCacheOptions, results;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](this.getQueryAndParameters(), 2), sql = _a[0], parameters = _a[1];
            queryId = sql + " -- PARAMETERS: " + JSON.stringify(parameters);
            cacheOptions = typeof this.connection.options.cache === "object" ? this.connection.options.cache : {};
            savedQueryResultCacheOptions = undefined;
            if (!(this.connection.queryResultCache && (this.expressionMap.cache || cacheOptions.alwaysEnabled))) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , this.connection.queryResultCache.getFromCache({
              identifier: this.expressionMap.cacheId,
              query: queryId,
              duration: this.expressionMap.cacheDuration || cacheOptions.duration || 1000
            }, queryRunner)];

          case 1:
            savedQueryResultCacheOptions = _b.sent();
            if (savedQueryResultCacheOptions && !this.connection.queryResultCache.isExpired(savedQueryResultCacheOptions)) return [2
            /*return*/
            , JSON.parse(savedQueryResultCacheOptions.result)];
            _b.label = 2;

          case 2:
            return [4
            /*yield*/
            , queryRunner.query(sql, parameters)];

          case 3:
            results = _b.sent();
            if (!(this.connection.queryResultCache && (this.expressionMap.cache || cacheOptions.alwaysEnabled))) return [3
            /*break*/
            , 5];
            return [4
            /*yield*/
            , this.connection.queryResultCache.storeInCache({
              identifier: this.expressionMap.cacheId,
              query: queryId,
              time: new Date().getTime(),
              duration: this.expressionMap.cacheDuration || cacheOptions.duration || 1000,
              result: JSON.stringify(results)
            }, savedQueryResultCacheOptions, queryRunner)];

          case 4:
            _b.sent();

            _b.label = 5;

          case 5:
            return [2
            /*return*/
            , results];
        }
      });
    });
  };
  /**
   * Merges into expression map given expression map properties.
   */


  SelectQueryBuilder.prototype.mergeExpressionMap = function (expressionMap) {
    _util_ObjectUtils__WEBPACK_IMPORTED_MODULE_19__["ObjectUtils"].assign(this.expressionMap, expressionMap);
    return this;
  };
  /**
   * Normalizes a give number - converts to int if possible.
   */


  SelectQueryBuilder.prototype.normalizeNumber = function (num) {
    if (typeof num === "number" || num === undefined || num === null) return num;
    return Number(num);
  };
  /**
   * Creates a query builder used to execute sql queries inside this query builder.
   */


  SelectQueryBuilder.prototype.obtainQueryRunner = function () {
    return this.queryRunner || this.connection.createQueryRunner("slave");
  };

  return SelectQueryBuilder;
}(_QueryBuilder__WEBPACK_IMPORTED_MODULE_14__["QueryBuilder"]);



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/SoftDeleteQueryBuilder.js":
/*!******************************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/SoftDeleteQueryBuilder.js ***!
  \******************************************************************************/
/*! exports provided: SoftDeleteQueryBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SoftDeleteQueryBuilder", function() { return SoftDeleteQueryBuilder; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _driver_cockroachdb_CockroachDriver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../driver/cockroachdb/CockroachDriver */ "./node_modules/typeorm/browser/driver/cockroachdb/CockroachDriver.js");
/* harmony import */ var _QueryBuilder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./QueryBuilder */ "./node_modules/typeorm/browser/query-builder/QueryBuilder.js");
/* harmony import */ var _driver_sqlserver_SqlServerDriver__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../driver/sqlserver/SqlServerDriver */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");
/* harmony import */ var _result_UpdateResult__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./result/UpdateResult */ "./node_modules/typeorm/browser/query-builder/result/UpdateResult.js");
/* harmony import */ var _error_ReturningStatementNotSupportedError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/ReturningStatementNotSupportedError */ "./node_modules/typeorm/browser/error/ReturningStatementNotSupportedError.js");
/* harmony import */ var _ReturningResultsEntityUpdator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ReturningResultsEntityUpdator */ "./node_modules/typeorm/browser/query-builder/ReturningResultsEntityUpdator.js");
/* harmony import */ var _driver_sqljs_SqljsDriver__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../driver/sqljs/SqljsDriver */ "./node_modules/typeorm/browser/driver/sqljs/SqljsDriver.js");
/* harmony import */ var _subscriber_BroadcasterResult__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../subscriber/BroadcasterResult */ "./node_modules/typeorm/browser/subscriber/BroadcasterResult.js");
/* harmony import */ var _driver_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../driver/sqlite-abstract/AbstractSqliteDriver */ "./node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteDriver.js");
/* harmony import */ var _error_LimitOnUpdateNotSupportedError__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../error/LimitOnUpdateNotSupportedError */ "./node_modules/typeorm/browser/error/LimitOnUpdateNotSupportedError.js");
/* harmony import */ var _error_MissingDeleteDateColumnError__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../error/MissingDeleteDateColumnError */ "./node_modules/typeorm/browser/error/MissingDeleteDateColumnError.js");
/* harmony import */ var _error_UpdateValuesMissingError__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../error/UpdateValuesMissingError */ "./node_modules/typeorm/browser/error/UpdateValuesMissingError.js");
/* harmony import */ var _entity_schema_EntitySchema__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../entity-schema/EntitySchema */ "./node_modules/typeorm/browser/entity-schema/EntitySchema.js");

















/**
 * Allows to build complex sql queries in a fashion way and execute those queries.
 */

var SoftDeleteQueryBuilder =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](SoftDeleteQueryBuilder, _super); // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------


  function SoftDeleteQueryBuilder(connectionOrQueryBuilder, queryRunner) {
    var _this = _super.call(this, connectionOrQueryBuilder, queryRunner) || this;

    _this.expressionMap.aliasNamePrefixingEnabled = false;
    return _this;
  } // -------------------------------------------------------------------------
  // Public Implemented Methods
  // -------------------------------------------------------------------------

  /**
   * Gets generated sql query without parameters being replaced.
   */


  SoftDeleteQueryBuilder.prototype.getQuery = function () {
    var sql = this.createUpdateExpression();
    sql += this.createOrderByExpression();
    sql += this.createLimitExpression();
    return sql.trim();
  };
  /**
   * Executes sql generated by query builder and returns raw database results.
   */


  SoftDeleteQueryBuilder.prototype.execute = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var queryRunner, transactionStartedByUs, broadcastResult, returningResultsEntityUpdator, _a, sql, parameters, updateResult, result, driver, broadcastResult, error_1, rollbackError_1;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            queryRunner = this.obtainQueryRunner();
            transactionStartedByUs = false;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 13, 18, 23]);

            if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , queryRunner.startTransaction()];

          case 2:
            _b.sent();

            transactionStartedByUs = true;
            _b.label = 3;

          case 3:
            if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3
            /*break*/
            , 5];
            broadcastResult = new _subscriber_BroadcasterResult__WEBPACK_IMPORTED_MODULE_8__["BroadcasterResult"]();
            queryRunner.broadcaster.broadcastBeforeUpdateEvent(broadcastResult, this.expressionMap.mainAlias.metadata);
            if (!(broadcastResult.promises.length > 0)) return [3
            /*break*/
            , 5];
            return [4
            /*yield*/
            , Promise.all(broadcastResult.promises)];

          case 4:
            _b.sent();

            _b.label = 5;

          case 5:
            returningResultsEntityUpdator = new _ReturningResultsEntityUpdator__WEBPACK_IMPORTED_MODULE_6__["ReturningResultsEntityUpdator"](queryRunner, this.expressionMap);

            if (this.expressionMap.updateEntity === true && this.expressionMap.mainAlias.hasMetadata && this.expressionMap.whereEntities.length > 0) {
              this.expressionMap.extraReturningColumns = returningResultsEntityUpdator.getUpdationReturningColumns();
            }

            _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](this.getQueryAndParameters(), 2), sql = _a[0], parameters = _a[1];
            updateResult = new _result_UpdateResult__WEBPACK_IMPORTED_MODULE_4__["UpdateResult"]();
            return [4
            /*yield*/
            , queryRunner.query(sql, parameters)];

          case 6:
            result = _b.sent();
            driver = queryRunner.connection.driver;

            if (driver instanceof _driver_sqlserver_SqlServerDriver__WEBPACK_IMPORTED_MODULE_3__["PostgresDriver"]) {
              updateResult.raw = result[0];
              updateResult.affected = result[1];
            } else {
              updateResult.raw = result;
            }

            if (!(this.expressionMap.updateEntity === true && this.expressionMap.mainAlias.hasMetadata && this.expressionMap.whereEntities.length > 0)) return [3
            /*break*/
            , 8];
            return [4
            /*yield*/
            , returningResultsEntityUpdator.update(updateResult, this.expressionMap.whereEntities)];

          case 7:
            _b.sent();

            _b.label = 8;

          case 8:
            if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3
            /*break*/
            , 10];
            broadcastResult = new _subscriber_BroadcasterResult__WEBPACK_IMPORTED_MODULE_8__["BroadcasterResult"]();
            queryRunner.broadcaster.broadcastAfterUpdateEvent(broadcastResult, this.expressionMap.mainAlias.metadata);
            if (!(broadcastResult.promises.length > 0)) return [3
            /*break*/
            , 10];
            return [4
            /*yield*/
            , Promise.all(broadcastResult.promises)];

          case 9:
            _b.sent();

            _b.label = 10;

          case 10:
            if (!transactionStartedByUs) return [3
            /*break*/
            , 12];
            return [4
            /*yield*/
            , queryRunner.commitTransaction()];

          case 11:
            _b.sent();

            _b.label = 12;

          case 12:
            return [2
            /*return*/
            , updateResult];

          case 13:
            error_1 = _b.sent();
            if (!transactionStartedByUs) return [3
            /*break*/
            , 17];
            _b.label = 14;

          case 14:
            _b.trys.push([14, 16,, 17]);

            return [4
            /*yield*/
            , queryRunner.rollbackTransaction()];

          case 15:
            _b.sent();

            return [3
            /*break*/
            , 17];

          case 16:
            rollbackError_1 = _b.sent();
            return [3
            /*break*/
            , 17];

          case 17:
            throw error_1;

          case 18:
            if (!(queryRunner !== this.queryRunner)) return [3
            /*break*/
            , 20];
            return [4
            /*yield*/
            , queryRunner.release()];

          case 19:
            _b.sent();

            _b.label = 20;

          case 20:
            if (!(this.connection.driver instanceof _driver_sqljs_SqljsDriver__WEBPACK_IMPORTED_MODULE_7__["SqljsDriver"] && !queryRunner.isTransactionActive)) return [3
            /*break*/
            , 22];
            return [4
            /*yield*/
            , this.connection.driver.autoSave()];

          case 21:
            _b.sent();

            _b.label = 22;

          case 22:
            return [7
            /*endfinally*/
            ];

          case 23:
            return [2
            /*return*/
            ];
        }
      });
    });
  }; // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Specifies FROM which entity's table select/update/delete/soft-delete will be executed.
   * Also sets a main string alias of the selection data.
   */


  SoftDeleteQueryBuilder.prototype.from = function (entityTarget, aliasName) {
    entityTarget = entityTarget instanceof _entity_schema_EntitySchema__WEBPACK_IMPORTED_MODULE_13__["EntitySchema"] ? entityTarget.options.name : entityTarget;
    var mainAlias = this.createFromAlias(entityTarget, aliasName);
    this.expressionMap.setMainAlias(mainAlias);
    return this;
  };
  /**
   * Sets WHERE condition in the query builder.
   * If you had previously WHERE expression defined,
   * calling this function will override previously set WHERE conditions.
   * Additionally you can add parameters used in where expression.
   */


  SoftDeleteQueryBuilder.prototype.where = function (where, parameters) {
    this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions

    var condition = this.computeWhereParameter(where);
    if (condition) this.expressionMap.wheres = [{
      type: "simple",
      condition: condition
    }];
    if (parameters) this.setParameters(parameters);
    return this;
  };
  /**
   * Adds new AND WHERE condition in the query builder.
   * Additionally you can add parameters used in where expression.
   */


  SoftDeleteQueryBuilder.prototype.andWhere = function (where, parameters) {
    this.expressionMap.wheres.push({
      type: "and",
      condition: this.computeWhereParameter(where)
    });
    if (parameters) this.setParameters(parameters);
    return this;
  };
  /**
   * Adds new OR WHERE condition in the query builder.
   * Additionally you can add parameters used in where expression.
   */


  SoftDeleteQueryBuilder.prototype.orWhere = function (where, parameters) {
    this.expressionMap.wheres.push({
      type: "or",
      condition: this.computeWhereParameter(where)
    });
    if (parameters) this.setParameters(parameters);
    return this;
  };
  /**
   * Adds new AND WHERE with conditions for the given ids.
   */


  SoftDeleteQueryBuilder.prototype.whereInIds = function (ids) {
    return this.where(this.createWhereIdsExpression(ids));
  };
  /**
   * Adds new AND WHERE with conditions for the given ids.
   */


  SoftDeleteQueryBuilder.prototype.andWhereInIds = function (ids) {
    return this.andWhere(this.createWhereIdsExpression(ids));
  };
  /**
   * Adds new OR WHERE with conditions for the given ids.
   */


  SoftDeleteQueryBuilder.prototype.orWhereInIds = function (ids) {
    return this.orWhere(this.createWhereIdsExpression(ids));
  };
  /**
   * Optional returning/output clause.
   */


  SoftDeleteQueryBuilder.prototype.output = function (output) {
    return this.returning(output);
  };
  /**
   * Optional returning/output clause.
   */


  SoftDeleteQueryBuilder.prototype.returning = function (returning) {
    // not all databases support returning/output cause
    if (!this.connection.driver.isReturningSqlSupported()) throw new _error_ReturningStatementNotSupportedError__WEBPACK_IMPORTED_MODULE_5__["ReturningStatementNotSupportedError"]();
    this.expressionMap.returning = returning;
    return this;
  };
  /**
   * Sets ORDER BY condition in the query builder.
   * If you had previously ORDER BY expression defined,
   * calling this function will override previously set ORDER BY conditions.
   */


  SoftDeleteQueryBuilder.prototype.orderBy = function (sort, order, nulls) {
    if (order === void 0) {
      order = "ASC";
    }

    var _a, _b;

    if (sort) {
      if (sort instanceof Object) {
        this.expressionMap.orderBys = sort;
      } else {
        if (nulls) {
          this.expressionMap.orderBys = (_a = {}, _a[sort] = {
            order: order,
            nulls: nulls
          }, _a);
        } else {
          this.expressionMap.orderBys = (_b = {}, _b[sort] = order, _b);
        }
      }
    } else {
      this.expressionMap.orderBys = {};
    }

    return this;
  };
  /**
   * Adds ORDER BY condition in the query builder.
   */


  SoftDeleteQueryBuilder.prototype.addOrderBy = function (sort, order, nulls) {
    if (order === void 0) {
      order = "ASC";
    }

    if (nulls) {
      this.expressionMap.orderBys[sort] = {
        order: order,
        nulls: nulls
      };
    } else {
      this.expressionMap.orderBys[sort] = order;
    }

    return this;
  };
  /**
   * Sets LIMIT - maximum number of rows to be selected.
   */


  SoftDeleteQueryBuilder.prototype.limit = function (limit) {
    this.expressionMap.limit = limit;
    return this;
  };
  /**
   * Indicates if entity must be updated after update operation.
   * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).
   * Enabled by default.
   */


  SoftDeleteQueryBuilder.prototype.whereEntity = function (entity) {
    var _this = this;

    if (!this.expressionMap.mainAlias.hasMetadata) throw new Error(".whereEntity method can only be used on queries which update real entity table.");
    this.expressionMap.wheres = [];
    var entities = entity instanceof Array ? entity : [entity];
    entities.forEach(function (entity) {
      var entityIdMap = _this.expressionMap.mainAlias.metadata.getEntityIdMap(entity);

      if (!entityIdMap) throw new Error("Provided entity does not have ids set, cannot perform operation.");

      _this.orWhereInIds(entityIdMap);
    });
    this.expressionMap.whereEntities = entities;
    return this;
  };
  /**
   * Indicates if entity must be updated after update operation.
   * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).
   * Enabled by default.
   */


  SoftDeleteQueryBuilder.prototype.updateEntity = function (enabled) {
    this.expressionMap.updateEntity = enabled;
    return this;
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Creates UPDATE express used to perform insert query.
   */


  SoftDeleteQueryBuilder.prototype.createUpdateExpression = function () {
    var metadata = this.expressionMap.mainAlias.hasMetadata ? this.expressionMap.mainAlias.metadata : undefined;
    if (!metadata) throw new Error("Cannot get entity metadata for the given alias \"" + this.expressionMap.mainAlias + "\"");

    if (!metadata.deleteDateColumn) {
      throw new _error_MissingDeleteDateColumnError__WEBPACK_IMPORTED_MODULE_11__["MissingDeleteDateColumnError"](metadata);
    } // prepare columns and values to be updated


    var updateColumnAndValues = [];
    var newParameters = {};

    switch (this.expressionMap.queryType) {
      case "soft-delete":
        updateColumnAndValues.push(this.escape(metadata.deleteDateColumn.databaseName) + " = CURRENT_TIMESTAMP");
        break;

      case "restore":
        updateColumnAndValues.push(this.escape(metadata.deleteDateColumn.databaseName) + " = NULL");
        break;

      default:
        throw new Error("The queryType must be \"soft-delete\" or \"restore\"");
    }

    if (metadata.versionColumn) updateColumnAndValues.push(this.escape(metadata.versionColumn.databaseName) + " = " + this.escape(metadata.versionColumn.databaseName) + " + 1");
    if (metadata.updateDateColumn) updateColumnAndValues.push(this.escape(metadata.updateDateColumn.databaseName) + " = CURRENT_TIMESTAMP"); // todo: fix issue with CURRENT_TIMESTAMP(6) being used, can "DEFAULT" be used?!

    if (updateColumnAndValues.length <= 0) {
      throw new _error_UpdateValuesMissingError__WEBPACK_IMPORTED_MODULE_12__["UpdateValuesMissingError"]();
    } // we re-write parameters this way because we want our "UPDATE ... SET" parameters to be first in the list of "nativeParameters"
    // because some drivers like mysql depend on order of parameters


    if (this.connection.driver instanceof _driver_sqlserver_SqlServerDriver__WEBPACK_IMPORTED_MODULE_3__["MysqlDriver"] || this.connection.driver instanceof _driver_sqlserver_SqlServerDriver__WEBPACK_IMPORTED_MODULE_3__["OracleDriver"] || this.connection.driver instanceof _driver_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_9__["AbstractSqliteDriver"]) {
      this.expressionMap.nativeParameters = Object.assign(newParameters, this.expressionMap.nativeParameters);
    } // get a table name and all column database names


    var whereExpression = this.createWhereExpression();
    var returningExpression = this.createReturningExpression(); // generate and return sql update query

    if (returningExpression && (this.connection.driver instanceof _driver_sqlserver_SqlServerDriver__WEBPACK_IMPORTED_MODULE_3__["PostgresDriver"] || this.connection.driver instanceof _driver_sqlserver_SqlServerDriver__WEBPACK_IMPORTED_MODULE_3__["OracleDriver"] || this.connection.driver instanceof _driver_cockroachdb_CockroachDriver__WEBPACK_IMPORTED_MODULE_1__["CockroachDriver"])) {
      return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + whereExpression + " RETURNING " + returningExpression;
    } else if (returningExpression && this.connection.driver instanceof _driver_sqlserver_SqlServerDriver__WEBPACK_IMPORTED_MODULE_3__["SqlServerDriver"]) {
      return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + " OUTPUT " + returningExpression + whereExpression;
    } else {
      return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + whereExpression; // todo: how do we replace aliases in where to nothing?
    }
  };
  /**
   * Creates "ORDER BY" part of SQL query.
   */


  SoftDeleteQueryBuilder.prototype.createOrderByExpression = function () {
    var _this = this;

    var orderBys = this.expressionMap.orderBys;
    if (Object.keys(orderBys).length > 0) return " ORDER BY " + Object.keys(orderBys).map(function (columnName) {
      if (typeof orderBys[columnName] === "string") {
        return _this.replacePropertyNames(columnName) + " " + orderBys[columnName];
      } else {
        return _this.replacePropertyNames(columnName) + " " + orderBys[columnName].order + " " + orderBys[columnName].nulls;
      }
    }).join(", ");
    return "";
  };
  /**
   * Creates "LIMIT" parts of SQL query.
   */


  SoftDeleteQueryBuilder.prototype.createLimitExpression = function () {
    var limit = this.expressionMap.limit;

    if (limit) {
      if (this.connection.driver instanceof _driver_sqlserver_SqlServerDriver__WEBPACK_IMPORTED_MODULE_3__["MysqlDriver"]) {
        return " LIMIT " + limit;
      } else {
        throw new _error_LimitOnUpdateNotSupportedError__WEBPACK_IMPORTED_MODULE_10__["LimitOnUpdateNotSupportedError"]();
      }
    }

    return "";
  };

  return SoftDeleteQueryBuilder;
}(_QueryBuilder__WEBPACK_IMPORTED_MODULE_2__["QueryBuilder"]);



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/UpdateQueryBuilder.js":
/*!**************************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/UpdateQueryBuilder.js ***!
  \**************************************************************************/
/*! exports provided: UpdateQueryBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UpdateQueryBuilder", function() { return UpdateQueryBuilder; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _driver_cockroachdb_CockroachDriver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../driver/cockroachdb/CockroachDriver */ "./node_modules/typeorm/browser/driver/cockroachdb/CockroachDriver.js");
/* harmony import */ var _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../driver/sap/SapDriver */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");
/* harmony import */ var _QueryBuilder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./QueryBuilder */ "./node_modules/typeorm/browser/query-builder/QueryBuilder.js");
/* harmony import */ var _metadata_EntityMetadata__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../metadata/EntityMetadata */ "./node_modules/typeorm/browser/metadata/EntityMetadata.js");
/* harmony import */ var _result_UpdateResult__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./result/UpdateResult */ "./node_modules/typeorm/browser/query-builder/result/UpdateResult.js");
/* harmony import */ var _error_ReturningStatementNotSupportedError__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../error/ReturningStatementNotSupportedError */ "./node_modules/typeorm/browser/error/ReturningStatementNotSupportedError.js");
/* harmony import */ var _ReturningResultsEntityUpdator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ReturningResultsEntityUpdator */ "./node_modules/typeorm/browser/query-builder/ReturningResultsEntityUpdator.js");
/* harmony import */ var _driver_sqljs_SqljsDriver__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../driver/sqljs/SqljsDriver */ "./node_modules/typeorm/browser/driver/sqljs/SqljsDriver.js");
/* harmony import */ var _subscriber_BroadcasterResult__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../subscriber/BroadcasterResult */ "./node_modules/typeorm/browser/subscriber/BroadcasterResult.js");
/* harmony import */ var _driver_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../driver/sqlite-abstract/AbstractSqliteDriver */ "./node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteDriver.js");
/* harmony import */ var _error_LimitOnUpdateNotSupportedError__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../error/LimitOnUpdateNotSupportedError */ "./node_modules/typeorm/browser/error/LimitOnUpdateNotSupportedError.js");
/* harmony import */ var _error_UpdateValuesMissingError__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../error/UpdateValuesMissingError */ "./node_modules/typeorm/browser/error/UpdateValuesMissingError.js");
/* harmony import */ var _error_EntityColumnNotFound__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../error/EntityColumnNotFound */ "./node_modules/typeorm/browser/error/EntityColumnNotFound.js");
/* harmony import */ var _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../driver/aurora-data-api/AuroraDataApiDriver */ "./node_modules/typeorm/browser/driver/aurora-data-api/AuroraDataApiDriver.js");



















/**
 * Allows to build complex sql queries in a fashion way and execute those queries.
 */

var UpdateQueryBuilder =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](UpdateQueryBuilder, _super); // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------


  function UpdateQueryBuilder(connectionOrQueryBuilder, queryRunner) {
    var _this = _super.call(this, connectionOrQueryBuilder, queryRunner) || this;

    _this.expressionMap.aliasNamePrefixingEnabled = false;
    return _this;
  } // -------------------------------------------------------------------------
  // Public Implemented Methods
  // -------------------------------------------------------------------------

  /**
   * Gets generated sql query without parameters being replaced.
   */


  UpdateQueryBuilder.prototype.getQuery = function () {
    var sql = this.createUpdateExpression();
    sql += this.createOrderByExpression();
    sql += this.createLimitExpression();
    return sql.trim();
  };
  /**
   * Executes sql generated by query builder and returns raw database results.
   */


  UpdateQueryBuilder.prototype.execute = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var queryRunner, transactionStartedByUs, broadcastResult, declareSql, selectOutputSql, returningResultsEntityUpdator, _a, updateSql, parameters, updateResult, statements, result, broadcastResult, error_1, rollbackError_1;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            queryRunner = this.obtainQueryRunner();
            transactionStartedByUs = false;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 13, 18, 23]);

            if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , queryRunner.startTransaction()];

          case 2:
            _b.sent();

            transactionStartedByUs = true;
            _b.label = 3;

          case 3:
            if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3
            /*break*/
            , 5];
            broadcastResult = new _subscriber_BroadcasterResult__WEBPACK_IMPORTED_MODULE_9__["BroadcasterResult"]();
            queryRunner.broadcaster.broadcastBeforeUpdateEvent(broadcastResult, this.expressionMap.mainAlias.metadata, this.expressionMap.valuesSet);
            if (!(broadcastResult.promises.length > 0)) return [3
            /*break*/
            , 5];
            return [4
            /*yield*/
            , Promise.all(broadcastResult.promises)];

          case 4:
            _b.sent();

            _b.label = 5;

          case 5:
            declareSql = null;
            selectOutputSql = null;
            returningResultsEntityUpdator = new _ReturningResultsEntityUpdator__WEBPACK_IMPORTED_MODULE_7__["ReturningResultsEntityUpdator"](queryRunner, this.expressionMap);

            if (this.expressionMap.updateEntity === true && this.expressionMap.mainAlias.hasMetadata && this.expressionMap.whereEntities.length > 0) {
              this.expressionMap.extraReturningColumns = returningResultsEntityUpdator.getUpdationReturningColumns();

              if (this.expressionMap.extraReturningColumns.length > 0 && this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["SqlServerDriver"]) {
                declareSql = this.connection.driver.buildTableVariableDeclaration("@OutputTable", this.expressionMap.extraReturningColumns);
                selectOutputSql = "SELECT * FROM @OutputTable";
              }
            }

            _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](this.getQueryAndParameters(), 2), updateSql = _a[0], parameters = _a[1];
            updateResult = new _result_UpdateResult__WEBPACK_IMPORTED_MODULE_5__["UpdateResult"]();
            statements = [declareSql, updateSql, selectOutputSql];
            return [4
            /*yield*/
            , queryRunner.query(statements.filter(function (sql) {
              return sql != null;
            }).join(";\n\n"), parameters)];

          case 6:
            result = _b.sent();

            if (this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["PostgresDriver"]) {
              updateResult.raw = result[0];
              updateResult.affected = result[1];
            } else {
              updateResult.raw = result;
            }

            if (!(this.expressionMap.updateEntity === true && this.expressionMap.mainAlias.hasMetadata && this.expressionMap.whereEntities.length > 0)) return [3
            /*break*/
            , 8];
            return [4
            /*yield*/
            , returningResultsEntityUpdator.update(updateResult, this.expressionMap.whereEntities)];

          case 7:
            _b.sent();

            _b.label = 8;

          case 8:
            if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3
            /*break*/
            , 10];
            broadcastResult = new _subscriber_BroadcasterResult__WEBPACK_IMPORTED_MODULE_9__["BroadcasterResult"]();
            queryRunner.broadcaster.broadcastAfterUpdateEvent(broadcastResult, this.expressionMap.mainAlias.metadata);
            if (!(broadcastResult.promises.length > 0)) return [3
            /*break*/
            , 10];
            return [4
            /*yield*/
            , Promise.all(broadcastResult.promises)];

          case 9:
            _b.sent();

            _b.label = 10;

          case 10:
            if (!transactionStartedByUs) return [3
            /*break*/
            , 12];
            return [4
            /*yield*/
            , queryRunner.commitTransaction()];

          case 11:
            _b.sent();

            _b.label = 12;

          case 12:
            return [2
            /*return*/
            , updateResult];

          case 13:
            error_1 = _b.sent();
            if (!transactionStartedByUs) return [3
            /*break*/
            , 17];
            _b.label = 14;

          case 14:
            _b.trys.push([14, 16,, 17]);

            return [4
            /*yield*/
            , queryRunner.rollbackTransaction()];

          case 15:
            _b.sent();

            return [3
            /*break*/
            , 17];

          case 16:
            rollbackError_1 = _b.sent();
            return [3
            /*break*/
            , 17];

          case 17:
            throw error_1;

          case 18:
            if (!(queryRunner !== this.queryRunner)) return [3
            /*break*/
            , 20];
            return [4
            /*yield*/
            , queryRunner.release()];

          case 19:
            _b.sent();

            _b.label = 20;

          case 20:
            if (!(this.connection.driver instanceof _driver_sqljs_SqljsDriver__WEBPACK_IMPORTED_MODULE_8__["SqljsDriver"] && !queryRunner.isTransactionActive)) return [3
            /*break*/
            , 22];
            return [4
            /*yield*/
            , this.connection.driver.autoSave()];

          case 21:
            _b.sent();

            _b.label = 22;

          case 22:
            return [7
            /*endfinally*/
            ];

          case 23:
            return [2
            /*return*/
            ];
        }
      });
    });
  }; // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Values needs to be updated.
   */


  UpdateQueryBuilder.prototype.set = function (values) {
    this.expressionMap.valuesSet = values;
    return this;
  };
  /**
   * Sets WHERE condition in the query builder.
   * If you had previously WHERE expression defined,
   * calling this function will override previously set WHERE conditions.
   * Additionally you can add parameters used in where expression.
   */


  UpdateQueryBuilder.prototype.where = function (where, parameters) {
    this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions

    var condition = this.computeWhereParameter(where);
    if (condition) this.expressionMap.wheres = [{
      type: "simple",
      condition: condition
    }];
    if (parameters) this.setParameters(parameters);
    return this;
  };
  /**
   * Adds new AND WHERE condition in the query builder.
   * Additionally you can add parameters used in where expression.
   */


  UpdateQueryBuilder.prototype.andWhere = function (where, parameters) {
    this.expressionMap.wheres.push({
      type: "and",
      condition: this.computeWhereParameter(where)
    });
    if (parameters) this.setParameters(parameters);
    return this;
  };
  /**
   * Adds new OR WHERE condition in the query builder.
   * Additionally you can add parameters used in where expression.
   */


  UpdateQueryBuilder.prototype.orWhere = function (where, parameters) {
    this.expressionMap.wheres.push({
      type: "or",
      condition: this.computeWhereParameter(where)
    });
    if (parameters) this.setParameters(parameters);
    return this;
  };
  /**
   * Adds new AND WHERE with conditions for the given ids.
   */


  UpdateQueryBuilder.prototype.whereInIds = function (ids) {
    return this.where(this.createWhereIdsExpression(ids));
  };
  /**
   * Adds new AND WHERE with conditions for the given ids.
   */


  UpdateQueryBuilder.prototype.andWhereInIds = function (ids) {
    return this.andWhere(this.createWhereIdsExpression(ids));
  };
  /**
   * Adds new OR WHERE with conditions for the given ids.
   */


  UpdateQueryBuilder.prototype.orWhereInIds = function (ids) {
    return this.orWhere(this.createWhereIdsExpression(ids));
  };
  /**
   * Optional returning/output clause.
   */


  UpdateQueryBuilder.prototype.output = function (output) {
    return this.returning(output);
  };
  /**
   * Optional returning/output clause.
   */


  UpdateQueryBuilder.prototype.returning = function (returning) {
    // not all databases support returning/output cause
    if (!this.connection.driver.isReturningSqlSupported()) throw new _error_ReturningStatementNotSupportedError__WEBPACK_IMPORTED_MODULE_6__["ReturningStatementNotSupportedError"]();
    this.expressionMap.returning = returning;
    return this;
  };
  /**
   * Sets ORDER BY condition in the query builder.
   * If you had previously ORDER BY expression defined,
   * calling this function will override previously set ORDER BY conditions.
   */


  UpdateQueryBuilder.prototype.orderBy = function (sort, order, nulls) {
    if (order === void 0) {
      order = "ASC";
    }

    var _a, _b;

    if (sort) {
      if (sort instanceof Object) {
        this.expressionMap.orderBys = sort;
      } else {
        if (nulls) {
          this.expressionMap.orderBys = (_a = {}, _a[sort] = {
            order: order,
            nulls: nulls
          }, _a);
        } else {
          this.expressionMap.orderBys = (_b = {}, _b[sort] = order, _b);
        }
      }
    } else {
      this.expressionMap.orderBys = {};
    }

    return this;
  };
  /**
   * Adds ORDER BY condition in the query builder.
   */


  UpdateQueryBuilder.prototype.addOrderBy = function (sort, order, nulls) {
    if (order === void 0) {
      order = "ASC";
    }

    if (nulls) {
      this.expressionMap.orderBys[sort] = {
        order: order,
        nulls: nulls
      };
    } else {
      this.expressionMap.orderBys[sort] = order;
    }

    return this;
  };
  /**
   * Sets LIMIT - maximum number of rows to be selected.
   */


  UpdateQueryBuilder.prototype.limit = function (limit) {
    this.expressionMap.limit = limit;
    return this;
  };
  /**
   * Indicates if entity must be updated after update operation.
   * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).
   * Enabled by default.
   */


  UpdateQueryBuilder.prototype.whereEntity = function (entity) {
    var _this = this;

    if (!this.expressionMap.mainAlias.hasMetadata) throw new Error(".whereEntity method can only be used on queries which update real entity table.");
    this.expressionMap.wheres = [];
    var entities = Array.isArray(entity) ? entity : [entity];
    entities.forEach(function (entity) {
      var entityIdMap = _this.expressionMap.mainAlias.metadata.getEntityIdMap(entity);

      if (!entityIdMap) throw new Error("Provided entity does not have ids set, cannot perform operation.");

      _this.orWhereInIds(entityIdMap);
    });
    this.expressionMap.whereEntities = entities;
    return this;
  };
  /**
   * Indicates if entity must be updated after update operation.
   * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).
   * Enabled by default.
   */


  UpdateQueryBuilder.prototype.updateEntity = function (enabled) {
    this.expressionMap.updateEntity = enabled;
    return this;
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Creates UPDATE express used to perform insert query.
   */


  UpdateQueryBuilder.prototype.createUpdateExpression = function () {
    var _this = this;

    var valuesSet = this.getValueSet();
    var metadata = this.expressionMap.mainAlias.hasMetadata ? this.expressionMap.mainAlias.metadata : undefined; // prepare columns and values to be updated

    var updateColumnAndValues = [];
    var newParameters = {};
    var parametersCount = this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["MysqlDriver"] || this.connection.driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_14__["AuroraDataApiDriver"] || this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["OracleDriver"] || this.connection.driver instanceof _driver_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_10__["AbstractSqliteDriver"] || this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["SapDriver"] ? 0 : Object.keys(this.expressionMap.nativeParameters).length;

    if (metadata) {
      _metadata_EntityMetadata__WEBPACK_IMPORTED_MODULE_4__["EntityMetadata"].createPropertyPath(metadata, valuesSet).forEach(function (propertyPath) {
        // todo: make this and other query builder to work with properly with tables without metadata
        var columns = metadata.findColumnsWithPropertyPath(propertyPath);

        if (columns.length <= 0) {
          throw new _error_EntityColumnNotFound__WEBPACK_IMPORTED_MODULE_13__["EntityColumnNotFound"](propertyPath);
        }

        columns.forEach(function (column) {
          if (!column.isUpdate) {
            return;
          }

          var paramName = "upd_" + column.databaseName; //

          var value = column.getEntityValue(valuesSet);

          if (column.referencedColumn && value instanceof Object) {
            value = column.referencedColumn.getEntityValue(value);
          } else if (!(value instanceof Function)) {
            value = _this.connection.driver.preparePersistentValue(value, column);
          } // todo: duplication zone


          if (value instanceof Function) {
            // support for SQL expressions in update query
            updateColumnAndValues.push(_this.escape(column.databaseName) + " = " + value());
          } else if (_this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["SapDriver"] && value === null) {
            updateColumnAndValues.push(_this.escape(column.databaseName) + " = NULL");
          } else {
            if (_this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["SqlServerDriver"]) {
              value = _this.connection.driver.parametrizeValue(column, value); // } else if (value instanceof Array) {
              //     value = new ArrayParameter(value);
            }

            if (_this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["MysqlDriver"] || _this.connection.driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_14__["AuroraDataApiDriver"] || _this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["OracleDriver"] || _this.connection.driver instanceof _driver_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_10__["AbstractSqliteDriver"] || _this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["SapDriver"]) {
              newParameters[paramName] = value;
            } else {
              _this.expressionMap.nativeParameters[paramName] = value;
            }

            var expression = null;

            if ((_this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["MysqlDriver"] || _this.connection.driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_14__["AuroraDataApiDriver"]) && _this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {
              var useLegacy = _this.connection.driver.options.legacySpatialSupport;
              var geomFromText = useLegacy ? "GeomFromText" : "ST_GeomFromText";

              if (column.srid != null) {
                expression = geomFromText + "(" + _this.connection.driver.createParameter(paramName, parametersCount) + ", " + column.srid + ")";
              } else {
                expression = geomFromText + "(" + _this.connection.driver.createParameter(paramName, parametersCount) + ")";
              }
            } else if (_this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["PostgresDriver"] && _this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {
              if (column.srid != null) {
                expression = "ST_SetSRID(ST_GeomFromGeoJSON(" + _this.connection.driver.createParameter(paramName, parametersCount) + "), " + column.srid + ")::" + column.type;
              } else {
                expression = "ST_GeomFromGeoJSON(" + _this.connection.driver.createParameter(paramName, parametersCount) + ")::" + column.type;
              }
            } else {
              expression = _this.connection.driver.createParameter(paramName, parametersCount);
            }

            updateColumnAndValues.push(_this.escape(column.databaseName) + " = " + expression);
            parametersCount++;
          }
        });
      });
      if (metadata.versionColumn) updateColumnAndValues.push(this.escape(metadata.versionColumn.databaseName) + " = " + this.escape(metadata.versionColumn.databaseName) + " + 1");
      if (metadata.updateDateColumn) updateColumnAndValues.push(this.escape(metadata.updateDateColumn.databaseName) + " = CURRENT_TIMESTAMP"); // todo: fix issue with CURRENT_TIMESTAMP(6) being used, can "DEFAULT" be used?!
    } else {
      Object.keys(valuesSet).map(function (key) {
        var value = valuesSet[key]; // todo: duplication zone

        if (value instanceof Function) {
          // support for SQL expressions in update query
          updateColumnAndValues.push(_this.escape(key) + " = " + value());
        } else if (_this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["SapDriver"] && value === null) {
          updateColumnAndValues.push(_this.escape(key) + " = NULL");
        } else {
          // we need to store array values in a special class to make sure parameter replacement will work correctly
          // if (value instanceof Array)
          //     value = new ArrayParameter(value);
          if (_this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["MysqlDriver"] || _this.connection.driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_14__["AuroraDataApiDriver"] || _this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["OracleDriver"] || _this.connection.driver instanceof _driver_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_10__["AbstractSqliteDriver"] || _this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["SapDriver"]) {
            newParameters[key] = value;
          } else {
            _this.expressionMap.nativeParameters[key] = value;
          }

          updateColumnAndValues.push(_this.escape(key) + " = " + _this.connection.driver.createParameter(key, parametersCount));
          parametersCount++;
        }
      });
    }

    if (updateColumnAndValues.length <= 0) {
      throw new _error_UpdateValuesMissingError__WEBPACK_IMPORTED_MODULE_12__["UpdateValuesMissingError"]();
    } // we re-write parameters this way because we want our "UPDATE ... SET" parameters to be first in the list of "nativeParameters"
    // because some drivers like mysql depend on order of parameters


    if (this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["MysqlDriver"] || this.connection.driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_14__["AuroraDataApiDriver"] || this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["OracleDriver"] || this.connection.driver instanceof _driver_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_10__["AbstractSqliteDriver"] || this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["SapDriver"]) {
      this.expressionMap.nativeParameters = Object.assign(newParameters, this.expressionMap.nativeParameters);
    } // get a table name and all column database names


    var whereExpression = this.createWhereExpression();
    var returningExpression = this.createReturningExpression(); // generate and return sql update query

    if (returningExpression && (this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["PostgresDriver"] || this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["OracleDriver"] || this.connection.driver instanceof _driver_cockroachdb_CockroachDriver__WEBPACK_IMPORTED_MODULE_1__["CockroachDriver"])) {
      return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + whereExpression + " RETURNING " + returningExpression;
    } else if (returningExpression && this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["SqlServerDriver"]) {
      return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + " OUTPUT " + returningExpression + whereExpression;
    } else {
      return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + whereExpression; // todo: how do we replace aliases in where to nothing?
    }
  };
  /**
   * Creates "ORDER BY" part of SQL query.
   */


  UpdateQueryBuilder.prototype.createOrderByExpression = function () {
    var _this = this;

    var orderBys = this.expressionMap.orderBys;
    if (Object.keys(orderBys).length > 0) return " ORDER BY " + Object.keys(orderBys).map(function (columnName) {
      if (typeof orderBys[columnName] === "string") {
        return _this.replacePropertyNames(columnName) + " " + orderBys[columnName];
      } else {
        return _this.replacePropertyNames(columnName) + " " + orderBys[columnName].order + " " + orderBys[columnName].nulls;
      }
    }).join(", ");
    return "";
  };
  /**
   * Creates "LIMIT" parts of SQL query.
   */


  UpdateQueryBuilder.prototype.createLimitExpression = function () {
    var limit = this.expressionMap.limit;

    if (limit) {
      if (this.connection.driver instanceof _driver_sap_SapDriver__WEBPACK_IMPORTED_MODULE_2__["MysqlDriver"] || this.connection.driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_14__["AuroraDataApiDriver"]) {
        return " LIMIT " + limit;
      } else {
        throw new _error_LimitOnUpdateNotSupportedError__WEBPACK_IMPORTED_MODULE_11__["LimitOnUpdateNotSupportedError"]();
      }
    }

    return "";
  };
  /**
   * Gets array of values need to be inserted into the target table.
   */


  UpdateQueryBuilder.prototype.getValueSet = function () {
    if (this.expressionMap.valuesSet instanceof Object) return this.expressionMap.valuesSet;
    throw new _error_UpdateValuesMissingError__WEBPACK_IMPORTED_MODULE_12__["UpdateValuesMissingError"]();
  };

  return UpdateQueryBuilder;
}(_QueryBuilder__WEBPACK_IMPORTED_MODULE_3__["QueryBuilder"]);



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/relation-count/RelationCountAttribute.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/relation-count/RelationCountAttribute.js ***!
  \*********************************************************************************************/
/*! exports provided: RelationCountAttribute */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RelationCountAttribute", function() { return RelationCountAttribute; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _QueryBuilderUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../QueryBuilderUtils */ "./node_modules/typeorm/browser/query-builder/QueryBuilderUtils.js");
/* harmony import */ var _util_ObjectUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/ObjectUtils */ "./node_modules/typeorm/browser/util/ObjectUtils.js");




var RelationCountAttribute =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function RelationCountAttribute(expressionMap, relationCountAttribute) {
    this.expressionMap = expressionMap;
    _util_ObjectUtils__WEBPACK_IMPORTED_MODULE_2__["ObjectUtils"].assign(this, relationCountAttribute || {});
  }

  Object.defineProperty(RelationCountAttribute.prototype, "joinInverseSideMetadata", {
    // -------------------------------------------------------------------------
    // Public Methods
    // -------------------------------------------------------------------------
    get: function get() {
      return this.relation.inverseEntityMetadata;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RelationCountAttribute.prototype, "parentAlias", {
    /**
     * Alias of the parent of this join.
     * For example, if we join ("post.category", "categoryAlias") then "post" is a parent alias.
     * This value is extracted from entityOrProperty value.
     * This is available when join was made using "post.category" syntax.
     */
    get: function get() {
      if (!_QueryBuilderUtils__WEBPACK_IMPORTED_MODULE_1__["QueryBuilderUtils"].isAliasProperty(this.relationName)) throw new Error("Given value must be a string representation of alias property");
      return this.relationName.split(".")[0];
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RelationCountAttribute.prototype, "relationProperty", {
    /**
     * Relation property name of the parent.
     * This is used to understand what is joined.
     * For example, if we join ("post.category", "categoryAlias") then "category" is a relation property.
     * This value is extracted from entityOrProperty value.
     * This is available when join was made using "post.category" syntax.
     */
    get: function get() {
      if (!_QueryBuilderUtils__WEBPACK_IMPORTED_MODULE_1__["QueryBuilderUtils"].isAliasProperty(this.relationName)) throw new Error("Given value is a string representation of alias property");
      return this.relationName.split(".")[1];
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RelationCountAttribute.prototype, "junctionAlias", {
    get: function get() {
      var _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](this.relationName.split("."), 2),
          parentAlias = _a[0],
          relationProperty = _a[1];

      return parentAlias + "_" + relationProperty + "_rc";
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RelationCountAttribute.prototype, "relation", {
    /**
     * Relation of the parent.
     * This is used to understand what is joined.
     * This is available when join was made using "post.category" syntax.
     */
    get: function get() {
      if (!_QueryBuilderUtils__WEBPACK_IMPORTED_MODULE_1__["QueryBuilderUtils"].isAliasProperty(this.relationName)) throw new Error("Given value is a string representation of alias property");

      var _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](this.relationName.split("."), 2),
          parentAlias = _a[0],
          propertyPath = _a[1];

      var relationOwnerSelection = this.expressionMap.findAliasByName(parentAlias);
      var relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(propertyPath);
      if (!relation) throw new Error("Relation with property path " + propertyPath + " in entity was not found.");
      return relation;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RelationCountAttribute.prototype, "metadata", {
    /**
     * Metadata of the joined entity.
     * If table without entity was joined, then it will return undefined.
     */
    get: function get() {
      if (!_QueryBuilderUtils__WEBPACK_IMPORTED_MODULE_1__["QueryBuilderUtils"].isAliasProperty(this.relationName)) throw new Error("Given value is a string representation of alias property");
      var parentAlias = this.relationName.split(".")[0];
      var selection = this.expressionMap.findAliasByName(parentAlias);
      return selection.metadata;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RelationCountAttribute.prototype, "mapToPropertyPropertyName", {
    get: function get() {
      return this.mapToProperty.split(".")[1];
    },
    enumerable: true,
    configurable: true
  });
  return RelationCountAttribute;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/relation-count/RelationCountLoader.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/relation-count/RelationCountLoader.js ***!
  \******************************************************************************************/
/*! exports provided: RelationCountLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RelationCountLoader", function() { return RelationCountLoader; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");


var RelationCountLoader =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function RelationCountLoader(connection, queryRunner, relationCountAttributes) {
    this.connection = connection;
    this.queryRunner = queryRunner;
    this.relationCountAttributes = relationCountAttributes;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------


  RelationCountLoader.prototype.load = function (rawEntities) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var onlyUnique, promises;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        onlyUnique = function onlyUnique(value, index, self) {
          return self.indexOf(value) === index;
        };

        promises = this.relationCountAttributes.map(function (relationCountAttr) {
          return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
            var relation, inverseRelation, referenceColumnName_1, inverseSideTable, inverseSideTableName, inverseSideTableAlias, inverseSidePropertyName, referenceColumnValues, qb, _a, joinTableColumnName_1, inverseJoinColumnName, firstJunctionColumn, secondJunctionColumn, referenceColumnValues, junctionAlias, inverseSideTableName, inverseSideTableAlias, junctionTableName, condition, qb, _b;

            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_c) {
              switch (_c.label) {
                case 0:
                  if (!relationCountAttr.relation.isOneToMany) return [3
                  /*break*/
                  , 2];
                  relation = relationCountAttr.relation;
                  inverseRelation = relation.inverseRelation;
                  referenceColumnName_1 = inverseRelation.joinColumns[0].referencedColumn.propertyName;
                  inverseSideTable = relation.inverseEntityMetadata.target;
                  inverseSideTableName = relation.inverseEntityMetadata.tableName;
                  inverseSideTableAlias = relationCountAttr.alias || inverseSideTableName;
                  inverseSidePropertyName = inverseRelation.propertyName;
                  referenceColumnValues = rawEntities.map(function (rawEntity) {
                    return rawEntity[relationCountAttr.parentAlias + "_" + referenceColumnName_1];
                  }).filter(function (value) {
                    return !!value;
                  });
                  referenceColumnValues = referenceColumnValues.filter(onlyUnique); // ensure we won't perform redundant queries for joined data which was not found in selection
                  // example: if post.category was not found in db then no need to execute query for category.imageIds

                  if (referenceColumnValues.length === 0) return [2
                  /*return*/
                  , {
                    relationCountAttribute: relationCountAttr,
                    results: []
                  }];
                  qb = this.connection.createQueryBuilder(this.queryRunner);
                  qb.select(inverseSideTableAlias + "." + inverseSidePropertyName, "parentId").addSelect("COUNT(*)", "cnt").from(inverseSideTable, inverseSideTableAlias).where(inverseSideTableAlias + "." + inverseSidePropertyName + " IN (:...ids)").addGroupBy(inverseSideTableAlias + "." + inverseSidePropertyName).setParameter("ids", referenceColumnValues); // apply condition (custom query builder factory)

                  if (relationCountAttr.queryBuilderFactory) relationCountAttr.queryBuilderFactory(qb);
                  _a = {
                    relationCountAttribute: relationCountAttr
                  };
                  return [4
                  /*yield*/
                  , qb.getRawMany()];

                case 1:
                  return [2
                  /*return*/
                  , (_a.results = _c.sent(), _a)];

                case 2:
                  inverseJoinColumnName = void 0;
                  firstJunctionColumn = void 0;
                  secondJunctionColumn = void 0;

                  if (relationCountAttr.relation.isOwning) {
                    // todo fix joinColumns[0] and inverseJoinColumns[0].
                    joinTableColumnName_1 = relationCountAttr.relation.joinColumns[0].referencedColumn.databaseName;
                    inverseJoinColumnName = relationCountAttr.relation.inverseJoinColumns[0].referencedColumn.databaseName;
                    firstJunctionColumn = relationCountAttr.relation.junctionEntityMetadata.columns[0];
                    secondJunctionColumn = relationCountAttr.relation.junctionEntityMetadata.columns[1];
                  } else {
                    joinTableColumnName_1 = relationCountAttr.relation.inverseRelation.inverseJoinColumns[0].referencedColumn.databaseName;
                    inverseJoinColumnName = relationCountAttr.relation.inverseRelation.joinColumns[0].referencedColumn.databaseName;
                    firstJunctionColumn = relationCountAttr.relation.junctionEntityMetadata.columns[1];
                    secondJunctionColumn = relationCountAttr.relation.junctionEntityMetadata.columns[0];
                  }

                  referenceColumnValues = rawEntities.map(function (rawEntity) {
                    return rawEntity[relationCountAttr.parentAlias + "_" + joinTableColumnName_1];
                  }).filter(function (value) {
                    return !!value;
                  });
                  referenceColumnValues = referenceColumnValues.filter(onlyUnique); // ensure we won't perform redundant queries for joined data which was not found in selection
                  // example: if post.category was not found in db then no need to execute query for category.imageIds

                  if (referenceColumnValues.length === 0) return [2
                  /*return*/
                  , {
                    relationCountAttribute: relationCountAttr,
                    results: []
                  }];
                  junctionAlias = relationCountAttr.junctionAlias;
                  inverseSideTableName = relationCountAttr.joinInverseSideMetadata.tableName;
                  inverseSideTableAlias = relationCountAttr.alias || inverseSideTableName;
                  junctionTableName = relationCountAttr.relation.junctionEntityMetadata.tableName;
                  condition = junctionAlias + "." + firstJunctionColumn.propertyName + " IN (" + referenceColumnValues.map(function (vals) {
                    return isNaN(vals) ? "'" + vals + "'" : vals;
                  }) + ")" + " AND " + junctionAlias + "." + secondJunctionColumn.propertyName + " = " + inverseSideTableAlias + "." + inverseJoinColumnName;
                  qb = this.connection.createQueryBuilder(this.queryRunner);
                  qb.select(junctionAlias + "." + firstJunctionColumn.propertyName, "parentId").addSelect("COUNT(" + qb.escape(inverseSideTableAlias) + "." + qb.escape(inverseJoinColumnName) + ")", "cnt").from(inverseSideTableName, inverseSideTableAlias).innerJoin(junctionTableName, junctionAlias, condition).addGroupBy(junctionAlias + "." + firstJunctionColumn.propertyName); // apply condition (custom query builder factory)

                  if (relationCountAttr.queryBuilderFactory) relationCountAttr.queryBuilderFactory(qb);
                  _b = {
                    relationCountAttribute: relationCountAttr
                  };
                  return [4
                  /*yield*/
                  , qb.getRawMany()];

                case 3:
                  return [2
                  /*return*/
                  , (_b.results = _c.sent(), _b)];
              }
            });
          });
        });
        return [2
        /*return*/
        , Promise.all(promises)];
      });
    });
  };

  return RelationCountLoader;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js ***!
  \******************************************************************************************************************/
/*! exports provided: RelationCountMetadataToAttributeTransformer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RelationCountMetadataToAttributeTransformer", function() { return RelationCountMetadataToAttributeTransformer; });
/* harmony import */ var _RelationCountAttribute__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RelationCountAttribute */ "./node_modules/typeorm/browser/query-builder/relation-count/RelationCountAttribute.js");


var RelationCountMetadataToAttributeTransformer =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function RelationCountMetadataToAttributeTransformer(expressionMap) {
    this.expressionMap = expressionMap;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------


  RelationCountMetadataToAttributeTransformer.prototype.transform = function () {
    // by example:
    // post has relation count:
    // @RelationCount(post => post.categories) categoryCount
    // category has relation count
    // @RelationCount(category => category.images) imageCount
    // we load post and join category
    // we expect post.categoryCount and post.category.imageCount to have relation counts
    var _this = this; // first create relation count attributes for all relation count metadatas of the main selected object (post from example)


    if (this.expressionMap.mainAlias) {
      this.expressionMap.mainAlias.metadata.relationCounts.forEach(function (relationCount) {
        var attribute = _this.metadataToAttribute(_this.expressionMap.mainAlias.name, relationCount);

        _this.expressionMap.relationCountAttributes.push(attribute);
      });
    } // second create relation count attributes for all relation count metadatas of all joined objects (category from example)


    this.expressionMap.joinAttributes.forEach(function (join) {
      // ensure this join has a metadata, because relation count can only work for real orm entities
      if (!join.metadata || join.metadata.isJunction) return;
      join.metadata.relationCounts.forEach(function (relationCount) {
        var attribute = _this.metadataToAttribute(join.alias.name, relationCount);

        _this.expressionMap.relationCountAttributes.push(attribute);
      });
    });
  }; // -------------------------------------------------------------------------
  // Private Methods
  // -------------------------------------------------------------------------


  RelationCountMetadataToAttributeTransformer.prototype.metadataToAttribute = function (parentAliasName, relationCount) {
    return new _RelationCountAttribute__WEBPACK_IMPORTED_MODULE_0__["RelationCountAttribute"](this.expressionMap, {
      relationName: parentAliasName + "." + relationCount.relation.propertyName,
      mapToProperty: parentAliasName + "." + relationCount.propertyName,
      alias: relationCount.alias,
      queryBuilderFactory: relationCount.queryBuilderFactory
    });
  };

  return RelationCountMetadataToAttributeTransformer;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/relation-id/RelationIdAttribute.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/relation-id/RelationIdAttribute.js ***!
  \***************************************************************************************/
/*! exports provided: RelationIdAttribute */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RelationIdAttribute", function() { return RelationIdAttribute; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _QueryBuilderUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../QueryBuilderUtils */ "./node_modules/typeorm/browser/query-builder/QueryBuilderUtils.js");
/* harmony import */ var _util_ObjectUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/ObjectUtils */ "./node_modules/typeorm/browser/util/ObjectUtils.js");



/**
 * Stores all join relation id attributes which will be used to build a JOIN query.
 */

var RelationIdAttribute =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function RelationIdAttribute(queryExpressionMap, relationIdAttribute) {
    this.queryExpressionMap = queryExpressionMap;
    /**
     * Indicates if relation id should NOT be loaded as id map.
     */

    this.disableMixedMap = false;
    _util_ObjectUtils__WEBPACK_IMPORTED_MODULE_2__["ObjectUtils"].assign(this, relationIdAttribute || {});
  }

  Object.defineProperty(RelationIdAttribute.prototype, "joinInverseSideMetadata", {
    // -------------------------------------------------------------------------
    // Public Methods
    // -------------------------------------------------------------------------
    get: function get() {
      return this.relation.inverseEntityMetadata;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RelationIdAttribute.prototype, "parentAlias", {
    /**
     * Alias of the parent of this join.
     * For example, if we join ("post.category", "categoryAlias") then "post" is a parent alias.
     * This value is extracted from entityOrProperty value.
     * This is available when join was made using "post.category" syntax.
     */
    get: function get() {
      if (!_QueryBuilderUtils__WEBPACK_IMPORTED_MODULE_1__["QueryBuilderUtils"].isAliasProperty(this.relationName)) throw new Error("Given value must be a string representation of alias property");
      return this.relationName.substr(0, this.relationName.indexOf("."));
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RelationIdAttribute.prototype, "relationPropertyPath", {
    /**
     * Relation property name of the parent.
     * This is used to understand what is joined.
     * For example, if we join ("post.category", "categoryAlias") then "category" is a relation property.
     * This value is extracted from entityOrProperty value.
     * This is available when join was made using "post.category" syntax.
     */
    get: function get() {
      if (!_QueryBuilderUtils__WEBPACK_IMPORTED_MODULE_1__["QueryBuilderUtils"].isAliasProperty(this.relationName)) throw new Error("Given value must be a string representation of alias property");
      return this.relationName.substr(this.relationName.indexOf(".") + 1);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RelationIdAttribute.prototype, "relation", {
    /**
     * Relation of the parent.
     * This is used to understand what is joined.
     * This is available when join was made using "post.category" syntax.
     */
    get: function get() {
      if (!_QueryBuilderUtils__WEBPACK_IMPORTED_MODULE_1__["QueryBuilderUtils"].isAliasProperty(this.relationName)) throw new Error("Given value must be a string representation of alias property");
      var relationOwnerSelection = this.queryExpressionMap.findAliasByName(this.parentAlias);
      var relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(this.relationPropertyPath);
      if (!relation) throw new Error("Relation with property path " + this.relationPropertyPath + " in entity was not found.");
      return relation;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RelationIdAttribute.prototype, "junctionAlias", {
    /**
     * Generates alias of junction table, whose ids we get.
     */
    get: function get() {
      var _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](this.relationName.split("."), 2),
          parentAlias = _a[0],
          relationProperty = _a[1];

      return parentAlias + "_" + relationProperty + "_rid";
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RelationIdAttribute.prototype, "junctionMetadata", {
    /**
     * Metadata of the joined entity.
     * If extra condition without entity was joined, then it will return undefined.
     */
    get: function get() {
      return this.relation.junctionEntityMetadata;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RelationIdAttribute.prototype, "mapToPropertyParentAlias", {
    get: function get() {
      return this.mapToProperty.substr(0, this.mapToProperty.indexOf("."));
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RelationIdAttribute.prototype, "mapToPropertyPropertyPath", {
    get: function get() {
      return this.mapToProperty.substr(this.mapToProperty.indexOf(".") + 1);
    },
    enumerable: true,
    configurable: true
  });
  return RelationIdAttribute;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/relation-id/RelationIdLoader.js":
/*!************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/relation-id/RelationIdLoader.js ***!
  \************************************************************************************/
/*! exports provided: RelationIdLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RelationIdLoader", function() { return RelationIdLoader; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _driver_DriverUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../driver/DriverUtils */ "./node_modules/typeorm/browser/driver/DriverUtils.js");



var RelationIdLoader =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function RelationIdLoader(connection, queryRunner, relationIdAttributes) {
    this.connection = connection;
    this.queryRunner = queryRunner;
    this.relationIdAttributes = relationIdAttributes;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------


  RelationIdLoader.prototype.load = function (rawEntities) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var promises;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        promises = this.relationIdAttributes.map(function (relationIdAttr) {
          return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
            var results, relation_1, joinColumns_1, table, tableName, tableAlias_1, parameters_1, condition, qb_1, results, relation, joinColumns_2, inverseJoinColumns_1, junctionAlias_1, inverseSideTableName, inverseSideTableAlias_1, junctionTableName, mappedColumns, parameters_2, joinColumnConditions, inverseJoinColumnCondition_1, condition, qb_2, results;

            var _this = this;

            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
              switch (_a.label) {
                case 0:
                  if (!(relationIdAttr.relation.isManyToOne || relationIdAttr.relation.isOneToOneOwner)) return [3
                  /*break*/
                  , 1]; // example: Post and Tag
                  // loadRelationIdAndMap("post.tagId", "post.tag")
                  // we expect it to load id of tag

                  if (relationIdAttr.queryBuilderFactory) throw new Error("Additional condition can not be used with ManyToOne or OneToOne owner relations.");
                  results = rawEntities.map(function (rawEntity) {
                    var result = {};
                    relationIdAttr.relation.joinColumns.forEach(function (joinColumn) {
                      result[joinColumn.databaseName] = _this.connection.driver.prepareHydratedValue(rawEntity[_driver_DriverUtils__WEBPACK_IMPORTED_MODULE_1__["DriverUtils"].buildColumnAlias(_this.connection.driver, relationIdAttr.parentAlias, joinColumn.databaseName)], joinColumn.referencedColumn);
                    });
                    relationIdAttr.relation.entityMetadata.primaryColumns.forEach(function (primaryColumn) {
                      result[primaryColumn.databaseName] = _this.connection.driver.prepareHydratedValue(rawEntity[_driver_DriverUtils__WEBPACK_IMPORTED_MODULE_1__["DriverUtils"].buildColumnAlias(_this.connection.driver, relationIdAttr.parentAlias, primaryColumn.databaseName)], primaryColumn);
                    });
                    return result;
                  });
                  return [2
                  /*return*/
                  , {
                    relationIdAttribute: relationIdAttr,
                    results: results
                  }];

                case 1:
                  if (!(relationIdAttr.relation.isOneToMany || relationIdAttr.relation.isOneToOneNotOwner)) return [3
                  /*break*/
                  , 3];
                  relation_1 = relationIdAttr.relation;
                  joinColumns_1 = relation_1.isOwning ? relation_1.joinColumns : relation_1.inverseRelation.joinColumns;
                  table = relation_1.inverseEntityMetadata.target;
                  tableName = relation_1.inverseEntityMetadata.tableName;
                  tableAlias_1 = relationIdAttr.alias || tableName;
                  parameters_1 = {};
                  condition = rawEntities.map(function (rawEntity, index) {
                    return joinColumns_1.map(function (joinColumn) {
                      var parameterName = joinColumn.databaseName + index;
                      parameters_1[parameterName] = rawEntity[_driver_DriverUtils__WEBPACK_IMPORTED_MODULE_1__["DriverUtils"].buildColumnAlias(_this.connection.driver, relationIdAttr.parentAlias, joinColumn.referencedColumn.databaseName)];
                      return tableAlias_1 + "." + joinColumn.propertyPath + " = :" + parameterName;
                    }).join(" AND ");
                  }).map(function (condition) {
                    return "(" + condition + ")";
                  }).join(" OR "); // ensure we won't perform redundant queries for joined data which was not found in selection
                  // example: if post.category was not found in db then no need to execute query for category.imageIds

                  if (!condition) return [2
                  /*return*/
                  , {
                    relationIdAttribute: relationIdAttr,
                    results: []
                  }];
                  qb_1 = this.connection.createQueryBuilder(this.queryRunner);
                  joinColumns_1.forEach(function (joinColumn) {
                    qb_1.addSelect(tableAlias_1 + "." + joinColumn.propertyPath, joinColumn.databaseName);
                  });
                  relation_1.inverseRelation.entityMetadata.primaryColumns.forEach(function (primaryColumn) {
                    qb_1.addSelect(tableAlias_1 + "." + primaryColumn.propertyPath, primaryColumn.databaseName);
                  });
                  qb_1.from(table, tableAlias_1).where("(" + condition + ")") // need brackets because if we have additional condition and no brackets, it looks like (a = 1) OR (a = 2) AND b = 1, that is incorrect
                  .setParameters(parameters_1); // apply condition (custom query builder factory)

                  if (relationIdAttr.queryBuilderFactory) relationIdAttr.queryBuilderFactory(qb_1);
                  return [4
                  /*yield*/
                  , qb_1.getRawMany()];

                case 2:
                  results = _a.sent();
                  results.forEach(function (result) {
                    joinColumns_1.forEach(function (column) {
                      result[column.databaseName] = _this.connection.driver.prepareHydratedValue(result[column.databaseName], column.referencedColumn);
                    });
                    relation_1.inverseRelation.entityMetadata.primaryColumns.forEach(function (column) {
                      result[column.databaseName] = _this.connection.driver.prepareHydratedValue(result[column.databaseName], column);
                    });
                  });
                  return [2
                  /*return*/
                  , {
                    relationIdAttribute: relationIdAttr,
                    results: results
                  }];

                case 3:
                  relation = relationIdAttr.relation;
                  joinColumns_2 = relation.isOwning ? relation.joinColumns : relation.inverseRelation.inverseJoinColumns;
                  inverseJoinColumns_1 = relation.isOwning ? relation.inverseJoinColumns : relation.inverseRelation.joinColumns;
                  junctionAlias_1 = relationIdAttr.junctionAlias;
                  inverseSideTableName = relationIdAttr.joinInverseSideMetadata.tableName;
                  inverseSideTableAlias_1 = relationIdAttr.alias || inverseSideTableName;
                  junctionTableName = relation.isOwning ? relation.junctionEntityMetadata.tableName : relation.inverseRelation.junctionEntityMetadata.tableName;
                  mappedColumns = rawEntities.map(function (rawEntity) {
                    return joinColumns_2.reduce(function (map, joinColumn) {
                      map[joinColumn.propertyPath] = rawEntity[_driver_DriverUtils__WEBPACK_IMPORTED_MODULE_1__["DriverUtils"].buildColumnAlias(_this.connection.driver, relationIdAttr.parentAlias, joinColumn.referencedColumn.databaseName)];
                      return map;
                    }, {});
                  }); // ensure we won't perform redundant queries for joined data which was not found in selection
                  // example: if post.category was not found in db then no need to execute query for category.imageIds

                  if (mappedColumns.length === 0) return [2
                  /*return*/
                  , {
                    relationIdAttribute: relationIdAttr,
                    results: []
                  }];
                  parameters_2 = {};
                  joinColumnConditions = mappedColumns.map(function (mappedColumn, index) {
                    return Object.keys(mappedColumn).map(function (key) {
                      var parameterName = key + index;
                      parameters_2[parameterName] = mappedColumn[key];
                      return junctionAlias_1 + "." + key + " = :" + parameterName;
                    }).join(" AND ");
                  });
                  inverseJoinColumnCondition_1 = inverseJoinColumns_1.map(function (joinColumn) {
                    return junctionAlias_1 + "." + joinColumn.propertyPath + " = " + inverseSideTableAlias_1 + "." + joinColumn.referencedColumn.propertyPath;
                  }).join(" AND ");
                  condition = joinColumnConditions.map(function (condition) {
                    return "(" + condition + " AND " + inverseJoinColumnCondition_1 + ")";
                  }).join(" OR ");
                  qb_2 = this.connection.createQueryBuilder(this.queryRunner);
                  inverseJoinColumns_1.forEach(function (joinColumn) {
                    qb_2.addSelect(junctionAlias_1 + "." + joinColumn.propertyPath, joinColumn.databaseName).addOrderBy(junctionAlias_1 + "." + joinColumn.propertyPath);
                  });
                  joinColumns_2.forEach(function (joinColumn) {
                    qb_2.addSelect(junctionAlias_1 + "." + joinColumn.propertyPath, joinColumn.databaseName).addOrderBy(junctionAlias_1 + "." + joinColumn.propertyPath);
                  });
                  qb_2.from(inverseSideTableName, inverseSideTableAlias_1).innerJoin(junctionTableName, junctionAlias_1, condition).setParameters(parameters_2); // apply condition (custom query builder factory)

                  if (relationIdAttr.queryBuilderFactory) relationIdAttr.queryBuilderFactory(qb_2);
                  return [4
                  /*yield*/
                  , qb_2.getRawMany()];

                case 4:
                  results = _a.sent();
                  results.forEach(function (result) {
                    tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](joinColumns_2, inverseJoinColumns_1).forEach(function (column) {
                      result[column.databaseName] = _this.connection.driver.prepareHydratedValue(result[column.databaseName], column.referencedColumn);
                    });
                  });
                  return [2
                  /*return*/
                  , {
                    relationIdAttribute: relationIdAttr,
                    results: results
                  }];
              }
            });
          });
        });
        return [2
        /*return*/
        , Promise.all(promises)];
      });
    });
  };

  return RelationIdLoader;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/relation-id/RelationIdMetadataToAttributeTransformer.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/relation-id/RelationIdMetadataToAttributeTransformer.js ***!
  \************************************************************************************************************/
/*! exports provided: RelationIdMetadataToAttributeTransformer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RelationIdMetadataToAttributeTransformer", function() { return RelationIdMetadataToAttributeTransformer; });
/* harmony import */ var _RelationIdAttribute__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RelationIdAttribute */ "./node_modules/typeorm/browser/query-builder/relation-id/RelationIdAttribute.js");


var RelationIdMetadataToAttributeTransformer =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function RelationIdMetadataToAttributeTransformer(expressionMap) {
    this.expressionMap = expressionMap;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------


  RelationIdMetadataToAttributeTransformer.prototype.transform = function () {
    // by example:
    // post has relation id:
    // @RelationId(post => post.categories) categoryIds
    // category has relation id
    // @RelationId(category => category.images) imageIds
    // we load post and join category
    // we expect post.categoryIds and post.category.imageIds to have relation ids
    var _this = this; // first create relation id attributes for all relation id metadatas of the main selected object (post from example)


    if (this.expressionMap.mainAlias) {
      this.expressionMap.mainAlias.metadata.relationIds.forEach(function (relationId) {
        var attribute = _this.metadataToAttribute(_this.expressionMap.mainAlias.name, relationId);

        _this.expressionMap.relationIdAttributes.push(attribute);
      });
    } // second create relation id attributes for all relation id metadatas of all joined objects (category from example)


    this.expressionMap.joinAttributes.forEach(function (join) {
      // ensure this join has a metadata, because relation id can only work for real orm entities
      if (!join.metadata || join.metadata.isJunction) return;
      join.metadata.relationIds.forEach(function (relationId) {
        var attribute = _this.metadataToAttribute(join.alias.name, relationId);

        _this.expressionMap.relationIdAttributes.push(attribute);
      });
    });
  }; // -------------------------------------------------------------------------
  // Private Methods
  // -------------------------------------------------------------------------


  RelationIdMetadataToAttributeTransformer.prototype.metadataToAttribute = function (parentAliasName, relationId) {
    return new _RelationIdAttribute__WEBPACK_IMPORTED_MODULE_0__["RelationIdAttribute"](this.expressionMap, {
      relationName: parentAliasName + "." + relationId.relation.propertyName,
      mapToProperty: parentAliasName + "." + relationId.propertyName,
      alias: relationId.alias,
      queryBuilderFactory: relationId.queryBuilderFactory
    });
  };

  return RelationIdMetadataToAttributeTransformer;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/result/DeleteResult.js":
/*!***************************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/result/DeleteResult.js ***!
  \***************************************************************************/
/*! exports provided: DeleteResult */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeleteResult", function() { return DeleteResult; });
/**
 * Result object returned by DeleteQueryBuilder execution.
 */
var DeleteResult =
/** @class */
function () {
  function DeleteResult() {}

  return DeleteResult;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/result/InsertResult.js":
/*!***************************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/result/InsertResult.js ***!
  \***************************************************************************/
/*! exports provided: InsertResult */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InsertResult", function() { return InsertResult; });
/**
 * Result object returned by InsertQueryBuilder execution.
 */
var InsertResult =
/** @class */
function () {
  function InsertResult() {
    /**
     * Contains inserted entity id.
     * Has entity-like structure (not just column database name and values).
     */
    this.identifiers = [];
    /**
     * Generated values returned by a database.
     * Has entity-like structure (not just column database name and values).
     */

    this.generatedMaps = [];
  }

  return InsertResult;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/result/UpdateResult.js":
/*!***************************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/result/UpdateResult.js ***!
  \***************************************************************************/
/*! exports provided: UpdateResult */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UpdateResult", function() { return UpdateResult; });
/**
 * Result object returned by UpdateQueryBuilder execution.
 */
var UpdateResult =
/** @class */
function () {
  function UpdateResult() {
    /**
     * Contains inserted entity id.
     * Has entity-like structure (not just column database name and values).
     */
    // identifier: ObjectLiteral[] = [];

    /**
     * Generated values returned by a database.
     * Has entity-like structure (not just column database name and values).
     */
    this.generatedMaps = [];
  }

  return UpdateResult;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/transformer/PlainObjectToDatabaseEntityTransformer.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/transformer/PlainObjectToDatabaseEntityTransformer.js ***!
  \**********************************************************************************************************/
/*! exports provided: PlainObjectToDatabaseEntityTransformer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlainObjectToDatabaseEntityTransformer", function() { return PlainObjectToDatabaseEntityTransformer; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 */

var LoadMapItem =
/** @class */
function () {
  function LoadMapItem(plainEntity, metadata, parentLoadMapItem, relation) {
    this.plainEntity = plainEntity;
    this.metadata = metadata;
    this.parentLoadMapItem = parentLoadMapItem;
    this.relation = relation;
  }

  Object.defineProperty(LoadMapItem.prototype, "target", {
    get: function get() {
      return this.metadata.target;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LoadMapItem.prototype, "id", {
    get: function get() {
      return this.metadata.getEntityIdMixedMap(this.plainEntity);
    },
    enumerable: true,
    configurable: true
  });
  return LoadMapItem;
}();

var LoadMap =
/** @class */
function () {
  function LoadMap() {
    this.loadMapItems = [];
  }

  Object.defineProperty(LoadMap.prototype, "mainLoadMapItem", {
    get: function get() {
      return this.loadMapItems.find(function (item) {
        return !item.relation && !item.parentLoadMapItem;
      });
    },
    enumerable: true,
    configurable: true
  });

  LoadMap.prototype.addLoadMap = function (newLoadMap) {
    var item = this.loadMapItems.find(function (item) {
      return item.target === newLoadMap.target && item.id === newLoadMap.id;
    });
    if (!item) this.loadMapItems.push(newLoadMap);
  };

  LoadMap.prototype.fillEntities = function (target, entities) {
    var _this = this;

    entities.forEach(function (entity) {
      var item = _this.loadMapItems.find(function (loadMapItem) {
        return loadMapItem.target === target && loadMapItem.metadata.compareEntities(entity, loadMapItem.plainEntity);
      });

      if (item) item.entity = entity;
    });
  };

  LoadMap.prototype.groupByTargetIds = function () {
    var groups = [];
    this.loadMapItems.forEach(function (loadMapItem) {
      var group = groups.find(function (group) {
        return group.target === loadMapItem.target;
      });

      if (!group) {
        group = {
          target: loadMapItem.target,
          ids: []
        };
        groups.push(group);
      }

      group.ids.push(loadMapItem.id);
    });
    return groups;
  };

  return LoadMap;
}();
/**
 * Transforms plain old javascript object
 * Entity is constructed based on its entity metadata.
 */


var PlainObjectToDatabaseEntityTransformer =
/** @class */
function () {
  function PlainObjectToDatabaseEntityTransformer(manager) {
    this.manager = manager;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------


  PlainObjectToDatabaseEntityTransformer.prototype.transform = function (plainObject, metadata) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var loadMap, _fillLoadMap;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            // if plain object does not have id then nothing to load really
            if (!metadata.hasAllPrimaryKeys(plainObject)) return [2
            /*return*/
            , Promise.reject("Given object does not have a primary column, cannot transform it to database entity.")];
            loadMap = new LoadMap();

            _fillLoadMap = function fillLoadMap(entity, entityMetadata, parentLoadMapItem, relation) {
              var item = new LoadMapItem(entity, entityMetadata, parentLoadMapItem, relation);
              loadMap.addLoadMap(item);
              entityMetadata.extractRelationValuesFromEntity(entity, metadata.relations).filter(function (value) {
                return value !== null && value !== undefined;
              }).forEach(function (_a) {
                var _b = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](_a, 3),
                    relation = _b[0],
                    value = _b[1],
                    inverseEntityMetadata = _b[2];

                return _fillLoadMap(value, inverseEntityMetadata, item, relation);
              });
            };

            _fillLoadMap(plainObject, metadata); // load all entities and store them in the load map


            return [4
            /*yield*/
            , Promise.all(loadMap.groupByTargetIds().map(function (targetWithIds) {
              return _this.manager.findByIds(targetWithIds.target, targetWithIds.ids).then(function (entities) {
                return loadMap.fillEntities(targetWithIds.target, entities);
              });
            }))];

          case 1:
            // load all entities and store them in the load map
            _a.sent(); // go through each item in the load map and set their entity relationship using metadata stored in load map


            loadMap.loadMapItems.forEach(function (loadMapItem) {
              if (!loadMapItem.relation || !loadMapItem.entity || !loadMapItem.parentLoadMapItem || !loadMapItem.parentLoadMapItem.entity) return;

              if (loadMapItem.relation.isManyToMany || loadMapItem.relation.isOneToMany) {
                if (!loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName]) loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = [];
                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName].push(loadMapItem.entity);
              } else {
                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = loadMapItem.entity;
              }
            });
            return [2
            /*return*/
            , loadMap.mainLoadMapItem ? loadMap.mainLoadMapItem.entity : undefined];
        }
      });
    });
  };

  return PlainObjectToDatabaseEntityTransformer;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/transformer/PlainObjectToNewEntityTransformer.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/transformer/PlainObjectToNewEntityTransformer.js ***!
  \*****************************************************************************************************/
/*! exports provided: PlainObjectToNewEntityTransformer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlainObjectToNewEntityTransformer", function() { return PlainObjectToNewEntityTransformer; });
/**
 * Transforms plain old javascript object
 * Entity is constructed based on its entity metadata.
 */
var PlainObjectToNewEntityTransformer =
/** @class */
function () {
  function PlainObjectToNewEntityTransformer() {} // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------


  PlainObjectToNewEntityTransformer.prototype.transform = function (newEntity, object, metadata, getLazyRelationsPromiseValue) {
    if (getLazyRelationsPromiseValue === void 0) {
      getLazyRelationsPromiseValue = false;
    } // console.log("groupAndTransform entity:", newEntity);
    // console.log("groupAndTransform object:", object);


    this.groupAndTransform(newEntity, object, metadata, getLazyRelationsPromiseValue); // console.log("result:", newEntity);

    return newEntity;
  }; // -------------------------------------------------------------------------
  // Private Methods
  // -------------------------------------------------------------------------

  /**
   * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated
   * we need to group our result and we must have some unique id (primary key in our case)
   */


  PlainObjectToNewEntityTransformer.prototype.groupAndTransform = function (entity, object, metadata, getLazyRelationsPromiseValue) {
    // console.log("groupAndTransform entity:", entity);
    // console.log("groupAndTransform object:", object);
    var _this = this;

    if (getLazyRelationsPromiseValue === void 0) {
      getLazyRelationsPromiseValue = false;
    } // copy regular column properties from the given object


    metadata.nonVirtualColumns.forEach(function (column) {
      var objectColumnValue = column.getEntityValue(object);
      if (objectColumnValue !== undefined) column.setEntityValue(entity, objectColumnValue);
    }); // // copy relation properties from the given object

    if (metadata.relations.length) {
      metadata.relations.forEach(function (relation) {
        var entityRelatedValue = relation.getEntityValue(entity);
        var objectRelatedValue = relation.getEntityValue(object, getLazyRelationsPromiseValue);
        if (objectRelatedValue === undefined) return;

        if (relation.isOneToMany || relation.isManyToMany) {
          if (!Array.isArray(objectRelatedValue)) return;

          if (!entityRelatedValue) {
            entityRelatedValue = [];
            relation.setEntityValue(entity, entityRelatedValue);
          }

          objectRelatedValue.forEach(function (objectRelatedValueItem) {
            // check if we have this item from the merging object in the original entity we merge into
            var objectRelatedValueEntity = entityRelatedValue.find(function (entityRelatedValueItem) {
              return relation.inverseEntityMetadata.compareEntities(objectRelatedValueItem, entityRelatedValueItem);
            }); // if such item already exist then merge new data into it, if its not we create a new entity and merge it into the array

            if (!objectRelatedValueEntity) {
              objectRelatedValueEntity = relation.inverseEntityMetadata.create();
              entityRelatedValue.push(objectRelatedValueEntity);
            }

            _this.groupAndTransform(objectRelatedValueEntity, objectRelatedValueItem, relation.inverseEntityMetadata, getLazyRelationsPromiseValue);
          });
        } else {
          // if related object isn't an object (direct relation id for example)
          // we just set it to the entity relation, we don't need anything more from it
          // however we do it only if original entity does not have this relation set to object
          // to prevent full overriding of objects
          if (!(objectRelatedValue instanceof Object)) {
            if (!(entityRelatedValue instanceof Object)) relation.setEntityValue(entity, objectRelatedValue);
            return;
          }

          if (!entityRelatedValue) {
            entityRelatedValue = relation.inverseEntityMetadata.create();
            relation.setEntityValue(entity, entityRelatedValue);
          }

          _this.groupAndTransform(entityRelatedValue, objectRelatedValue, relation.inverseEntityMetadata, getLazyRelationsPromiseValue);
        }
      });
    }
  };

  return PlainObjectToNewEntityTransformer;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/query-builder/transformer/RawSqlResultsToEntityTransformer.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-builder/transformer/RawSqlResultsToEntityTransformer.js ***!
  \****************************************************************************************************/
/*! exports provided: RawSqlResultsToEntityTransformer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RawSqlResultsToEntityTransformer", function() { return RawSqlResultsToEntityTransformer; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_OrmUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/OrmUtils */ "./node_modules/typeorm/browser/util/OrmUtils.js");
/* harmony import */ var _metadata_EntityMetadata__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../metadata/EntityMetadata */ "./node_modules/typeorm/browser/metadata/EntityMetadata.js");
/* harmony import */ var _driver_DriverUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../driver/DriverUtils */ "./node_modules/typeorm/browser/driver/DriverUtils.js");




/**
 * Transforms raw sql results returned from the database into entity object.
 * Entity is constructed based on its entity metadata.
 */

var RawSqlResultsToEntityTransformer =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function RawSqlResultsToEntityTransformer(expressionMap, driver, rawRelationIdResults, rawRelationCountResults, queryRunner) {
    this.expressionMap = expressionMap;
    this.driver = driver;
    this.rawRelationIdResults = rawRelationIdResults;
    this.rawRelationCountResults = rawRelationCountResults;
    this.queryRunner = queryRunner;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated
   * we need to group our result and we must have some unique id (primary key in our case)
   */


  RawSqlResultsToEntityTransformer.prototype.transform = function (rawResults, alias) {
    var _this = this;

    var group = this.group(rawResults, alias);
    var entities = [];
    group.forEach(function (results) {
      var entity = _this.transformRawResultsGroup(results, alias);

      if (entity !== undefined) entities.push(entity);
    });
    return entities;
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Groups given raw results by ids of given alias.
   */


  RawSqlResultsToEntityTransformer.prototype.group = function (rawResults, alias) {
    var _this = this;

    var map = new Map();
    var keys = [];

    if (alias.metadata.tableType === "view") {
      keys.push.apply(keys, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](alias.metadata.columns.map(function (column) {
        return _driver_DriverUtils__WEBPACK_IMPORTED_MODULE_3__["DriverUtils"].buildColumnAlias(_this.driver, alias.name, column.databaseName);
      })));
    } else {
      keys.push.apply(keys, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](alias.metadata.primaryColumns.map(function (column) {
        return _driver_DriverUtils__WEBPACK_IMPORTED_MODULE_3__["DriverUtils"].buildColumnAlias(_this.driver, alias.name, column.databaseName);
      })));
    }

    rawResults.forEach(function (rawResult) {
      var id = keys.map(function (key) {
        var keyValue = rawResult[key];

        if (Buffer.isBuffer(keyValue)) {
          return keyValue.toString("hex");
        }

        return keyValue;
      }).join("_"); // todo: check partial

      if (!id) return;
      var items = map.get(id);

      if (!items) {
        map.set(id, [rawResult]);
      } else {
        items.push(rawResult);
      }
    });
    return map;
  };
  /**
   * Transforms set of data results into single entity.
   */


  RawSqlResultsToEntityTransformer.prototype.transformRawResultsGroup = function (rawResults, alias) {
    var _this = this; // let hasColumns = false; // , hasEmbeddedColumns = false, hasParentColumns = false, hasParentEmbeddedColumns = false;


    var metadata = alias.metadata;

    if (metadata.discriminatorColumn) {
      var discriminatorValues_1 = rawResults.map(function (result) {
        return result[_driver_DriverUtils__WEBPACK_IMPORTED_MODULE_3__["DriverUtils"].buildColumnAlias(_this.driver, alias.name, alias.metadata.discriminatorColumn.databaseName)];
      });
      var discriminatorMetadata = metadata.childEntityMetadatas.find(function (childEntityMetadata) {
        return !!discriminatorValues_1.find(function (value) {
          return value === childEntityMetadata.discriminatorValue;
        });
      });
      if (discriminatorMetadata) metadata = discriminatorMetadata;
    }

    var entity = this.expressionMap.options.indexOf("create-pojo") !== -1 ? {} : metadata.create(this.queryRunner); // get value from columns selections and put them into newly created entity

    var hasColumns = this.transformColumns(rawResults, alias, entity, metadata);
    var hasRelations = this.transformJoins(rawResults, entity, alias, metadata);
    var hasRelationIds = this.transformRelationIds(rawResults, alias, entity, metadata);
    var hasRelationCounts = this.transformRelationCounts(rawResults, alias, entity); // if we have at least one selected column then return this entity
    // since entity must have at least primary columns to be really selected and transformed into entity

    if (hasColumns) return entity; // if we don't have any selected column we should not return entity,
    // except for the case when entity only contain a primary column as a relation to another entity
    // in this case its absolutely possible our entity to not have any columns except a single relation

    var hasOnlyVirtualPrimaryColumns = metadata.primaryColumns.filter(function (column) {
      return column.isVirtual === false;
    }).length === 0; // todo: create metadata.hasOnlyVirtualPrimaryColumns

    if (hasOnlyVirtualPrimaryColumns && (hasRelations || hasRelationIds || hasRelationCounts)) return entity;
    return undefined;
  }; // get value from columns selections and put them into object


  RawSqlResultsToEntityTransformer.prototype.transformColumns = function (rawResults, alias, entity, metadata) {
    var _this = this;

    var hasData = false;
    metadata.columns.forEach(function (column) {
      // if table inheritance is used make sure this column is not child's column
      if (metadata.childEntityMetadatas.length > 0 && metadata.childEntityMetadatas.map(function (metadata) {
        return metadata.target;
      }).indexOf(column.target) !== -1) return;
      var value = rawResults[0][_driver_DriverUtils__WEBPACK_IMPORTED_MODULE_3__["DriverUtils"].buildColumnAlias(_this.driver, alias.name, column.databaseName)];
      if (value === undefined || column.isVirtual) return; // if user does not selected the whole entity or he used partial selection and does not select this particular column
      // then we don't add this column and its value into the entity

      if (!_this.expressionMap.selects.find(function (select) {
        return select.selection === alias.name || select.selection === alias.name + "." + column.propertyPath;
      })) return;
      column.setEntityValue(entity, _this.driver.prepareHydratedValue(value, column));
      if (value !== null) // we don't mark it as has data because if we will have all nulls in our object - we don't need such object
        hasData = true;
    });
    return hasData;
  };
  /**
   * Transforms joined entities in the given raw results by a given alias and stores to the given (parent) entity
   */


  RawSqlResultsToEntityTransformer.prototype.transformJoins = function (rawResults, entity, alias, metadata) {
    var _this = this;

    var hasData = false; // let discriminatorValue: string = "";
    // if (metadata.discriminatorColumn)
    //     discriminatorValue = rawResults[0][DriverUtils.buildColumnAlias(this.connection.driver, alias.name, alias.metadata.discriminatorColumn!.databaseName)];

    this.expressionMap.joinAttributes.forEach(function (join) {
      // skip joins without metadata
      if (!join.metadata) return; // if simple left or inner join was performed without selection then we don't need to do anything

      if (!join.isSelected) return; // this check need to avoid setting properties than not belong to entity when single table inheritance used. (todo: check if we still need it)
      // const metadata = metadata.childEntityMetadatas.find(childEntityMetadata => discriminatorValue === childEntityMetadata.discriminatorValue);

      if (join.relation && !metadata.relations.find(function (relation) {
        return relation === join.relation;
      })) return; // some checks to make sure this join is for current alias

      if (join.mapToProperty) {
        if (join.mapToPropertyParentAlias !== alias.name) return;
      } else {
        if (!join.relation || join.parentAlias !== alias.name || join.relationPropertyPath !== join.relation.propertyPath) return;
      } // transform joined data into entities


      var result = _this.transform(rawResults, join.alias);

      result = !join.isMany ? result[0] : result;
      result = !join.isMany && result === undefined ? null : result; // this is needed to make relations to return null when its joined but nothing was found in the database

      if (result === undefined) // if nothing was joined then simply return
        return; // if join was mapped to some property then save result to that property

      if (join.mapToPropertyPropertyName) {
        entity[join.mapToPropertyPropertyName] = result; // todo: fix embeds
      } else {
        // otherwise set to relation
        join.relation.setEntityValue(entity, result);
      }

      hasData = true;
    });
    return hasData;
  };

  RawSqlResultsToEntityTransformer.prototype.transformRelationIds = function (rawSqlResults, alias, entity, metadata) {
    var _this = this;

    var hasData = false;
    this.rawRelationIdResults.forEach(function (rawRelationIdResult) {
      if (rawRelationIdResult.relationIdAttribute.parentAlias !== alias.name) return;
      var relation = rawRelationIdResult.relationIdAttribute.relation;

      var valueMap = _this.createValueMapFromJoinColumns(relation, rawRelationIdResult.relationIdAttribute.parentAlias, rawSqlResults);

      if (valueMap === undefined || valueMap === null) return;
      var idMaps = rawRelationIdResult.results.map(function (result) {
        var entityPrimaryIds = _this.extractEntityPrimaryIds(relation, result);

        if (_metadata_EntityMetadata__WEBPACK_IMPORTED_MODULE_2__["EntityMetadata"].compareIds(entityPrimaryIds, valueMap) === false) return;
        var columns;

        if (relation.isManyToOne || relation.isOneToOneOwner) {
          columns = relation.joinColumns.map(function (joinColumn) {
            return joinColumn;
          });
        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {
          columns = relation.inverseEntityMetadata.primaryColumns.map(function (joinColumn) {
            return joinColumn;
          }); // columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn.referencedColumn!); //.inverseEntityMetadata.primaryColumns.map(joinColumn => joinColumn);
        } else {
          // ManyToMany
          if (relation.isOwning) {
            columns = relation.inverseJoinColumns.map(function (joinColumn) {
              return joinColumn;
            });
          } else {
            columns = relation.inverseRelation.joinColumns.map(function (joinColumn) {
              return joinColumn;
            });
          }
        }

        var idMap = columns.reduce(function (idMap, column) {
          var value = result[column.databaseName];

          if (relation.isOneToMany || relation.isOneToOneNotOwner) {
            if (column.referencedColumn) // if column is a relation
              value = column.referencedColumn.createValueMap(value);
            return _util_OrmUtils__WEBPACK_IMPORTED_MODULE_1__["OrmUtils"].mergeDeep(idMap, column.createValueMap(value));
          } else {
            if (column.referencedColumn.referencedColumn) // if column is a relation
              value = column.referencedColumn.referencedColumn.createValueMap(value);
            return _util_OrmUtils__WEBPACK_IMPORTED_MODULE_1__["OrmUtils"].mergeDeep(idMap, column.referencedColumn.createValueMap(value));
          }
        }, {});

        if (columns.length === 1 && rawRelationIdResult.relationIdAttribute.disableMixedMap === false) {
          if (relation.isOneToMany || relation.isOneToOneNotOwner) {
            return columns[0].getEntityValue(idMap);
          } else {
            return columns[0].referencedColumn.getEntityValue(idMap);
          }
        }

        return idMap;
      }).filter(function (result) {
        return result;
      });
      var properties = rawRelationIdResult.relationIdAttribute.mapToPropertyPropertyPath.split(".");

      var mapToProperty = function mapToProperty(properties, map, value) {
        var property = properties.shift();

        if (property && properties.length === 0) {
          map[property] = value;
          return map;
        } else if (property && properties.length > 0) {
          mapToProperty(properties, map[property], value);
        } else {
          return map;
        }
      };

      if (relation.isOneToOne || relation.isManyToOne) {
        if (idMaps[0] !== undefined) {
          mapToProperty(properties, entity, idMaps[0]);
          hasData = true;
        }
      } else {
        mapToProperty(properties, entity, idMaps);

        if (idMaps.length > 0) {
          hasData = true;
        }
      }
    });
    return hasData;
  };

  RawSqlResultsToEntityTransformer.prototype.transformRelationCounts = function (rawSqlResults, alias, entity) {
    var _this = this;

    var hasData = false;
    this.rawRelationCountResults.filter(function (rawRelationCountResult) {
      return rawRelationCountResult.relationCountAttribute.parentAlias === alias.name;
    }).forEach(function (rawRelationCountResult) {
      var relation = rawRelationCountResult.relationCountAttribute.relation;
      var referenceColumnName;

      if (relation.isOneToMany) {
        referenceColumnName = relation.inverseRelation.joinColumns[0].referencedColumn.databaseName; // todo: fix joinColumns[0]
      } else {
        referenceColumnName = relation.isOwning ? relation.joinColumns[0].referencedColumn.databaseName : relation.inverseRelation.joinColumns[0].referencedColumn.databaseName;
      }

      var referenceColumnValue = rawSqlResults[0][_driver_DriverUtils__WEBPACK_IMPORTED_MODULE_3__["DriverUtils"].buildColumnAlias(_this.driver, alias.name, referenceColumnName)]; // we use zero index since its grouped data // todo: selection with alias for entity columns wont work

      if (referenceColumnValue !== undefined && referenceColumnValue !== null) {
        entity[rawRelationCountResult.relationCountAttribute.mapToPropertyPropertyName] = 0;
        rawRelationCountResult.results.filter(function (result) {
          return result["parentId"] === referenceColumnValue;
        }).forEach(function (result) {
          entity[rawRelationCountResult.relationCountAttribute.mapToPropertyPropertyName] = parseInt(result["cnt"]);
          hasData = true;
        });
      }
    });
    return hasData;
  };

  RawSqlResultsToEntityTransformer.prototype.createValueMapFromJoinColumns = function (relation, parentAlias, rawSqlResults) {
    var _this = this;

    var columns;

    if (relation.isManyToOne || relation.isOneToOneOwner) {
      columns = relation.entityMetadata.primaryColumns.map(function (joinColumn) {
        return joinColumn;
      });
    } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {
      columns = relation.inverseRelation.joinColumns.map(function (joinColumn) {
        return joinColumn;
      });
    } else {
      if (relation.isOwning) {
        columns = relation.joinColumns.map(function (joinColumn) {
          return joinColumn;
        });
      } else {
        columns = relation.inverseRelation.inverseJoinColumns.map(function (joinColumn) {
          return joinColumn;
        });
      }
    }

    return columns.reduce(function (valueMap, column) {
      rawSqlResults.forEach(function (rawSqlResult) {
        if (relation.isManyToOne || relation.isOneToOneOwner) {
          valueMap[column.databaseName] = _this.driver.prepareHydratedValue(rawSqlResult[_driver_DriverUtils__WEBPACK_IMPORTED_MODULE_3__["DriverUtils"].buildColumnAlias(_this.driver, parentAlias, column.databaseName)], column);
        } else {
          valueMap[column.databaseName] = _this.driver.prepareHydratedValue(rawSqlResult[_driver_DriverUtils__WEBPACK_IMPORTED_MODULE_3__["DriverUtils"].buildColumnAlias(_this.driver, parentAlias, column.referencedColumn.databaseName)], column);
        }
      });
      return valueMap;
    }, {});
  };

  RawSqlResultsToEntityTransformer.prototype.extractEntityPrimaryIds = function (relation, relationIdRawResult) {
    var columns;

    if (relation.isManyToOne || relation.isOneToOneOwner) {
      columns = relation.entityMetadata.primaryColumns.map(function (joinColumn) {
        return joinColumn;
      });
    } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {
      columns = relation.inverseRelation.joinColumns.map(function (joinColumn) {
        return joinColumn;
      });
    } else {
      if (relation.isOwning) {
        columns = relation.joinColumns.map(function (joinColumn) {
          return joinColumn;
        });
      } else {
        columns = relation.inverseRelation.inverseJoinColumns.map(function (joinColumn) {
          return joinColumn;
        });
      }
    }

    return columns.reduce(function (data, column) {
      data[column.databaseName] = relationIdRawResult[column.databaseName];
      return data;
    }, {});
  };

  return RawSqlResultsToEntityTransformer;
}();


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/typeorm/browser/query-runner/BaseQueryRunner.js":
/*!**********************************************************************!*\
  !*** ./node_modules/typeorm/browser/query-runner/BaseQueryRunner.js ***!
  \**********************************************************************/
/*! exports provided: BaseQueryRunner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseQueryRunner", function() { return BaseQueryRunner; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _driver_Query__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../driver/Query */ "./node_modules/typeorm/browser/driver/Query.js");
/* harmony import */ var _driver_SqlInMemory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../driver/SqlInMemory */ "./node_modules/typeorm/browser/driver/SqlInMemory.js");
/* harmony import */ var _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/PromiseUtils */ "./node_modules/typeorm/browser/util/PromiseUtils.js");





var BaseQueryRunner =
/** @class */
function () {
  function BaseQueryRunner() {
    // -------------------------------------------------------------------------
    // Public Properties
    // -------------------------------------------------------------------------

    /**
     * Indicates if connection for this query runner is released.
     * Once its released, query runner cannot run queries anymore.
     */
    this.isReleased = false;
    /**
     * Indicates if transaction is in progress.
     */

    this.isTransactionActive = false;
    /**
     * Stores temporarily user data.
     * Useful for sharing data with subscribers.
     */

    this.data = {};
    /**
     * All synchronized tables in the database.
     */

    this.loadedTables = [];
    /**
     * All synchronized views in the database.
     */

    this.loadedViews = [];
    /**
     * Indicates if special query runner mode in which sql queries won't be executed is enabled.
     */

    this.sqlMemoryMode = false;
    /**
     * Sql-s stored if "sql in memory" mode is enabled.
     */

    this.sqlInMemory = new _driver_SqlInMemory__WEBPACK_IMPORTED_MODULE_2__["SqlInMemory"]();
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Loads given table's data from the database.
   */


  BaseQueryRunner.prototype.getTable = function (tablePath) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _a;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = this;
            return [4
            /*yield*/
            , this.loadTables([tablePath])];

          case 1:
            _a.loadedTables = _b.sent();
            return [2
            /*return*/
            , this.loadedTables.length > 0 ? this.loadedTables[0] : undefined];
        }
      });
    });
  };
  /**
   * Loads all tables (with given names) from the database.
   */


  BaseQueryRunner.prototype.getTables = function (tableNames) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _a;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = this;
            return [4
            /*yield*/
            , this.loadTables(tableNames)];

          case 1:
            _a.loadedTables = _b.sent();
            return [2
            /*return*/
            , this.loadedTables];
        }
      });
    });
  };
  /**
   * Loads given view's data from the database.
   */


  BaseQueryRunner.prototype.getView = function (viewPath) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _a;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = this;
            return [4
            /*yield*/
            , this.loadViews([viewPath])];

          case 1:
            _a.loadedViews = _b.sent();
            return [2
            /*return*/
            , this.loadedViews.length > 0 ? this.loadedViews[0] : undefined];
        }
      });
    });
  };
  /**
   * Loads given view's data from the database.
   */


  BaseQueryRunner.prototype.getViews = function (viewPaths) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _a;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = this;
            return [4
            /*yield*/
            , this.loadViews(viewPaths)];

          case 1:
            _a.loadedViews = _b.sent();
            return [2
            /*return*/
            , this.loadedViews];
        }
      });
    });
  };
  /**
   * Enables special query runner mode in which sql queries won't be executed,
   * instead they will be memorized into a special variable inside query runner.
   * You can get memorized sql using getMemorySql() method.
   */


  BaseQueryRunner.prototype.enableSqlMemory = function () {
    this.sqlInMemory = new _driver_SqlInMemory__WEBPACK_IMPORTED_MODULE_2__["SqlInMemory"]();
    this.sqlMemoryMode = true;
  };
  /**
   * Disables special query runner mode in which sql queries won't be executed
   * started by calling enableSqlMemory() method.
   *
   * Previously memorized sql will be flushed.
   */


  BaseQueryRunner.prototype.disableSqlMemory = function () {
    this.sqlInMemory = new _driver_SqlInMemory__WEBPACK_IMPORTED_MODULE_2__["SqlInMemory"]();
    this.sqlMemoryMode = false;
  };
  /**
   * Flushes all memorized sqls.
   */


  BaseQueryRunner.prototype.clearSqlMemory = function () {
    this.sqlInMemory = new _driver_SqlInMemory__WEBPACK_IMPORTED_MODULE_2__["SqlInMemory"]();
  };
  /**
   * Gets sql stored in the memory. Parameters in the sql are already replaced.
   */


  BaseQueryRunner.prototype.getMemorySql = function () {
    return this.sqlInMemory;
  };
  /**
   * Executes up sql queries.
   */


  BaseQueryRunner.prototype.executeMemoryUpSql = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_3__["PromiseUtils"].runInSequence(this.sqlInMemory.upQueries, function (upQuery) {
              return _this.query(upQuery.query, upQuery.parameters);
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Executes down sql queries.
   */


  BaseQueryRunner.prototype.executeMemoryDownSql = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_3__["PromiseUtils"].runInSequence(this.sqlInMemory.downQueries.reverse(), function (downQuery) {
              return _this.query(downQuery.query, downQuery.parameters);
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Gets view from previously loaded views, otherwise loads it from database.
   */


  BaseQueryRunner.prototype.getCachedView = function (viewName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var view, foundViews;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            view = this.loadedViews.find(function (view) {
              return view.name === viewName;
            });
            if (view) return [2
            /*return*/
            , view];
            return [4
            /*yield*/
            , this.loadViews([viewName])];

          case 1:
            foundViews = _a.sent();

            if (foundViews.length > 0) {
              this.loadedViews.push(foundViews[0]);
              return [2
              /*return*/
              , foundViews[0]];
            } else {
              throw new Error("View \"" + viewName + "\" does not exist.");
            }

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Gets table from previously loaded tables, otherwise loads it from database.
   */


  BaseQueryRunner.prototype.getCachedTable = function (tableName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, foundTables;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            table = this.loadedTables.find(function (table) {
              return table.name === tableName;
            });
            if (table) return [2
            /*return*/
            , table];
            return [4
            /*yield*/
            , this.loadTables([tableName])];

          case 1:
            foundTables = _a.sent();

            if (foundTables.length > 0) {
              this.loadedTables.push(foundTables[0]);
              return [2
              /*return*/
              , foundTables[0]];
            } else {
              throw new Error("Table \"" + tableName + "\" does not exist.");
            }

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Replaces loaded table with given changed table.
   */


  BaseQueryRunner.prototype.replaceCachedTable = function (table, changedTable) {
    var foundTable = this.loadedTables.find(function (loadedTable) {
      return loadedTable.name === table.name;
    });

    if (foundTable) {
      foundTable.name = changedTable.name;
      foundTable.columns = changedTable.columns;
      foundTable.indices = changedTable.indices;
      foundTable.foreignKeys = changedTable.foreignKeys;
      foundTable.uniques = changedTable.uniques;
      foundTable.checks = changedTable.checks;
      foundTable.justCreated = changedTable.justCreated;
      foundTable.engine = changedTable.engine;
    }
  };

  BaseQueryRunner.prototype.getTypeormMetadataTableName = function () {
    var options = this.connection.driver.options;
    return this.connection.driver.buildTableName("typeorm_metadata", options.schema, options.database);
  };
  /**
   * Checks if at least one of column properties was changed.
   * Does not checks column type, length and autoincrement, because these properties changes separately.
   */


  BaseQueryRunner.prototype.isColumnChanged = function (oldColumn, newColumn, checkDefault, checkComment) {
    // this logs need to debug issues in column change detection. Do not delete it!
    // console.log("charset ---------------");
    // console.log(oldColumn.charset !== newColumn.charset);
    // console.log(oldColumn.charset, newColumn.charset);
    // console.log("collation ---------------");
    // console.log(oldColumn.collation !== newColumn.collation);
    // console.log(oldColumn.collation, newColumn.collation);
    // console.log("precision ---------------");
    // console.log(oldColumn.precision !== newColumn.precision);
    // console.log(oldColumn.precision, newColumn.precision);
    // console.log("scale ---------------");
    // console.log(oldColumn.scale !== newColumn.scale);
    // console.log(oldColumn.scale, newColumn.scale);
    // console.log("default ---------------");
    // console.log((checkDefault && oldColumn.default !== newColumn.default));
    // console.log(oldColumn.default, newColumn.default);
    // console.log("isNullable ---------------");
    // console.log(oldColumn.isNullable !== newColumn.isNullable);
    // console.log(oldColumn.isNullable, newColumn.isNullable);
    // console.log("comment ---------------");
    // console.log((checkComment && oldColumn.comment !== newColumn.comment));
    // console.log(oldColumn.comment, newColumn.comment);
    // console.log("enum ---------------");
    // console.log(oldColumn.enum !== newColumn.enum);
    // console.log(oldColumn.enum, newColumn.enum);
    return oldColumn.charset !== newColumn.charset || oldColumn.collation !== newColumn.collation || oldColumn.precision !== newColumn.precision || oldColumn.scale !== newColumn.scale || oldColumn.width !== newColumn.width // MySQL only
    || oldColumn.zerofill !== newColumn.zerofill // MySQL only
    || oldColumn.unsigned !== newColumn.unsigned // MySQL only
    || oldColumn.asExpression !== newColumn.asExpression // MySQL only
    || checkDefault && oldColumn["default"] !== newColumn["default"] || oldColumn.onUpdate !== newColumn.onUpdate // MySQL only
    || oldColumn.isNullable !== newColumn.isNullable || checkComment && oldColumn.comment !== newColumn.comment || oldColumn["enum"] !== newColumn["enum"];
  };
  /**
   * Checks if column length is by default.
   */


  BaseQueryRunner.prototype.isDefaultColumnLength = function (table, column, length) {
    // if table have metadata, we check if length is specified in column metadata
    if (this.connection.hasMetadata(table.name)) {
      var metadata = this.connection.getMetadata(table.name);
      var columnMetadata = metadata.findColumnWithDatabaseName(column.name);
      if (columnMetadata && columnMetadata.length) return false;
    }

    if (this.connection.driver.dataTypeDefaults && this.connection.driver.dataTypeDefaults[column.type] && this.connection.driver.dataTypeDefaults[column.type].length) {
      return this.connection.driver.dataTypeDefaults[column.type].length.toString() === length.toString();
    }

    return false;
  };
  /**
   * Checks if column display width is by default. Used only for MySQL.
   */


  BaseQueryRunner.prototype.isDefaultColumnWidth = function (table, column, width) {
    // if table have metadata, we check if length is specified in column metadata
    if (this.connection.hasMetadata(table.name)) {
      var metadata = this.connection.getMetadata(table.name);
      var columnMetadata = metadata.findColumnWithDatabaseName(column.name);
      if (columnMetadata && columnMetadata.width) return false;
    }

    if (this.connection.driver.dataTypeDefaults && this.connection.driver.dataTypeDefaults[column.type] && this.connection.driver.dataTypeDefaults[column.type].width) {
      return this.connection.driver.dataTypeDefaults[column.type].width === width;
    }

    return false;
  };
  /**
   * Checks if column precision is by default.
   */


  BaseQueryRunner.prototype.isDefaultColumnPrecision = function (table, column, precision) {
    // if table have metadata, we check if length is specified in column metadata
    if (this.connection.hasMetadata(table.name)) {
      var metadata = this.connection.getMetadata(table.name);
      var columnMetadata = metadata.findColumnWithDatabaseName(column.name);
      if (columnMetadata && columnMetadata.precision !== null && columnMetadata.precision !== undefined) return false;
    }

    if (this.connection.driver.dataTypeDefaults && this.connection.driver.dataTypeDefaults[column.type] && this.connection.driver.dataTypeDefaults[column.type].precision !== null && this.connection.driver.dataTypeDefaults[column.type].precision !== undefined) return this.connection.driver.dataTypeDefaults[column.type].precision === precision;
    return false;
  };
  /**
   * Checks if column scale is by default.
   */


  BaseQueryRunner.prototype.isDefaultColumnScale = function (table, column, scale) {
    // if table have metadata, we check if length is specified in column metadata
    if (this.connection.hasMetadata(table.name)) {
      var metadata = this.connection.getMetadata(table.name);
      var columnMetadata = metadata.findColumnWithDatabaseName(column.name);
      if (columnMetadata && columnMetadata.scale !== null && columnMetadata.scale !== undefined) return false;
    }

    if (this.connection.driver.dataTypeDefaults && this.connection.driver.dataTypeDefaults[column.type] && this.connection.driver.dataTypeDefaults[column.type].scale !== null && this.connection.driver.dataTypeDefaults[column.type].scale !== undefined) return this.connection.driver.dataTypeDefaults[column.type].scale === scale;
    return false;
  };
  /**
   * Executes sql used special for schema build.
   */


  BaseQueryRunner.prototype.executeQueries = function (upQueries, downQueries) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _a, _b;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_c) {
        switch (_c.label) {
          case 0:
            if (upQueries instanceof _driver_Query__WEBPACK_IMPORTED_MODULE_1__["Query"]) upQueries = [upQueries];
            if (downQueries instanceof _driver_Query__WEBPACK_IMPORTED_MODULE_1__["Query"]) downQueries = [downQueries];

            (_a = this.sqlInMemory.upQueries).push.apply(_a, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](upQueries));

            (_b = this.sqlInMemory.downQueries).push.apply(_b, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](downQueries)); // if sql-in-memory mode is enabled then simply store sql in memory and return


            if (this.sqlMemoryMode === true) return [2
            /*return*/
            , Promise.resolve()];
            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_3__["PromiseUtils"].runInSequence(upQueries, function (upQuery) {
              return _this.query(upQuery.query, upQuery.parameters);
            })];

          case 1:
            _c.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  return BaseQueryRunner;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/repository/AbstractRepository.js":
/*!***********************************************************************!*\
  !*** ./node_modules/typeorm/browser/repository/AbstractRepository.js ***!
  \***********************************************************************/
/*! exports provided: AbstractRepository */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractRepository", function() { return AbstractRepository; });
/* harmony import */ var _error_CustomRepositoryDoesNotHaveEntityError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/CustomRepositoryDoesNotHaveEntityError */ "./node_modules/typeorm/browser/error/CustomRepositoryDoesNotHaveEntityError.js");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index */ "./node_modules/typeorm/browser/index.js");
/* harmony import */ var _error_CustomRepositoryNotFoundError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/CustomRepositoryNotFoundError */ "./node_modules/typeorm/browser/error/CustomRepositoryNotFoundError.js");



/**
 * Provides abstract class for custom repositories that do not inherit from original orm Repository.
 * Contains all most-necessary methods to simplify code in the custom repository.
 * All methods are protected thus not exposed and it allows to create encapsulated custom repository.
 *
 * @experimental
 */

var AbstractRepository =
/** @class */
function () {
  function AbstractRepository() {}

  Object.defineProperty(AbstractRepository.prototype, "repository", {
    // -------------------------------------------------------------------------
    // Protected Accessors
    // -------------------------------------------------------------------------

    /**
     * Gets the original ORM repository for the entity that is managed by this repository.
     * If current repository does not manage any entity, then exception will be thrown.
     */
    get: function get() {
      var target = this.getCustomRepositoryTarget(this);
      if (!target) throw new _error_CustomRepositoryDoesNotHaveEntityError__WEBPACK_IMPORTED_MODULE_0__["CustomRepositoryDoesNotHaveEntityError"](this.constructor);
      return this.manager.getRepository(target);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(AbstractRepository.prototype, "treeRepository", {
    /**
     * Gets the original ORM tree repository for the entity that is managed by this repository.
     * If current repository does not manage any entity, then exception will be thrown.
     */
    get: function get() {
      var target = this.getCustomRepositoryTarget(this);
      if (!target) throw new _error_CustomRepositoryDoesNotHaveEntityError__WEBPACK_IMPORTED_MODULE_0__["CustomRepositoryDoesNotHaveEntityError"](this.constructor);
      return this.manager.getTreeRepository(target);
    },
    enumerable: true,
    configurable: true
  }); // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Creates a new query builder for the repository's entity that can be used to build a sql query.
   * If current repository does not manage any entity, then exception will be thrown.
   */

  AbstractRepository.prototype.createQueryBuilder = function (alias) {
    var target = this.getCustomRepositoryTarget(this.constructor);
    if (!target) throw new _error_CustomRepositoryDoesNotHaveEntityError__WEBPACK_IMPORTED_MODULE_0__["CustomRepositoryDoesNotHaveEntityError"](this.constructor);
    return this.manager.getRepository(target).createQueryBuilder(alias);
  };
  /**
   * Creates a new query builder for the given entity that can be used to build a sql query.
   */


  AbstractRepository.prototype.createQueryBuilderFor = function (entity, alias) {
    return this.getRepositoryFor(entity).createQueryBuilder(alias);
  };
  /**
   * Gets the original ORM repository for the given entity class.
   */


  AbstractRepository.prototype.getRepositoryFor = function (entity) {
    return this.manager.getRepository(entity);
  };
  /**
   * Gets the original ORM tree repository for the given entity class.
   */


  AbstractRepository.prototype.getTreeRepositoryFor = function (entity) {
    return this.manager.getTreeRepository(entity);
  }; // -------------------------------------------------------------------------
  // Private Methods
  // -------------------------------------------------------------------------

  /**
   * Gets custom repository's managed entity.
   * If given custom repository does not manage any entity then undefined will be returned.
   */


  AbstractRepository.prototype.getCustomRepositoryTarget = function (customRepository) {
    var entityRepositoryMetadataArgs = Object(_index__WEBPACK_IMPORTED_MODULE_1__["getMetadataArgsStorage"])().entityRepositories.find(function (repository) {
      return repository.target === (customRepository instanceof Function ? customRepository : customRepository.constructor);
    });
    if (!entityRepositoryMetadataArgs) throw new _error_CustomRepositoryNotFoundError__WEBPACK_IMPORTED_MODULE_2__["CustomRepositoryNotFoundError"](customRepository);
    return entityRepositoryMetadataArgs.entity;
  };

  return AbstractRepository;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/repository/BaseEntity.js":
/*!***************************************************************!*\
  !*** ./node_modules/typeorm/browser/repository/BaseEntity.js ***!
  \***************************************************************/
/*! exports provided: BaseEntity */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseEntity", function() { return BaseEntity; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index */ "./node_modules/typeorm/browser/index.js");
/* harmony import */ var _util_ObjectUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/ObjectUtils */ "./node_modules/typeorm/browser/util/ObjectUtils.js");



/**
 * Base abstract entity for all entities, used in ActiveRecord patterns.
 */

var BaseEntity =
/** @class */
function () {
  function BaseEntity() {} // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Checks if entity has an id.
   * If entity composite compose ids, it will check them all.
   */


  BaseEntity.prototype.hasId = function () {
    return this.constructor.getRepository().hasId(this);
  };
  /**
   * Saves current entity in the database.
   * If entity does not exist in the database then inserts, otherwise updates.
   */


  BaseEntity.prototype.save = function (options) {
    return this.constructor.getRepository().save(this, options);
  };
  /**
   * Removes current entity from the database.
   */


  BaseEntity.prototype.remove = function (options) {
    return this.constructor.getRepository().remove(this, options);
  };
  /**
   * Reloads entity data from the database.
   */


  BaseEntity.prototype.reload = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var base, newestEntity;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            base = this.constructor;
            return [4
            /*yield*/
            , base.getRepository().findOneOrFail(base.getId(this))];

          case 1:
            newestEntity = _a.sent();
            _util_ObjectUtils__WEBPACK_IMPORTED_MODULE_2__["ObjectUtils"].assign(this, newestEntity);
            return [2
            /*return*/
            ];
        }
      });
    });
  }; // -------------------------------------------------------------------------
  // Public Static Methods
  // -------------------------------------------------------------------------

  /**
   * Sets connection to be used by entity.
   */


  BaseEntity.useConnection = function (connection) {
    this.usedConnection = connection;
  };
  /**
   * Gets current entity's Repository.
   */


  BaseEntity.getRepository = function () {
    var connection = this.usedConnection || Object(_index__WEBPACK_IMPORTED_MODULE_1__["getConnection"])();
    return connection.getRepository(this);
  };

  Object.defineProperty(BaseEntity, "target", {
    /**
     * Returns object that is managed by this repository.
     * If this repository manages entity from schema,
     * then it returns a name of that schema instead.
     */
    get: function get() {
      return this.getRepository().target;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Checks entity has an id.
   * If entity composite compose ids, it will check them all.
   */

  BaseEntity.hasId = function (entity) {
    return this.getRepository().hasId(entity);
  };
  /**
   * Gets entity mixed id.
   */


  BaseEntity.getId = function (entity) {
    return this.getRepository().getId(entity);
  };
  /**
   * Creates a new query builder that can be used to build a sql query.
   */


  BaseEntity.createQueryBuilder = function (alias) {
    return this.getRepository().createQueryBuilder(alias);
  };
  /**
    * Creates a new entity instance and copies all entity properties from this object into a new entity.
    * Note that it copies only properties that present in entity schema.
    */


  BaseEntity.create = function (entityOrEntities) {
    return this.getRepository().create(entityOrEntities);
  };
  /**
   * Merges multiple entities (or entity-like objects) into a given entity.
   */


  BaseEntity.merge = function (mergeIntoEntity) {
    var entityLikes = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      entityLikes[_i - 1] = arguments[_i];
    }

    var _a;

    return (_a = this.getRepository()).merge.apply(_a, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"]([mergeIntoEntity], entityLikes));
  };
  /**
   * Creates a new entity from the given plan javascript object. If entity already exist in the database, then
   * it loads it (and everything related to it), replaces all values with the new ones from the given object
   * and returns this new entity. This new entity is actually a loaded from the db entity with all properties
   * replaced from the new object.
   *
   * Note that given entity-like object must have an entity id / primary key to find entity by.
   * Returns undefined if entity with given id was not found.
   */


  BaseEntity.preload = function (entityLike) {
    return this.getRepository().preload(entityLike);
  };
  /**
   * Saves one or many given entities.
   */


  BaseEntity.save = function (entityOrEntities, options) {
    return this.getRepository().save(entityOrEntities, options);
  };
  /**
   * Removes one or many given entities.
   */


  BaseEntity.remove = function (entityOrEntities, options) {
    return this.getRepository().remove(entityOrEntities, options);
  };
  /**
   * Inserts a given entity into the database.
   * Unlike save method executes a primitive operation without cascades, relations and other operations included.
   * Executes fast and efficient INSERT query.
   * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.
   */


  BaseEntity.insert = function (entity, options) {
    return this.getRepository().insert(entity, options);
  };
  /**
   * Updates entity partially. Entity can be found by a given conditions.
   * Unlike save method executes a primitive operation without cascades, relations and other operations included.
   * Executes fast and efficient UPDATE query.
   * Does not check if entity exist in the database.
   */


  BaseEntity.update = function (criteria, partialEntity, options) {
    return this.getRepository().update(criteria, partialEntity, options);
  };
  /**
   * Deletes entities by a given criteria.
   * Unlike remove method executes a primitive operation without cascades, relations and other operations included.
   * Executes fast and efficient DELETE query.
   * Does not check if entity exist in the database.
   */


  BaseEntity["delete"] = function (criteria, options) {
    return this.getRepository()["delete"](criteria, options);
  };
  /**
   * Counts entities that match given find options or conditions.
   */


  BaseEntity.count = function (optionsOrConditions) {
    return this.getRepository().count(optionsOrConditions);
  };
  /**
   * Finds entities that match given find options or conditions.
   */


  BaseEntity.find = function (optionsOrConditions) {
    return this.getRepository().find(optionsOrConditions);
  };
  /**
   * Finds entities that match given find options or conditions.
   * Also counts all entities that match given conditions,
   * but ignores pagination settings (from and take options).
   */


  BaseEntity.findAndCount = function (optionsOrConditions) {
    return this.getRepository().findAndCount(optionsOrConditions);
  };
  /**
   * Finds entities by ids.
   * Optionally find options can be applied.
   */


  BaseEntity.findByIds = function (ids, optionsOrConditions) {
    return this.getRepository().findByIds(ids, optionsOrConditions);
  };
  /**
   * Finds first entity that matches given conditions.
   */


  BaseEntity.findOne = function (optionsOrConditions, maybeOptions) {
    return this.getRepository().findOne(optionsOrConditions, maybeOptions);
  };
  /**
   * Finds first entity that matches given conditions.
   */


  BaseEntity.findOneOrFail = function (optionsOrConditions, maybeOptions) {
    return this.getRepository().findOneOrFail(optionsOrConditions, maybeOptions);
  };
  /**
   * Executes a raw SQL query and returns a raw database results.
   * Raw query execution is supported only by relational databases (MongoDB is not supported).
   */


  BaseEntity.query = function (query, parameters) {
    return this.getRepository().query(query, parameters);
  };
  /**
   * Clears all the data from the given table/collection (truncates/drops it).
   */


  BaseEntity.clear = function () {
    return this.getRepository().clear();
  };

  return BaseEntity;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/repository/Repository.js":
/*!***************************************************************!*\
  !*** ./node_modules/typeorm/browser/repository/Repository.js ***!
  \***************************************************************/
/*! exports provided: Repository */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Repository", function() { return Repository; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.
 */

var Repository =
/** @class */
function () {
  function Repository() {} // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Creates a new query builder that can be used to build a sql query.
   */


  Repository.prototype.createQueryBuilder = function (alias, queryRunner) {
    return this.manager.createQueryBuilder(this.metadata.target, alias || this.metadata.targetName, queryRunner || this.queryRunner);
  };

  Object.defineProperty(Repository.prototype, "target", {
    /**
     * Returns object that is managed by this repository.
     * If this repository manages entity from schema,
     * then it returns a name of that schema instead.
     */
    get: function get() {
      return this.metadata.target;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Checks if entity has an id.
   * If entity composite compose ids, it will check them all.
   */

  Repository.prototype.hasId = function (entity) {
    return this.manager.hasId(this.metadata.target, entity);
  };
  /**
   * Gets entity mixed id.
   */


  Repository.prototype.getId = function (entity) {
    return this.manager.getId(this.metadata.target, entity);
  };
  /**
   * Creates a new entity instance or instances.
   * Can copy properties from the given object into new entities.
   */


  Repository.prototype.create = function (plainEntityLikeOrPlainEntityLikes) {
    return this.manager.create(this.metadata.target, plainEntityLikeOrPlainEntityLikes);
  };
  /**
   * Merges multiple entities (or entity-like objects) into a given entity.
   */


  Repository.prototype.merge = function (mergeIntoEntity) {
    var entityLikes = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      entityLikes[_i - 1] = arguments[_i];
    }

    var _a;

    return (_a = this.manager).merge.apply(_a, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"]([this.metadata.target, mergeIntoEntity], entityLikes));
  };
  /**
   * Creates a new entity from the given plan javascript object. If entity already exist in the database, then
   * it loads it (and everything related to it), replaces all values with the new ones from the given object
   * and returns this new entity. This new entity is actually a loaded from the db entity with all properties
   * replaced from the new object.
   *
   * Note that given entity-like object must have an entity id / primary key to find entity by.
   * Returns undefined if entity with given id was not found.
   */


  Repository.prototype.preload = function (entityLike) {
    return this.manager.preload(this.metadata.target, entityLike);
  };
  /**
   * Saves one or many given entities.
   */


  Repository.prototype.save = function (entityOrEntities, options) {
    return this.manager.save(this.metadata.target, entityOrEntities, options);
  };
  /**
   * Removes one or many given entities.
   */


  Repository.prototype.remove = function (entityOrEntities, options) {
    return this.manager.remove(this.metadata.target, entityOrEntities, options);
  };
  /**
   * Records the delete date of one or many given entities.
   */


  Repository.prototype.softRemove = function (entityOrEntities, options) {
    return this.manager.softRemove(this.metadata.target, entityOrEntities, options);
  };
  /**
   * Recovers one or many given entities.
   */


  Repository.prototype.recover = function (entityOrEntities, options) {
    return this.manager.recover(this.metadata.target, entityOrEntities, options);
  };
  /**
   * Inserts a given entity into the database.
   * Unlike save method executes a primitive operation without cascades, relations and other operations included.
   * Executes fast and efficient INSERT query.
   * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.
   */


  Repository.prototype.insert = function (entity) {
    return this.manager.insert(this.metadata.target, entity);
  };
  /**
   * Updates entity partially. Entity can be found by a given conditions.
   * Unlike save method executes a primitive operation without cascades, relations and other operations included.
   * Executes fast and efficient UPDATE query.
   * Does not check if entity exist in the database.
   */


  Repository.prototype.update = function (criteria, partialEntity) {
    return this.manager.update(this.metadata.target, criteria, partialEntity);
  };
  /**
   * Deletes entities by a given criteria.
   * Unlike save method executes a primitive operation without cascades, relations and other operations included.
   * Executes fast and efficient DELETE query.
   * Does not check if entity exist in the database.
   */


  Repository.prototype["delete"] = function (criteria) {
    return this.manager["delete"](this.metadata.target, criteria);
  };
  /**
   * Records the delete date of entities by a given criteria.
   * Unlike save method executes a primitive operation without cascades, relations and other operations included.
   * Executes fast and efficient SOFT-DELETE query.
   * Does not check if entity exist in the database.
   */


  Repository.prototype.softDelete = function (criteria) {
    return this.manager.softDelete(this.metadata.target, criteria);
  };
  /**
   * Restores entities by a given criteria.
   * Unlike save method executes a primitive operation without cascades, relations and other operations included.
   * Executes fast and efficient SOFT-DELETE query.
   * Does not check if entity exist in the database.
   */


  Repository.prototype.restore = function (criteria) {
    return this.manager.restore(this.metadata.target, criteria);
  };
  /**
   * Counts entities that match given find options or conditions.
   */


  Repository.prototype.count = function (optionsOrConditions) {
    return this.manager.count(this.metadata.target, optionsOrConditions);
  };
  /**
   * Finds entities that match given find options or conditions.
   */


  Repository.prototype.find = function (optionsOrConditions) {
    return this.manager.find(this.metadata.target, optionsOrConditions);
  };
  /**
   * Finds entities that match given find options or conditions.
   * Also counts all entities that match given conditions,
   * but ignores pagination settings (from and take options).
   */


  Repository.prototype.findAndCount = function (optionsOrConditions) {
    return this.manager.findAndCount(this.metadata.target, optionsOrConditions);
  };
  /**
   * Finds entities by ids.
   * Optionally find options can be applied.
   */


  Repository.prototype.findByIds = function (ids, optionsOrConditions) {
    return this.manager.findByIds(this.metadata.target, ids, optionsOrConditions);
  };
  /**
   * Finds first entity that matches given conditions.
   */


  Repository.prototype.findOne = function (optionsOrConditions, maybeOptions) {
    return this.manager.findOne(this.metadata.target, optionsOrConditions, maybeOptions);
  };
  /**
   * Finds first entity that matches given conditions.
   */


  Repository.prototype.findOneOrFail = function (optionsOrConditions, maybeOptions) {
    return this.manager.findOneOrFail(this.metadata.target, optionsOrConditions, maybeOptions);
  };
  /**
   * Executes a raw SQL query and returns a raw database results.
   * Raw query execution is supported only by relational databases (MongoDB is not supported).
   */


  Repository.prototype.query = function (query, parameters) {
    return this.manager.query(query, parameters);
  };
  /**
   * Clears all the data from the given table/collection (truncates/drops it).
   *
   * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.
   * @see https://stackoverflow.com/a/5972738/925151
   */


  Repository.prototype.clear = function () {
    return this.manager.clear(this.metadata.target);
  };
  /**
   * Increments some column by provided value of the entities matched given conditions.
   */


  Repository.prototype.increment = function (conditions, propertyPath, value) {
    return this.manager.increment(this.metadata.target, conditions, propertyPath, value);
  };
  /**
   * Decrements some column by provided value of the entities matched given conditions.
   */


  Repository.prototype.decrement = function (conditions, propertyPath, value) {
    return this.manager.decrement(this.metadata.target, conditions, propertyPath, value);
  };

  return Repository;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/repository/RepositoryFactory.js":
/*!**********************************************************************!*\
  !*** ./node_modules/typeorm/browser/repository/RepositoryFactory.js ***!
  \**********************************************************************/
/*! exports provided: RepositoryFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RepositoryFactory", function() { return RepositoryFactory; });
/* harmony import */ var _TreeRepository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TreeRepository */ "./node_modules/typeorm/browser/repository/TreeRepository.js");
/* harmony import */ var _Repository__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Repository */ "./node_modules/typeorm/browser/repository/Repository.js");
/* harmony import */ var _driver_mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../driver/mongodb/MongoDriver */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");




/**
 * Factory used to create different types of repositories.
 */

var RepositoryFactory =
/** @class */
function () {
  function RepositoryFactory() {} // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Creates a repository.
   */


  RepositoryFactory.prototype.create = function (manager, metadata, queryRunner) {
    if (metadata.treeType) {
      // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,
      // however we need these properties for internal work of the class
      var repository = new _TreeRepository__WEBPACK_IMPORTED_MODULE_0__["TreeRepository"]();
      Object.assign(repository, {
        manager: manager,
        metadata: metadata,
        queryRunner: queryRunner
      });
      return repository;
    } else {
      // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,
      // however we need these properties for internal work of the class
      var repository = void 0;

      if (manager.connection.driver instanceof _driver_mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_2__["MongoDriver"]) {
        repository = new _driver_mongodb_MongoDriver__WEBPACK_IMPORTED_MODULE_2__["MongoRepository"]();
      } else {
        repository = new _Repository__WEBPACK_IMPORTED_MODULE_1__["Repository"]();
      }

      Object.assign(repository, {
        manager: manager,
        metadata: metadata,
        queryRunner: queryRunner
      });
      return repository;
    }
  };

  return RepositoryFactory;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/repository/TreeRepository.js":
/*!*******************************************************************!*\
  !*** ./node_modules/typeorm/browser/repository/TreeRepository.js ***!
  \*******************************************************************/
/*! exports provided: TreeRepository */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TreeRepository", function() { return TreeRepository; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Repository__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Repository */ "./node_modules/typeorm/browser/repository/Repository.js");
/* harmony import */ var _driver_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../driver/sqlite-abstract/AbstractSqliteDriver */ "./node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteDriver.js");



/**
 * Repository with additional functions to work with trees.
 *
 * @see Repository
 */

var TreeRepository =
/** @class */
function (_super) {
  tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](TreeRepository, _super);

  function TreeRepository() {
    return _super !== null && _super.apply(this, arguments) || this;
  } // todo: implement moving
  // todo: implement removing
  // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Gets complete trees for all roots in the table.
   */


  TreeRepository.prototype.findTrees = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var roots;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.findRoots()];

          case 1:
            roots = _a.sent();
            return [4
            /*yield*/
            , Promise.all(roots.map(function (root) {
              return _this.findDescendantsTree(root);
            }))];

          case 2:
            _a.sent();

            return [2
            /*return*/
            , roots];
        }
      });
    });
  };
  /**
   * Roots are entities that have no ancestors. Finds them all.
   */


  TreeRepository.prototype.findRoots = function () {
    var _this = this;

    var escapeAlias = function escapeAlias(alias) {
      return _this.manager.connection.driver.escape(alias);
    };

    var escapeColumn = function escapeColumn(column) {
      return _this.manager.connection.driver.escape(column);
    };

    var parentPropertyName = this.manager.connection.namingStrategy.joinColumnName(this.metadata.treeParentRelation.propertyName, "id");
    return this.createQueryBuilder("treeEntity").where(escapeAlias("treeEntity") + "." + escapeColumn(parentPropertyName) + " IS NULL").getMany();
  };
  /**
   * Gets all children (descendants) of the given entity. Returns them all in a flat array.
   */


  TreeRepository.prototype.findDescendants = function (entity) {
    return this.createDescendantsQueryBuilder("treeEntity", "treeClosure", entity).getMany();
  };
  /**
   * Gets all children (descendants) of the given entity. Returns them in a tree - nested into each other.
   */


  TreeRepository.prototype.findDescendantsTree = function (entity) {
    var _this = this; // todo: throw exception if there is no column of this relation?


    return this.createDescendantsQueryBuilder("treeEntity", "treeClosure", entity).getRawAndEntities().then(function (entitiesAndScalars) {
      var relationMaps = _this.createRelationMaps("treeEntity", entitiesAndScalars.raw);

      _this.buildChildrenEntityTree(entity, entitiesAndScalars.entities, relationMaps);

      return entity;
    });
  };
  /**
   * Gets number of descendants of the entity.
   */


  TreeRepository.prototype.countDescendants = function (entity) {
    return this.createDescendantsQueryBuilder("treeEntity", "treeClosure", entity).getCount();
  };
  /**
   * Creates a query builder used to get descendants of the entities in a tree.
   */


  TreeRepository.prototype.createDescendantsQueryBuilder = function (alias, closureTableAlias, entity) {
    var _this = this; // create shortcuts for better readability


    var escape = function escape(alias) {
      return _this.manager.connection.driver.escape(alias);
    };

    if (this.metadata.treeType === "closure-table") {
      var joinCondition = this.metadata.closureJunctionTable.descendantColumns.map(function (column) {
        return escape(closureTableAlias) + "." + escape(column.propertyPath) + " = " + escape(alias) + "." + escape(column.referencedColumn.propertyPath);
      }).join(" AND ");
      var parameters_1 = {};
      var whereCondition = this.metadata.closureJunctionTable.ancestorColumns.map(function (column) {
        parameters_1[column.referencedColumn.propertyName] = column.referencedColumn.getEntityValue(entity);
        return escape(closureTableAlias) + "." + escape(column.propertyPath) + " = :" + column.referencedColumn.propertyName;
      }).join(" AND ");
      return this.createQueryBuilder(alias).innerJoin(this.metadata.closureJunctionTable.tableName, closureTableAlias, joinCondition).where(whereCondition).setParameters(parameters_1);
    } else if (this.metadata.treeType === "nested-set") {
      var whereCondition = alias + "." + this.metadata.nestedSetLeftColumn.propertyPath + " BETWEEN " + "joined." + this.metadata.nestedSetLeftColumn.propertyPath + " AND joined." + this.metadata.nestedSetRightColumn.propertyPath;
      var parameters_2 = {};
      var joinCondition = this.metadata.treeParentRelation.joinColumns.map(function (joinColumn) {
        var parameterName = joinColumn.referencedColumn.propertyPath.replace(".", "_");
        parameters_2[parameterName] = joinColumn.referencedColumn.getEntityValue(entity);
        return "joined." + joinColumn.referencedColumn.propertyPath + " = :" + parameterName;
      }).join(" AND ");
      return this.createQueryBuilder(alias).innerJoin(this.metadata.targetName, "joined", whereCondition).where(joinCondition, parameters_2);
    } else if (this.metadata.treeType === "materialized-path") {
      return this.createQueryBuilder(alias).where(function (qb) {
        var subQuery = qb.subQuery().select(_this.metadata.targetName + "." + _this.metadata.materializedPathColumn.propertyPath, "path").from(_this.metadata.target, _this.metadata.targetName).whereInIds(_this.metadata.getEntityIdMap(entity));
        qb.setNativeParameters(subQuery.expressionMap.nativeParameters);

        if (_this.manager.connection.driver instanceof _driver_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_2__["AbstractSqliteDriver"]) {
          return alias + "." + _this.metadata.materializedPathColumn.propertyPath + " LIKE " + subQuery.getQuery() + " || '%'";
        } else {
          return alias + "." + _this.metadata.materializedPathColumn.propertyPath + " LIKE CONCAT(" + subQuery.getQuery() + ", '%')";
        }
      });
    }

    throw new Error("Supported only in tree entities");
  };
  /**
   * Gets all parents (ancestors) of the given entity. Returns them all in a flat array.
   */


  TreeRepository.prototype.findAncestors = function (entity) {
    return this.createAncestorsQueryBuilder("treeEntity", "treeClosure", entity).getMany();
  };
  /**
   * Gets all parents (ancestors) of the given entity. Returns them in a tree - nested into each other.
   */


  TreeRepository.prototype.findAncestorsTree = function (entity) {
    var _this = this; // todo: throw exception if there is no column of this relation?


    return this.createAncestorsQueryBuilder("treeEntity", "treeClosure", entity).getRawAndEntities().then(function (entitiesAndScalars) {
      var relationMaps = _this.createRelationMaps("treeEntity", entitiesAndScalars.raw);

      _this.buildParentEntityTree(entity, entitiesAndScalars.entities, relationMaps);

      return entity;
    });
  };
  /**
   * Gets number of ancestors of the entity.
   */


  TreeRepository.prototype.countAncestors = function (entity) {
    return this.createAncestorsQueryBuilder("treeEntity", "treeClosure", entity).getCount();
  };
  /**
   * Creates a query builder used to get ancestors of the entities in the tree.
   */


  TreeRepository.prototype.createAncestorsQueryBuilder = function (alias, closureTableAlias, entity) {
    // create shortcuts for better readability
    // const escape = (alias: string) => this.manager.connection.driver.escape(alias);
    var _this = this;

    if (this.metadata.treeType === "closure-table") {
      var joinCondition = this.metadata.closureJunctionTable.ancestorColumns.map(function (column) {
        return closureTableAlias + "." + column.propertyPath + " = " + alias + "." + column.referencedColumn.propertyPath;
      }).join(" AND ");
      var parameters_3 = {};
      var whereCondition = this.metadata.closureJunctionTable.descendantColumns.map(function (column) {
        parameters_3[column.referencedColumn.propertyName] = column.referencedColumn.getEntityValue(entity);
        return closureTableAlias + "." + column.propertyPath + " = :" + column.referencedColumn.propertyName;
      }).join(" AND ");
      return this.createQueryBuilder(alias).innerJoin(this.metadata.closureJunctionTable.tableName, closureTableAlias, joinCondition).where(whereCondition).setParameters(parameters_3);
    } else if (this.metadata.treeType === "nested-set") {
      var joinCondition = "joined." + this.metadata.nestedSetLeftColumn.propertyPath + " BETWEEN " + alias + "." + this.metadata.nestedSetLeftColumn.propertyPath + " AND " + alias + "." + this.metadata.nestedSetRightColumn.propertyPath;
      var parameters_4 = {};
      var whereCondition = this.metadata.treeParentRelation.joinColumns.map(function (joinColumn) {
        var parameterName = joinColumn.referencedColumn.propertyPath.replace(".", "_");
        parameters_4[parameterName] = joinColumn.referencedColumn.getEntityValue(entity);
        return "joined." + joinColumn.referencedColumn.propertyPath + " = :" + parameterName;
      }).join(" AND ");
      return this.createQueryBuilder(alias).innerJoin(this.metadata.targetName, "joined", joinCondition).where(whereCondition, parameters_4);
    } else if (this.metadata.treeType === "materialized-path") {
      // example: SELECT * FROM category category WHERE (SELECT mpath FROM `category` WHERE id = 2) LIKE CONCAT(category.mpath, '%');
      return this.createQueryBuilder(alias).where(function (qb) {
        var subQuery = qb.subQuery().select(_this.metadata.targetName + "." + _this.metadata.materializedPathColumn.propertyPath, "path").from(_this.metadata.target, _this.metadata.targetName).whereInIds(_this.metadata.getEntityIdMap(entity));
        qb.setNativeParameters(subQuery.expressionMap.nativeParameters);

        if (_this.manager.connection.driver instanceof _driver_sqlite_abstract_AbstractSqliteDriver__WEBPACK_IMPORTED_MODULE_2__["AbstractSqliteDriver"]) {
          return subQuery.getQuery() + " LIKE " + alias + "." + _this.metadata.materializedPathColumn.propertyPath + " || '%'";
        } else {
          return subQuery.getQuery() + " LIKE CONCAT(" + alias + "." + _this.metadata.materializedPathColumn.propertyPath + ", '%')";
        }
      });
    }

    throw new Error("Supported only in tree entities");
  };
  /**
   * Moves entity to the children of then given entity.
   *
  move(entity: Entity, to: Entity): Promise<void> {
      return Promise.resolve();
  } */
  // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------


  TreeRepository.prototype.createRelationMaps = function (alias, rawResults) {
    var _this = this;

    return rawResults.map(function (rawResult) {
      var joinColumn = _this.metadata.treeParentRelation.joinColumns[0]; // fixes issue #2518, default to databaseName property when givenDatabaseName is not set

      var joinColumnName = joinColumn.givenDatabaseName || joinColumn.databaseName;
      var id = rawResult[alias + "_" + _this.metadata.primaryColumns[0].databaseName];
      var parentId = rawResult[alias + "_" + joinColumnName];
      return {
        id: _this.manager.connection.driver.prepareHydratedValue(id, _this.metadata.primaryColumns[0]),
        parentId: _this.manager.connection.driver.prepareHydratedValue(parentId, joinColumn)
      };
    });
  };

  TreeRepository.prototype.buildChildrenEntityTree = function (entity, entities, relationMaps) {
    var _this = this;

    var childProperty = this.metadata.treeChildrenRelation.propertyName;
    var parentEntityId = this.metadata.primaryColumns[0].getEntityValue(entity);
    var childRelationMaps = relationMaps.filter(function (relationMap) {
      return relationMap.parentId === parentEntityId;
    });
    var childIds = new Set(childRelationMaps.map(function (relationMap) {
      return relationMap.id;
    }));
    entity[childProperty] = entities.filter(function (entity) {
      return childIds.has(entity.id);
    });
    entity[childProperty].forEach(function (childEntity) {
      _this.buildChildrenEntityTree(childEntity, entities, relationMaps);
    });
  };

  TreeRepository.prototype.buildParentEntityTree = function (entity, entities, relationMaps) {
    var _this = this;

    var parentProperty = this.metadata.treeParentRelation.propertyName;
    var entityId = this.metadata.primaryColumns[0].getEntityValue(entity);
    var parentRelationMap = relationMaps.find(function (relationMap) {
      return relationMap.id === entityId;
    });
    var parentEntity = entities.find(function (entity) {
      if (!parentRelationMap) return false;
      return entity[_this.metadata.primaryColumns[0].propertyName] === parentRelationMap.parentId;
    });

    if (parentEntity) {
      entity[parentProperty] = parentEntity;
      this.buildParentEntityTree(entity[parentProperty], entities, relationMaps);
    }
  };

  return TreeRepository;
}(_Repository__WEBPACK_IMPORTED_MODULE_1__["Repository"]);



/***/ }),

/***/ "./node_modules/typeorm/browser/schema-builder/RdbmsSchemaBuilder.js":
/*!***************************************************************************!*\
  !*** ./node_modules/typeorm/browser/schema-builder/RdbmsSchemaBuilder.js ***!
  \***************************************************************************/
/*! exports provided: RdbmsSchemaBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RdbmsSchemaBuilder", function() { return RdbmsSchemaBuilder; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _driver_cockroachdb_CockroachDriver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../driver/cockroachdb/CockroachDriver */ "./node_modules/typeorm/browser/driver/cockroachdb/CockroachDriver.js");
/* harmony import */ var _table_Table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./table/Table */ "./node_modules/typeorm/browser/schema-builder/table/Table.js");
/* harmony import */ var _table_TableColumn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./table/TableColumn */ "./node_modules/typeorm/browser/schema-builder/table/TableColumn.js");
/* harmony import */ var _table_TableForeignKey__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./table/TableForeignKey */ "./node_modules/typeorm/browser/schema-builder/table/TableForeignKey.js");
/* harmony import */ var _table_TableIndex__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./table/TableIndex */ "./node_modules/typeorm/browser/schema-builder/table/TableIndex.js");
/* harmony import */ var _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/PromiseUtils */ "./node_modules/typeorm/browser/util/PromiseUtils.js");
/* harmony import */ var _util_TableUtils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util/TableUtils */ "./node_modules/typeorm/browser/schema-builder/util/TableUtils.js");
/* harmony import */ var _driver_postgres_PostgresDriver__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../driver/postgres/PostgresDriver */ "./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js");
/* harmony import */ var _table_TableUnique__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./table/TableUnique */ "./node_modules/typeorm/browser/schema-builder/table/TableUnique.js");
/* harmony import */ var _table_TableCheck__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./table/TableCheck */ "./node_modules/typeorm/browser/schema-builder/table/TableCheck.js");
/* harmony import */ var _table_TableExclusion__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./table/TableExclusion */ "./node_modules/typeorm/browser/schema-builder/table/TableExclusion.js");
/* harmony import */ var _view_View__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./view/View */ "./node_modules/typeorm/browser/schema-builder/view/View.js");
/* harmony import */ var _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../driver/aurora-data-api/AuroraDataApiDriver */ "./node_modules/typeorm/browser/driver/aurora-data-api/AuroraDataApiDriver.js");















/**
 * Creates complete tables schemas in the database based on the entity metadatas.
 *
 * Steps how schema is being built:
 * 1. load list of all tables with complete column and keys information from the db
 * 2. drop all (old) foreign keys that exist in the table, but does not exist in the metadata
 * 3. create new tables that does not exist in the db, but exist in the metadata
 * 4. drop all columns exist (left old) in the db table, but does not exist in the metadata
 * 5. add columns from metadata which does not exist in the table
 * 6. update all exist columns which metadata has changed
 * 7. update primary keys - update old and create new primary key from changed columns
 * 8. create foreign keys which does not exist in the table yet
 * 9. create indices which are missing in db yet, and drops indices which exist in the db, but does not exist in the metadata anymore
 */

var RdbmsSchemaBuilder =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function RdbmsSchemaBuilder(connection) {
    this.connection = connection;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Creates complete schemas for the given entity metadatas.
   */


  RdbmsSchemaBuilder.prototype.build = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var tablePaths, error_1, rollbackError_1;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            this.queryRunner = this.connection.createQueryRunner("master");
            if (!!(this.connection.driver instanceof _driver_cockroachdb_CockroachDriver__WEBPACK_IMPORTED_MODULE_1__["CockroachDriver"])) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , this.queryRunner.startTransaction()];

          case 1:
            _a.sent();

            _a.label = 2;

          case 2:
            _a.trys.push([2, 12, 18, 20]);

            tablePaths = this.entityToSyncMetadatas.map(function (metadata) {
              return metadata.tablePath;
            });
            if (!(this.viewEntityToSyncMetadatas.length > 0)) return [3
            /*break*/
            , 4];
            return [4
            /*yield*/
            , this.createTypeormMetadataTable()];

          case 3:
            _a.sent();

            _a.label = 4;

          case 4:
            return [4
            /*yield*/
            , this.queryRunner.getTables(tablePaths)];

          case 5:
            _a.sent();

            return [4
            /*yield*/
            , this.queryRunner.getViews([])];

          case 6:
            _a.sent();

            return [4
            /*yield*/
            , this.executeSchemaSyncOperationsInProperOrder()];

          case 7:
            _a.sent();

            if (!this.connection.queryResultCache) return [3
            /*break*/
            , 9];
            return [4
            /*yield*/
            , this.connection.queryResultCache.synchronize(this.queryRunner)];

          case 8:
            _a.sent();

            _a.label = 9;

          case 9:
            if (!!(this.connection.driver instanceof _driver_cockroachdb_CockroachDriver__WEBPACK_IMPORTED_MODULE_1__["CockroachDriver"])) return [3
            /*break*/
            , 11];
            return [4
            /*yield*/
            , this.queryRunner.commitTransaction()];

          case 10:
            _a.sent();

            _a.label = 11;

          case 11:
            return [3
            /*break*/
            , 20];

          case 12:
            error_1 = _a.sent();
            _a.label = 13;

          case 13:
            _a.trys.push([13, 16,, 17]);

            if (!!(this.connection.driver instanceof _driver_cockroachdb_CockroachDriver__WEBPACK_IMPORTED_MODULE_1__["CockroachDriver"])) return [3
            /*break*/
            , 15];
            return [4
            /*yield*/
            , this.queryRunner.rollbackTransaction()];

          case 14:
            _a.sent();

            _a.label = 15;

          case 15:
            return [3
            /*break*/
            , 17];

          case 16:
            rollbackError_1 = _a.sent();
            return [3
            /*break*/
            , 17];

          case 17:
            throw error_1;

          case 18:
            return [4
            /*yield*/
            , this.queryRunner.release()];

          case 19:
            _a.sent();

            return [7
            /*endfinally*/
            ];

          case 20:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns sql queries to be executed by schema builder.
   */


  RdbmsSchemaBuilder.prototype.log = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var tablePaths;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            this.queryRunner = this.connection.createQueryRunner("master");
            _a.label = 1;

          case 1:
            _a.trys.push([1,, 9, 11]);

            tablePaths = this.entityToSyncMetadatas.map(function (metadata) {
              return metadata.tablePath;
            });
            if (!(this.viewEntityToSyncMetadatas.length > 0)) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , this.createTypeormMetadataTable()];

          case 2:
            _a.sent();

            _a.label = 3;

          case 3:
            return [4
            /*yield*/
            , this.queryRunner.getTables(tablePaths)];

          case 4:
            _a.sent();

            return [4
            /*yield*/
            , this.queryRunner.getViews([])];

          case 5:
            _a.sent();

            this.queryRunner.enableSqlMemory();
            return [4
            /*yield*/
            , this.executeSchemaSyncOperationsInProperOrder()];

          case 6:
            _a.sent();

            if (!this.connection.queryResultCache) return [3
            /*break*/
            , 8];
            return [4
            /*yield*/
            , this.connection.queryResultCache.synchronize(this.queryRunner)];

          case 7:
            _a.sent();

            _a.label = 8;

          case 8:
            return [2
            /*return*/
            , this.queryRunner.getMemorySql()];

          case 9:
            // its important to disable this mode despite the fact we are release query builder
            // because there exist drivers which reuse same query runner. Also its important to disable
            // sql memory after call of getMemorySql() method because last one flushes sql memory.
            this.queryRunner.disableSqlMemory();
            return [4
            /*yield*/
            , this.queryRunner.release()];

          case 10:
            _a.sent();

            return [7
            /*endfinally*/
            ];

          case 11:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  Object.defineProperty(RdbmsSchemaBuilder.prototype, "entityToSyncMetadatas", {
    // -------------------------------------------------------------------------
    // Protected Methods
    // -------------------------------------------------------------------------

    /**
     * Returns only entities that should be synced in the database.
     */
    get: function get() {
      return this.connection.entityMetadatas.filter(function (metadata) {
        return metadata.synchronize && metadata.tableType !== "entity-child" && metadata.tableType !== "view";
      });
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RdbmsSchemaBuilder.prototype, "viewEntityToSyncMetadatas", {
    /**
     * Returns only entities that should be synced in the database.
     */
    get: function get() {
      return this.connection.entityMetadatas.filter(function (metadata) {
        return metadata.tableType === "view" && metadata.synchronize;
      });
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Executes schema sync operations in a proper order.
   * Order of operations matter here.
   */

  RdbmsSchemaBuilder.prototype.executeSchemaSyncOperationsInProperOrder = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.dropOldViews()];

          case 1:
            _a.sent();

            return [4
            /*yield*/
            , this.dropOldForeignKeys()];

          case 2:
            _a.sent();

            return [4
            /*yield*/
            , this.dropOldIndices()];

          case 3:
            _a.sent();

            return [4
            /*yield*/
            , this.dropOldChecks()];

          case 4:
            _a.sent();

            return [4
            /*yield*/
            , this.dropOldExclusions()];

          case 5:
            _a.sent();

            return [4
            /*yield*/
            , this.dropCompositeUniqueConstraints()];

          case 6:
            _a.sent(); // await this.renameTables();


            return [4
            /*yield*/
            , this.renameColumns()];

          case 7:
            // await this.renameTables();
            _a.sent();

            return [4
            /*yield*/
            , this.createNewTables()];

          case 8:
            _a.sent();

            return [4
            /*yield*/
            , this.dropRemovedColumns()];

          case 9:
            _a.sent();

            return [4
            /*yield*/
            , this.addNewColumns()];

          case 10:
            _a.sent();

            return [4
            /*yield*/
            , this.updatePrimaryKeys()];

          case 11:
            _a.sent();

            return [4
            /*yield*/
            , this.updateExistColumns()];

          case 12:
            _a.sent();

            return [4
            /*yield*/
            , this.createNewIndices()];

          case 13:
            _a.sent();

            return [4
            /*yield*/
            , this.createNewChecks()];

          case 14:
            _a.sent();

            return [4
            /*yield*/
            , this.createNewExclusions()];

          case 15:
            _a.sent();

            return [4
            /*yield*/
            , this.createCompositeUniqueConstraints()];

          case 16:
            _a.sent();

            return [4
            /*yield*/
            , this.createForeignKeys()];

          case 17:
            _a.sent();

            return [4
            /*yield*/
            , this.createViews()];

          case 18:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops all (old) foreign keys that exist in the tables, but do not exist in the entity metadata.
   */


  RdbmsSchemaBuilder.prototype.dropOldForeignKeys = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_6__["PromiseUtils"].runInSequence(this.entityToSyncMetadatas, function (metadata) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var table, tableForeignKeysToDrop;
                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      table = this.queryRunner.loadedTables.find(function (table) {
                        return table.name === metadata.tablePath;
                      });
                      if (!table) return [2
                      /*return*/
                      ];
                      tableForeignKeysToDrop = table.foreignKeys.filter(function (tableForeignKey) {
                        var metadataFK = metadata.foreignKeys.find(function (metadataForeignKey) {
                          return foreignKeysMatch(tableForeignKey, metadataForeignKey);
                        });
                        return !metadataFK || metadataFK.onDelete && metadataFK.onDelete !== tableForeignKey.onDelete || metadataFK.onUpdate && metadataFK.onUpdate !== tableForeignKey.onUpdate;
                      });
                      if (tableForeignKeysToDrop.length === 0) return [2
                      /*return*/
                      ];
                      this.connection.logger.logSchemaBuild("dropping old foreign keys of " + table.name + ": " + tableForeignKeysToDrop.map(function (dbForeignKey) {
                        return dbForeignKey.name;
                      }).join(", ")); // drop foreign keys from the database

                      return [4
                      /*yield*/
                      , this.queryRunner.dropForeignKeys(table, tableForeignKeysToDrop)];

                    case 1:
                      // drop foreign keys from the database
                      _a.sent();

                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Rename tables
   */


  RdbmsSchemaBuilder.prototype.renameTables = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_6__["PromiseUtils"].runInSequence(this.entityToSyncMetadatas, function (metadata) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  return [2
                  /*return*/
                  ];
                });
              });
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Renames columns.
   * Works if only one column per table was changed.
   * Changes only column name. If something besides name was changed, these changes will be ignored.
   */


  RdbmsSchemaBuilder.prototype.renameColumns = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_6__["PromiseUtils"].runInSequence(this.entityToSyncMetadatas, function (metadata) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var table, renamedMetadataColumns, renamedTableColumns, renamedColumn;

                var _this = this;

                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      table = this.queryRunner.loadedTables.find(function (table) {
                        return table.name === metadata.tablePath;
                      });
                      if (!table) return [2
                      /*return*/
                      ];
                      if (metadata.columns.length !== table.columns.length) return [2
                      /*return*/
                      ];
                      renamedMetadataColumns = metadata.columns.filter(function (column) {
                        return !table.columns.find(function (tableColumn) {
                          return tableColumn.name === column.databaseName && tableColumn.type === _this.connection.driver.normalizeType(column) && tableColumn.isNullable === column.isNullable && tableColumn.isUnique === _this.connection.driver.normalizeIsUnique(column);
                        });
                      });
                      if (renamedMetadataColumns.length === 0 || renamedMetadataColumns.length > 1) return [2
                      /*return*/
                      ];
                      renamedTableColumns = table.columns.filter(function (tableColumn) {
                        return !metadata.columns.find(function (column) {
                          return column.databaseName === tableColumn.name && _this.connection.driver.normalizeType(column) === tableColumn.type && column.isNullable === tableColumn.isNullable && _this.connection.driver.normalizeIsUnique(column) === tableColumn.isUnique;
                        });
                      });
                      if (renamedTableColumns.length === 0 || renamedTableColumns.length > 1) return [2
                      /*return*/
                      ];
                      renamedColumn = renamedTableColumns[0].clone();
                      renamedColumn.name = renamedMetadataColumns[0].databaseName;
                      this.connection.logger.logSchemaBuild("renaming column \"" + renamedTableColumns[0].name + "\" in to \"" + renamedColumn.name + "\"");
                      return [4
                      /*yield*/
                      , this.queryRunner.renameColumn(table, renamedTableColumns[0], renamedColumn)];

                    case 1:
                      _a.sent();

                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  RdbmsSchemaBuilder.prototype.dropOldIndices = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_6__["PromiseUtils"].runInSequence(this.entityToSyncMetadatas, function (metadata) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var table, dropQueries;

                var _this = this;

                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      table = this.queryRunner.loadedTables.find(function (table) {
                        return table.name === metadata.tablePath;
                      });
                      if (!table) return [2
                      /*return*/
                      ];
                      dropQueries = table.indices.filter(function (tableIndex) {
                        var indexMetadata = metadata.indices.find(function (index) {
                          return index.name === tableIndex.name;
                        });

                        if (indexMetadata) {
                          if (indexMetadata.synchronize === false) return false;
                          if (indexMetadata.isUnique !== tableIndex.isUnique) return true;
                          if (indexMetadata.isSpatial !== tableIndex.isSpatial) return true;
                          if (indexMetadata.isFulltext !== tableIndex.isFulltext) return true;
                          if (indexMetadata.columns.length !== tableIndex.columnNames.length) return true;
                          return !indexMetadata.columns.every(function (column) {
                            return tableIndex.columnNames.indexOf(column.databaseName) !== -1;
                          });
                        }

                        return true;
                      }).map(function (tableIndex) {
                        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                          return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                            switch (_a.label) {
                              case 0:
                                this.connection.logger.logSchemaBuild("dropping an index: \"" + tableIndex.name + "\" from table " + table.name);
                                return [4
                                /*yield*/
                                , this.queryRunner.dropIndex(table, tableIndex)];

                              case 1:
                                _a.sent();

                                return [2
                                /*return*/
                                ];
                            }
                          });
                        });
                      });
                      return [4
                      /*yield*/
                      , Promise.all(dropQueries)];

                    case 1:
                      _a.sent();

                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  RdbmsSchemaBuilder.prototype.dropOldChecks = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            // Mysql does not support check constraints
            if (this.connection.driver instanceof _driver_postgres_PostgresDriver__WEBPACK_IMPORTED_MODULE_8__["MysqlDriver"] || this.connection.driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_13__["AuroraDataApiDriver"]) return [2
            /*return*/
            ];
            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_6__["PromiseUtils"].runInSequence(this.entityToSyncMetadatas, function (metadata) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var table, oldChecks;
                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      table = this.queryRunner.loadedTables.find(function (table) {
                        return table.name === metadata.tablePath;
                      });
                      if (!table) return [2
                      /*return*/
                      ];
                      oldChecks = table.checks.filter(function (tableCheck) {
                        return !metadata.checks.find(function (checkMetadata) {
                          return checkMetadata.name === tableCheck.name;
                        });
                      });
                      if (oldChecks.length === 0) return [2
                      /*return*/
                      ];
                      this.connection.logger.logSchemaBuild("dropping old check constraint: " + oldChecks.map(function (check) {
                        return "\"" + check.name + "\"";
                      }).join(", ") + " from table \"" + table.name + "\"");
                      return [4
                      /*yield*/
                      , this.queryRunner.dropCheckConstraints(table, oldChecks)];

                    case 1:
                      _a.sent();

                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  RdbmsSchemaBuilder.prototype.dropCompositeUniqueConstraints = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_6__["PromiseUtils"].runInSequence(this.entityToSyncMetadatas, function (metadata) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var table, compositeUniques;
                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      table = this.queryRunner.loadedTables.find(function (table) {
                        return table.name === metadata.tablePath;
                      });
                      if (!table) return [2
                      /*return*/
                      ];
                      compositeUniques = table.uniques.filter(function (tableUnique) {
                        return tableUnique.columnNames.length > 1 && !metadata.uniques.find(function (uniqueMetadata) {
                          return uniqueMetadata.name === tableUnique.name;
                        });
                      });
                      if (compositeUniques.length === 0) return [2
                      /*return*/
                      ];
                      this.connection.logger.logSchemaBuild("dropping old unique constraint: " + compositeUniques.map(function (unique) {
                        return "\"" + unique.name + "\"";
                      }).join(", ") + " from table \"" + table.name + "\"");
                      return [4
                      /*yield*/
                      , this.queryRunner.dropUniqueConstraints(table, compositeUniques)];

                    case 1:
                      _a.sent();

                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  RdbmsSchemaBuilder.prototype.dropOldExclusions = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            // Only PostgreSQL supports exclusion constraints
            if (!(this.connection.driver instanceof _driver_postgres_PostgresDriver__WEBPACK_IMPORTED_MODULE_8__["PostgresDriver"])) return [2
            /*return*/
            ];
            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_6__["PromiseUtils"].runInSequence(this.entityToSyncMetadatas, function (metadata) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var table, oldExclusions;
                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      table = this.queryRunner.loadedTables.find(function (table) {
                        return table.name === metadata.tablePath;
                      });
                      if (!table) return [2
                      /*return*/
                      ];
                      oldExclusions = table.exclusions.filter(function (tableExclusion) {
                        return !metadata.exclusions.find(function (exclusionMetadata) {
                          return exclusionMetadata.name === tableExclusion.name;
                        });
                      });
                      if (oldExclusions.length === 0) return [2
                      /*return*/
                      ];
                      this.connection.logger.logSchemaBuild("dropping old exclusion constraint: " + oldExclusions.map(function (exclusion) {
                        return "\"" + exclusion.name + "\"";
                      }).join(", ") + " from table \"" + table.name + "\"");
                      return [4
                      /*yield*/
                      , this.queryRunner.dropExclusionConstraints(table, oldExclusions)];

                    case 1:
                      _a.sent();

                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates tables that do not exist in the database yet.
   * New tables are created without foreign and primary keys.
   * Primary key only can be created in conclusion with auto generated column.
   */


  RdbmsSchemaBuilder.prototype.createNewTables = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_6__["PromiseUtils"].runInSequence(this.entityToSyncMetadatas, function (metadata) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var existTable, table;

                var _this = this;

                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      existTable = this.queryRunner.loadedTables.find(function (table) {
                        var database = metadata.database && metadata.database !== _this.connection.driver.database ? metadata.database : undefined;
                        var schema = metadata.schema || _this.connection.driver.options.schema;

                        var fullTableName = _this.connection.driver.buildTableName(metadata.tableName, schema, database);

                        return table.name === fullTableName;
                      });
                      if (existTable) return [2
                      /*return*/
                      ];
                      this.connection.logger.logSchemaBuild("creating a new table: " + metadata.tablePath);
                      table = _table_Table__WEBPACK_IMPORTED_MODULE_2__["Table"].create(metadata, this.connection.driver);
                      return [4
                      /*yield*/
                      , this.queryRunner.createTable(table, false, false)];

                    case 1:
                      _a.sent();

                      this.queryRunner.loadedTables.push(table);
                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  RdbmsSchemaBuilder.prototype.createViews = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_6__["PromiseUtils"].runInSequence(this.viewEntityToSyncMetadatas, function (metadata) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var existView, view;

                var _this = this;

                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      existView = this.queryRunner.loadedViews.find(function (view) {
                        var database = metadata.database && metadata.database !== _this.connection.driver.database ? metadata.database : undefined;
                        var schema = metadata.schema || _this.connection.driver.options.schema;

                        var fullViewName = _this.connection.driver.buildTableName(metadata.tableName, schema, database);

                        var viewExpression = typeof view.expression === "string" ? view.expression.trim() : view.expression(_this.connection).getQuery();
                        var metadataExpression = typeof metadata.expression === "string" ? metadata.expression.trim() : metadata.expression(_this.connection).getQuery();
                        return view.name === fullViewName && viewExpression === metadataExpression;
                      });
                      if (existView) return [2
                      /*return*/
                      ];
                      this.connection.logger.logSchemaBuild("creating a new view: " + metadata.tablePath);
                      view = _view_View__WEBPACK_IMPORTED_MODULE_12__["View"].create(metadata, this.connection.driver);
                      return [4
                      /*yield*/
                      , this.queryRunner.createView(view)];

                    case 1:
                      _a.sent();

                      this.queryRunner.loadedViews.push(view);
                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  RdbmsSchemaBuilder.prototype.dropOldViews = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_6__["PromiseUtils"].runInSequence(this.queryRunner.loadedViews, function (view) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var existViewMetadata;

                var _this = this;

                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      existViewMetadata = this.viewEntityToSyncMetadatas.find(function (metadata) {
                        var database = metadata.database && metadata.database !== _this.connection.driver.database ? metadata.database : undefined;
                        var schema = metadata.schema || _this.connection.driver.options.schema;

                        var fullViewName = _this.connection.driver.buildTableName(metadata.tableName, schema, database);

                        var viewExpression = typeof view.expression === "string" ? view.expression.trim() : view.expression(_this.connection).getQuery();
                        var metadataExpression = typeof metadata.expression === "string" ? metadata.expression.trim() : metadata.expression(_this.connection).getQuery();
                        return view.name === fullViewName && viewExpression === metadataExpression;
                      });
                      if (existViewMetadata) return [2
                      /*return*/
                      ];
                      this.connection.logger.logSchemaBuild("dropping an old view: " + view.name); // drop an old view

                      return [4
                      /*yield*/
                      , this.queryRunner.dropView(view)];

                    case 1:
                      // drop an old view
                      _a.sent();

                      this.queryRunner.loadedViews.splice(this.queryRunner.loadedViews.indexOf(view), 1);
                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops all columns that exist in the table, but does not exist in the metadata (left old).
   * We drop their keys too, since it should be safe.
   */


  RdbmsSchemaBuilder.prototype.dropRemovedColumns = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_6__["PromiseUtils"].runInSequence(this.entityToSyncMetadatas, function (metadata) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var table, droppedTableColumns;
                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      table = this.queryRunner.loadedTables.find(function (table) {
                        return table.name === metadata.tablePath;
                      });
                      if (!table) return [2
                      /*return*/
                      ];
                      droppedTableColumns = table.columns.filter(function (tableColumn) {
                        return !metadata.columns.find(function (columnMetadata) {
                          return columnMetadata.databaseName === tableColumn.name;
                        });
                      });
                      if (droppedTableColumns.length === 0) return [2
                      /*return*/
                      ];
                      this.connection.logger.logSchemaBuild("columns dropped in " + table.name + ": " + droppedTableColumns.map(function (column) {
                        return column.name;
                      }).join(", ")); // drop columns from the database

                      return [4
                      /*yield*/
                      , this.queryRunner.dropColumns(table, droppedTableColumns)];

                    case 1:
                      // drop columns from the database
                      _a.sent();

                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Adds columns from metadata which does not exist in the table.
   * Columns are created without keys.
   */


  RdbmsSchemaBuilder.prototype.addNewColumns = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_6__["PromiseUtils"].runInSequence(this.entityToSyncMetadatas, function (metadata) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var table, newColumnMetadatas, newTableColumnOptions, newTableColumns;
                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      table = this.queryRunner.loadedTables.find(function (table) {
                        return table.name === metadata.tablePath;
                      });
                      if (!table) return [2
                      /*return*/
                      ];
                      newColumnMetadatas = metadata.columns.filter(function (columnMetadata) {
                        return !table.columns.find(function (tableColumn) {
                          return tableColumn.name === columnMetadata.databaseName;
                        });
                      });
                      if (newColumnMetadatas.length === 0) return [2
                      /*return*/
                      ];
                      newTableColumnOptions = this.metadataColumnsToTableColumnOptions(newColumnMetadatas);
                      newTableColumns = newTableColumnOptions.map(function (option) {
                        return new _table_TableColumn__WEBPACK_IMPORTED_MODULE_3__["TableColumn"](option);
                      });
                      if (newTableColumns.length === 0) return [2
                      /*return*/
                      ];
                      this.connection.logger.logSchemaBuild("new columns added: " + newColumnMetadatas.map(function (column) {
                        return column.databaseName;
                      }).join(", "));
                      return [4
                      /*yield*/
                      , this.queryRunner.addColumns(table, newTableColumns)];

                    case 1:
                      _a.sent();

                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Updates composite primary keys.
   */


  RdbmsSchemaBuilder.prototype.updatePrimaryKeys = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_6__["PromiseUtils"].runInSequence(this.entityToSyncMetadatas, function (metadata) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var table, primaryMetadataColumns, primaryTableColumns, changedPrimaryColumns;

                var _this = this;

                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      table = this.queryRunner.loadedTables.find(function (table) {
                        return table.name === metadata.tablePath;
                      });
                      if (!table) return [2
                      /*return*/
                      ];
                      primaryMetadataColumns = metadata.columns.filter(function (column) {
                        return column.isPrimary;
                      });
                      primaryTableColumns = table.columns.filter(function (column) {
                        return column.isPrimary;
                      });
                      if (!(primaryTableColumns.length !== primaryMetadataColumns.length && primaryMetadataColumns.length > 1)) return [3
                      /*break*/
                      , 2];
                      changedPrimaryColumns = primaryMetadataColumns.map(function (primaryMetadataColumn) {
                        return new _table_TableColumn__WEBPACK_IMPORTED_MODULE_3__["TableColumn"](_util_TableUtils__WEBPACK_IMPORTED_MODULE_7__["TableUtils"].createTableColumnOptions(primaryMetadataColumn, _this.connection.driver));
                      });
                      return [4
                      /*yield*/
                      , this.queryRunner.updatePrimaryKeys(table, changedPrimaryColumns)];

                    case 1:
                      _a.sent();

                      _a.label = 2;

                    case 2:
                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Update all exist columns which metadata has changed.
   * Still don't create keys. Also we don't touch foreign keys of the changed columns.
   */


  RdbmsSchemaBuilder.prototype.updateExistColumns = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_6__["PromiseUtils"].runInSequence(this.entityToSyncMetadatas, function (metadata) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var table, changedColumns, newAndOldTableColumns;

                var _this = this;

                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      table = this.queryRunner.loadedTables.find(function (table) {
                        return table.name === metadata.tablePath;
                      });
                      if (!table) return [2
                      /*return*/
                      ];
                      changedColumns = this.connection.driver.findChangedColumns(table.columns, metadata.columns);
                      if (changedColumns.length === 0) return [2
                      /*return*/
                      ]; // drop all foreign keys that point to this column

                      return [4
                      /*yield*/
                      , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_6__["PromiseUtils"].runInSequence(changedColumns, function (changedColumn) {
                        return _this.dropColumnReferencedForeignKeys(metadata.tablePath, changedColumn.databaseName);
                      })];

                    case 1:
                      // drop all foreign keys that point to this column
                      _a.sent(); // drop all composite indices related to this column


                      return [4
                      /*yield*/
                      , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_6__["PromiseUtils"].runInSequence(changedColumns, function (changedColumn) {
                        return _this.dropColumnCompositeIndices(metadata.tablePath, changedColumn.databaseName);
                      })];

                    case 2:
                      // drop all composite indices related to this column
                      _a.sent();

                      if (!!(this.connection.driver instanceof _driver_postgres_PostgresDriver__WEBPACK_IMPORTED_MODULE_8__["MysqlDriver"] || this.connection.driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_13__["AuroraDataApiDriver"])) return [3
                      /*break*/
                      , 4];
                      return [4
                      /*yield*/
                      , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_6__["PromiseUtils"].runInSequence(changedColumns, function (changedColumn) {
                        return _this.dropColumnCompositeUniques(metadata.tablePath, changedColumn.databaseName);
                      })];

                    case 3:
                      _a.sent();

                      _a.label = 4;

                    case 4:
                      newAndOldTableColumns = changedColumns.map(function (changedColumn) {
                        var oldTableColumn = table.columns.find(function (column) {
                          return column.name === changedColumn.databaseName;
                        });
                        var newTableColumnOptions = _util_TableUtils__WEBPACK_IMPORTED_MODULE_7__["TableUtils"].createTableColumnOptions(changedColumn, _this.connection.driver);
                        var newTableColumn = new _table_TableColumn__WEBPACK_IMPORTED_MODULE_3__["TableColumn"](newTableColumnOptions);
                        return {
                          oldColumn: oldTableColumn,
                          newColumn: newTableColumn
                        };
                      });
                      if (newAndOldTableColumns.length === 0) return [2
                      /*return*/
                      ];
                      this.connection.logger.logSchemaBuild("columns changed in \"" + table.name + "\". updating: " + changedColumns.map(function (column) {
                        return column.databaseName;
                      }).join(", "));
                      return [4
                      /*yield*/
                      , this.queryRunner.changeColumns(table, newAndOldTableColumns)];

                    case 5:
                      _a.sent();

                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates composite indices which are missing in db yet.
   */


  RdbmsSchemaBuilder.prototype.createNewIndices = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_6__["PromiseUtils"].runInSequence(this.entityToSyncMetadatas, function (metadata) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var table, newIndices;
                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      table = this.queryRunner.loadedTables.find(function (table) {
                        return table.name === metadata.tablePath;
                      });
                      if (!table) return [2
                      /*return*/
                      ];
                      newIndices = metadata.indices.filter(function (indexMetadata) {
                        return !table.indices.find(function (tableIndex) {
                          return tableIndex.name === indexMetadata.name;
                        }) && indexMetadata.synchronize === true;
                      }).map(function (indexMetadata) {
                        return _table_TableIndex__WEBPACK_IMPORTED_MODULE_5__["TableIndex"].create(indexMetadata);
                      });
                      if (newIndices.length === 0) return [2
                      /*return*/
                      ];
                      this.connection.logger.logSchemaBuild("adding new indices " + newIndices.map(function (index) {
                        return "\"" + index.name + "\"";
                      }).join(", ") + " in table \"" + table.name + "\"");
                      return [4
                      /*yield*/
                      , this.queryRunner.createIndices(table, newIndices)];

                    case 1:
                      _a.sent();

                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  RdbmsSchemaBuilder.prototype.createNewChecks = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            // Mysql does not support check constraints
            if (this.connection.driver instanceof _driver_postgres_PostgresDriver__WEBPACK_IMPORTED_MODULE_8__["MysqlDriver"] || this.connection.driver instanceof _driver_aurora_data_api_AuroraDataApiDriver__WEBPACK_IMPORTED_MODULE_13__["AuroraDataApiDriver"]) return [2
            /*return*/
            ];
            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_6__["PromiseUtils"].runInSequence(this.entityToSyncMetadatas, function (metadata) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var table, newChecks;
                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      table = this.queryRunner.loadedTables.find(function (table) {
                        return table.name === metadata.tablePath;
                      });
                      if (!table) return [2
                      /*return*/
                      ];
                      newChecks = metadata.checks.filter(function (checkMetadata) {
                        return !table.checks.find(function (tableCheck) {
                          return tableCheck.name === checkMetadata.name;
                        });
                      }).map(function (checkMetadata) {
                        return _table_TableCheck__WEBPACK_IMPORTED_MODULE_10__["TableCheck"].create(checkMetadata);
                      });
                      if (newChecks.length === 0) return [2
                      /*return*/
                      ];
                      this.connection.logger.logSchemaBuild("adding new check constraints: " + newChecks.map(function (index) {
                        return "\"" + index.name + "\"";
                      }).join(", ") + " in table \"" + table.name + "\"");
                      return [4
                      /*yield*/
                      , this.queryRunner.createCheckConstraints(table, newChecks)];

                    case 1:
                      _a.sent();

                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates composite uniques which are missing in db yet.
   */


  RdbmsSchemaBuilder.prototype.createCompositeUniqueConstraints = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_6__["PromiseUtils"].runInSequence(this.entityToSyncMetadatas, function (metadata) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var table, compositeUniques;
                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      table = this.queryRunner.loadedTables.find(function (table) {
                        return table.name === metadata.tablePath;
                      });
                      if (!table) return [2
                      /*return*/
                      ];
                      compositeUniques = metadata.uniques.filter(function (uniqueMetadata) {
                        return uniqueMetadata.columns.length > 1 && !table.uniques.find(function (tableUnique) {
                          return tableUnique.name === uniqueMetadata.name;
                        });
                      }).map(function (uniqueMetadata) {
                        return _table_TableUnique__WEBPACK_IMPORTED_MODULE_9__["TableUnique"].create(uniqueMetadata);
                      });
                      if (compositeUniques.length === 0) return [2
                      /*return*/
                      ];
                      this.connection.logger.logSchemaBuild("adding new unique constraints: " + compositeUniques.map(function (unique) {
                        return "\"" + unique.name + "\"";
                      }).join(", ") + " in table \"" + table.name + "\"");
                      return [4
                      /*yield*/
                      , this.queryRunner.createUniqueConstraints(table, compositeUniques)];

                    case 1:
                      _a.sent();

                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates exclusions which are missing in db yet.
   */


  RdbmsSchemaBuilder.prototype.createNewExclusions = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            // Only PostgreSQL supports exclusion constraints
            if (!(this.connection.driver instanceof _driver_postgres_PostgresDriver__WEBPACK_IMPORTED_MODULE_8__["PostgresDriver"])) return [2
            /*return*/
            ];
            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_6__["PromiseUtils"].runInSequence(this.entityToSyncMetadatas, function (metadata) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var table, newExclusions;
                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      table = this.queryRunner.loadedTables.find(function (table) {
                        return table.name === metadata.tablePath;
                      });
                      if (!table) return [2
                      /*return*/
                      ];
                      newExclusions = metadata.exclusions.filter(function (exclusionMetadata) {
                        return !table.exclusions.find(function (tableExclusion) {
                          return tableExclusion.name === exclusionMetadata.name;
                        });
                      }).map(function (exclusionMetadata) {
                        return _table_TableExclusion__WEBPACK_IMPORTED_MODULE_11__["TableExclusion"].create(exclusionMetadata);
                      });
                      if (newExclusions.length === 0) return [2
                      /*return*/
                      ];
                      this.connection.logger.logSchemaBuild("adding new exclusion constraints: " + newExclusions.map(function (exclusion) {
                        return "\"" + exclusion.name + "\"";
                      }).join(", ") + " in table \"" + table.name + "\"");
                      return [4
                      /*yield*/
                      , this.queryRunner.createExclusionConstraints(table, newExclusions)];

                    case 1:
                      _a.sent();

                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates foreign keys which does not exist in the table yet.
   */


  RdbmsSchemaBuilder.prototype.createForeignKeys = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_6__["PromiseUtils"].runInSequence(this.entityToSyncMetadatas, function (metadata) {
              return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                var table, newKeys, dbForeignKeys;
                return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      table = this.queryRunner.loadedTables.find(function (table) {
                        return table.name === metadata.tablePath;
                      });
                      if (!table) return [2
                      /*return*/
                      ];
                      newKeys = metadata.foreignKeys.filter(function (foreignKey) {
                        return !table.foreignKeys.find(function (dbForeignKey) {
                          return foreignKeysMatch(dbForeignKey, foreignKey);
                        });
                      });
                      if (newKeys.length === 0) return [2
                      /*return*/
                      ];
                      dbForeignKeys = newKeys.map(function (foreignKeyMetadata) {
                        return _table_TableForeignKey__WEBPACK_IMPORTED_MODULE_4__["TableForeignKey"].create(foreignKeyMetadata);
                      });
                      this.connection.logger.logSchemaBuild("creating a foreign keys: " + newKeys.map(function (key) {
                        return key.name;
                      }).join(", ") + " on table \"" + table.name + "\"");
                      return [4
                      /*yield*/
                      , this.queryRunner.createForeignKeys(table, dbForeignKeys)];

                    case 1:
                      _a.sent();

                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            })];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops all foreign keys where given column of the given table is being used.
   */


  RdbmsSchemaBuilder.prototype.dropColumnReferencedForeignKeys = function (tablePath, columnName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, tablesWithFK, columnForeignKey, clonedTable;

      var _this = this;

      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            table = this.queryRunner.loadedTables.find(function (table) {
              return table.name === tablePath;
            });
            if (!table) return [2
            /*return*/
            ];
            tablesWithFK = [];
            columnForeignKey = table.foreignKeys.find(function (foreignKey) {
              return foreignKey.columnNames.indexOf(columnName) !== -1;
            });

            if (columnForeignKey) {
              clonedTable = table.clone();
              clonedTable.foreignKeys = [columnForeignKey];
              tablesWithFK.push(clonedTable);
              table.removeForeignKey(columnForeignKey);
            }

            this.queryRunner.loadedTables.forEach(function (loadedTable) {
              var dependForeignKeys = loadedTable.foreignKeys.filter(function (foreignKey) {
                return foreignKey.referencedTableName === tablePath && foreignKey.referencedColumnNames.indexOf(columnName) !== -1;
              });

              if (dependForeignKeys.length > 0) {
                var clonedTable = loadedTable.clone();
                clonedTable.foreignKeys = dependForeignKeys;
                tablesWithFK.push(clonedTable);
                dependForeignKeys.forEach(function (dependForeignKey) {
                  return loadedTable.removeForeignKey(dependForeignKey);
                });
              }
            });
            if (!(tablesWithFK.length > 0)) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , _util_PromiseUtils__WEBPACK_IMPORTED_MODULE_6__["PromiseUtils"].runInSequence(tablesWithFK, function (tableWithFK) {
              _this.connection.logger.logSchemaBuild("dropping related foreign keys of " + tableWithFK.name + ": " + tableWithFK.foreignKeys.map(function (foreignKey) {
                return foreignKey.name;
              }).join(", "));

              return _this.queryRunner.dropForeignKeys(tableWithFK, tableWithFK.foreignKeys);
            })];

          case 1:
            _a.sent();

            _a.label = 2;

          case 2:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops all composite indices, related to given column.
   */


  RdbmsSchemaBuilder.prototype.dropColumnCompositeIndices = function (tablePath, columnName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, relatedIndices;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            table = this.queryRunner.loadedTables.find(function (table) {
              return table.name === tablePath;
            });
            if (!table) return [2
            /*return*/
            ];
            relatedIndices = table.indices.filter(function (index) {
              return index.columnNames.length > 1 && index.columnNames.indexOf(columnName) !== -1;
            });
            if (relatedIndices.length === 0) return [2
            /*return*/
            ];
            this.connection.logger.logSchemaBuild("dropping related indices of \"" + tablePath + "\".\"" + columnName + "\": " + relatedIndices.map(function (index) {
              return index.name;
            }).join(", "));
            return [4
            /*yield*/
            , this.queryRunner.dropIndices(table, relatedIndices)];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Drops all composite uniques, related to given column.
   */


  RdbmsSchemaBuilder.prototype.dropColumnCompositeUniques = function (tablePath, columnName) {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var table, relatedUniques;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            table = this.queryRunner.loadedTables.find(function (table) {
              return table.name === tablePath;
            });
            if (!table) return [2
            /*return*/
            ];
            relatedUniques = table.uniques.filter(function (unique) {
              return unique.columnNames.length > 1 && unique.columnNames.indexOf(columnName) !== -1;
            });
            if (relatedUniques.length === 0) return [2
            /*return*/
            ];
            this.connection.logger.logSchemaBuild("dropping related unique constraints of \"" + tablePath + "\".\"" + columnName + "\": " + relatedUniques.map(function (unique) {
              return unique.name;
            }).join(", "));
            return [4
            /*yield*/
            , this.queryRunner.dropUniqueConstraints(table, relatedUniques)];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates new columns from the given column metadatas.
   */


  RdbmsSchemaBuilder.prototype.metadataColumnsToTableColumnOptions = function (columns) {
    var _this = this;

    return columns.map(function (columnMetadata) {
      return _util_TableUtils__WEBPACK_IMPORTED_MODULE_7__["TableUtils"].createTableColumnOptions(columnMetadata, _this.connection.driver);
    });
  };
  /**
   * Creates typeorm service table for storing user defined Views.
   */


  RdbmsSchemaBuilder.prototype.createTypeormMetadataTable = function () {
    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
      var options, typeormMetadataTable;
      return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
        switch (_a.label) {
          case 0:
            options = this.connection.driver.options;
            typeormMetadataTable = this.connection.driver.buildTableName("typeorm_metadata", options.schema, options.database);
            return [4
            /*yield*/
            , this.queryRunner.createTable(new _table_Table__WEBPACK_IMPORTED_MODULE_2__["Table"]({
              name: typeormMetadataTable,
              columns: [{
                name: "type",
                type: this.connection.driver.normalizeType({
                  type: this.connection.driver.mappedDataTypes.metadataType
                }),
                isNullable: false
              }, {
                name: "database",
                type: this.connection.driver.normalizeType({
                  type: this.connection.driver.mappedDataTypes.metadataDatabase
                }),
                isNullable: true
              }, {
                name: "schema",
                type: this.connection.driver.normalizeType({
                  type: this.connection.driver.mappedDataTypes.metadataSchema
                }),
                isNullable: true
              }, {
                name: "table",
                type: this.connection.driver.normalizeType({
                  type: this.connection.driver.mappedDataTypes.metadataTable
                }),
                isNullable: true
              }, {
                name: "name",
                type: this.connection.driver.normalizeType({
                  type: this.connection.driver.mappedDataTypes.metadataName
                }),
                isNullable: true
              }, {
                name: "value",
                type: this.connection.driver.normalizeType({
                  type: this.connection.driver.mappedDataTypes.metadataValue
                }),
                isNullable: true
              }]
            }), true)];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  return RdbmsSchemaBuilder;
}();



function foreignKeysMatch(tableForeignKey, metadataForeignKey) {
  return tableForeignKey.name === metadataForeignKey.name && tableForeignKey.referencedTableName === metadataForeignKey.referencedTablePath;
}

/***/ }),

/***/ "./node_modules/typeorm/browser/schema-builder/table/Table.js":
/*!********************************************************************!*\
  !*** ./node_modules/typeorm/browser/schema-builder/table/Table.js ***!
  \********************************************************************/
/*! exports provided: Table */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Table", function() { return Table; });
/* harmony import */ var _TableColumn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TableColumn */ "./node_modules/typeorm/browser/schema-builder/table/TableColumn.js");
/* harmony import */ var _TableIndex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TableIndex */ "./node_modules/typeorm/browser/schema-builder/table/TableIndex.js");
/* harmony import */ var _TableForeignKey__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TableForeignKey */ "./node_modules/typeorm/browser/schema-builder/table/TableForeignKey.js");
/* harmony import */ var _util_TableUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/TableUtils */ "./node_modules/typeorm/browser/schema-builder/util/TableUtils.js");
/* harmony import */ var _TableUnique__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./TableUnique */ "./node_modules/typeorm/browser/schema-builder/table/TableUnique.js");
/* harmony import */ var _TableCheck__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./TableCheck */ "./node_modules/typeorm/browser/schema-builder/table/TableCheck.js");
/* harmony import */ var _TableExclusion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./TableExclusion */ "./node_modules/typeorm/browser/schema-builder/table/TableExclusion.js");







/**
 * Table in the database represented in this class.
 */

var Table =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function Table(options) {
    /**
     * Table columns.
     */
    this.columns = [];
    /**
     * Table indices.
     */

    this.indices = [];
    /**
     * Table foreign keys.
     */

    this.foreignKeys = [];
    /**
     * Table unique constraints.
     */

    this.uniques = [];
    /**
     * Table check constraints.
     */

    this.checks = [];
    /**
     * Table exclusion constraints.
     */

    this.exclusions = [];
    /**
     * Indicates if table was just created.
     * This is needed, for example to check if we need to skip primary keys creation
     * for new tables.
     */

    this.justCreated = false;

    if (options) {
      this.name = options.name;
      if (options.columns) this.columns = options.columns.map(function (column) {
        return new _TableColumn__WEBPACK_IMPORTED_MODULE_0__["TableColumn"](column);
      });
      if (options.indices) this.indices = options.indices.map(function (index) {
        return new _TableIndex__WEBPACK_IMPORTED_MODULE_1__["TableIndex"](index);
      });
      if (options.foreignKeys) this.foreignKeys = options.foreignKeys.map(function (foreignKey) {
        return new _TableForeignKey__WEBPACK_IMPORTED_MODULE_2__["TableForeignKey"](foreignKey);
      });
      if (options.uniques) this.uniques = options.uniques.map(function (unique) {
        return new _TableUnique__WEBPACK_IMPORTED_MODULE_4__["TableUnique"](unique);
      });
      if (options.checks) this.checks = options.checks.map(function (check) {
        return new _TableCheck__WEBPACK_IMPORTED_MODULE_5__["TableCheck"](check);
      });
      if (options.exclusions) this.exclusions = options.exclusions.map(function (exclusion) {
        return new _TableExclusion__WEBPACK_IMPORTED_MODULE_6__["TableExclusion"](exclusion);
      });
      if (options.justCreated !== undefined) this.justCreated = options.justCreated;
      this.engine = options.engine;
    }
  }

  Object.defineProperty(Table.prototype, "primaryColumns", {
    // -------------------------------------------------------------------------
    // Accessors
    // -------------------------------------------------------------------------
    get: function get() {
      return this.columns.filter(function (column) {
        return column.isPrimary;
      });
    },
    enumerable: true,
    configurable: true
  }); // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Clones this table to a new table with all properties cloned.
   */

  Table.prototype.clone = function () {
    return new Table({
      name: this.name,
      columns: this.columns.map(function (column) {
        return column.clone();
      }),
      indices: this.indices.map(function (constraint) {
        return constraint.clone();
      }),
      foreignKeys: this.foreignKeys.map(function (constraint) {
        return constraint.clone();
      }),
      uniques: this.uniques.map(function (constraint) {
        return constraint.clone();
      }),
      checks: this.checks.map(function (constraint) {
        return constraint.clone();
      }),
      exclusions: this.exclusions.map(function (constraint) {
        return constraint.clone();
      }),
      justCreated: this.justCreated,
      engine: this.engine
    });
  };
  /**
   * Add column and creates its constraints.
   */


  Table.prototype.addColumn = function (column) {
    this.columns.push(column);
  };
  /**
   * Remove column and its constraints.
   */


  Table.prototype.removeColumn = function (column) {
    var foundColumn = this.columns.find(function (c) {
      return c.name === column.name;
    });
    if (foundColumn) this.columns.splice(this.columns.indexOf(foundColumn), 1);
  };
  /**
   * Adds unique constraint.
   */


  Table.prototype.addUniqueConstraint = function (uniqueConstraint) {
    this.uniques.push(uniqueConstraint);

    if (uniqueConstraint.columnNames.length === 1) {
      var uniqueColumn = this.columns.find(function (column) {
        return column.name === uniqueConstraint.columnNames[0];
      });
      if (uniqueColumn) uniqueColumn.isUnique = true;
    }
  };
  /**
   * Removes unique constraint.
   */


  Table.prototype.removeUniqueConstraint = function (removedUnique) {
    var foundUnique = this.uniques.find(function (unique) {
      return unique.name === removedUnique.name;
    });

    if (foundUnique) {
      this.uniques.splice(this.uniques.indexOf(foundUnique), 1);

      if (foundUnique.columnNames.length === 1) {
        var uniqueColumn = this.columns.find(function (column) {
          return column.name === foundUnique.columnNames[0];
        });
        if (uniqueColumn) uniqueColumn.isUnique = false;
      }
    }
  };
  /**
   * Adds check constraint.
   */


  Table.prototype.addCheckConstraint = function (checkConstraint) {
    this.checks.push(checkConstraint);
  };
  /**
   * Removes check constraint.
   */


  Table.prototype.removeCheckConstraint = function (removedCheck) {
    var foundCheck = this.checks.find(function (check) {
      return check.name === removedCheck.name;
    });

    if (foundCheck) {
      this.checks.splice(this.checks.indexOf(foundCheck), 1);
    }
  };
  /**
   * Adds exclusion constraint.
   */


  Table.prototype.addExclusionConstraint = function (exclusionConstraint) {
    this.exclusions.push(exclusionConstraint);
  };
  /**
   * Removes exclusion constraint.
   */


  Table.prototype.removeExclusionConstraint = function (removedExclusion) {
    var foundExclusion = this.exclusions.find(function (exclusion) {
      return exclusion.name === removedExclusion.name;
    });

    if (foundExclusion) {
      this.exclusions.splice(this.exclusions.indexOf(foundExclusion), 1);
    }
  };
  /**
   * Adds foreign keys.
   */


  Table.prototype.addForeignKey = function (foreignKey) {
    this.foreignKeys.push(foreignKey);
  };
  /**
   * Removes foreign key.
   */


  Table.prototype.removeForeignKey = function (removedForeignKey) {
    var fk = this.foreignKeys.find(function (foreignKey) {
      return foreignKey.name === removedForeignKey.name;
    });
    if (fk) this.foreignKeys.splice(this.foreignKeys.indexOf(fk), 1);
  };
  /**
   * Adds index.
   */


  Table.prototype.addIndex = function (index, isMysql) {
    if (isMysql === void 0) {
      isMysql = false;
    }

    this.indices.push(index); // in Mysql unique indices and unique constraints are the same thing
    // if index is unique and have only one column, we mark this column as unique

    if (index.columnNames.length === 1 && index.isUnique && isMysql) {
      var column = this.columns.find(function (c) {
        return c.name === index.columnNames[0];
      });
      if (column) column.isUnique = true;
    }
  };
  /**
   * Removes index.
   */


  Table.prototype.removeIndex = function (tableIndex, isMysql) {
    if (isMysql === void 0) {
      isMysql = false;
    }

    var index = this.indices.find(function (index) {
      return index.name === tableIndex.name;
    });

    if (index) {
      this.indices.splice(this.indices.indexOf(index), 1); // in Mysql unique indices and unique constraints are the same thing
      // if index is unique and have only one column, we move `unique` attribute from its column

      if (index.columnNames.length === 1 && index.isUnique && isMysql) {
        var column_1 = this.columns.find(function (c) {
          return c.name === index.columnNames[0];
        });
        if (column_1) column_1.isUnique = this.indices.some(function (ind) {
          return ind.columnNames.length === 1 && ind.columnNames[0] === column_1.name && !!index.isUnique;
        });
      }
    }
  };

  Table.prototype.findColumnByName = function (name) {
    return this.columns.find(function (column) {
      return column.name === name;
    });
  };
  /**
   * Returns all column indices.
   */


  Table.prototype.findColumnIndices = function (column) {
    return this.indices.filter(function (index) {
      return !!index.columnNames.find(function (columnName) {
        return columnName === column.name;
      });
    });
  };
  /**
   * Returns all column foreign keys.
   */


  Table.prototype.findColumnForeignKeys = function (column) {
    return this.foreignKeys.filter(function (foreignKey) {
      return !!foreignKey.columnNames.find(function (columnName) {
        return columnName === column.name;
      });
    });
  };
  /**
   * Returns all column uniques.
   */


  Table.prototype.findColumnUniques = function (column) {
    return this.uniques.filter(function (unique) {
      return !!unique.columnNames.find(function (columnName) {
        return columnName === column.name;
      });
    });
  };
  /**
   * Returns all column checks.
   */


  Table.prototype.findColumnChecks = function (column) {
    return this.checks.filter(function (check) {
      return !!check.columnNames.find(function (columnName) {
        return columnName === column.name;
      });
    });
  }; // -------------------------------------------------------------------------
  // Static Methods
  // -------------------------------------------------------------------------

  /**
   * Creates table from a given entity metadata.
   */


  Table.create = function (entityMetadata, driver) {
    var options = {
      name: driver.buildTableName(entityMetadata.tableName, entityMetadata.schema, entityMetadata.database),
      engine: entityMetadata.engine,
      columns: entityMetadata.columns.filter(function (column) {
        return column;
      }).map(function (column) {
        return _util_TableUtils__WEBPACK_IMPORTED_MODULE_3__["TableUtils"].createTableColumnOptions(column, driver);
      }),
      indices: entityMetadata.indices.filter(function (index) {
        return index.synchronize === true;
      }).map(function (index) {
        return _TableIndex__WEBPACK_IMPORTED_MODULE_1__["TableIndex"].create(index);
      }),
      uniques: entityMetadata.uniques.map(function (unique) {
        return _TableUnique__WEBPACK_IMPORTED_MODULE_4__["TableUnique"].create(unique);
      }),
      checks: entityMetadata.checks.map(function (check) {
        return _TableCheck__WEBPACK_IMPORTED_MODULE_5__["TableCheck"].create(check);
      }),
      exclusions: entityMetadata.exclusions.map(function (exclusion) {
        return _TableExclusion__WEBPACK_IMPORTED_MODULE_6__["TableExclusion"].create(exclusion);
      })
    };
    return new Table(options);
  };

  return Table;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/schema-builder/table/TableCheck.js":
/*!*************************************************************************!*\
  !*** ./node_modules/typeorm/browser/schema-builder/table/TableCheck.js ***!
  \*************************************************************************/
/*! exports provided: TableCheck */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableCheck", function() { return TableCheck; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Database's table check constraint stored in this class.
 */

var TableCheck =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function TableCheck(options) {
    /**
     * Column that contains this constraint.
     */
    this.columnNames = [];
    this.name = options.name;
    this.columnNames = options.columnNames;
    this.expression = options.expression;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Creates a new copy of this constraint with exactly same properties.
   */


  TableCheck.prototype.clone = function () {
    return new TableCheck({
      name: this.name,
      columnNames: this.columnNames ? tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](this.columnNames) : [],
      expression: this.expression
    });
  }; // -------------------------------------------------------------------------
  // Static Methods
  // -------------------------------------------------------------------------

  /**
   * Creates checks from the check metadata object.
   */


  TableCheck.create = function (checkMetadata) {
    return new TableCheck({
      name: checkMetadata.name,
      expression: checkMetadata.expression
    });
  };

  return TableCheck;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/schema-builder/table/TableColumn.js":
/*!**************************************************************************!*\
  !*** ./node_modules/typeorm/browser/schema-builder/table/TableColumn.js ***!
  \**************************************************************************/
/*! exports provided: TableColumn */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableColumn", function() { return TableColumn; });
/**
 * Table's columns in the database represented in this class.
 */
var TableColumn =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function TableColumn(options) {
    /**
     * Indicates if column is NULL, or is NOT NULL in the database.
     */
    this.isNullable = false;
    /**
     * Indicates if column is auto-generated sequence.
     */

    this.isGenerated = false;
    /**
     * Indicates if column is a primary key.
     */

    this.isPrimary = false;
    /**
     * Indicates if column has unique value.
     */

    this.isUnique = false;
    /**
     * Indicates if column stores array.
     */

    this.isArray = false;
    /**
     * Column type's length. Used only on some column types.
     * For example type = "string" and length = "100" means that ORM will create a column with type varchar(100).
     */

    this.length = "";
    /**
     * Puts ZEROFILL attribute on to numeric column. Works only for MySQL.
     * If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column
     */

    this.zerofill = false;
    /**
     * Puts UNSIGNED attribute on to numeric column. Works only for MySQL.
     */

    this.unsigned = false;

    if (options) {
      this.name = options.name;
      this.type = options.type || "";
      this.length = options.length || "";
      this.width = options.width;
      this.charset = options.charset;
      this.collation = options.collation;
      this.precision = options.precision;
      this.scale = options.scale;
      this.zerofill = options.zerofill || false;
      this.unsigned = this.zerofill ? true : options.unsigned || false;
      this["default"] = options["default"];
      this.onUpdate = options.onUpdate;
      this.isNullable = options.isNullable || false;
      this.isGenerated = options.isGenerated || false;
      this.generationStrategy = options.generationStrategy;
      this.isPrimary = options.isPrimary || false;
      this.isUnique = options.isUnique || false;
      this.isArray = options.isArray || false;
      this.comment = options.comment;
      this["enum"] = options["enum"];
      this.enumName = options.enumName;
      this.asExpression = options.asExpression;
      this.generatedType = options.generatedType;
      this.spatialFeatureType = options.spatialFeatureType;
      this.srid = options.srid;
    }
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Clones this column to a new column with exact same properties as this column has.
   */


  TableColumn.prototype.clone = function () {
    return new TableColumn({
      name: this.name,
      type: this.type,
      length: this.length,
      width: this.width,
      charset: this.charset,
      collation: this.collation,
      precision: this.precision,
      scale: this.scale,
      zerofill: this.zerofill,
      unsigned: this.unsigned,
      "enum": this["enum"],
      enumName: this.enumName,
      asExpression: this.asExpression,
      generatedType: this.generatedType,
      "default": this["default"],
      onUpdate: this.onUpdate,
      isNullable: this.isNullable,
      isGenerated: this.isGenerated,
      generationStrategy: this.generationStrategy,
      isPrimary: this.isPrimary,
      isUnique: this.isUnique,
      isArray: this.isArray,
      comment: this.comment,
      spatialFeatureType: this.spatialFeatureType,
      srid: this.srid
    });
  };

  return TableColumn;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/schema-builder/table/TableExclusion.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/typeorm/browser/schema-builder/table/TableExclusion.js ***!
  \*****************************************************************************/
/*! exports provided: TableExclusion */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableExclusion", function() { return TableExclusion; });
/**
 * Database's table exclusion constraint stored in this class.
 */
var TableExclusion =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function TableExclusion(options) {
    this.name = options.name;
    this.expression = options.expression;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Creates a new copy of this constraint with exactly same properties.
   */


  TableExclusion.prototype.clone = function () {
    return new TableExclusion({
      name: this.name,
      expression: this.expression
    });
  }; // -------------------------------------------------------------------------
  // Static Methods
  // -------------------------------------------------------------------------

  /**
   * Creates exclusions from the exclusion metadata object.
   */


  TableExclusion.create = function (exclusionMetadata) {
    return new TableExclusion({
      name: exclusionMetadata.name,
      expression: exclusionMetadata.expression
    });
  };

  return TableExclusion;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/schema-builder/table/TableForeignKey.js":
/*!******************************************************************************!*\
  !*** ./node_modules/typeorm/browser/schema-builder/table/TableForeignKey.js ***!
  \******************************************************************************/
/*! exports provided: TableForeignKey */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableForeignKey", function() { return TableForeignKey; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Foreign key from the database stored in this class.
 */

var TableForeignKey =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function TableForeignKey(options) {
    /**
     * Column names which included by this foreign key.
     */
    this.columnNames = [];
    /**
     * Column names which included by this foreign key.
     */

    this.referencedColumnNames = [];
    this.name = options.name;
    this.columnNames = options.columnNames;
    this.referencedColumnNames = options.referencedColumnNames;
    this.referencedTableName = options.referencedTableName;
    this.onDelete = options.onDelete;
    this.onUpdate = options.onUpdate;
    this.deferrable = options.deferrable;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Creates a new copy of this foreign key with exactly same properties.
   */


  TableForeignKey.prototype.clone = function () {
    return new TableForeignKey({
      name: this.name,
      columnNames: tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](this.columnNames),
      referencedColumnNames: tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](this.referencedColumnNames),
      referencedTableName: this.referencedTableName,
      onDelete: this.onDelete,
      onUpdate: this.onUpdate,
      deferrable: this.deferrable
    });
  }; // -------------------------------------------------------------------------
  // Static Methods
  // -------------------------------------------------------------------------

  /**
   * Creates a new table foreign key from the given foreign key metadata.
   */


  TableForeignKey.create = function (metadata) {
    return new TableForeignKey({
      name: metadata.name,
      columnNames: metadata.columnNames,
      referencedColumnNames: metadata.referencedColumnNames,
      referencedTableName: metadata.referencedTablePath,
      onDelete: metadata.onDelete,
      onUpdate: metadata.onUpdate,
      deferrable: metadata.deferrable
    });
  };

  return TableForeignKey;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/schema-builder/table/TableIndex.js":
/*!*************************************************************************!*\
  !*** ./node_modules/typeorm/browser/schema-builder/table/TableIndex.js ***!
  \*************************************************************************/
/*! exports provided: TableIndex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableIndex", function() { return TableIndex; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Database's table index stored in this class.
 */

var TableIndex =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function TableIndex(options) {
    /**
     * Columns included in this index.
     */
    this.columnNames = [];
    this.name = options.name;
    this.columnNames = options.columnNames;
    this.isUnique = !!options.isUnique;
    this.isSpatial = !!options.isSpatial;
    this.isFulltext = !!options.isFulltext;
    this.parser = options.parser;
    this.where = options.where ? options.where : "";
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Creates a new copy of this index with exactly same properties.
   */


  TableIndex.prototype.clone = function () {
    return new TableIndex({
      name: this.name,
      columnNames: tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](this.columnNames),
      isUnique: this.isUnique,
      isSpatial: this.isSpatial,
      isFulltext: this.isFulltext,
      parser: this.parser,
      where: this.where
    });
  }; // -------------------------------------------------------------------------
  // Static Methods
  // -------------------------------------------------------------------------

  /**
   * Creates index from the index metadata object.
   */


  TableIndex.create = function (indexMetadata) {
    return new TableIndex({
      name: indexMetadata.name,
      columnNames: indexMetadata.columns.map(function (column) {
        return column.databaseName;
      }),
      isUnique: indexMetadata.isUnique,
      isSpatial: indexMetadata.isSpatial,
      isFulltext: indexMetadata.isFulltext,
      parser: indexMetadata.parser,
      where: indexMetadata.where
    });
  };

  return TableIndex;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/schema-builder/table/TableUnique.js":
/*!**************************************************************************!*\
  !*** ./node_modules/typeorm/browser/schema-builder/table/TableUnique.js ***!
  \**************************************************************************/
/*! exports provided: TableUnique */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableUnique", function() { return TableUnique; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Database's table unique constraint stored in this class.
 */

var TableUnique =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function TableUnique(options) {
    /**
     * Columns that contains this constraint.
     */
    this.columnNames = [];
    this.name = options.name;
    this.columnNames = options.columnNames;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Creates a new copy of this constraint with exactly same properties.
   */


  TableUnique.prototype.clone = function () {
    return new TableUnique({
      name: this.name,
      columnNames: tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](this.columnNames)
    });
  }; // -------------------------------------------------------------------------
  // Static Methods
  // -------------------------------------------------------------------------

  /**
   * Creates unique from the unique metadata object.
   */


  TableUnique.create = function (uniqueMetadata) {
    return new TableUnique({
      name: uniqueMetadata.name,
      columnNames: uniqueMetadata.columns.map(function (column) {
        return column.databaseName;
      })
    });
  };

  return TableUnique;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/schema-builder/util/TableUtils.js":
/*!************************************************************************!*\
  !*** ./node_modules/typeorm/browser/schema-builder/util/TableUtils.js ***!
  \************************************************************************/
/*! exports provided: TableUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableUtils", function() { return TableUtils; });
var TableUtils =
/** @class */
function () {
  function TableUtils() {}

  TableUtils.createTableColumnOptions = function (columnMetadata, driver) {
    return {
      name: columnMetadata.databaseName,
      length: columnMetadata.length,
      width: columnMetadata.width,
      charset: columnMetadata.charset,
      collation: columnMetadata.collation,
      precision: columnMetadata.precision,
      scale: columnMetadata.scale,
      zerofill: columnMetadata.zerofill,
      unsigned: columnMetadata.unsigned,
      asExpression: columnMetadata.asExpression,
      generatedType: columnMetadata.generatedType,
      "default": driver.normalizeDefault(columnMetadata),
      onUpdate: columnMetadata.onUpdate,
      comment: columnMetadata.comment,
      isGenerated: columnMetadata.isGenerated,
      generationStrategy: columnMetadata.generationStrategy,
      isNullable: columnMetadata.isNullable,
      type: driver.normalizeType(columnMetadata),
      isPrimary: columnMetadata.isPrimary,
      isUnique: driver.normalizeIsUnique(columnMetadata),
      isArray: columnMetadata.isArray || false,
      "enum": columnMetadata["enum"] ? columnMetadata["enum"].map(function (val) {
        return val + "";
      }) : columnMetadata["enum"],
      enumName: columnMetadata.enumName,
      spatialFeatureType: columnMetadata.spatialFeatureType,
      srid: columnMetadata.srid
    };
  };

  return TableUtils;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/schema-builder/view/View.js":
/*!******************************************************************!*\
  !*** ./node_modules/typeorm/browser/schema-builder/view/View.js ***!
  \******************************************************************/
/*! exports provided: View */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "View", function() { return View; });
/**
 * View in the database represented in this class.
 */
var View =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function View(options) {
    if (options) {
      this.name = options.name;
      this.expression = options.expression;
      this.materialized = !!options.materialized;
    }
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Clones this table to a new table with all properties cloned.
   */


  View.prototype.clone = function () {
    return new View({
      name: this.name,
      expression: this.expression,
      materialized: this.materialized
    });
  }; // -------------------------------------------------------------------------
  // Static Methods
  // -------------------------------------------------------------------------

  /**
   * Creates view from a given entity metadata.
   */


  View.create = function (entityMetadata, driver) {
    var options = {
      name: driver.buildTableName(entityMetadata.tableName, entityMetadata.schema, entityMetadata.database),
      expression: entityMetadata.expression,
      materialized: entityMetadata.tableMetadataArgs.materialized
    };
    return new View(options);
  };

  return View;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/subscriber/Broadcaster.js":
/*!****************************************************************!*\
  !*** ./node_modules/typeorm/browser/subscriber/Broadcaster.js ***!
  \****************************************************************/
/*! exports provided: Broadcaster */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Broadcaster", function() { return Broadcaster; });
/**
 * Broadcaster provides a helper methods to broadcast events to the subscribers.
 */
var Broadcaster =
/** @class */
function () {
  // -------------------------------------------------------------------------
  // Constructor
  // -------------------------------------------------------------------------
  function Broadcaster(queryRunner) {
    this.queryRunner = queryRunner;
  } // -------------------------------------------------------------------------
  // Public Methods
  // -------------------------------------------------------------------------

  /**
   * Broadcasts "BEFORE_INSERT" event.
   * Before insert event is executed before entity is being inserted to the database for the first time.
   * All subscribers and entity listeners who listened to this event will be executed at this point.
   * Subscribers and entity listeners can return promises, it will wait until they are resolved.
   *
   * Note: this method has a performance-optimized code organization, do not change code structure.
   */


  Broadcaster.prototype.broadcastBeforeInsertEvent = function (result, metadata, entity) {
    var _this = this;

    if (entity && metadata.beforeInsertListeners.length) {
      metadata.beforeInsertListeners.forEach(function (listener) {
        if (listener.isAllowed(entity)) {
          var executionResult = listener.execute(entity);
          if (executionResult instanceof Promise) result.promises.push(executionResult);
          result.count++;
        }
      });
    }

    if (this.queryRunner.connection.subscribers.length) {
      this.queryRunner.connection.subscribers.forEach(function (subscriber) {
        if (_this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.beforeInsert) {
          var executionResult = subscriber.beforeInsert({
            connection: _this.queryRunner.connection,
            queryRunner: _this.queryRunner,
            manager: _this.queryRunner.manager,
            entity: entity,
            metadata: metadata
          });
          if (executionResult instanceof Promise) result.promises.push(executionResult);
          result.count++;
        }
      });
    }
  };
  /**
   * Broadcasts "BEFORE_UPDATE" event.
   * Before update event is executed before entity is being updated in the database.
   * All subscribers and entity listeners who listened to this event will be executed at this point.
   * Subscribers and entity listeners can return promises, it will wait until they are resolved.
   *
   * Note: this method has a performance-optimized code organization, do not change code structure.
   */


  Broadcaster.prototype.broadcastBeforeUpdateEvent = function (result, metadata, entity, databaseEntity, updatedColumns, updatedRelations) {
    var _this = this;

    if (entity && metadata.beforeUpdateListeners.length) {
      metadata.beforeUpdateListeners.forEach(function (listener) {
        if (listener.isAllowed(entity)) {
          var executionResult = listener.execute(entity);
          if (executionResult instanceof Promise) result.promises.push(executionResult);
          result.count++;
        }
      });
    }

    if (this.queryRunner.connection.subscribers.length) {
      this.queryRunner.connection.subscribers.forEach(function (subscriber) {
        if (_this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.beforeUpdate) {
          var executionResult = subscriber.beforeUpdate({
            connection: _this.queryRunner.connection,
            queryRunner: _this.queryRunner,
            manager: _this.queryRunner.manager,
            entity: entity,
            metadata: metadata,
            databaseEntity: databaseEntity,
            updatedColumns: updatedColumns || [],
            updatedRelations: updatedRelations || []
          });
          if (executionResult instanceof Promise) result.promises.push(executionResult);
          result.count++;
        }
      });
    }
  };
  /**
   * Broadcasts "BEFORE_REMOVE" event.
   * Before remove event is executed before entity is being removed from the database.
   * All subscribers and entity listeners who listened to this event will be executed at this point.
   * Subscribers and entity listeners can return promises, it will wait until they are resolved.
   *
   * Note: this method has a performance-optimized code organization, do not change code structure.
   */


  Broadcaster.prototype.broadcastBeforeRemoveEvent = function (result, metadata, entity, databaseEntity) {
    var _this = this;

    if (entity && metadata.beforeRemoveListeners.length) {
      metadata.beforeRemoveListeners.forEach(function (listener) {
        if (listener.isAllowed(entity)) {
          var executionResult = listener.execute(entity);
          if (executionResult instanceof Promise) result.promises.push(executionResult);
          result.count++;
        }
      });
    }

    if (this.queryRunner.connection.subscribers.length) {
      this.queryRunner.connection.subscribers.forEach(function (subscriber) {
        if (_this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.beforeRemove) {
          var executionResult = subscriber.beforeRemove({
            connection: _this.queryRunner.connection,
            queryRunner: _this.queryRunner,
            manager: _this.queryRunner.manager,
            entity: entity,
            metadata: metadata,
            databaseEntity: databaseEntity,
            entityId: metadata.getEntityIdMixedMap(databaseEntity)
          });
          if (executionResult instanceof Promise) result.promises.push(executionResult);
          result.count++;
        }
      });
    }
  };
  /**
   * Broadcasts "AFTER_INSERT" event.
   * After insert event is executed after entity is being persisted to the database for the first time.
   * All subscribers and entity listeners who listened to this event will be executed at this point.
   * Subscribers and entity listeners can return promises, it will wait until they are resolved.
   *
   * Note: this method has a performance-optimized code organization, do not change code structure.
   */


  Broadcaster.prototype.broadcastAfterInsertEvent = function (result, metadata, entity) {
    var _this = this;

    if (entity && metadata.afterInsertListeners.length) {
      metadata.afterInsertListeners.forEach(function (listener) {
        if (listener.isAllowed(entity)) {
          var executionResult = listener.execute(entity);
          if (executionResult instanceof Promise) result.promises.push(executionResult);
          result.count++;
        }
      });
    }

    if (this.queryRunner.connection.subscribers.length) {
      this.queryRunner.connection.subscribers.forEach(function (subscriber) {
        if (_this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.afterInsert) {
          var executionResult = subscriber.afterInsert({
            connection: _this.queryRunner.connection,
            queryRunner: _this.queryRunner,
            manager: _this.queryRunner.manager,
            entity: entity,
            metadata: metadata
          });
          if (executionResult instanceof Promise) result.promises.push(executionResult);
          result.count++;
        }
      });
    }
  };
  /**
   * Broadcasts "AFTER_UPDATE" event.
   * After update event is executed after entity is being updated in the database.
   * All subscribers and entity listeners who listened to this event will be executed at this point.
   * Subscribers and entity listeners can return promises, it will wait until they are resolved.
   *
   * Note: this method has a performance-optimized code organization, do not change code structure.
   */


  Broadcaster.prototype.broadcastAfterUpdateEvent = function (result, metadata, entity, databaseEntity, updatedColumns, updatedRelations) {
    var _this = this;

    if (entity && metadata.afterUpdateListeners.length) {
      metadata.afterUpdateListeners.forEach(function (listener) {
        if (listener.isAllowed(entity)) {
          var executionResult = listener.execute(entity);
          if (executionResult instanceof Promise) result.promises.push(executionResult);
          result.count++;
        }
      });
    }

    if (this.queryRunner.connection.subscribers.length) {
      this.queryRunner.connection.subscribers.forEach(function (subscriber) {
        if (_this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.afterUpdate) {
          var executionResult = subscriber.afterUpdate({
            connection: _this.queryRunner.connection,
            queryRunner: _this.queryRunner,
            manager: _this.queryRunner.manager,
            entity: entity,
            metadata: metadata,
            databaseEntity: databaseEntity,
            updatedColumns: updatedColumns || [],
            updatedRelations: updatedRelations || []
          });
          if (executionResult instanceof Promise) result.promises.push(executionResult);
          result.count++;
        }
      });
    }
  };
  /**
   * Broadcasts "AFTER_REMOVE" event.
   * After remove event is executed after entity is being removed from the database.
   * All subscribers and entity listeners who listened to this event will be executed at this point.
   * Subscribers and entity listeners can return promises, it will wait until they are resolved.
   *
   * Note: this method has a performance-optimized code organization, do not change code structure.
   */


  Broadcaster.prototype.broadcastAfterRemoveEvent = function (result, metadata, entity, databaseEntity) {
    var _this = this;

    if (entity && metadata.afterRemoveListeners.length) {
      metadata.afterRemoveListeners.forEach(function (listener) {
        if (listener.isAllowed(entity)) {
          var executionResult = listener.execute(entity);
          if (executionResult instanceof Promise) result.promises.push(executionResult);
          result.count++;
        }
      });
    }

    if (this.queryRunner.connection.subscribers.length) {
      this.queryRunner.connection.subscribers.forEach(function (subscriber) {
        if (_this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.afterRemove) {
          var executionResult = subscriber.afterRemove({
            connection: _this.queryRunner.connection,
            queryRunner: _this.queryRunner,
            manager: _this.queryRunner.manager,
            entity: entity,
            metadata: metadata,
            databaseEntity: databaseEntity,
            entityId: metadata.getEntityIdMixedMap(databaseEntity)
          });
          if (executionResult instanceof Promise) result.promises.push(executionResult);
          result.count++;
        }
      });
    }
  };
  /**
   * Broadcasts "AFTER_LOAD" event for all given entities, and their sub-entities.
   * After load event is executed after entity has been loaded from the database.
   * All subscribers and entity listeners who listened to this event will be executed at this point.
   * Subscribers and entity listeners can return promises, it will wait until they are resolved.
   *
   * Note: this method has a performance-optimized code organization, do not change code structure.
   */


  Broadcaster.prototype.broadcastLoadEventsForAll = function (result, metadata, entities) {
    var _this = this;

    entities.forEach(function (entity) {
      if (entity instanceof Promise) // todo: check why need this?
        return; // collect load events for all children entities that were loaded with the main entity

      if (metadata.relations.length) {
        metadata.relations.forEach(function (relation) {
          // in lazy relations we cannot simply access to entity property because it will cause a getter and a database query
          if (relation.isLazy && !entity.hasOwnProperty(relation.propertyName)) return;
          var value = relation.getEntityValue(entity);
          if (value instanceof Object) _this.broadcastLoadEventsForAll(result, relation.inverseEntityMetadata, Array.isArray(value) ? value : [value]);
        });
      }

      if (metadata.afterLoadListeners.length) {
        metadata.afterLoadListeners.forEach(function (listener) {
          if (listener.isAllowed(entity)) {
            var executionResult = listener.execute(entity);
            if (executionResult instanceof Promise) result.promises.push(executionResult);
            result.count++;
          }
        });
      }

      if (_this.queryRunner.connection.subscribers.length) {
        _this.queryRunner.connection.subscribers.forEach(function (subscriber) {
          if (_this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.afterLoad) {
            var executionResult = subscriber.afterLoad(entity, {
              connection: _this.queryRunner.connection,
              queryRunner: _this.queryRunner,
              manager: _this.queryRunner.manager,
              entity: entity,
              metadata: metadata
            });
            if (executionResult instanceof Promise) result.promises.push(executionResult);
            result.count++;
          }
        });
      }
    });
  }; // -------------------------------------------------------------------------
  // Protected Methods
  // -------------------------------------------------------------------------

  /**
   * Checks if subscriber's methods can be executed by checking if its don't listen to the particular entity,
   * or listens our entity.
   */


  Broadcaster.prototype.isAllowedSubscriber = function (subscriber, target) {
    return !subscriber.listenTo || !subscriber.listenTo() || subscriber.listenTo() === Object || subscriber.listenTo() === target || subscriber.listenTo().isPrototypeOf(target);
  };

  return Broadcaster;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/subscriber/BroadcasterResult.js":
/*!**********************************************************************!*\
  !*** ./node_modules/typeorm/browser/subscriber/BroadcasterResult.js ***!
  \**********************************************************************/
/*! exports provided: BroadcasterResult */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BroadcasterResult", function() { return BroadcasterResult; });
/**
 * Broadcaster execution result - promises executed by operations and number of executed listeners and subscribers.
 */
var BroadcasterResult =
/** @class */
function () {
  function BroadcasterResult() {
    /**
     * Number of executed listeners and subscribers.
     */
    this.count = 0;
    /**
     * Promises returned by listeners and subscribers which needs to be awaited.
     */

    this.promises = [];
  }

  return BroadcasterResult;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/util/ApplyValueTransformers.js":
/*!*********************************************************************!*\
  !*** ./node_modules/typeorm/browser/util/ApplyValueTransformers.js ***!
  \*********************************************************************/
/*! exports provided: ApplyValueTransformers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplyValueTransformers", function() { return ApplyValueTransformers; });
var ApplyValueTransformers =
/** @class */
function () {
  function ApplyValueTransformers() {}

  ApplyValueTransformers.transformFrom = function (transformer, databaseValue) {
    if (Array.isArray(transformer)) {
      var reverseTransformers = transformer.slice().reverse();
      return reverseTransformers.reduce(function (transformedValue, _transformer) {
        return _transformer.from(transformedValue);
      }, databaseValue);
    }

    return transformer.from(databaseValue);
  };

  ApplyValueTransformers.transformTo = function (transformer, entityValue) {
    if (Array.isArray(transformer)) {
      return transformer.reduce(function (transformedValue, _transformer) {
        return _transformer.to(transformedValue);
      }, entityValue);
    }

    return transformer.to(entityValue);
  };

  return ApplyValueTransformers;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/util/DateUtils.js":
/*!********************************************************!*\
  !*** ./node_modules/typeorm/browser/util/DateUtils.js ***!
  \********************************************************/
/*! exports provided: DateUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateUtils", function() { return DateUtils; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Provides utilities to transform hydrated and persisted data.
 */

var DateUtils =
/** @class */
function () {
  function DateUtils() {} // -------------------------------------------------------------------------
  // Public Static Methods
  // -------------------------------------------------------------------------

  /**
   * Normalizes date object hydrated from the database.
   */


  DateUtils.normalizeHydratedDate = function (mixedDate) {
    if (!mixedDate) return mixedDate;
    return typeof mixedDate === "string" ? new Date(mixedDate) : mixedDate;
  };
  /**
   * Converts given value into date string in a "YYYY-MM-DD" format.
   */


  DateUtils.mixedDateToDateString = function (value) {
    if (value instanceof Date) return this.formatZerolessValue(value.getFullYear()) + "-" + this.formatZerolessValue(value.getMonth() + 1) + "-" + this.formatZerolessValue(value.getDate());
    return value;
  };
  /**
   * Converts given value into date object.
   */


  DateUtils.mixedDateToDate = function (mixedDate, toUtc, useMilliseconds) {
    if (toUtc === void 0) {
      toUtc = false;
    }

    if (useMilliseconds === void 0) {
      useMilliseconds = true;
    }

    var date = typeof mixedDate === "string" ? new Date(mixedDate) : mixedDate;
    if (toUtc) date = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
    if (!useMilliseconds) date.setUTCMilliseconds(0);
    return date;
  };
  /**
   * Converts given value into time string in a "HH:mm:ss" format.
   */


  DateUtils.mixedDateToTimeString = function (value, skipSeconds) {
    if (skipSeconds === void 0) {
      skipSeconds = false;
    }

    if (value instanceof Date) return this.formatZerolessValue(value.getHours()) + ":" + this.formatZerolessValue(value.getMinutes()) + (!skipSeconds ? ":" + this.formatZerolessValue(value.getSeconds()) : "");
    return value;
  };
  /**
   * Converts given value into time string in a "HH:mm:ss" format.
   */


  DateUtils.mixedTimeToDate = function (value) {
    if (typeof value === "string") {
      var _a = tslib__WEBPACK_IMPORTED_MODULE_0__["__read"](value.split(":"), 3),
          hours = _a[0],
          minutes = _a[1],
          seconds = _a[2];

      var date = new Date();
      if (hours) date.setHours(parseInt(hours));
      if (minutes) date.setMinutes(parseInt(minutes));
      if (seconds) date.setSeconds(parseInt(seconds));
      return date;
    }

    return value;
  };
  /**
   * Converts given string value with "-" separator into a "HH:mm:ss" format.
   */


  DateUtils.mixedTimeToString = function (value, skipSeconds) {
    if (skipSeconds === void 0) {
      skipSeconds = false;
    }

    value = value instanceof Date ? value.getHours() + ":" + value.getMinutes() + (!skipSeconds ? ":" + value.getSeconds() : "") : value;

    if (typeof value === "string") {
      return value.split(":").map(function (v) {
        return v.length === 1 ? "0" + v : v;
      }) // append zero at beginning if we have a first-zero-less number
      .join(":");
    }

    return value;
  };
  /**
   * Converts given value into datetime string in a "YYYY-MM-DD HH-mm-ss" format.
   */


  DateUtils.mixedDateToDatetimeString = function (value, useMilliseconds) {
    if (typeof value === "string") {
      value = new Date(value);
    }

    if (value instanceof Date) {
      var finalValue = this.formatZerolessValue(value.getFullYear()) + "-" + this.formatZerolessValue(value.getMonth() + 1) + "-" + this.formatZerolessValue(value.getDate()) + " " + this.formatZerolessValue(value.getHours()) + ":" + this.formatZerolessValue(value.getMinutes()) + ":" + this.formatZerolessValue(value.getSeconds());
      if (useMilliseconds) finalValue += "." + this.formatMilliseconds(value.getMilliseconds());
      value = finalValue;
    }

    return value;
  };
  /**
   * Converts given value into utc datetime string in a "YYYY-MM-DD HH-mm-ss.sss" format.
   */


  DateUtils.mixedDateToUtcDatetimeString = function (value) {
    if (typeof value === "string") {
      value = new Date(value);
    }

    if (value instanceof Date) {
      return this.formatZerolessValue(value.getUTCFullYear()) + "-" + this.formatZerolessValue(value.getUTCMonth() + 1) + "-" + this.formatZerolessValue(value.getUTCDate()) + " " + this.formatZerolessValue(value.getUTCHours()) + ":" + this.formatZerolessValue(value.getUTCMinutes()) + ":" + this.formatZerolessValue(value.getUTCSeconds()) + "." + this.formatMilliseconds(value.getUTCMilliseconds());
    }

    return value;
  };
  /**
   * Converts each item in the given array to string joined by "," separator.
   */


  DateUtils.simpleArrayToString = function (value) {
    if (value instanceof Array) {
      return value.map(function (i) {
        return String(i);
      }).join(",");
    }

    return value;
  };
  /**
   * Converts given string to simple array split by "," separator.
   */


  DateUtils.stringToSimpleArray = function (value) {
    if (value instanceof String || typeof value === "string") {
      if (value.length > 0) {
        return value.split(",");
      } else {
        return [];
      }
    }

    return value;
  };

  DateUtils.simpleJsonToString = function (value) {
    return JSON.stringify(value);
  };

  DateUtils.stringToSimpleJson = function (value) {
    try {
      var simpleJSON = JSON.parse(value);
      return typeof simpleJSON === "object" ? simpleJSON : {};
    } catch (err) {
      return {};
    }
  };

  DateUtils.simpleEnumToString = function (value) {
    return "" + value;
  };

  DateUtils.stringToSimpleEnum = function (value, columnMetadata) {
    if (columnMetadata["enum"] && !isNaN(value) && columnMetadata["enum"].indexOf(parseInt(value)) >= 0) {
      // convert to number if that exists in poosible enum options
      value = parseInt(value);
    }

    return value;
  }; // -------------------------------------------------------------------------
  // Private Static Methods
  // -------------------------------------------------------------------------

  /**
   * Formats given number to "0x" format, e.g. if it is 1 then it will return "01".
   */


  DateUtils.formatZerolessValue = function (value) {
    if (value < 10) return "0" + value;
    return String(value);
  };
  /**
   * Formats given number to "0x" format, e.g. if it is 1 then it will return "01".
   */


  DateUtils.formatMilliseconds = function (value) {
    if (value < 10) {
      return "00" + value;
    } else if (value < 100) {
      return "0" + value;
    } else {
      return String(value);
    }
  };

  return DateUtils;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/util/DepGraph.js":
/*!*******************************************************!*\
  !*** ./node_modules/typeorm/browser/util/DepGraph.js ***!
  \*******************************************************/
/*! exports provided: DepGraph */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DepGraph", function() { return DepGraph; });
/**
 * This source code is from https://github.com/jriecken/dependency-graph
 * Just added "any" types here, wrapper everything into exported class.
 * We cant use a package itself because we want to package "everything-in-it" for the frontend users of TypeORM.
 */

/**
 * A simple dependency graph
 */

/**
 * Helper for creating a Depth-First-Search on
 * a set of edges.
 *
 * Detects cycles and throws an Error if one is detected.
 *
 * @param edges The set of edges to DFS through
 * @param leavesOnly Whether to only return "leaf" nodes (ones who have no edges)
 * @param result An array in which the results will be populated
 */
function createDFS(edges, leavesOnly, result) {
  var currentPath = [];
  var visited = {};
  return function DFS(currentNode) {
    visited[currentNode] = true;
    currentPath.push(currentNode);
    edges[currentNode].forEach(function (node) {
      if (!visited[node]) {
        DFS(node);
      } else if (currentPath.indexOf(node) >= 0) {
        currentPath.push(node);
        throw new Error("Dependency Cycle Found: " + currentPath.join(" -> "));
      }
    });
    currentPath.pop();

    if ((!leavesOnly || edges[currentNode].length === 0) && result.indexOf(currentNode) === -1) {
      result.push(currentNode);
    }
  };
}

var DepGraph =
/** @class */
function () {
  function DepGraph() {
    this.nodes = {};
    this.outgoingEdges = {}; // Node -> [Dependency Node]

    this.incomingEdges = {}; // Node -> [Dependant Node]
  }
  /**
   * Add a node to the dependency graph. If a node already exists, this method will do nothing.
   */


  DepGraph.prototype.addNode = function (node, data) {
    if (!this.hasNode(node)) {
      // Checking the arguments length allows the user to add a node with undefined data
      if (arguments.length === 2) {
        this.nodes[node] = data;
      } else {
        this.nodes[node] = node;
      }

      this.outgoingEdges[node] = [];
      this.incomingEdges[node] = [];
    }
  };
  /**
   * Remove a node from the dependency graph. If a node does not exist, this method will do nothing.
   */


  DepGraph.prototype.removeNode = function (node) {
    if (this.hasNode(node)) {
      delete this.nodes[node];
      delete this.outgoingEdges[node];
      delete this.incomingEdges[node];
      [this.incomingEdges, this.outgoingEdges].forEach(function (edgeList) {
        Object.keys(edgeList).forEach(function (key) {
          var idx = edgeList[key].indexOf(node);

          if (idx >= 0) {
            edgeList[key].splice(idx, 1);
          }
        }, this);
      });
    }
  };
  /**
   * Check if a node exists in the graph
   */


  DepGraph.prototype.hasNode = function (node) {
    return this.nodes.hasOwnProperty(node);
  };
  /**
   * Get the data associated with a node name
   */


  DepGraph.prototype.getNodeData = function (node) {
    if (this.hasNode(node)) {
      return this.nodes[node];
    } else {
      throw new Error("Node does not exist: " + node);
    }
  };
  /**
   * Set the associated data for a given node name. If the node does not exist, this method will throw an error
   */


  DepGraph.prototype.setNodeData = function (node, data) {
    if (this.hasNode(node)) {
      this.nodes[node] = data;
    } else {
      throw new Error("Node does not exist: " + node);
    }
  };
  /**
   * Add a dependency between two nodes. If either of the nodes does not exist,
   * an Error will be thrown.
   */


  DepGraph.prototype.addDependency = function (from, to) {
    if (!this.hasNode(from)) {
      throw new Error("Node does not exist: " + from);
    }

    if (!this.hasNode(to)) {
      throw new Error("Node does not exist: " + to);
    }

    if (this.outgoingEdges[from].indexOf(to) === -1) {
      this.outgoingEdges[from].push(to);
    }

    if (this.incomingEdges[to].indexOf(from) === -1) {
      this.incomingEdges[to].push(from);
    }

    return true;
  };
  /**
   * Remove a dependency between two nodes.
   */


  DepGraph.prototype.removeDependency = function (from, to) {
    var idx;

    if (this.hasNode(from)) {
      idx = this.outgoingEdges[from].indexOf(to);

      if (idx >= 0) {
        this.outgoingEdges[from].splice(idx, 1);
      }
    }

    if (this.hasNode(to)) {
      idx = this.incomingEdges[to].indexOf(from);

      if (idx >= 0) {
        this.incomingEdges[to].splice(idx, 1);
      }
    }
  };
  /**
   * Get an array containing the nodes that the specified node depends on (transitively).
   *
   * Throws an Error if the graph has a cycle, or the specified node does not exist.
   *
   * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned
   * in the array.
   */


  DepGraph.prototype.dependenciesOf = function (node, leavesOnly) {
    if (this.hasNode(node)) {
      var result = [];
      var DFS = createDFS(this.outgoingEdges, leavesOnly, result);
      DFS(node);
      var idx = result.indexOf(node);

      if (idx >= 0) {
        result.splice(idx, 1);
      }

      return result;
    } else {
      throw new Error("Node does not exist: " + node);
    }
  };
  /**
   * get an array containing the nodes that depend on the specified node (transitively).
   *
   * Throws an Error if the graph has a cycle, or the specified node does not exist.
   *
   * If `leavesOnly` is true, only nodes that do not have any dependants will be returned in the array.
   */


  DepGraph.prototype.dependantsOf = function (node, leavesOnly) {
    if (this.hasNode(node)) {
      var result = [];
      var DFS = createDFS(this.incomingEdges, leavesOnly, result);
      DFS(node);
      var idx = result.indexOf(node);

      if (idx >= 0) {
        result.splice(idx, 1);
      }

      return result;
    } else {
      throw new Error("Node does not exist: " + node);
    }
  };
  /**
   * Construct the overall processing order for the dependency graph.
   *
   * Throws an Error if the graph has a cycle.
   *
   * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned.
   */


  DepGraph.prototype.overallOrder = function (leavesOnly) {
    var self = this;
    var result = [];
    var keys = Object.keys(this.nodes);

    if (keys.length === 0) {
      return result; // Empty graph
    } else {
      // Look for cycles - we run the DFS starting at all the nodes in case there
      // are several disconnected subgraphs inside this dependency graph.
      var CycleDFS_1 = createDFS(this.outgoingEdges, false, []);
      keys.forEach(function (n) {
        CycleDFS_1(n);
      });
      var DFS_1 = createDFS(this.outgoingEdges, leavesOnly, result); // Find all potential starting points (nodes with nothing depending on them) an
      // run a DFS starting at these points to get the order

      keys.filter(function (node) {
        return self.incomingEdges[node].length === 0;
      }).forEach(function (n) {
        DFS_1(n);
      });
      return result;
    }
  };

  return DepGraph;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/util/DirectoryExportedClassesLoader.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/typeorm/browser/util/DirectoryExportedClassesLoader.js ***!
  \*****************************************************************************/
/*! exports provided: importClassesFromDirectories, importJsonsFromDirectories */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "importClassesFromDirectories", function() { return importClassesFromDirectories; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "importJsonsFromDirectories", function() { return importJsonsFromDirectories; });
/* harmony import */ var _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform/PlatformTools */ "./node_modules/typeorm/browser/platform/PlatformTools.js");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index */ "./node_modules/typeorm/browser/index.js");


/**
 * Loads all exported classes from the given directory.
 */

function importClassesFromDirectories(logger, directories, formats) {
  if (formats === void 0) {
    formats = [".js", ".ts"];
  }

  var logLevel = "info";
  var classesNotFoundMessage = "No classes were found using the provided glob pattern: ";
  var classesFoundMessage = "All classes found using provided glob pattern";

  function loadFileClasses(exported, allLoaded) {
    if (typeof exported === "function" || exported instanceof _index__WEBPACK_IMPORTED_MODULE_1__["EntitySchema"]) {
      allLoaded.push(exported);
    } else if (Array.isArray(exported)) {
      exported.forEach(function (i) {
        return loadFileClasses(i, allLoaded);
      });
    } else if (typeof exported === "object" && exported !== null) {
      Object.keys(exported).forEach(function (key) {
        return loadFileClasses(exported[key], allLoaded);
      });
    }

    return allLoaded;
  }

  var allFiles = directories.reduce(function (allDirs, dir) {
    return allDirs.concat(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].load("glob").sync(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].pathNormalize(dir)));
  }, []);

  if (directories.length > 0 && allFiles.length === 0) {
    logger.log(logLevel, classesNotFoundMessage + " \"" + directories + "\"");
  } else if (allFiles.length > 0) {
    logger.log(logLevel, classesFoundMessage + " \"" + directories + "\" : \"" + allFiles + "\"");
  }

  var dirs = allFiles.filter(function (file) {
    var dtsExtension = file.substring(file.length - 5, file.length);
    return formats.indexOf(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].pathExtname(file)) !== -1 && dtsExtension !== ".d.ts";
  }).map(function (file) {
    return _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].load(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].pathResolve(file));
  });
  return loadFileClasses(dirs, []);
}
/**
 * Loads all json files from the given directory.
 */

function importJsonsFromDirectories(directories, format) {
  if (format === void 0) {
    format = ".json";
  }

  var allFiles = directories.reduce(function (allDirs, dir) {
    return allDirs.concat(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].load("glob").sync(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].pathNormalize(dir)));
  }, []);
  return allFiles.filter(function (file) {
    return _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].pathExtname(file) === format;
  }).map(function (file) {
    return _platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].load(_platform_PlatformTools__WEBPACK_IMPORTED_MODULE_0__["PlatformTools"].pathResolve(file));
  });
}

/***/ }),

/***/ "./node_modules/typeorm/browser/util/ObjectUtils.js":
/*!**********************************************************!*\
  !*** ./node_modules/typeorm/browser/util/ObjectUtils.js ***!
  \**********************************************************/
/*! exports provided: ObjectUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectUtils", function() { return ObjectUtils; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");


var ObjectUtils =
/** @class */
function () {
  function ObjectUtils() {}
  /**
   * Copy the values of all of the enumerable own properties from one or more source objects to a
   * target object. Returns the target object.
   * @param target The target object to copy to.
   * @param sources One or more source objects from which to copy properties
   */


  ObjectUtils.assign = function (target) {
    var sources = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      sources[_i - 1] = arguments[_i];
    }

    var e_1, _a, e_2, _b;

    try {
      for (var sources_1 = tslib__WEBPACK_IMPORTED_MODULE_0__["__values"](sources), sources_1_1 = sources_1.next(); !sources_1_1.done; sources_1_1 = sources_1.next()) {
        var source = sources_1_1.value;

        try {
          for (var _c = tslib__WEBPACK_IMPORTED_MODULE_0__["__values"](Object.getOwnPropertyNames(source)), _d = _c.next(); !_d.done; _d = _c.next()) {
            var prop = _d.value;
            target[prop] = source[prop];
          }
        } catch (e_2_1) {
          e_2 = {
            error: e_2_1
          };
        } finally {
          try {
            if (_d && !_d.done && (_b = _c["return"])) _b.call(_c);
          } finally {
            if (e_2) throw e_2.error;
          }
        }
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (sources_1_1 && !sources_1_1.done && (_a = sources_1["return"])) _a.call(sources_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
  };

  return ObjectUtils;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/util/OrmUtils.js":
/*!*******************************************************!*\
  !*** ./node_modules/typeorm/browser/util/OrmUtils.js ***!
  \*******************************************************/
/*! exports provided: OrmUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OrmUtils", function() { return OrmUtils; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");


var OrmUtils =
/** @class */
function () {
  function OrmUtils() {} // -------------------------------------------------------------------------
  // Public methods
  // -------------------------------------------------------------------------

  /**
   * Chunks array into peaces.
   */


  OrmUtils.chunk = function (array, size) {
    return Array.from(Array(Math.ceil(array.length / size)), function (_, i) {
      return array.slice(i * size, i * size + size);
    });
  };

  OrmUtils.splitClassesAndStrings = function (clsesAndStrings) {
    return [clsesAndStrings.filter(function (cls) {
      return typeof cls !== "string";
    }), clsesAndStrings.filter(function (str) {
      return typeof str === "string";
    })];
  };

  OrmUtils.groupBy = function (array, propertyCallback) {
    return array.reduce(function (groupedArray, value) {
      var key = propertyCallback(value);
      var grouped = groupedArray.find(function (i) {
        return i.id === key;
      });

      if (!grouped) {
        grouped = {
          id: key,
          items: []
        };
        groupedArray.push(grouped);
      }

      grouped.items.push(value);
      return groupedArray;
    }, []);
  };

  OrmUtils.uniq = function (array, criteriaOrProperty) {
    return array.reduce(function (uniqueArray, item) {
      var found = false;

      if (criteriaOrProperty instanceof Function) {
        var itemValue_1 = criteriaOrProperty(item);
        found = !!uniqueArray.find(function (uniqueItem) {
          return criteriaOrProperty(uniqueItem) === itemValue_1;
        });
      } else if (typeof criteriaOrProperty === "string") {
        found = !!uniqueArray.find(function (uniqueItem) {
          return uniqueItem[criteriaOrProperty] === item[criteriaOrProperty];
        });
      } else {
        found = uniqueArray.indexOf(item) !== -1;
      }

      if (!found) uniqueArray.push(item);
      return uniqueArray;
    }, []);
  };

  OrmUtils.isObject = function (item) {
    return item && typeof item === "object" && !Array.isArray(item);
  };
  /**
   * Deep Object.assign.
   *
   * @see http://stackoverflow.com/a/34749873
   */


  OrmUtils.mergeDeep = function (target) {
    var sources = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      sources[_i - 1] = arguments[_i];
    }

    var _a, _b;

    if (!sources.length) return target;
    var source = sources.shift();

    if (this.isObject(target) && this.isObject(source)) {
      for (var key in source) {
        var value = source[key];
        if (value instanceof Promise) continue;

        if (this.isObject(value) && !(value instanceof Map) && !(value instanceof Set) && !(value instanceof Date) && !(value instanceof Buffer) && !(value instanceof RegExp)) {
          if (!target[key]) Object.assign(target, (_a = {}, _a[key] = Object.create(Object.getPrototypeOf(value)), _a));
          this.mergeDeep(target[key], value);
        } else {
          Object.assign(target, (_b = {}, _b[key] = value, _b));
        }
      }
    }

    return this.mergeDeep.apply(this, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"]([target], sources));
  };
  /**
   * Deep compare objects.
   *
   * @see http://stackoverflow.com/a/1144249
   */


  OrmUtils.deepCompare = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var i, l, leftChain, rightChain;

    if (arguments.length < 1) {
      return true; // Die silently? Don't know how to handle such case, please help...
      // throw "Need two or more arguments to compare";
    }

    for (i = 1, l = arguments.length; i < l; i++) {
      leftChain = []; // Todo: this can be cached

      rightChain = [];

      if (!this.compare2Objects(leftChain, rightChain, arguments[0], arguments[i])) {
        return false;
      }
    }

    return true;
  };
  /**
   * Transforms given value into boolean value.
   */


  OrmUtils.toBoolean = function (value) {
    if (typeof value === "boolean") return value;
    if (typeof value === "string") return value === "true" || value === "1";
    if (typeof value === "number") return value > 0;
    return false;
  };
  /**
   * Composes an object from the given array of keys and values.
   */


  OrmUtils.zipObject = function (keys, values) {
    return keys.reduce(function (object, column, index) {
      object[column] = values[index];
      return object;
    }, {});
  };
  /**
   * Compares two arrays.
   */


  OrmUtils.isArraysEqual = function (arr1, arr2) {
    if (arr1.length !== arr2.length) return false;
    return arr1.every(function (element) {
      return arr2.indexOf(element) !== -1;
    });
  }; // -------------------------------------------------------------------------
  // Private methods
  // -------------------------------------------------------------------------


  OrmUtils.compare2Objects = function (leftChain, rightChain, x, y) {
    var p; // remember that NaN === NaN returns false
    // and isNaN(undefined) returns true

    if (Number.isNaN(x) && Number.isNaN(y)) return true; // Compare primitives and functions.
    // Check if both arguments link to the same object.
    // Especially useful on the step where we compare prototypes

    if (x === y) return true; // Unequal, but either is null or undefined (use case: jsonb comparasion)
    // PR #3776, todo: add tests

    if (x === null || y === null || x === undefined || y === undefined) return false; // Fix the buffer compare bug.
    // See: https://github.com/typeorm/typeorm/issues/3654

    if ((typeof x.equals === "function" || x.equals instanceof Function) && x.equals(y)) return true; // Works in case when functions are created in constructor.
    // Comparing dates is a common scenario. Another built-ins?
    // We can even handle functions passed across iframes

    if (typeof x === "function" && typeof y === "function" || x instanceof Date && y instanceof Date || x instanceof RegExp && y instanceof RegExp || x instanceof String && y instanceof String || x instanceof Number && y instanceof Number) return x.toString() === y.toString(); // At last checking prototypes as good as we can

    if (!(x instanceof Object && y instanceof Object)) return false;
    if (x.isPrototypeOf(y) || y.isPrototypeOf(x)) return false;
    if (x.constructor !== y.constructor) return false;
    if (x.prototype !== y.prototype) return false; // Check for infinitive linking loops

    if (leftChain.indexOf(x) > -1 || rightChain.indexOf(y) > -1) return false; // Quick checking of one object being a subset of another.
    // todo: cache the structure of arguments[0] for performance

    for (p in y) {
      if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
        return false;
      } else if (typeof y[p] !== typeof x[p]) {
        return false;
      }
    }

    for (p in x) {
      if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
        return false;
      } else if (typeof y[p] !== typeof x[p]) {
        return false;
      }

      switch (typeof x[p]) {
        case "object":
        case "function":
          leftChain.push(x);
          rightChain.push(y);

          if (!this.compare2Objects(leftChain, rightChain, x[p], y[p])) {
            return false;
          }

          leftChain.pop();
          rightChain.pop();
          break;

        default:
          if (x[p] !== y[p]) {
            return false;
          }

          break;
      }
    }

    return true;
  };

  return OrmUtils;
}();


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/typeorm/browser/util/PromiseUtils.js":
/*!***********************************************************!*\
  !*** ./node_modules/typeorm/browser/util/PromiseUtils.js ***!
  \***********************************************************/
/*! exports provided: PromiseUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PromiseUtils", function() { return PromiseUtils; });
/**
 * Utils to help to work with Promise objects.
 */
var PromiseUtils =
/** @class */
function () {
  function PromiseUtils() {}
  /**
   * Creates a new promise with resolved value used for lazy relations.
   */


  PromiseUtils.create = function (value) {
    var promise = Promise.resolve(value);
    promise["__value__"] = value;
    return promise;
  };
  /**
   * If given value is a promise created by "create" method this method gets its value.
   * If given value is not a promise then given value is returned back.
   */


  PromiseUtils.extractValue = function (object) {
    if (object instanceof Promise && object["__value__"]) return object["__value__"];
    return object;
  };
  /**
   * Runs given callback that returns promise for each item in the given collection in order.
   * Operations executed after each other, right after previous promise being resolved.
   */


  PromiseUtils.runInSequence = function (collection, callback) {
    var results = [];
    return collection.reduce(function (promise, item) {
      return promise.then(function () {
        return callback(item);
      }).then(function (result) {
        results.push(result);
      });
    }, Promise.resolve()).then(function () {
      return results;
    });
  };
  /**
   * Returns a promise that is fulfilled with an array of promise state snapshots,
   * but only after all the original promises have settled, i.e. become either fulfilled or rejected.
   */


  PromiseUtils.settle = function (promises) {
    return Promise.all(promises.map(function (p) {
      return Promise.resolve(p).then(function (v) {
        return {
          state: "fulfilled",
          value: v
        };
      }, function (r) {
        return {
          state: "rejected",
          reason: r
        };
      });
    })).then(function (results) {
      var rejected = results.find(function (result) {
        return result.state === "rejected";
      });
      if (rejected) return Promise.reject(rejected.reason);
      return results.map(function (result) {
        return result.value;
      });
    });
  };

  return PromiseUtils;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/util/RandomGenerator.js":
/*!**************************************************************!*\
  !*** ./node_modules/typeorm/browser/util/RandomGenerator.js ***!
  \**************************************************************/
/*! exports provided: RandomGenerator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RandomGenerator", function() { return RandomGenerator; });
var RandomGenerator =
/** @class */
function () {
  function RandomGenerator() {}
  /**
   *  discuss at: http://locutus.io/php/sha1/
   * original by: Webtoolkit.info (http://www.webtoolkit.info/)
   * improved by: Michael White (http://getsprink.com)
   * improved by: Kevin van Zonneveld (http://kvz.io)
   *    input by: Brett Zamir (http://brett-zamir.me)
   *      note 1: Keep in mind that in accordance with PHP, the whole string is buffered and then
   *      note 1: hashed. If available, we'd recommend using Node's native crypto modules directly
   *      note 1: in a steaming fashion for faster and more efficient hashing
   *   example 1: sha1('Kevin van Zonneveld')
   *   returns 1: '54916d2e62f65b3afa6e192e6a601cdbe5cb5897'
   */


  RandomGenerator.sha1 = function (str) {
    var _rotLeft = function _rotLeft(n, s) {
      var t4 = n << s | n >>> 32 - s;
      return t4;
    };

    var _cvtHex = function _cvtHex(val) {
      var str = "";
      var i;
      var v;

      for (i = 7; i >= 0; i--) {
        v = val >>> i * 4 & 0x0f;
        str += v.toString(16);
      }

      return str;
    };

    var blockstart;
    var i, j;
    var W = new Array(80);
    var H0 = 0x67452301;
    var H1 = 0xEFCDAB89;
    var H2 = 0x98BADCFE;
    var H3 = 0x10325476;
    var H4 = 0xC3D2E1F0;
    var A, B, C, D, E;
    var temp; // utf8_encode

    str =
    /*unescape*/
    encodeURIComponent(str);
    var strLen = str.length;
    var wordArray = [];

    for (i = 0; i < strLen - 3; i += 4) {
      j = str.charCodeAt(i) << 24 | str.charCodeAt(i + 1) << 16 | str.charCodeAt(i + 2) << 8 | str.charCodeAt(i + 3);
      wordArray.push(j);
    }

    switch (strLen % 4) {
      case 0:
        i = 0x080000000;
        break;

      case 1:
        i = str.charCodeAt(strLen - 1) << 24 | 0x0800000;
        break;

      case 2:
        i = str.charCodeAt(strLen - 2) << 24 | str.charCodeAt(strLen - 1) << 16 | 0x08000;
        break;

      case 3:
        i = str.charCodeAt(strLen - 3) << 24 | str.charCodeAt(strLen - 2) << 16 | str.charCodeAt(strLen - 1) << 8 | 0x80;
        break;
    }

    wordArray.push(i);

    while (wordArray.length % 16 !== 14) {
      wordArray.push(0);
    }

    wordArray.push(strLen >>> 29);
    wordArray.push(strLen << 3 & 0x0ffffffff);

    for (blockstart = 0; blockstart < wordArray.length; blockstart += 16) {
      for (i = 0; i < 16; i++) {
        W[i] = wordArray[blockstart + i];
      }

      for (i = 16; i <= 79; i++) {
        W[i] = _rotLeft(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
      }

      A = H0;
      B = H1;
      C = H2;
      D = H3;
      E = H4;

      for (i = 0; i <= 19; i++) {
        temp = _rotLeft(A, 5) + (B & C | ~B & D) + E + W[i] + 0x5A827999 & 0x0ffffffff;
        E = D;
        D = C;
        C = _rotLeft(B, 30);
        B = A;
        A = temp;
      }

      for (i = 20; i <= 39; i++) {
        temp = _rotLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1 & 0x0ffffffff;
        E = D;
        D = C;
        C = _rotLeft(B, 30);
        B = A;
        A = temp;
      }

      for (i = 40; i <= 59; i++) {
        temp = _rotLeft(A, 5) + (B & C | B & D | C & D) + E + W[i] + 0x8F1BBCDC & 0x0ffffffff;
        E = D;
        D = C;
        C = _rotLeft(B, 30);
        B = A;
        A = temp;
      }

      for (i = 60; i <= 79; i++) {
        temp = _rotLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6 & 0x0ffffffff;
        E = D;
        D = C;
        C = _rotLeft(B, 30);
        B = A;
        A = temp;
      }

      H0 = H0 + A & 0x0ffffffff;
      H1 = H1 + B & 0x0ffffffff;
      H2 = H2 + C & 0x0ffffffff;
      H3 = H3 + D & 0x0ffffffff;
      H4 = H4 + E & 0x0ffffffff;
    }

    temp = _cvtHex(H0) + _cvtHex(H1) + _cvtHex(H2) + _cvtHex(H3) + _cvtHex(H4);
    return temp.toLowerCase();
  };
  /**
   * RFC4122 compliant UUID v4 generator.
   */


  RandomGenerator.uuid4 = function () {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
      var r = Math.random() * 16 | 0,
          v = c === "x" ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  };

  return RandomGenerator;
}();



/***/ }),

/***/ "./node_modules/typeorm/browser/util/StringUtils.js":
/*!**********************************************************!*\
  !*** ./node_modules/typeorm/browser/util/StringUtils.js ***!
  \**********************************************************/
/*! exports provided: camelCase, snakeCase, titleCase, abbreviate, shorten, hash */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "camelCase", function() { return camelCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "snakeCase", function() { return snakeCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "titleCase", function() { return titleCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "abbreviate", function() { return abbreviate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shorten", function() { return shorten; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hash", function() { return hash; });
/* harmony import */ var sha_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sha.js */ "./node_modules/sha.js/index.js");
/* harmony import */ var sha_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sha_js__WEBPACK_IMPORTED_MODULE_0__);

/**
 * Converts string into camelCase.
 *
 * @see http://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case
 */

function camelCase(str, firstCapital) {
  if (firstCapital === void 0) {
    firstCapital = false;
  }

  return str.replace(/^([A-Z])|[\s-_](\w)/g, function (match, p1, p2, offset) {
    if (firstCapital === true && offset === 0) return p1;
    if (p2) return p2.toUpperCase();
    return p1.toLowerCase();
  });
}
/**
 * Converts string into snake_case.
 *
 * @see https://regex101.com/r/QeSm2I/1
 */

function snakeCase(str) {
  return str.replace(/(?:([a-z])([A-Z]))|(?:((?!^)[A-Z])([a-z]))/g, "$1_$3$2$4").toLowerCase();
}
/**
 * Converts string into Title Case.
 *
 * @see http://stackoverflow.com/questions/196972/convert-string-to-title-case-with-javascript
 */

function titleCase(str) {
  return str.replace(/\w\S*/g, function (txt) {
    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
  });
}
/**
 * Builds abbreviated string from given string;
 */

function abbreviate(str, abbrLettersCount) {
  if (abbrLettersCount === void 0) {
    abbrLettersCount = 1;
  }

  var words = str.replace(/([a-z\xE0-\xFF])([A-Z\xC0\xDF])/g, "$1 $2").split(" ");
  return words.reduce(function (res, word) {
    res += word.substr(0, abbrLettersCount);
    return res;
  }, "");
}
/**
 * Shorten a given `input`. Useful for RDBMS imposing a limit on the
 * maximum length of aliases and column names in SQL queries.
 *
 * @param input String to be shortened.
 * @param options Default to `4` for segments length, `2` for terms length, `'__'` as a separator.
 *
 * @return Shortened `input`.
 *
 * @example
 * // returns: "UsShCa__orde__mark__dire"
 * shorten('UserShoppingCart__order__market__director')
 *
 * // returns: "cat_wit_ver_lon_nam_pos_wit_ver_lon_nam_pos_wit_ver_lon_nam"
 * shorten(
 *   'category_with_very_long_name_posts_with_very_long_name_post_with_very_long_name',
 *   { separator: '_', segmentLength: 3 }
 * )
 *
 * // equals: UsShCa__orde__mark_market_id
 * `${shorten('UserShoppingCart__order__market')}_market_id`
 */

function shorten(input, options) {
  if (options === void 0) {
    options = {};
  }

  var _a = options.segmentLength,
      segmentLength = _a === void 0 ? 4 : _a,
      _b = options.separator,
      separator = _b === void 0 ? "__" : _b,
      _c = options.termLength,
      termLength = _c === void 0 ? 2 : _c;
  var segments = input.split(separator);
  var shortSegments = segments.reduce(function (acc, val) {
    // split the given segment into many terms based on an eventual camel cased name
    var segmentTerms = val.replace(/([a-z\xE0-\xFF])([A-Z\xC0-\xDF])/g, "$1 $2").split(" "); // "OrderItemList" becomes "OrItLi", while "company" becomes "comp"

    var length = segmentTerms.length > 1 ? termLength : segmentLength;
    var shortSegment = segmentTerms.map(function (term) {
      return term.substr(0, length);
    }).join("");
    acc.push(shortSegment);
    return acc;
  }, []);
  return shortSegments.join(separator);
}
/**
 * Returns a hashed input.
 *
 * @param input String to be hashed.
 * @param options.length Optionally, shorten the output to desired length.
 */

function hash(input, options) {
  if (options === void 0) {
    options = {};
  }

  var hashFunction = sha_js__WEBPACK_IMPORTED_MODULE_0__("sha256");
  hashFunction.update(input, "utf8");
  var hashedInput = hashFunction.digest("hex");

  if (options.length) {
    return hashedInput.slice(0, options.length);
  }

  return hashedInput;
}

/***/ }),

/***/ "./node_modules/util-deprecate/browser.js":
/*!************************************************!*\
  !*** ./node_modules/util-deprecate/browser.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../next/node_modules/webpack/buildin/global.js */ "./node_modules/next/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/vm-browserify/index.js":
/*!*********************************************!*\
  !*** ./node_modules/vm-browserify/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var indexOf = function (xs, item) {
    if (xs.indexOf) return xs.indexOf(item);
    else for (var i = 0; i < xs.length; i++) {
        if (xs[i] === item) return i;
    }
    return -1;
};
var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    if (context) {
        forEach(Object_keys(ctx), function (key) {
            context[key] = ctx[key];
        });
    }

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.isContext = function (context) {
    return context instanceof Context;
};

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};


/***/ }),

/***/ "./src/features/db/DbTest.tsx":
/*!************************************!*\
  !*** ./src/features/db/DbTest.tsx ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _sql_test__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../sql/test */ "./src/sql/test/index.ts");
/* harmony import */ var _sql_connection_connection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../sql/connection/connection */ "./src/sql/connection/connection.ts");
/* harmony import */ var _utils_common_readAsArrayBuffer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/common/readAsArrayBuffer */ "./src/utils/common/readAsArrayBuffer.ts");
/* harmony import */ var _utils_common_instanceOfArrayBuffer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/common/instanceOfArrayBuffer */ "./src/utils/common/instanceOfArrayBuffer.ts");
/* harmony import */ var _sql_entities_Hello__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../sql/entities/Hello */ "./src/sql/entities/Hello.ts");
/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @emotion/core */ "./node_modules/@emotion/core/dist/core.browser.esm.js");


var _this = undefined,
    _jsxFileName = "/home/clfhhc/src/github_pwa/src/features/db/DbTest.tsx";

var __jsx = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement;








var DbComponent = function DbComponent() {
  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(''),
      dbUrl = _useState[0],
      setDbUrl = _useState[1];

  var handleButtonClick = function handleButtonClick() {
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.async(function handleButtonClick$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.awrap(Object(_sql_test__WEBPACK_IMPORTED_MODULE_2__["default"])());

          case 2:
            console.log(1);
            _context.t0 = setDbUrl;
            _context.next = 6;
            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.awrap(Object(_sql_connection_connection__WEBPACK_IMPORTED_MODULE_3__["createDbUrl"])({}));

          case 6:
            _context.t1 = _context.sent;
            (0, _context.t0)(_context.t1);

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, null, Promise);
  };

  var handleFileClick = function handleFileClick(e) {
    var dbFile, dbBuffer, uInt8Array, connection, helloRepository, allRecord;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.async(function handleFileClick$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(e.target.files && e.target.files.length)) {
              _context2.next = 16;
              break;
            }

            dbFile = e.target.files[0];
            _context2.next = 4;
            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.awrap(Object(_utils_common_readAsArrayBuffer__WEBPACK_IMPORTED_MODULE_4__["default"])(dbFile));

          case 4:
            dbBuffer = _context2.sent;

            if (Object(_utils_common_instanceOfArrayBuffer__WEBPACK_IMPORTED_MODULE_5__["default"])(dbBuffer)) {
              _context2.next = 7;
              break;
            }

            return _context2.abrupt("return");

          case 7:
            uInt8Array = new Uint8Array(dbBuffer);
            _context2.next = 10;
            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.awrap(Object(_sql_connection_connection__WEBPACK_IMPORTED_MODULE_3__["loadDbFromFile"])({
              database: uInt8Array
            }));

          case 10:
            connection = _context2.sent;
            helloRepository = connection.getRepository(_sql_entities_Hello__WEBPACK_IMPORTED_MODULE_6__["default"]);
            _context2.next = 14;
            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.awrap(helloRepository.find());

          case 14:
            allRecord = _context2.sent;
            console.log(JSON.stringify(allRecord));

          case 16:
          case "end":
            return _context2.stop();
        }
      }
    }, null, null, null, Promise);
  };

  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__["jsx"])("div", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 33,
      columnNumber: 5
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__["jsx"])("button", {
    type: "button",
    onClick: handleButtonClick,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 34,
      columnNumber: 7
    }
  }, "Create a db"), dbUrl && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__["jsx"])("a", {
    href: dbUrl,
    download: "db.sqlite",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 38,
      columnNumber: 9
    }
  }, "db_link"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 42,
      columnNumber: 7
    }
  }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__["jsx"])("input", {
    type: "file",
    id: "input-db-file",
    onChange: handleFileClick,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 43,
      columnNumber: 7
    }
  }));
};

/* harmony default export */ __webpack_exports__["default"] = (DbComponent);

/***/ }),

/***/ "./src/features/head/ManifestHead.tsx":
/*!********************************************!*\
  !*** ./src/features/head/ManifestHead.tsx ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/head */ "./node_modules/next/dist/next-server/lib/head.js");
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ "./node_modules/path-browserify/index.js");
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/core */ "./node_modules/@emotion/core/dist/core.browser.esm.js");
var _this = undefined,
    _jsxFileName = "/home/clfhhc/src/github_pwa/src/features/head/ManifestHead.tsx";

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;


 // import Link from '../link/Link';

/* eslint-disable prefer-destructuring */


var LINK_PREFIX =  false || '';
var THEME_COLOR = undefined;
var MANIEFST_PATH = undefined;
var ICON_192_PATH = undefined;
var FAV_ICON_PATH = "/icons/favicon.ico";
/* eslint-enable prefer-destructuring */

var ManifestHead = function ManifestHead(_ref) {
  var _ref$title = _ref.title,
      title = _ref$title === void 0 ? '' : _ref$title,
      _ref$description = _ref.description,
      description = _ref$description === void 0 ? title : _ref$description,
      _ref$charset = _ref.charset,
      charset = _ref$charset === void 0 ? 'utf-8' : _ref$charset,
      _ref$linkPrefix = _ref.linkPrefix,
      linkPrefix = _ref$linkPrefix === void 0 ? LINK_PREFIX : _ref$linkPrefix,
      hrefCanonical = _ref.hrefCanonical,
      _ref$hrefManifest = _ref.hrefManifest,
      hrefManifest = _ref$hrefManifest === void 0 ? MANIEFST_PATH : _ref$hrefManifest,
      _ref$themeColor = _ref.themeColor,
      themeColor = _ref$themeColor === void 0 ? THEME_COLOR : _ref$themeColor,
      _ref$favIconPath = _ref.favIconPath,
      favIconPath = _ref$favIconPath === void 0 ? FAV_ICON_PATH : _ref$favIconPath,
      _ref$keywords = _ref.keywords,
      keywords = _ref$keywords === void 0 ? title : _ref$keywords,
      refresh = _ref.refresh,
      _ref$appleIconPath = _ref.appleIconPath,
      appleIconPath = _ref$appleIconPath === void 0 ? ICON_192_PATH : _ref$appleIconPath,
      _ref$appleIconSize = _ref.appleIconSize,
      appleIconSize = _ref$appleIconSize === void 0 ? '192x192' : _ref$appleIconSize,
      isAmp = _ref.isAmp,
      children = _ref.children;
  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__["jsx"])(next_head__WEBPACK_IMPORTED_MODULE_1___default.a, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 47,
      columnNumber: 5
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__["jsx"])("title", {
    key: "title",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 48,
      columnNumber: 7
    }
  }, title), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__["jsx"])("meta", {
    charSet: charset,
    key: "charSet",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 49,
      columnNumber: 7
    }
  }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__["jsx"])("meta", {
    name: "description",
    key: "description",
    content: description,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 50,
      columnNumber: 7
    }
  }), themeColor && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__["jsx"])("meta", {
    name: "theme-color",
    key: "theme-color",
    content: themeColor,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 52,
      columnNumber: 9
    }
  }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__["jsx"])("meta", {
    name: "keywords",
    key: "keywords",
    content: keywords,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 54,
      columnNumber: 7
    }
  }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__["jsx"])("meta", {
    httpEquiv: "X-UA-Compatible",
    key: "ua-compatible",
    content: "ie=edge",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 55,
      columnNumber: 7
    }
  }), !isAmp && hrefCanonical && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__["jsx"])("link", {
    rel: "canonical",
    href: Object(path__WEBPACK_IMPORTED_MODULE_2__["join"])(linkPrefix, hrefCanonical),
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 57,
      columnNumber: 9
    }
  }), hrefManifest && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__["jsx"])("link", {
    rel: "manifest",
    href: Object(path__WEBPACK_IMPORTED_MODULE_2__["join"])(linkPrefix, hrefManifest),
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 60,
      columnNumber: 9
    }
  }), refresh && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__["jsx"])("meta", {
    httpEquiv: "refresh",
    key: "refresh",
    content: "".concat(refresh),
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 63,
      columnNumber: 9
    }
  }), favIconPath && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__["jsx"])("link", {
    rel: "shortcut icon",
    href: Object(path__WEBPACK_IMPORTED_MODULE_2__["join"])(linkPrefix, favIconPath),
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 66,
      columnNumber: 9
    }
  }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__["jsx"])("meta", {
    name: "apple-mobile-web-app-capable",
    key: "apple-mobile-web-app-capable",
    content: "yes",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 70,
      columnNumber: 7
    }
  }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__["jsx"])("meta", {
    name: "apple-mobile-web-app-status-bar-style",
    key: "apple-mobile-web-app-status-bar-style",
    content: "blue",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 75,
      columnNumber: 7
    }
  }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__["jsx"])("meta", {
    name: "apple-mobile-web-app-title",
    key: "apple-mobile-web-app-title",
    content: "With Manifest",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 80,
      columnNumber: 7
    }
  }), appleIconPath && appleIconSize && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__["jsx"])("link", {
    rel: "apple-touch-icon",
    sizes: appleIconSize,
    href: Object(path__WEBPACK_IMPORTED_MODULE_2__["join"])(linkPrefix, appleIconPath),
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 86,
      columnNumber: 9
    }
  }), appleIconPath && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__["jsx"])("meta", {
    name: "msapplication-TitleImage",
    key: "msapplication-TitleImage",
    content: Object(path__WEBPACK_IMPORTED_MODULE_2__["join"])(linkPrefix, appleIconPath),
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 95,
      columnNumber: 9
    }
  }), themeColor && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__["jsx"])("meta", {
    name: "msapplication-TitleColor",
    key: "msapplication-TitleColor",
    content: themeColor,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 102,
      columnNumber: 9
    }
  }), children);
};

/* harmony default export */ __webpack_exports__["default"] = (ManifestHead);

/***/ }),

/***/ "./src/features/link/Link.tsx":
/*!************************************!*\
  !*** ./src/features/link/Link.tsx ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutProperties */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! path */ "./node_modules/path-browserify/index.js");
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emotion/core */ "./node_modules/@emotion/core/dist/core.browser.esm.js");



var _this = undefined,
    _jsxFileName = "/home/clfhhc/src/github_pwa/src/features/link/Link.tsx";

var __jsx = react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement;




var LINK_PREFIX =  false || '';

var PrefixedLink = function PrefixedLink(_ref) {
  var href = _ref.href,
      _ref$as = _ref.as,
      as = _ref$as === void 0 ? href : _ref$as,
      _ref$linkPrefix = _ref.linkPrefix,
      linkPrefix = _ref$linkPrefix === void 0 ? LINK_PREFIX : _ref$linkPrefix,
      props = Object(_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__["default"])(_ref, ["href", "as", "linkPrefix"]);

  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_3___default.a, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({
    href: href,
    as: Object(path__WEBPACK_IMPORTED_MODULE_4__["join"])(linkPrefix, as.toString())
  }, props, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 16,
      columnNumber: 7
    }
  }));
};

/* harmony default export */ __webpack_exports__["default"] = (PrefixedLink);

/***/ }),

/***/ "./src/pages/db.tsx":
/*!**************************!*\
  !*** ./src/pages/db.tsx ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _features_head_ManifestHead__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../features/head/ManifestHead */ "./src/features/head/ManifestHead.tsx");
/* harmony import */ var _features_link_Link__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../features/link/Link */ "./src/features/link/Link.tsx");
/* harmony import */ var _features_db_DbTest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../features/db/DbTest */ "./src/features/db/DbTest.tsx");
/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/core */ "./node_modules/@emotion/core/dist/core.browser.esm.js");
var _this = undefined,
    _jsxFileName = "/home/clfhhc/src/github_pwa/src/pages/db.tsx";

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;






var IndexPage = function IndexPage() {
  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 8,
      columnNumber: 3
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])(_features_head_ManifestHead__WEBPACK_IMPORTED_MODULE_1__["default"], {
    title: "github_pwa static-path",
    hrefCanonical: "/db",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 9,
      columnNumber: 5
    }
  }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])(_features_db_DbTest__WEBPACK_IMPORTED_MODULE_3__["default"], {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 10,
      columnNumber: 5
    }
  }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])(_features_link_Link__WEBPACK_IMPORTED_MODULE_2__["default"], {
    href: "/index/1",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 11,
      columnNumber: 5
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("a", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 12,
      columnNumber: 7
    }
  }, "index/1")));
};

/* harmony default export */ __webpack_exports__["default"] = (IndexPage);

/***/ }),

/***/ "./src/sql/connection/connection.ts":
/*!******************************************!*\
  !*** ./src/sql/connection/connection.ts ***!
  \******************************************/
/*! exports provided: defaultEntities, connectDb, closeDb, removeDb, loadDbFromFile, createDbUrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultEntities", function() { return defaultEntities; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "connectDb", function() { return connectDb; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "closeDb", function() { return closeDb; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeDb", function() { return removeDb; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadDbFromFile", function() { return loadDbFromFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createDbUrl", function() { return createDbUrl; });
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var typeorm_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! typeorm/browser */ "./node_modules/typeorm/browser/index.js");
/* harmony import */ var _entities_Hello__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../entities/Hello */ "./src/sql/entities/Hello.ts");



var isProd = "development" === 'production';
var defaultConnectionName = 'sqlJsDb'; // either copy the file sql-wasm.wasm from sql.js/dist
// or define locateFile function to retrieve it from a cdn

var locateFile = function locateFile(filename) {
  var url = "https://cdnjs.cloudflare.com/ajax/libs/sql.js/".concat("1.2.2", "/dist/").concat(filename);
  return url;
};

var defaultEntities = [_entities_Hello__WEBPACK_IMPORTED_MODULE_2__["Hello"]];
var connectDb = function connectDb(_ref) {
  var _ref$name, name, _ref$entities, entities, connection;

  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.async(function connectDb$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _ref$name = _ref.name, name = _ref$name === void 0 ? defaultConnectionName : _ref$name, _ref$entities = _ref.entities, entities = _ref$entities === void 0 ? defaultEntities : _ref$entities;

          try {
            connection = Object(typeorm_browser__WEBPACK_IMPORTED_MODULE_1__["getConnection"])(name);
          } catch (error) {
            connection = Object(typeorm_browser__WEBPACK_IMPORTED_MODULE_1__["getConnectionManager"])().create({
              type: 'sqljs',
              sqlJsConfig: {
                locateFile: locateFile
              },
              name: name,
              location: name,
              autoSave: true,
              entities: entities,
              useLocalForage: true,
              logging: !isProd && ['query', 'schema']
            });
          }

          if (connection.isConnected) {
            _context.next = 5;
            break;
          }

          _context.next = 5;
          return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.awrap(connection.connect());

        case 5:
          return _context.abrupt("return", connection);

        case 6:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, null, Promise);
};
var closeDb = function closeDb(_ref2) {
  var _ref2$name = _ref2.name,
      name = _ref2$name === void 0 ? defaultConnectionName : _ref2$name;
  var connection = Object(typeorm_browser__WEBPACK_IMPORTED_MODULE_1__["getConnection"])(name);
  return connection.close();
};
var removeDb = function removeDb(_ref3) {
  var _window$localforage;

  var _ref3$name, name;

  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.async(function removeDb$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _ref3$name = _ref3.name, name = _ref3$name === void 0 ? defaultConnectionName : _ref3$name;
          _context2.next = 3;
          return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.awrap(closeDb({
            name: name
          }));

        case 3:
          return _context2.abrupt("return", (_window$localforage = window.localforage) === null || _window$localforage === void 0 ? void 0 : _window$localforage.removeItem(name));

        case 4:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, null, Promise);
};
var loadDbFromFile = function loadDbFromFile(_ref4) {
  var _ref4$name, name, _ref4$entities, entities, database, connection;

  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.async(function loadDbFromFile$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _ref4$name = _ref4.name, name = _ref4$name === void 0 ? defaultConnectionName : _ref4$name, _ref4$entities = _ref4.entities, entities = _ref4$entities === void 0 ? defaultEntities : _ref4$entities, database = _ref4.database;
          _context3.next = 3;
          return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.awrap(connectDb({
            name: name,
            entities: entities
          }));

        case 3:
          connection = _context3.sent;
          _context3.next = 6;
          return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.awrap(connection.sqljsManager.loadDatabase(database));

        case 6:
          return _context3.abrupt("return", connection);

        case 7:
        case "end":
          return _context3.stop();
      }
    }
  }, null, null, null, Promise);
};
var createDbUrl = function createDbUrl(_ref5) {
  var _ref5$name, name, connection, arrayBuffer, blob, dbUrl;

  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.async(function createDbUrl$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          _ref5$name = _ref5.name, name = _ref5$name === void 0 ? defaultConnectionName : _ref5$name;
          connection = Object(typeorm_browser__WEBPACK_IMPORTED_MODULE_1__["getConnection"])(name);
          arrayBuffer = connection.sqljsManager.exportDatabase();
          blob = new Blob([arrayBuffer], {
            type: 'application/octet-stream'
          });
          dbUrl = URL.createObjectURL(blob);
          return _context4.abrupt("return", dbUrl);

        case 6:
        case "end":
          return _context4.stop();
      }
    }
  }, null, null, null, Promise);
};

/***/ }),

/***/ "./src/sql/entities/Hello.ts":
/*!***********************************!*\
  !*** ./src/sql/entities/Hello.ts ***!
  \***********************************/
/*! exports provided: Hello, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Hello", function() { return Hello; });
/* harmony import */ var _babel_runtime_helpers_esm_initializerDefineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/initializerDefineProperty */ "./node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js");
/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_esm_applyDecoratedDescriptor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/applyDecoratedDescriptor */ "./node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js");
/* harmony import */ var _babel_runtime_helpers_esm_initializerWarningHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/initializerWarningHelper */ "./node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js");
/* harmony import */ var typeorm__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! typeorm */ "./node_modules/typeorm/browser/index.js");





var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;


var Hello = (_dec = Object(typeorm__WEBPACK_IMPORTED_MODULE_4__["Entity"])(), _dec2 = Object(typeorm__WEBPACK_IMPORTED_MODULE_4__["PrimaryGeneratedColumn"])(), _dec3 = Reflect.metadata("design:type", Number), _dec4 = Object(typeorm__WEBPACK_IMPORTED_MODULE_4__["Column"])('int'), _dec5 = Reflect.metadata("design:type", Number), _dec6 = Object(typeorm__WEBPACK_IMPORTED_MODULE_4__["Column"])(), _dec7 = Reflect.metadata("design:type", String), _dec(_class = (_class2 = (_temp = function Hello() {
  Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__["default"])(this, Hello);

  Object(_babel_runtime_helpers_esm_initializerDefineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_id", _descriptor, this);

  Object(_babel_runtime_helpers_esm_initializerDefineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "a", _descriptor2, this);

  Object(_babel_runtime_helpers_esm_initializerDefineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "b", _descriptor3, this);
}, _temp), (_descriptor = Object(_babel_runtime_helpers_esm_applyDecoratedDescriptor__WEBPACK_IMPORTED_MODULE_2__["default"])(_class2.prototype, "_id", [_dec2, _dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = Object(_babel_runtime_helpers_esm_applyDecoratedDescriptor__WEBPACK_IMPORTED_MODULE_2__["default"])(_class2.prototype, "a", [_dec4, _dec5], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor3 = Object(_babel_runtime_helpers_esm_applyDecoratedDescriptor__WEBPACK_IMPORTED_MODULE_2__["default"])(_class2.prototype, "b", [_dec6, _dec7], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);
/* harmony default export */ __webpack_exports__["default"] = (Hello);

/***/ }),

/***/ "./src/sql/test/index.ts":
/*!*******************************!*\
  !*** ./src/sql/test/index.ts ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _connection_connection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../connection/connection */ "./src/sql/connection/connection.ts");
/* harmony import */ var _entities_Hello__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../entities/Hello */ "./src/sql/entities/Hello.ts");




var main = function main() {
  var connection, hello, helloRepository;
  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.async(function main$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.awrap(Object(_connection_connection__WEBPACK_IMPORTED_MODULE_1__["connectDb"])({}));

        case 2:
          connection = _context.sent;
          _context.next = 5;
          return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.awrap(connection.synchronize(false));

        case 5:
          hello = new _entities_Hello__WEBPACK_IMPORTED_MODULE_2__["Hello"]();
          hello.a = 10;
          hello.b = 'Hello World';
          helloRepository = connection.getRepository(_entities_Hello__WEBPACK_IMPORTED_MODULE_2__["Hello"]);
          _context.next = 11;
          return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.awrap(helloRepository.save(hello));

        case 11:
          console.log(connection.name);
          return _context.abrupt("return", 'yes');

        case 13:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, null, Promise);
};

/* harmony default export */ __webpack_exports__["default"] = (main);

/***/ }),

/***/ "./src/utils/common/instanceOfArrayBuffer.ts":
/*!***************************************************!*\
  !*** ./src/utils/common/instanceOfArrayBuffer.ts ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var hasArrayBuffer = typeof ArrayBuffer === 'function';

var instanceOfArrayBuffer = function instanceOfArrayBuffer(value) {
  return hasArrayBuffer && (value instanceof ArrayBuffer || Object.prototype.toString.call(value) === '[object ArrayBuffer]');
};

/* harmony default export */ __webpack_exports__["default"] = (instanceOfArrayBuffer);

/***/ }),

/***/ "./src/utils/common/readAsArrayBuffer.ts":
/*!***********************************************!*\
  !*** ./src/utils/common/readAsArrayBuffer.ts ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var readAsArrayBuffer = function readAsArrayBuffer(file) {
  return new Promise(function (resolve) {
    var fileReader = new FileReader();

    fileReader.onload = function () {
      resolve(fileReader.result);
    };

    fileReader.readAsArrayBuffer(file);
  });
};

/* harmony default export */ __webpack_exports__["default"] = (readAsArrayBuffer);

/***/ }),

/***/ 1:
/*!*****************************************************************************************************************************!*\
  !*** multi next-client-pages-loader?page=%2Fdb&absolutePagePath=%2Fhome%2Fclfhhc%2Fsrc%2Fgithub_pwa%2Fsrc%2Fpages%2Fdb.tsx ***!
  \*****************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! next-client-pages-loader?page=%2Fdb&absolutePagePath=%2Fhome%2Fclfhhc%2Fsrc%2Fgithub_pwa%2Fsrc%2Fpages%2Fdb.tsx! */"./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2Fdb&absolutePagePath=%2Fhome%2Fclfhhc%2Fsrc%2Fgithub_pwa%2Fsrc%2Fpages%2Fdb.tsx!./");


/***/ }),

/***/ 2:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 3:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 4:
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 5:
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ "dll-reference dll_2adc2403d89adc16ead0":
/*!*******************************************!*\
  !*** external "dll_2adc2403d89adc16ead0" ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = dll_2adc2403d89adc16ead0;

/***/ })

},[[1,"static/runtime/webpack.js"]]]);
//# sourceMappingURL=db.js.map